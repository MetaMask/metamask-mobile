name: Update Versions

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on'
        required: true
        default: ''
      version_type:
        description: 'Version type to increment (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      rc_number:
        description: 'Release candidate number (optional)'
        required: true
        default: '1'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-versions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine branch
        id: determine-branch
        run: |
          if [ -z "${GITHUB_EVENT_INPUTS_BRANCH}" ]; then
            BRANCH=$(git ls-remote --heads origin | grep 'refs/heads/release/' | awk '{print $2}' | sort -r | head -n 1 | sed 's/refs\/heads\///')
            echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          else
            echo "branch=${GITHUB_EVENT_INPUTS_BRANCH}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout specified branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.determine-branch.outputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Get current version from GitHub variable
        id: get-version
        run: |
          CURRENT_VERSION=$(gh api /repos/${github.repository}/actions/variables/VERSION --jq .value)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Increment version
        id: increment-version
        run: |
          IFS='.' read -ra VERSION_PARTS <<< "${steps.get-version.outputs.current_version}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          case "${GITHUB_EVENT_INPUTS_VERSION_TYPE}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update GitHub version variable
        run: |
          gh api --method PATCH /repos/${github.repository}/actions/variables/VERSION \
            -f name='VERSION' \
            -f value='${{ steps.increment-version.outputs.new_version }}'

      - name: Run shell script to update versions in files
        run: |
          NEW_VERSION=${{ steps.increment-version.outputs.new_version }} ./scripts/update-versions.sh

      - name: Create new branch
        id: create-new-branch
        run: |
          NEW_BRANCH="chore/bump-release-version-${steps.increment-version.outputs.new_version}"
          git checkout -b $NEW_BRANCH
          echo "new_branch=$NEW_BRANCH" >> $GITHUB_OUTPUT

      - name: Commit changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: bump release version to ${steps.increment-version.outputs.new_version}"

      - name: Push changes
        run: |
          git push origin ${steps.create-new-branch.outputs.new_branch}

      - name: Create pull request
        run: |
          PR_TITLE="chore: bump release version ${steps.increment-version.outputs.new_version}"
          if [ -n "${GITHUB_EVENT_INPUTS_RC_NUMBER}" ]; then
            PR_TITLE="$PR_TITLE - RC${GITHUB_EVENT_INPUTS_RC_NUMBER}"
          fi
          gh pr create --base ${steps.determine-branch.outputs.branch} --head ${steps.create-new-branch.outputs.new_branch} --title "$PR_TITLE" --body "This PR updates the release version to ${steps.increment-version.outputs.new_version}."
