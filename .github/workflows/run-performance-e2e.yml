name: Build Apps and Run Performance E2E Tests
on:
  schedule:
    - cron: '0 3 * * 1-6'
  workflow_dispatch:
    inputs:
      description:
        description: 'Optional description for this test run'
        required: false
        type: string
permissions:
  contents: read
  id-token: write
env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  MM_TEST_ACCOUNT_SRP: ${{ secrets.MM_TEST_ACCOUNT_SRP }}
  TEST_SRP_1: ${{ secrets.TEST_SRP_1 }}
  TEST_SRP_2: ${{ secrets.TEST_SRP_2 }}
  TEST_SRP_3: ${{ secrets.TEST_SRP_3 }}
  DISABLE_VIDEO_DOWNLOAD: true

jobs:
  read-device-matrix:
    name: Read Device Matrix
    runs-on: ubuntu-latest
    outputs:
      android_matrix: ${{ steps.matrix.outputs.android }}
      ios_matrix: ${{ steps.matrix.outputs.ios }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Read device matrix
        id: matrix
        run: |
          # This step reads the device matrix from appwright/device-matrix.json
          echo "Reading device matrix from appwright/device-matrix.json"
          
          # Extract Android devices
          ANDROID_MATRIX=$(jq -r ".android_devices | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
          # Extract iOS devices
          IOS_MATRIX=$(jq -r ".ios_devices | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
          
          {
            echo "android=$ANDROID_MATRIX"
            echo "ios=$IOS_MATRIX"
          } >> "$GITHUB_OUTPUT"
          
          echo "Android matrix: $ANDROID_MATRIX"
          echo "iOS matrix: $IOS_MATRIX"
          
          # Validate that we have devices
          ANDROID_COUNT=$(echo "$ANDROID_MATRIX" | jq 'length')
          IOS_COUNT=$(echo "$IOS_MATRIX" | jq 'length')
          
          echo "Found $ANDROID_COUNT Android devices and $IOS_COUNT iOS devices"
          
          if [ "$ANDROID_COUNT" -eq 0 ] && [ "$IOS_COUNT" -eq 0 ]; then
            echo "Error: No devices found in device-matrix.json"
            exit 1
          fi

  # Job to trigger QA builds and extract BrowserStack URLs
  trigger-qa-builds-and-upload:
    name: Trigger QA Builds and Extract BrowserStack URLs
    runs-on: ubuntu-latest
    needs: read-device-matrix
    env:
      BITRISE_APP_ID: ${{ secrets.BITRISE_APP_ID }}
      BITRISE_BUILD_TRIGGER_TOKEN: ${{ secrets.BITRISE_BUILD_TRIGGER_TOKEN }}
      BITRISE_API_TOKEN: ${{ secrets.BITRISE_API_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn setup
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Trigger Bitrise QA Builds
        env:
          BITRISE_APP_ID: ${{ env.BITRISE_APP_ID }}
          BITRISE_BUILD_TRIGGER_TOKEN: ${{ env.BITRISE_BUILD_TRIGGER_TOKEN }}
          BITRISE_API_TOKEN: ${{ env.BITRISE_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Triggering Bitrise QA builds..."
          echo "BITRISE_APP_ID: $BITRISE_APP_ID"
          echo "Current branch: ${{ github.ref_name }}"
          
          # Trigger QA builds pipeline (handles both Android and iOS)
          BUILD_RESPONSE=$(curl -s -X POST \
            "https://app.bitrise.io/app/$BITRISE_APP_ID/build/start.json" \
            -H "Content-Type: application/json" \
            -d '{
              "build_params": {
                "branch": "${{ github.ref_name }}",
                "pipeline_id": "create_qa_builds_pipeline",
                "commit_message": "Triggered by Performance E2E workflow"
              },
              "hook_info": {
                "type": "bitrise",
                "build_trigger_token": "'"$BITRISE_BUILD_TRIGGER_TOKEN"'"
              },
              "triggered_by": "GitHub Actions Performance E2E"
            }')
          
          echo "Build response: $BUILD_RESPONSE"
          BUILD_SLUG=$(echo "$BUILD_RESPONSE" | jq -r '.build_slug')
          echo "Build slug: $BUILD_SLUG"
          
          if [[ -z "$BUILD_SLUG" || "$BUILD_SLUG" == "null" ]]; then
            echo "Error: Failed to get build slug"
            echo "Full response: $BUILD_RESPONSE"
            echo "Trying alternative response structure..."
            # Try different possible response structures
            BUILD_SLUG=$(echo "$BUILD_RESPONSE" | jq -r '.data.build_slug // .build_slug // .slug')
            echo "Alternative build slug: $BUILD_SLUG"
            if [[ -z "$BUILD_SLUG" || "$BUILD_SLUG" == "null" ]]; then
              echo "Still no build slug found. Response keys:"
              echo "$BUILD_RESPONSE" | jq -r 'keys[]'
              exit 1
            fi
          fi
          
          # Store build slug for artifact download
          echo "BUILD_SLUG=$BUILD_SLUG" >> "$GITHUB_ENV"
          
          echo "Waiting for build to complete..."
          TIMEOUT=1800  # 30 minutes
          ELAPSED=0
          
          while [ "$ELAPSED" -lt "$TIMEOUT" ]; do
            # Check pipeline status using the correct v0.1 API endpoint
            echo "Checking pipeline status for slug: $BUILD_SLUG"
            PIPELINE_RESPONSE=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
              "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/pipelines/$BUILD_SLUG")
            echo "Pipeline response: $PIPELINE_RESPONSE"
            
            PIPELINE_STATUS=$(echo "$PIPELINE_RESPONSE" | jq -r '.status')
            echo "Pipeline status: $PIPELINE_STATUS"
            
            if [ "$PIPELINE_STATUS" = "succeeded" ]; then
              echo "Pipeline completed successfully!"
              break
            elif [ "$PIPELINE_STATUS" = "failed" ]; then
              echo "Pipeline failed!"
              exit 1
            elif [ "$PIPELINE_STATUS" = "in_progress" ] || [ "$PIPELINE_STATUS" = "running" ]; then
              echo "Pipeline is in progress..."
            elif [ "$PIPELINE_STATUS" = "null" ]; then
              echo "Pipeline status is null, checking if pipeline exists..."

            fi
            
            sleep 30
            ELAPSED=$((ELAPSED + 30))
          done
          
          if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
            echo "Timeout waiting for pipeline to complete"
            echo "Final pipeline status: $PIPELINE_STATUS"
            echo "Pipeline slug: $BUILD_SLUG"
            exit 1
          fi
          
          # Extract build IDs from the completed pipeline
          echo "Extracting build IDs from completed pipeline..."
          ANDROID_BUILD_ID=$(echo "$PIPELINE_RESPONSE" | jq -r '.stages[0].workflows[] | select(.name == "build_android_qa") | .external_id')
          IOS_BUILD_ID=$(echo "$PIPELINE_RESPONSE" | jq -r '.stages[0].workflows[] | select(.name == "build_ios_qa") | .external_id')
          
          
          if [[ -z "$ANDROID_BUILD_ID" || "$ANDROID_BUILD_ID" == "null" ]]; then
            echo "Error: Failed to get Android build ID"
            exit 1
          fi
          
          if [[ -z "$IOS_BUILD_ID" || "$IOS_BUILD_ID" == "null" ]]; then
            echo "Error: Failed to get iOS build ID"
            exit 1
          fi
          
          # Store build IDs for artifact download
          {
            echo "ANDROID_BUILD_ID=$ANDROID_BUILD_ID"
            echo "IOS_BUILD_ID=$IOS_BUILD_ID"
          } >> "$GITHUB_ENV"
      
      - name: Download Build Artifacts
        id: download-artifacts
        env:
          BITRISE_APP_ID: ${{ env.BITRISE_APP_ID }}
          BITRISE_API_TOKEN: ${{ env.BITRISE_API_TOKEN }}
        run: |
          echo "Downloading browserstack_uploaded_apps.json files..."
          echo "Android Build ID: $ANDROID_BUILD_ID"
          echo "iOS Build ID: $IOS_BUILD_ID"
          
          # Download Android browserstack_uploaded_apps.json
          echo "Fetching Android artifacts..."
          ANDROID_ARTIFACTS=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
            "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$ANDROID_BUILD_ID/artifacts")
          
          if ! curl -s -H "Authorization: $BITRISE_API_TOKEN" \
            "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$ANDROID_BUILD_ID/artifacts" > /dev/null; then
            echo "Error: Failed to fetch Android artifacts"
            exit 1
          fi
                    
          # Find the browserstack_uploaded_apps.json file
          ANDROID_BS_JSON_ARTIFACT=$(echo "$ANDROID_ARTIFACTS" | jq -r '.data[] | 
            select(.title == "browserstack_uploaded_apps.json")')
          
          echo "Android browserstack JSON artifact: $ANDROID_BS_JSON_ARTIFACT"
          
          if [[ -n "$ANDROID_BS_JSON_ARTIFACT" ]]; then
            ANDROID_BS_ARTIFACT_SLUG=$(echo "$ANDROID_BS_JSON_ARTIFACT" | jq -r '.slug')

            # Download the JSON file
            ANDROID_BS_DOWNLOAD_URL=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
              "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$ANDROID_BUILD_ID/artifacts/$ANDROID_BS_ARTIFACT_SLUG" | \
              jq -r '.data.expiring_download_url')
            
            if [[ -n "$ANDROID_BS_DOWNLOAD_URL" && "$ANDROID_BS_DOWNLOAD_URL" != "null" ]]; then
              echo "Downloading Android browserstack JSON..."
              wget -O "android_browserstack_apps.json" "$ANDROID_BS_DOWNLOAD_URL"
              
              if ! wget -O "android_browserstack_apps.json" "$ANDROID_BS_DOWNLOAD_URL"; then
                echo "Error: Failed to download Android browserstack JSON"
                exit 1
              fi
              
              # Extract the first Android APK app_url
              ANDROID_BS_URL=$(jq -r '.[] | select(.app_name | endswith(".apk")) | .app_url' "android_browserstack_apps.json" | head -1)
              ANDROID_VERSION=$(jq -r '.[] | select(.app_name | endswith(".apk")) | .app_version' "android_browserstack_apps.json" | head -1)
              
              echo "Android BrowserStack URL: $ANDROID_BS_URL"
              echo "Android version: $ANDROID_VERSION"
              {
                echo "android-version=$ANDROID_VERSION"
                echo "browserstack-android-url=$ANDROID_BS_URL"
              } >> "$GITHUB_OUTPUT"
            else
              echo "Error: No Android browserstack JSON download URL found"
              exit 1
            fi
          else
            echo "Error: No Android browserstack_uploaded_apps.json artifact found"
            exit 1
          fi
          
          # Download iOS browserstack_uploaded_apps.json
          echo "Fetching iOS artifacts..."
          IOS_ARTIFACTS=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
            "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$IOS_BUILD_ID/artifacts")
          
          if ! curl -s -H "Authorization: $BITRISE_API_TOKEN" \
            "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$IOS_BUILD_ID/artifacts" > /dev/null; then
            echo "Error: Failed to fetch iOS artifacts"
            exit 1
          fi
                    
          # Find the browserstack_uploaded_apps.json file
          IOS_BS_JSON_ARTIFACT=$(echo "$IOS_ARTIFACTS" | jq -r '.data[] | 
            select(.title == "browserstack_uploaded_apps.json")')
          
          echo "iOS browserstack JSON artifact: $IOS_BS_JSON_ARTIFACT"
          
          if [[ -n "$IOS_BS_JSON_ARTIFACT" ]]; then
            IOS_BS_ARTIFACT_SLUG=$(echo "$IOS_BS_JSON_ARTIFACT" | jq -r '.slug')
            echo "iOS browserstack artifact slug: $IOS_BS_ARTIFACT_SLUG"
            
            # Download the JSON file
            IOS_BS_DOWNLOAD_URL=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
              "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$IOS_BUILD_ID/artifacts/$IOS_BS_ARTIFACT_SLUG" | \
              jq -r '.data.expiring_download_url')
            
            if [[ -n "$IOS_BS_DOWNLOAD_URL" && "$IOS_BS_DOWNLOAD_URL" != "null" ]]; then
              echo "Downloading iOS browserstack JSON..."
              wget -O "ios_browserstack_apps.json" "$IOS_BS_DOWNLOAD_URL"
              
              if ! wget -O "ios_browserstack_apps.json" "$IOS_BS_DOWNLOAD_URL"; then
                echo "Error: Failed to download iOS browserstack JSON"
                exit 1
              fi
              
              # Extract the first iOS IPA app_url
              IOS_BS_URL=$(jq -r '.[] | select(.app_name | endswith(".ipa")) | .app_url' "ios_browserstack_apps.json" | head -1)
              IOS_VERSION=$(jq -r '.[] | select(.app_name | endswith(".ipa")) | .app_version' "ios_browserstack_apps.json" | head -1)
              
              echo "iOS BrowserStack URL: $IOS_BS_URL"
              echo "iOS version: $IOS_VERSION"
              {
                echo "ios-version=$IOS_VERSION"
                echo "browserstack-ios-url=$IOS_BS_URL"
              } >> "$GITHUB_OUTPUT"
            else
              echo "Error: No iOS browserstack JSON download URL found"
              exit 1
            fi
          else
            echo "Error: No iOS browserstack_uploaded_apps.json artifact found"
            exit 1
          fi
          
          echo "BrowserStack URLs extracted successfully!"
          echo "Android: $ANDROID_BS_URL"
          echo "iOS: $IOS_BS_URL"
    
    outputs:
      android-version: ${{ steps.download-artifacts.outputs.android-version }}
      ios-version: ${{ steps.download-artifacts.outputs.ios-version }}
      browserstack-android-url: ${{ steps.download-artifacts.outputs.browserstack-android-url }}
      browserstack-ios-url: ${{ steps.download-artifacts.outputs.browserstack-ios-url }}

  android-tests:
    name: Android Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [trigger-qa-builds-and-upload, read-device-matrix]
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.read-device-matrix.outputs.android_matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Restore node_modules cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn setup
      
      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ github.repository }}-${{ github.ref_name }}-android-${{ matrix.device.name }}-${{ matrix.device.os_version }}-${{ github.run_number }}
          project-name: ${{ github.repository }}
      
      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Set Android Test Environment
        run: |
          echo "Setting test environment for device: ${{ matrix.device.name }}"
          {
            echo "BROWSERSTACK_DEVICE=${{ matrix.device.name }}"
            echo "BROWSERSTACK_OS_VERSION=${{ matrix.device.os_version }}"
            echo "BROWSERSTACK_ANDROID_APP_URL=${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-android-url }}"
            echo "TEST_PLATFORM=android"
            echo "TEST_SUITE=${{ github.event.inputs.test_suite }}"
            echo "QA_APP_VERSION=${{ needs.trigger-qa-builds-and-upload.outputs.android-version }}"
          } >> "$GITHUB_ENV"
      
      - name: Run Android Tests on ${{ matrix.device.name }}
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          echo "=== Testing ${{ matrix.device.name }} (${{ matrix.device.category }} Class) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "QA App Version: ${{ needs.trigger-qa-builds-and-upload.outputs.android-version }}"
          echo "BrowserStack Android App URL: ${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-android-url }}"
          
          yarn run-appwright:android-bs
      
      - name: Upload Android Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 7

  ios-tests:
    name: iOS Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [trigger-qa-builds-and-upload, read-device-matrix]
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.read-device-matrix.outputs.ios_matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Restore node_modules cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn setup
      
      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ github.repository }}-${{ github.ref_name }}-ios-${{ matrix.device.name }}-${{ matrix.device.os_version }}-${{ github.run_number }}
          project-name: ${{ github.repository }}
      
      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Set iOS Test Environment
        run: |
          echo "Setting test environment for device: ${{ matrix.device.name }}"
          {
            echo "BROWSERSTACK_DEVICE=${{ matrix.device.name }}"
            echo "BROWSERSTACK_OS_VERSION=${{ matrix.device.os_version }}"
            echo "BROWSERSTACK_IOS_APP_URL=${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-ios-url }}"
            echo "TEST_SUITE=${{ github.event.inputs.test_suite }}"
            echo "QA_APP_VERSION=${{ needs.trigger-qa-builds-and-upload.outputs.ios-version }}"
          } >> "$GITHUB_ENV"
      
      - name: Run iOS Tests on ${{ matrix.device.name }}
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          echo "=== Testing ${{ matrix.device.name }} (${{ matrix.device.category }} Class) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "QA App Version: ${{ needs.trigger-qa-builds-and-upload.outputs.ios-version }}"
          echo "BrowserStack iOS App URL: ${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-ios-url }}"
          if [ "${{ matrix.device.os_version }}" == "13" ] || [ "${{ matrix.device.os_version }}" == "11" ]; then
            echo "Warning: iOS ${{ matrix.device.os_version }} may not be supported by MetaMask app"
          fi
          
          yarn run-appwright:ios-bs
      
      - name: Upload iOS Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 7

  # Results Gathering Job
  gather-results:
    name: Gather Test Results
    runs-on: ubuntu-latest
    needs: [trigger-qa-builds-and-upload, android-tests, ios-tests]
    if: always()
    
    steps:
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: appwright/test-reports/
      
      - name: Upload Combined Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: combined-reports
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 14
    
      - name: Check Test Results
        id: test-results
        run: |
          if [ "${{ needs.android-tests.result }}" == "failure" ] || [ "${{ needs.ios-tests.result }}" == "failure" ]; then
            echo "Some tests failed. Check the individual job results above."
            echo "Note: iOS 13 and iOS 11 failures are expected due to MetaMask app compatibility."
            echo "overall_status=failure" >> "$GITHUB_OUTPUT"
            exit 1
          else
            echo "All test jobs completed successfully!"
            echo "overall_status=success" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Display QA Build Info
        run: |
          echo "=== QA Build Information ==="
          echo "Android Version: ${{ needs.trigger-qa-builds-and-upload.outputs.android-version }}"
          echo "iOS Version: ${{ needs.trigger-qa-builds-and-upload.outputs.ios-version }}"
          echo ""
          echo "=== BrowserStack App URLs ==="
          echo "Android App URL: ${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-android-url }}"
          echo "iOS App URL: ${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-ios-url }}"
    
    outputs:
      overall_status: ${{ steps.test-results.outputs.overall_status }}

  # All Status Check Job
  all-status:
    name: Check All Job Statuses
    runs-on: ubuntu-latest
    needs: [read-device-matrix, trigger-qa-builds-and-upload, android-tests, ios-tests, gather-results]
    if: always()
    outputs:
      overall_status: ${{ steps.status-check.outputs.overall_status }}
      android_status: ${{ steps.status-check.outputs.android_status }}
      ios_status: ${{ steps.status-check.outputs.ios_status }}
      trigger_status: ${{ steps.status-check.outputs.trigger_status }}
    
    steps:
      - name: Check All Job Statuses
        id: status-check
        run: |
          echo "Checking status of all jobs..."
          
          TRIGGER_RESULT="${{ needs.trigger-qa-builds-and-upload.result }}"
          ANDROID_RESULT="${{ needs.android-tests.result }}"
          IOS_RESULT="${{ needs.ios-tests.result }}"
          
          echo "Job Results:"
          echo "- trigger-qa-builds-and-upload: $TRIGGER_RESULT"
          echo "- android-tests: $ANDROID_RESULT"
          echo "- ios-tests: $IOS_RESULT"
          
          # Determine overall status
          if [ "$TRIGGER_RESULT" = "failure" ]; then
            OVERALL_STATUS="❌ FAILED"
            echo "Overall Status: FAILED (QA builds failed)"
          elif [ "$ANDROID_RESULT" = "failure" ] || [ "$IOS_RESULT" = "failure" ]; then
            OVERALL_STATUS="❌ FAILED"
            echo "Overall Status: FAILED (tests failed)"
          else
            OVERALL_STATUS="✅ PASSED"
            echo "Overall Status: PASSED (all tests passed)"
          fi
          
          # Set outputs
          echo "overall_status=$OVERALL_STATUS" >> "$GITHUB_OUTPUT"
          echo "android_status=$ANDROID_RESULT" >> "$GITHUB_OUTPUT"
          echo "ios_status=$IOS_RESULT" >> "$GITHUB_OUTPUT"
          echo "trigger_status=$TRIGGER_RESULT" >> "$GITHUB_OUTPUT"

  # Slack Notification Job
  slack-notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: [all-status]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate Test Summary
        id: test-summary
        run: |
          echo "Generating test summary..."
          
          # Get device matrix for device names
          DEVICE_MATRIX=$(cat appwright/device-matrix.json)
          
          # Extract device information
          ANDROID_DEVICES=$(echo "$DEVICE_MATRIX" | jq -r '.android_devices[] | "\(.name) (\(.os_version))"')
          IOS_DEVICES=$(echo "$DEVICE_MATRIX" | jq -r '.ios_devices[] | "\(.name) (\(.os_version))"')
          
          # Get status from all-status job
          OVERALL_RESULT="${{ needs.all-status.outputs.overall_status }}"
          ANDROID_STATUS="${{ needs.all-status.outputs.android_status }}"
          IOS_STATUS="${{ needs.all-status.outputs.ios_status }}"
          
          # Format status for display
          if [ "$ANDROID_STATUS" = "success" ]; then
            ANDROID_DISPLAY="✅ PASSED"
          else
            ANDROID_DISPLAY="❌ FAILED"
          fi
          
          if [ "$IOS_STATUS" = "success" ]; then
            IOS_DISPLAY="✅ PASSED"
          else
            IOS_DISPLAY="❌ FAILED"
          fi
          
          # Create summary
          SUMMARY="*Performance E2E Tests*\n\n"
          
          SUMMARY+="---------------\n\n"
          SUMMARY+="*Devices Tested:*\n"
          SUMMARY+="• Android:\n"
          while IFS= read -r device; do
            if [ -n "$device" ]; then
              SUMMARY+="  • $device\n"
            fi
          done <<< "$ANDROID_DEVICES"
          SUMMARY+="• iOS:\n"
          while IFS= read -r device; do
            if [ -n "$device" ]; then
              SUMMARY+="  • $device\n"
            fi
          done <<< "$IOS_DEVICES"
          SUMMARY+="\n"
          SUMMARY+="---------------\n\n"
          SUMMARY+="*Test Results:*\n"
          SUMMARY+="• Android Tests: $ANDROID_DISPLAY\n"
          SUMMARY+="• iOS Tests: $IOS_DISPLAY\n\n"
          SUMMARY+="---------------\n\n"
          SUMMARY+="*Build Info:*\n"
          SUMMARY+="• Commit Hash: \`${{ github.sha }}\`\n"
          SUMMARY+="---------------\n\n"
          SUMMARY+="<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Full Results>"
          
          echo "summary<<EOF" >> "$GITHUB_OUTPUT"
          echo "$SUMMARY" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          
          echo "Test summary generated"
      
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.PERFORMANCE_E2E_SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "${{ steps.test-summary.outputs.summary }}"
            }