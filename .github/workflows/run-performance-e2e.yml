name: Build Apps and Run Performance E2E Tests
on:
  schedule:
    - cron: '0 3 * * 1-6'
  workflow_dispatch:
    inputs:
      description:
        description: 'Optional description for this test run'
        required: false
        type: string
permissions:
  contents: read
  id-token: write
env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  MM_TEST_ACCOUNT_SRP: ${{ secrets.MM_TEST_ACCOUNT_SRP }}
  TEST_SRP_1: ${{ secrets.TEST_SRP_1 }}
  TEST_SRP_2: ${{ secrets.TEST_SRP_2 }}
  TEST_SRP_3: ${{ secrets.TEST_SRP_3 }}
  DISABLE_VIDEO_DOWNLOAD: true

jobs:
  read-device-matrix:
    name: Read Device Matrix
    runs-on: ubuntu-latest
    outputs:
      android_matrix: ${{ steps.matrix.outputs.android }}
      ios_matrix: ${{ steps.matrix.outputs.ios }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Read device matrix
        id: matrix
        run: |
          # This step reads the device matrix from appwright/device-matrix.json
          echo "Reading device matrix from appwright/device-matrix.json"
          
          # Extract Android devices
          ANDROID_MATRIX=$(jq -r ".android_devices | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
          # Extract iOS devices
          IOS_MATRIX=$(jq -r ".ios_devices | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
          
          {
            echo "android=$ANDROID_MATRIX"
            echo "ios=$IOS_MATRIX"
          } >> "$GITHUB_OUTPUT"
          
          echo "Android matrix: $ANDROID_MATRIX"
          echo "iOS matrix: $IOS_MATRIX"
          
          # Validate that we have devices
          ANDROID_COUNT=$(echo "$ANDROID_MATRIX" | jq 'length')
          IOS_COUNT=$(echo "$IOS_MATRIX" | jq 'length')
          
          echo "Found $ANDROID_COUNT Android devices and $IOS_COUNT iOS devices"
          
          if [ "$ANDROID_COUNT" -eq 0 ] && [ "$IOS_COUNT" -eq 0 ]; then
            echo "Error: No devices found in device-matrix.json"
            exit 1
          fi

  android-tests:
    name: Android Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [read-device-matrix]
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.read-device-matrix.outputs.android_matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Restore node_modules cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn setup
      
      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          project-name: ${{ github.repository }}
      
      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Set Android Test Environment
        run: |
          echo "Setting test environment for device: ${{ matrix.device.name }}"
          {
            echo "BROWSERSTACK_DEVICE=${{ matrix.device.name }}"
            echo "BROWSERSTACK_OS_VERSION=${{ matrix.device.os_version }}"
            echo "BROWSERSTACK_ANDROID_APP_URL=bs://15e63ab44547a33cd4faa7e038d56e87cefc19a3"
            echo "TEST_PLATFORM=android"
            echo "QA_APP_VERSION=7.56.0"
            echo "BROWSERSTACK_BUILD_NAME=Android-Performance-${{ github.ref_name }}-Branch"
          } >> "$GITHUB_ENV"
      
      - name: Run Android Tests on ${{ matrix.device.name }}
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          echo "=== Testing ${{ matrix.device.name }} (${{ matrix.device.category }} Class) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "QA App Version: 7.56.0"
          echo "BrowserStack Android App URL: bs://15e63ab44547a33cd4faa7e038d56e87cefc19a3"
          
          yarn run-appwright:android-bs
      
      - name: Upload Android Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 7

  ios-tests:
    name: iOS Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [read-device-matrix]
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.read-device-matrix.outputs.ios_matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Restore node_modules cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn setup
      
      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          project-name: ${{ github.repository }}
      
      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Set iOS Test Environment
        run: |
          echo "Setting test environment for device: ${{ matrix.device.name }}"
          {
            echo "BROWSERSTACK_DEVICE=${{ matrix.device.name }}"
            echo "BROWSERSTACK_OS_VERSION=${{ matrix.device.os_version }}"
            echo "BROWSERSTACK_IOS_APP_URL=bs://88c080092aeceddf3da7e358be41d69372333eaf"
            echo "QA_APP_VERSION=7.56.0"
            echo "BROWSERSTACK_BUILD_NAME=iOS-Performance-${{ github.ref_name }}-Branch"
          } >> "$GITHUB_ENV"
      
      - name: Run iOS Tests on ${{ matrix.device.name }}
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          echo "=== Testing ${{ matrix.device.name }} (${{ matrix.device.category }} Class) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "QA App Version: 7.56.0"
          echo "BrowserStack iOS App URL: bs://88c080092aeceddf3da7e358be41d69372333eaf"
          if [ "${{ matrix.device.os_version }}" == "13" ] || [ "${{ matrix.device.os_version }}" == "11" ]; then
            echo "Warning: iOS ${{ matrix.device.os_version }} may not be supported by MetaMask app"
          fi
          
          yarn run-appwright:ios-bs
      
      - name: Upload iOS Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 7

  # Results Gathering Job
  gather-results:
    name: Gather Test Results
    runs-on: ubuntu-latest
    needs: [android-tests, ios-tests]
    if: always()
    
    steps:
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: appwright/test-reports/
      
      - name: Aggregate Performance Reports
        run: |
          echo "🔍 Searching for JSON performance reports..."
          
          # Create output directory
          mkdir -p appwright/aggregated-reports
          
          # Create aggregated report structure
          cat > aggregate_reports.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          function findJsonFiles(dir, jsonFiles = []) {
            if (!fs.existsSync(dir)) return jsonFiles;
            
            const files = fs.readdirSync(dir);
            for (const file of files) {
              const fullPath = path.join(dir, file);
              if (fs.statSync(fullPath).isDirectory()) {
                findJsonFiles(fullPath, jsonFiles);
              } else if (file.endsWith('.json') && file.includes('performance-metrics')) {
                jsonFiles.push(fullPath);
              }
            }
            return jsonFiles;
          }
          
          function aggregateReports() {
            console.log('🔍 Looking for performance JSON reports...');
            
            const jsonFiles = findJsonFiles('appwright/test-reports');
            console.log(`📊 Found ${jsonFiles.length} JSON report files:`);
            
            if (jsonFiles.length === 0) {
              console.log('❌ No performance JSON files found');
              return;
            }
            
            // Create the new grouped structure
            const groupedResults = {
              Android: {},
              iOS: {}
            };
            
            const metadata = {
              generatedAt: new Date().toISOString(),
              totalReports: jsonFiles.length,
              platforms: {
                android: 0,
                ios: 0
              },
              branch: process.env.GITHUB_REF_NAME || 'unknown',
              commit: process.env.GITHUB_SHA || 'unknown',
              workflowRun: process.env.GITHUB_RUN_ID || 'unknown'
            };
            
            jsonFiles.forEach(filePath => {
              console.log(`📄 Processing: ${filePath}`);
              
              try {
                const content = fs.readFileSync(filePath, 'utf8');
                const reportData = JSON.parse(content);
                
                // Extract platform and device info from path or content
                const pathParts = filePath.split('/');
                let platform = 'unknown';
                let platformKey = 'Unknown';
                let deviceInfo = 'unknown';
                let deviceKey = 'Unknown Device';
                
                // Try to determine platform from path
                if (filePath.includes('android-test-results')) {
                  platform = 'android';
                  platformKey = 'Android';
                  metadata.platforms.android++;
                } else if (filePath.includes('ios-test-results')) {
                  platform = 'ios';
                  platformKey = 'iOS';
                  metadata.platforms.ios++;
                }
                
                // Extract device info from path (e.g., android-test-results-Samsung Galaxy S21-11)
                const deviceMatch = pathParts.find(part => part.includes('-test-results-'));
                if (deviceMatch) {
                  const parts = deviceMatch.split('-');
                  if (parts.length >= 4) {
                    deviceInfo = parts.slice(3).join('-');
                    // Create device key in format "DeviceName+OSVersion"
                    const deviceParts = deviceInfo.split('-');
                    if (deviceParts.length >= 2) {
                      const osVersion = deviceParts[deviceParts.length - 1];
                      const deviceName = deviceParts.slice(0, -1).join(' ');
                      deviceKey = `${deviceName}+${osVersion}`;
                    } else {
                      deviceKey = deviceInfo;
                    }
                  }
                }
                
                // Initialize platform and device arrays if they don't exist
                if (!groupedResults[platformKey]) {
                  groupedResults[platformKey] = {};
                }
                if (!groupedResults[platformKey][deviceKey]) {
                  groupedResults[platformKey][deviceKey] = [];
                }
                
                // Process the report data (array of test results)
                const processTestReport = (testReport) => {
                  const cleanedReport = {
                    testName: testReport.testName,
                    steps: testReport.steps || [],
                    totalTime: testReport.total,
                    videoURL: testReport.videoURL || null
                  };
                  
                  // Add failure info if test failed
                  if (testReport.testFailed) {
                    cleanedReport.testFailed = true;
                    cleanedReport.failureReason = testReport.failureReason;
                  }
                  
                  groupedResults[platformKey][deviceKey].push(cleanedReport);
                };
                
                if (Array.isArray(reportData)) {
                  reportData.forEach(processTestReport);
                } else {
                  // Single test report
                  processTestReport(reportData);
                }
              } catch (error) {
                console.error(`❌ Error processing ${filePath}:`, error.message);
              }
            });
            
            // Write the new grouped report structure
            const outputPath = 'appwright/aggregated-reports/aggregated-performance-report.json';
            fs.writeFileSync(outputPath, JSON.stringify(groupedResults, null, 2));
            
            console.log(`✅ Aggregated report saved to: ${outputPath}`);
            console.log(`🤖 Android reports: ${metadata.platforms.android}`);
            console.log(`🍎 iOS reports: ${metadata.platforms.ios}`);
            
            // Count total tests across all platforms and devices
            let totalTests = 0;
            const devices = [];
            
            Object.keys(groupedResults).forEach(platform => {
              Object.keys(groupedResults[platform]).forEach(device => {
                devices.push(`${platform}-${device}`);
                totalTests += groupedResults[platform][device].length;
              });
            });
            
            console.log(`📊 Total tests: ${totalTests}`);
            console.log(`📱 Devices tested: ${devices.join(', ')}`);
            
            // Create summary file with metadata
            const summary = {
              totalTests,
              platforms: metadata.platforms,
              testsByPlatform: {
                android: 0,
                ios: 0
              },
              devices: [],
              platformDevices: {
                Android: Object.keys(groupedResults.Android || {}),
                iOS: Object.keys(groupedResults.iOS || {})
              },
              metadata,
              generatedAt: metadata.generatedAt,
              branch: metadata.branch,
              commit: metadata.commit
            };
            
            // Count tests by platform and collect device info
            Object.keys(groupedResults).forEach(platform => {
              Object.keys(groupedResults[platform]).forEach(device => {
                const testsCount = groupedResults[platform][device].length;
                if (platform === 'Android') {
                  summary.testsByPlatform.android += testsCount;
                } else if (platform === 'iOS') {
                  summary.testsByPlatform.ios += testsCount;
                }
                summary.devices.push({ platform, device, testCount: testsCount });
              });
            });
            
            fs.writeFileSync('appwright/aggregated-reports/summary.json', JSON.stringify(summary, null, 2));
            console.log('📋 Summary report saved to: appwright/aggregated-reports/summary.json');
          }
          
          aggregateReports();
          EOF
          
          # Run the aggregation script
          node aggregate_reports.js
          
          # List generated files
          echo "📁 Generated files:"
          ls -la appwright/aggregated-reports/
      
      - name: Upload Combined Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: combined-reports
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
            appwright/aggregated-reports/
          if-no-files-found: ignore
          retention-days: 14
    
      - name: Check Test Results
        id: test-results
        run: |
          if [ "${{ needs.android-tests.result }}" == "failure" ] || [ "${{ needs.ios-tests.result }}" == "failure" ]; then
            echo "Some tests failed. Check the individual job results above."
            echo "Note: iOS 13 and iOS 11 failures are expected due to MetaMask app compatibility."
            echo "overall_status=failure" >> "$GITHUB_OUTPUT"
            exit 1
          else
            echo "All test jobs completed successfully!"
            echo "overall_status=success" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Display QA Build Info
        run: |
          echo "=== QA Build Information ==="
          echo "Android Version: 7.56.0"
          echo "iOS Version: 7.56.0"
          echo ""
          echo "=== BrowserStack App URLs ==="
          echo "Android App URL: bs://15e63ab44547a33cd4faa7e038d56e87cefc19a3"
          echo "iOS App URL: bs://88c080092aeceddf3da7e358be41d69372333eaf"
    
    outputs:
      overall_status: ${{ steps.test-results.outputs.overall_status }}

  # All Status Check Job
  all-status:
    name: Check All Job Statuses
    runs-on: ubuntu-latest
    needs: [read-device-matrix, android-tests, ios-tests, gather-results]
    if: always()
    outputs:
      overall_status: ${{ steps.status-check.outputs.overall_status }}
      android_status: ${{ steps.status-check.outputs.android_status }}
      ios_status: ${{ steps.status-check.outputs.ios_status }}
      trigger_status: ${{ steps.status-check.outputs.trigger_status }}
    
    steps:
      - name: Check All Job Statuses
        id: status-check
        run: |
          echo "Checking status of all jobs..."
          ANDROID_RESULT="${{ needs.android-tests.result }}"
          IOS_RESULT="${{ needs.ios-tests.result }}"
          
          echo "Job Results:"
          echo "- trigger-qa-builds-and-upload: $TRIGGER_RESULT"
          echo "- android-tests: $ANDROID_RESULT"
          echo "- ios-tests: $IOS_RESULT"
          
          # Determine overall status
          if [ "$TRIGGER_RESULT" = "failure" ]; then
            OVERALL_STATUS="❌ FAILED"
            echo "Overall Status: FAILED (QA builds failed)"
          elif [ "$ANDROID_RESULT" = "failure" ] || [ "$IOS_RESULT" = "failure" ]; then
            OVERALL_STATUS="❌ FAILED"
            echo "Overall Status: FAILED (tests failed)"
          else
            OVERALL_STATUS="✅ PASSED"
            echo "Overall Status: PASSED (all tests passed)"
          fi
          
          # Set outputs
          {
            echo "overall_status=$OVERALL_STATUS"
            echo "android_status=$ANDROID_RESULT"
            echo "ios_status=$IOS_RESULT"
            echo "trigger_status=$TRIGGER_RESULT"
          } >> "$GITHUB_OUTPUT"

  # Slack Notification Job
  slack-notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: [all-status]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate Test Summary
        id: test-summary
        run: |
          echo "Generating test summary..."
          
          # Get device matrix for device names
          DEVICE_MATRIX=$(cat appwright/device-matrix.json)
          
          # Extract device information
          ANDROID_DEVICES=$(echo "$DEVICE_MATRIX" | jq -r '.android_devices[] | "\(.name) (\(.os_version))"')
          IOS_DEVICES=$(echo "$DEVICE_MATRIX" | jq -r '.ios_devices[] | "\(.name) (\(.os_version))"')
          
          # Get status from all-status job
          ANDROID_STATUS="${{ needs.all-status.outputs.android_status }}"
          IOS_STATUS="${{ needs.all-status.outputs.ios_status }}"
          
          # Format status for display
          if [ "$ANDROID_STATUS" = "success" ]; then
            ANDROID_DISPLAY="✅ PASSED"
          else
            ANDROID_DISPLAY="❌ FAILED"
          fi
          
          if [ "$IOS_STATUS" = "success" ]; then
            IOS_DISPLAY="✅ PASSED"
          else
            IOS_DISPLAY="❌ FAILED"
          fi
          
          # Create summary
          SUMMARY="*Performance E2E Tests*\n\n"
          
          SUMMARY+="---------------\n\n"
          SUMMARY+="*Devices Tested:*\n"
          SUMMARY+="• Android:\n"
          while IFS= read -r device; do
            if [ -n "$device" ]; then
              SUMMARY+="  • $device\n"
            fi
          done <<< "$ANDROID_DEVICES"
          SUMMARY+="• iOS:\n"
          while IFS= read -r device; do
            if [ -n "$device" ]; then
              SUMMARY+="  • $device\n"
            fi
          done <<< "$IOS_DEVICES"
          SUMMARY+="\n"
          SUMMARY+="---------------\n\n"
          SUMMARY+="*Test Results:*\n"
          SUMMARY+="• Android Tests: $ANDROID_DISPLAY\n"
          SUMMARY+="• iOS Tests: $IOS_DISPLAY\n\n"
          SUMMARY+="---------------\n\n"
          SUMMARY+="*Build Info:*\n"
          SUMMARY+="• Commit Hash: \`${{ github.sha }}\`\n"
          SUMMARY+="---------------\n\n"
          SUMMARY+="<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Full Results>"
          
          {
            echo "summary<<EOF"
            echo "$SUMMARY"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          echo "Test summary generated"
      
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a
        with:
          webhook: ${{ secrets.PERFORMANCE_E2E_SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "${{ steps.test-summary.outputs.summary }}"
            }