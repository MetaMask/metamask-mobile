name: E2E Tests

on:
  # Manual dispatch with inputs
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run (smoke, regression, full)'
        required: true
        type: choice
        options:
          - smoke
          - regression
          - full
        default: smoke
      platforms:
        description: 'Platforms to test'
        required: true
        type: choice
        options:
          - ios
          - android
          - both
        default: both
      use_cached_builds:
        description: 'Use cached builds instead of building from source'
        required: false
        type: boolean
        default: true

  # PR triggers. Disabled so we don't run it for now
#   pull_request:
#     types: [opened, synchronize, reopened, labeled]

#   # Push triggers
#   push:
#     branches:
#       - main
#       - 'release/*'

# Concurrency group to cancel in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Environment variables
env:
  NODE_VERSION: '20.18.0'
  DETOX_VERSION: '20.26.2'

jobs:
  # Determine what tests should run
  determine-tests:
    name: Determine Test Plan
    runs-on: ubuntu-latest
    outputs:
      test-suite: ${{ steps.config.outputs.test-suite }}
      platforms: ${{ steps.config.outputs.platforms }}
      use-cached-builds: ${{ steps.config.outputs.use-cached-builds }}
      should-run-tests: ${{ steps.config.outputs.should-run-tests }}
      smoke-tests: ${{ steps.config.outputs.smoke-tests }}
      regression-tests: ${{ steps.config.outputs.regression-tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine test configuration
        id: config
        run: |
          echo "üîç Determining test configuration..."
          
          # Set defaults based on trigger type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TEST_SUITE="${{ github.event.inputs.test_suite }}"
            PLATFORMS="${{ github.event.inputs.platforms }}"
            USE_CACHED="${{ github.event.inputs.use_cached_builds }}"
            SHOULD_RUN="true"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Check for specific E2E labels
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'Run E2E Tests') }}" == "true" ]]; then
              TEST_SUITE="smoke"
              PLATFORMS="both"
              USE_CACHED="true"
              SHOULD_RUN="true"
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'Run Regression E2E') }}" == "true" ]]; then
              TEST_SUITE="regression"
              PLATFORMS="both"
              USE_CACHED="true"
              SHOULD_RUN="true"
            else
              echo "‚ÑπÔ∏è No E2E label found, skipping tests"
              SHOULD_RUN="false"
            fi
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              TEST_SUITE="smoke"
              PLATFORMS="both"
              USE_CACHED="true"
              SHOULD_RUN="true"
            elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
              TEST_SUITE="regression"
              PLATFORMS="both"
              USE_CACHED="false"
              SHOULD_RUN="true"
            else
              SHOULD_RUN="false"
            fi
          else
            SHOULD_RUN="false"
          fi
          
          # Define test lists
          SMOKE_TESTS="SmokeConfirmations,SmokeTrade,SmokeWalletPlatform,SmokeNetworkAbstraction,api-specs"
          REGRESSION_TESTS="Regression:Accounts,Regression:Browser,Regression:Confirmations,Regression:Onboarding,Regression:Security,Regression:Settings,Regression:Wallet"
          
          # Output configuration
          echo "test-suite=$TEST_SUITE" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "use-cached-builds=$USE_CACHED" >> $GITHUB_OUTPUT
          echo "should-run-tests=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "smoke-tests=$SMOKE_TESTS" >> $GITHUB_OUTPUT
          echo "regression-tests=$REGRESSION_TESTS" >> $GITHUB_OUTPUT
          
          echo "üìã Configuration Summary:"
          echo "  Test Suite: $TEST_SUITE"
          echo "  Platforms: $PLATFORMS"
          echo "  Use Cached Builds: $USE_CACHED"
          echo "  Should Run Tests: $SHOULD_RUN"

  # Check build cache (as requested)
  check-build-cache:
    name: Check Build Cache
    runs-on: ubuntu-latest
    needs: determine-tests
    if: needs.determine-tests.outputs.should-run-tests == 'true'
    outputs:
      cache-hit: ${{ steps.build-cache.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check build cache
        id: build-cache
        uses: actions/cache@v4
        with:
          path: |
            ios/build/Build/Products
            android/app/build/outputs
            node_modules
          key: e2e-build-${{ needs.determine-tests.outputs.platforms }}-${{ hashFiles('yarn.lock', 'package.json') }}
          restore-keys: |
            e2e-build-${{ needs.determine-tests.outputs.platforms }}-
            e2e-build-
          lookup-only: true

      - name: Report cache status
        run: |
          if [[ "${{ steps.build-cache.outputs.cache-hit }}" == "true" ]]; then
            echo "‚úÖ Build cache found - can use cached builds"
          else
            echo "‚ùå No build cache found - would need to build from source"
          fi

  # Simulate iOS tests
  simulate-ios-tests:
    name: Simulate iOS E2E Tests
    runs-on: macos-latest
    needs: [determine-tests, check-build-cache]
    if: |
      needs.determine-tests.outputs.should-run-tests == 'true' && 
      (needs.determine-tests.outputs.platforms == 'ios' || needs.determine-tests.outputs.platforms == 'both')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Simulate iOS test execution
        env:
          TEST_SUITE: ${{ needs.determine-tests.outputs.test-suite }}
          USE_CACHED: ${{ needs.determine-tests.outputs.use-cached-builds }}
          CACHE_HIT: ${{ needs.check-build-cache.outputs.cache-hit }}
        run: |
          echo "üçé iOS E2E Test Simulation"
          echo "=========================="
          echo "Platform: iOS"
          echo "Test Suite: $TEST_SUITE"
          echo "Use Cached Builds: $USE_CACHED"
          echo "Cache Available: $CACHE_HIT"
          echo "Node Version: ${{ env.NODE_VERSION }}"
          echo "Detox Version: ${{ env.DETOX_VERSION }}"
          echo ""
          
          if [[ "$TEST_SUITE" == "smoke" ]]; then
            echo "üìù Would run SMOKE tests on iOS:"
            IFS=',' read -ra TESTS <<< "${{ needs.determine-tests.outputs.smoke-tests }}"
            for test in "${TESTS[@]}"; do
              if [[ "$test" == "api-specs" ]]; then
                echo "  üß™ yarn test:api-specs --retries 1"
              else
                echo "  üß™ yarn test:e2e:ios:run:qa-release --testNamePattern='$test'"
              fi
            done
          elif [[ "$TEST_SUITE" == "regression" ]]; then
            echo "üìù Would run REGRESSION tests on iOS:"
            IFS=',' read -ra TESTS <<< "${{ needs.determine-tests.outputs.regression-tests }}"
            for test in "${TESTS[@]}"; do
              echo "  üß™ yarn test:e2e:ios:run:qa-release --testNamePattern='$test'"
            done
          elif [[ "$TEST_SUITE" == "full" ]]; then
            echo "üìù Would run ALL tests on iOS:"
            echo "  üß™ yarn test:e2e:ios:run:qa-release (all smoke tests)"
            echo "  üß™ yarn test:e2e:ios:run:qa-release (all regression tests)"
            echo "  üß™ yarn test:api-specs --retries 1"
          fi
          
          echo ""
          if [[ "$USE_CACHED" == "true" && "$CACHE_HIT" == "true" ]]; then
            echo "‚úÖ Would use cached build artifacts"
          else
            echo "üî® Would build iOS app: yarn test:e2e:ios:build:qa-release"
          fi
          
          echo "‚úÖ iOS simulation completed successfully"

  # Simulate Android tests
  simulate-android-tests:
    name: Simulate Android E2E Tests
    runs-on: ubuntu-latest
    needs: [determine-tests, check-build-cache]
    if: |
      needs.determine-tests.outputs.should-run-tests == 'true' && 
      (needs.determine-tests.outputs.platforms == 'android' || needs.determine-tests.outputs.platforms == 'both')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Simulate Android test execution
        env:
          TEST_SUITE: ${{ needs.determine-tests.outputs.test-suite }}
          USE_CACHED: ${{ needs.determine-tests.outputs.use-cached-builds }}
          CACHE_HIT: ${{ needs.check-build-cache.outputs.cache-hit }}
        run: |
          echo "ü§ñ Android E2E Test Simulation"
          echo "=============================="
          echo "Platform: Android"
          echo "Test Suite: $TEST_SUITE"
          echo "Use Cached Builds: $USE_CACHED"
          echo "Cache Available: $CACHE_HIT"
          echo "Node Version: ${{ env.NODE_VERSION }}"
          echo "Detox Version: ${{ env.DETOX_VERSION }}"
          echo ""
          
          if [[ "$TEST_SUITE" == "smoke" ]]; then
            echo "üìù Would run SMOKE tests on Android:"
            IFS=',' read -ra TESTS <<< "${{ needs.determine-tests.outputs.smoke-tests }}"
            for test in "${TESTS[@]}"; do
              if [[ "$test" == "api-specs" ]]; then
                echo "  ‚è≠Ô∏è Skipping api-specs (iOS only)"
              else
                echo "  üß™ yarn test:e2e:android:run:qa-release --testNamePattern='$test'"
              fi
            done
          elif [[ "$TEST_SUITE" == "regression" ]]; then
            echo "üìù Would run REGRESSION tests on Android:"
            IFS=',' read -ra TESTS <<< "${{ needs.determine-tests.outputs.regression-tests }}"
            for test in "${TESTS[@]}"; do
              echo "  üß™ yarn test:e2e:android:run:qa-release --testNamePattern='$test'"
            done
          elif [[ "$TEST_SUITE" == "full" ]]; then
            echo "üìù Would run ALL tests on Android:"
            echo "  üß™ yarn test:e2e:android:run:qa-release (all smoke tests)"
            echo "  üß™ yarn test:e2e:android:run:qa-release (all regression tests)"
            echo "  ‚è≠Ô∏è Skipping api-specs (iOS only)"
          fi
          
          echo ""
          if [[ "$USE_CACHED" == "true" && "$CACHE_HIT" == "true" ]]; then
            echo "‚úÖ Would use cached build artifacts"
          else
            echo "üî® Would build Android app: yarn test:e2e:android:build:qa-release"
          fi
          
          echo "‚úÖ Android simulation completed successfully"

  # Summary of what would be executed
  test-summary:
    name: E2E Test Summary
    runs-on: ubuntu-latest
    needs: [determine-tests, check-build-cache, simulate-ios-tests, simulate-android-tests]
    if: always() && needs.determine-tests.outputs.should-run-tests == 'true'
    steps:
      - name: Generate execution summary
        run: |
          echo "# E2E Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Suite**: ${{ needs.determine-tests.outputs.test-suite }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: ${{ needs.determine-tests.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Use Cached Builds**: ${{ needs.determine-tests.outputs.use-cached-builds }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Cache Available**: ${{ needs.check-build-cache.outputs.cache-hit || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Execution Results" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.simulate-ios-tests.result }}" != "skipped" ]]; then
            if [[ "${{ needs.simulate-ios-tests.result }}" == "success" ]]; then
              echo "- ‚úÖ **iOS Tests**: Simulation completed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ‚ùå **iOS Tests**: Simulation failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ needs.simulate-android-tests.result }}" != "skipped" ]]; then
            if [[ "${{ needs.simulate-android-tests.result }}" == "success" ]]; then
              echo "- ‚úÖ **Android Tests**: Simulation completed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ‚ùå **Android Tests**: Simulation failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "This is a **simulation workflow** that shows what tests would be executed." >> $GITHUB_STEP_SUMMARY
          echo "To actually run tests, replace the simulation steps with real E2E test execution." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Ready for Implementation:" >> $GITHUB_STEP_SUMMARY
          echo "1. ‚úÖ Test selection logic works" >> $GITHUB_STEP_SUMMARY
          echo "2. ‚úÖ Platform filtering works" >> $GITHUB_STEP_SUMMARY
          echo "3. ‚úÖ Build cache checking works" >> $GITHUB_STEP_SUMMARY
          echo "4. ‚úÖ Trigger conditions work" >> $GITHUB_STEP_SUMMARY
          echo "5. üîÑ Ready to add real test execution" >> $GITHUB_STEP_SUMMARY

      - name: Final status check
        run: |
          ios_result="${{ needs.simulate-ios-tests.result }}"
          android_result="${{ needs.simulate-android-tests.result }}"
          
          echo "üìä Final Results:"
          echo "  iOS: $ios_result"
          echo "  Android: $android_result"
          
          # Pass if all jobs that ran were successful
          if [[ "$ios_result" == "failure" || "$android_result" == "failure" ]]; then
            echo "‚ùå Some simulations failed"
            exit 1
          else
            echo "‚úÖ All simulations completed successfully"
          fi 