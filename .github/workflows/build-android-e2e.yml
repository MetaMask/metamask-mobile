# Pure Android E2E build workflow - just builds APKs and uploads artifacts
# No testing, no unnecessary setup - optimized for speed and efficiency

name: Build Android E2E APKs

on:
  workflow_call:
    inputs:
      build_action:
        description: 'Build action: full, repack, or check_fingerprint'
        required: false
        type: string
        default: 'full'
    outputs:
      apk-uploaded:
        description: 'Whether the APK was successfully uploaded'
        value: ${{ jobs.build-android-apks.outputs.apk-uploaded }}
      aab-uploaded:
        description: 'Whether the AAB was successfully uploaded'
        value: ${{ jobs.build-android-apks.outputs.aab-uploaded }}
      sourcemap-uploaded:
        description: 'Whether the sourcemap was successfully uploaded'
        value: ${{ jobs.build-android-apks.outputs.sourcemap-uploaded }}
      build-method:
        description: 'The build method used: full, repack, or skipped'
        value: ${{ jobs.build-android-apks.outputs.build-method }}

jobs:
  build-android-apks:
    name: Build Android E2E APKs
    runs-on: gha-mmsdk-scale-set-ubuntu-22.04-amd64-xl
    env:
      GRADLE_USER_HOME: /home/runner/_work/.gradle
    outputs:
      apk-uploaded: ${{ steps.upload-apk.outcome == 'success' }}
      aab-uploaded: ${{ steps.upload-aab.outcome == 'success' }}
      sourcemap-uploaded: ${{ steps.upload-sourcemap.outcome == 'success' }}
      build-method: ${{ steps.build-decision.outputs.build_method }}
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Android Build Environment
        uses: MetaMask/github-tools/.github/actions/setup-e2e-env@self-hosted-runners-config
        with:
          platform: android
          setup-simulator: false
          configure-keystores: true
          target: qa

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/_work/.gradle/caches
            /home/runner/_work/.gradle/wrapper
            android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Setup project dependencies
        run: |
          echo "🚀 Setting up project..."
          yarn setup:github-ci --no-build-ios

      - name: Fingerprint build check
        id: build-decision
        uses: ./.github/actions/fingerprint-build-check
        with:
          platform: android
          build_action: ${{ inputs.build_action }}
          apk_path: android/app/build/outputs/apk/prod/release/app-prod-release.apk
          pr_number: ${{ github.event.pull_request.number }}
      - name: Build Android E2E APKs
        if: ${{ steps.build-decision.outputs.build_method == 'full' }}
        run: |
          echo "🏗 Building Android E2E APKs..."
          export NODE_OPTIONS="--max-old-space-size=8192"
          cp android/gradle.properties.github android/gradle.properties
          # to be replaced by expo prebuild
          yarn build:android:main:e2e
        shell: bash
        env:
          PLATFORM: android
          METAMASK_ENVIRONMENT: qa
          METAMASK_BUILD_TYPE: main
          IS_TEST: true
          E2E: "true"
          IGNORE_BOXLOGS_DEVELOPMENT: true
          GITHUB_CI: "true"
          CI: "true"
          NODE_OPTIONS: "--max-old-space-size=8192"
          MM_UNIFIED_SWAPS_ENABLED: "true"
          MM_BRIDGE_ENABLED: "true"
          BRIDGE_USE_DEV_APIS: "true"
          RAMP_INTERNAL_BUILD: "true"
          SEEDLESS_ONBOARDING_ENABLED: "true"
          MM_NOTIFICATIONS_UI_ENABLED: "true"
          MM_SECURITY_ALERTS_API_ENABLED: "true"
          MM_REMOVE_GLOBAL_NETWORK_SELECTOR: "true"
          BLOCKAID_FILE_CDN: "static.cx.metamask.io/api/v1/confirmations/ppom"
          FEATURES_ANNOUNCEMENTS_ACCESS_TOKEN: ${{ secrets.FEATURES_ANNOUNCEMENTS_ACCESS_TOKEN }}
          FEATURES_ANNOUNCEMENTS_SPACE_ID: ${{ secrets.FEATURES_ANNOUNCEMENTS_SPACE_ID }}
          SEGMENT_WRITE_KEY_QA: ${{ secrets.SEGMENT_WRITE_KEY_QA }}
          SEGMENT_PROXY_URL_QA: ${{ secrets.SEGMENT_PROXY_URL_QA }}
          SEGMENT_DELETE_API_SOURCE_ID_QA: ${{ secrets.SEGMENT_DELETE_API_SOURCE_ID_QA }}
          SEGMENT_REGULATIONS_ENDPOINT_QA: ${{ secrets.SEGMENT_REGULATIONS_ENDPOINT_QA }}
          MM_SENTRY_DSN_TEST: ${{ secrets.MM_SENTRY_DSN_TEST }}
          MM_SENTRY_AUTH_TOKEN: ${{ secrets.MM_SENTRY_AUTH_TOKEN }}
          MAIN_IOS_GOOGLE_CLIENT_ID_UAT: ${{ secrets.MAIN_IOS_GOOGLE_CLIENT_ID_UAT }}
          MAIN_IOS_GOOGLE_REDIRECT_URI_UAT: ${{ secrets.MAIN_IOS_GOOGLE_REDIRECT_URI_UAT }}
          MAIN_ANDROID_APPLE_CLIENT_ID_UAT: ${{ secrets.MAIN_ANDROID_APPLE_CLIENT_ID_UAT }}
          MAIN_ANDROID_GOOGLE_CLIENT_ID_UAT: ${{ secrets.MAIN_ANDROID_GOOGLE_CLIENT_ID_UAT }}
          MAIN_ANDROID_GOOGLE_SERVER_CLIENT_ID_UAT: ${{ secrets.MAIN_ANDROID_GOOGLE_SERVER_CLIENT_ID_UAT }}
          GOOGLE_SERVICES_B64_IOS: ${{ secrets.GOOGLE_SERVICES_B64_IOS }}
          GOOGLE_SERVICES_B64_ANDROID: ${{ secrets.GOOGLE_SERVICES_B64_ANDROID }}
          MM_INFURA_PROJECT_ID: ${{ secrets.MM_INFURA_PROJECT_ID }}

      - name: Update JS and Assets (expo export)
        if: ${{ steps.build-decision.outputs.build_method == 'repack' }}
        id: expo-export
        run: |
          echo "🔧 Updating JS and assets with expo export..."
          echo "Running setup without building native code..."
          yarn setup:github-ci --no-build-ios --no-build-android
          
          echo "Exporting JavaScript bundle for Android..."
          yarn expo export --platform android
          
          # Verify the bundle was created
          if [ ! -f "dist/_expo/static/js/android/index.js" ]; then
            echo "❌ Error: Bundle not found at dist/_expo/static/js/android/index.js"
            exit 1
          fi
          
          BUNDLE_SIZE=$(stat -f%z "dist/_expo/static/js/android/index.js" 2>/dev/null || stat -c%s "dist/_expo/static/js/android/index.js" 2>/dev/null)
          echo "✅ JS bundle exported successfully (size: $BUNDLE_SIZE bytes)"

      - name: Repackage App Binary using @expo/repack-app
        if: ${{ steps.build-decision.outputs.build_method == 'repack' }}
        id: repack-apk
        run: |
          echo "📦 Repackaging Android APK with updated JavaScript bundle..."
          echo "============================================"
          
          # Store original APK info for validation
          ORIGINAL_APK="android/app/build/outputs/apk/prod/release/app-prod-release.apk"
          ORIGINAL_SIZE=$(stat -f%z "$ORIGINAL_APK" 2>/dev/null || stat -c%s "$ORIGINAL_APK" 2>/dev/null)
          echo "📁 Original APK size: $ORIGINAL_SIZE bytes"
          
          # Create backup of original APK
          cp "$ORIGINAL_APK" "${ORIGINAL_APK}.backup"
          
          # Repackage the APK with the exported bundle
          echo "📱 Repackaging APK..."
          if ! npx @expo/repack-app \
            --input "$ORIGINAL_APK" \
            --output "$ORIGINAL_APK" \
            --bundle dist/_expo/static/js/android/index.js; then
            echo "❌ Repackaging failed! Restoring original APK..."
            mv "${ORIGINAL_APK}.backup" "$ORIGINAL_APK"
            exit 1
          fi
          
          # Validate the repacked APK
          REPACKED_SIZE=$(stat -f%z "$ORIGINAL_APK" 2>/dev/null || stat -c%s "$ORIGINAL_APK" 2>/dev/null)
          echo "📐 Repacked APK size: $REPACKED_SIZE bytes"
          
          # Basic validation - repacked APK should be similar in size
          SIZE_DIFF=$((REPACKED_SIZE - ORIGINAL_SIZE))
          SIZE_DIFF_ABS=${SIZE_DIFF#-}
          MAX_DIFF=$((ORIGINAL_SIZE / 10))  # Allow up to 10% size difference
          
          if [ $SIZE_DIFF_ABS -gt $MAX_DIFF ]; then
            echo "⚠️ Warning: Significant size difference detected (${SIZE_DIFF} bytes)"
            echo "This may indicate an issue with repacking."
          fi
          
          # Verify APK is valid using aapt
          if command -v aapt &> /dev/null; then
            echo "Validating APK structure..."
            if ! aapt dump badging "$ORIGINAL_APK" > /dev/null 2>&1; then
              echo "❌ Error: Repacked APK validation failed!"
              mv "${ORIGINAL_APK}.backup" "$ORIGINAL_APK"
              exit 1
            fi
            echo "✅ APK structure validated successfully"
          fi
          
          # Clean up backup
          rm -f "${ORIGINAL_APK}.backup"
          
          echo "✅ Repackaging completed successfully!"
          echo "============================================"
          echo "🎯 APK ready for E2E testing with updated JS bundle"

      - name: Save fingerprint and cache artifacts
        if: ${{ steps.build-decision.outputs.build_method == 'full' }}
        uses: ./.github/actions/save-build-fingerprint
        with:
          platform: android
          artifacts_path: android/app/build/outputs/apk/prod/release/app-prod-release.apk
          pr_number: ${{ github.event.pull_request.number }}
      
      - name: Log Build Performance Metrics
        if: always()
        run: |
          echo "📊 Build Performance Summary"
          echo "============================"
          echo "Build Method: ${{ steps.build-decision.outputs.build_method }}"
          echo "Cache Hit: ${{ steps.build-decision.outputs.cache_hit }}"
          echo "Can Repack: ${{ steps.build-decision.outputs.can_repack }}"
          
          if [[ "${{ steps.build-decision.outputs.build_method }}" == "repack" ]]; then
            echo "🚀 Optimized build using cached artifacts!"
            echo "Time saved by avoiding full native build"
          elif [[ "${{ steps.build-decision.outputs.build_method }}" == "full" ]]; then
            echo "🏗️ Full native build was required"
            if [[ "${{ steps.build-decision.outputs.cache_hit }}" == "false" ]]; then
              echo "Reason: No cache hit or native code changed"
            fi
          fi
          echo "============================"

      - name: Upload Android APK
        id: upload-apk
        uses: actions/upload-artifact@v4
        with:
          name: app-prod-release.apk
          path: android/app/build/outputs/apk/prod/release/app-prod-release.apk
          retention-days: 7
          if-no-files-found: error

      - name: Upload Android Test APK
        id: upload-test-apk
        uses: actions/upload-artifact@v4
        with:
          name: app-prod-release-androidTest.apk
          path: android/app/build/outputs/apk/androidTest/prod/release/app-prod-release-androidTest.apk
          retention-days: 7
          if-no-files-found: error

      - name: Upload Android AAB
        id: upload-aab
        uses: actions/upload-artifact@v4
        with:
          name: app-prod-release.aab
          path: android/app/build/outputs/bundle/prodRelease/app-prod-release.aab
          retention-days: 7
          if-no-files-found: warn
        continue-on-error: true

      - name: Upload Android Source Map
        id: upload-sourcemap
        uses: actions/upload-artifact@v4
        with:
          name: index.android.bundle.map
          path: sourcemaps/android/index.android.bundle.map
          retention-days: 7
          if-no-files-found: warn
        continue-on-error: true
