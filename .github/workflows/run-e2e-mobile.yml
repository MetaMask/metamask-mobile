# This workflow runs mobile E2E tests for a specific smoke test category.
# It passes matrix sharding info to the test framework via environment variables.

name: Test Mobile E2E Category

on:
  workflow_call:
    inputs:
      test-suite-name:
        description: 'Name of the test suite'
        required: true
        type: string
      smoke-category:
        description: 'Smoke test category (confirmations, trade, wallet-platform, etc.)'
        required: true
        type: string
      matrix-index:
        description: 'Matrix index for this test run'
        required: true
        type: number
      matrix-total:
        description: 'Total number of matrix entries'
        required: true
        type: number
      platform:
        description: 'Platform to test (ios or android)'
        required: true
        type: string
      test_suite_tag:
        description: 'The Cucumber tag expression to use for filtering tests'
        required: false
        type: string
      is_api_specs:
        description: 'Whether this is the API specs test (iOS-only, special command)'
        required: false
        type: boolean
        default: false
      use_prebuilt_apps:
        description: 'Use pre-built apps from GitHub release instead of building'
        required: false
        type: boolean
        default: false

jobs:
  test-e2e-mobile:
    name: ${{ inputs.test-suite-name }}${{ inputs.matrix-total > 1 && format(' ({0})', inputs.matrix-index) || '' }}
    runs-on: macos-14-large
    env:
      METAMASK_ENVIRONMENT: 'local'
      METAMASK_BUILD_TYPE: 'main'
      MATRIX_INDEX: ${{ inputs.matrix-index }}
      MATRIX_TOTAL: ${{ inputs.matrix-total }}
      SMOKE_CATEGORY: ${{ inputs.smoke-category }}
      PLATFORM: ${{ inputs.platform }}
      JOB_NAME: ${{ inputs.test-suite-name }}${{ inputs.matrix-total > 1 && format(' ({0})', inputs.matrix-index) || '' }}
      TEST_SUITE_TAG: ${{ inputs.test_suite_tag }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up E2E environment
        uses: ./.github/actions/setup-e2e-env
        with:
          platform: ${{ inputs.platform }}
          setup-simulator: ${{ inputs.platform == 'ios' && 'true' || 'false' }}
          cache-unique-id: ${{ github.repository }}-${{ inputs.platform }}

      - name: Build E2E app
        if: ${{ !inputs.use_prebuilt_apps }}
        run: |
          platform="${{ inputs.platform }}"
          
          # Set environment variables for build
          export METAMASK_ENVIRONMENT='local'
          export METAMASK_BUILD_TYPE='main'
          export IS_TEST='true'
          export IGNORE_BOXLOGS_DEVELOPMENT="true"
          
          echo "Building E2E app for $platform..."
          
          if [[ "$platform" == "ios" ]]; then
            yarn test:e2e:ios:build:qa-release
          else
            yarn test:e2e:android:build:qa-release
          fi

      - name: Setup pre-built apps from GitHub release
        if: ${{ inputs.use_prebuilt_apps }}
        run: |
          platform="${{ inputs.platform }}"
          
          echo "üöÄ Setting up pre-built apps for $platform..."
          
          # Base URL for artifacts
          base_url="https://github.com/MetaMask/tmp-bitrise-migration-artifacts/releases/download/test"
          
          # Create required directories
          mkdir -p android/app/build/outputs/apk/qa/release/
          mkdir -p ios/build/Build/Products/Release-iphonesimulator/
          
          if [[ "$platform" == "ios" ]]; then
            echo "üì• Downloading iOS artifacts..."
            
            # Download Release-iphonesimulator.zip
            if curl -L --fail -o /tmp/Release-iphonesimulator.zip "${base_url}/Release-iphonesimulator.zip"; then
              echo "‚úÖ Downloaded Release-iphonesimulator.zip"
              echo "üì¶ Extracting iOS app..."
              unzip -o -j /tmp/Release-iphonesimulator.zip "MetaMask-QA.app/*" -d "ios/build/Build/Products/Release-iphonesimulator/MetaMask-QA.app/"
            else
              echo "‚ùå Failed to download iOS artifacts (Release-iphonesimulator.zip)"
              exit 1
            fi
            
            # Verify iOS setup
            if [[ -f "ios/build/Build/Products/Release-iphonesimulator/MetaMask-QA.app/Info.plist" ]]; then
              echo "‚úÖ iOS app ready for E2E tests"
            else
              echo "‚ùå iOS app setup failed - Info.plist not found"
              exit 1
            fi
            
          else
            echo "üì• Downloading Android artifacts..."
            
            if curl -L --fail -o /tmp/outputs.zip "${base_url}/outputs.zip"; then
              echo "‚úÖ Downloaded outputs.zip"
              echo "üì¶ Extracting Android APK..."
              unzip -o -j /tmp/outputs.zip "apk/qa/release/app-qa-release.apk" -d "android/app/build/outputs/apk/qa/release/"
              
              # Verify Android setup
              if [[ -f "android/app/build/outputs/apk/qa/release/app-qa-release.apk" ]]; then
                echo "‚úÖ Android APK ready for E2E tests"
              else
                echo "‚ùå Android APK setup failed"
                exit 1
              fi
            else
              echo "‚ùå Failed to download Android artifacts (outputs.zip not available)"
              exit 1
            fi
          fi

      - name: Run E2E tests
        run: |
          platform="${{ inputs.platform }}"
          is_api_specs="${{ inputs.is_api_specs }}"
          test_suite_tag="${{ inputs.test_suite_tag }}"
          
          echo "Running ${{ inputs.smoke-category }} tests on $platform (shard ${{ inputs.matrix-index }}/${{ inputs.matrix-total }})"
          
          if [[ "$is_api_specs" == "true" ]]; then
            if [[ "$platform" != "ios" ]]; then
              echo "API specs are iOS-only, skipping $platform"
              exit 0
            fi
            yarn test:api-specs --retries 1
            exit 0
          fi
          
          if [[ -z "$test_suite_tag" ]]; then
            echo "Error: test_suite_tag is required for non-api-specs tests"
            exit 1
          fi
          
          export TEST_SUITE_TAG="$test_suite_tag"
          echo "Using TEST_SUITE_TAG: $TEST_SUITE_TAG"
          
          # Set environment variables needed for the script
          export METAMASK_ENVIRONMENT='local'
          export METAMASK_BUILD_TYPE='main'
          export IGNORE_BOXLOGS_DEVELOPMENT="true"
          
          # Use the same approach as Bitrise: run the tag script which calls the appropriate yarn command
          if [[ "$platform" == "ios" ]]; then
            export BITRISE_TRIGGERED_WORKFLOW_ID="ios_workflow"
            ./scripts/run-e2e-tags.sh
          else
            export BITRISE_TRIGGERED_WORKFLOW_ID="android_workflow"
            ./scripts/run-e2e-tags.sh
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.test-suite-name }}
          path: e2e/reports/
          retention-days: 7
