name: Performance E2E Test Manual WorkFlow

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Optional description for this test run'
        required: false
        type: string
      browserstack_app_url_android:
        description: 'BrowserStack Android App URL (bs://...)'
        required: false
        type: string
      browserstack_app_url_ios:
        description: 'BrowserStack iOS App URL (bs://...)'
        required: false
        type: string

env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

jobs:
  read-device-matrix:
    name: Read Device Matrix
    runs-on: ubuntu-latest
    outputs:
      android_matrix: ${{ steps.read-matrix.outputs.android_matrix }}
      ios_matrix: ${{ steps.read-matrix.outputs.ios_matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Read device matrix
        id: read-matrix
        run: |
          echo "Reading device matrix from appwright/device-matrix.json"
          android_matrix=$(jq -c '.android' appwright/device-matrix.json)
          ios_matrix=$(jq -c '.ios' appwright/device-matrix.json)
          echo "android_matrix=$android_matrix" >> $GITHUB_OUTPUT
          echo "ios_matrix=$ios_matrix" >> $GITHUB_OUTPUT
          echo "Android devices: $(echo $android_matrix | jq length)"
          echo "iOS devices: $(echo $ios_matrix | jq length)"

  trigger-android-dual-versions:
    name: Trigger Android Dual Versions and Extract BrowserStack URLs
    uses: ./.github/workflows/build-android-upload-to-browserstack.yml
    # Only run if BrowserStack URLs are not provided
    if: ${{ !inputs.browserstack_app_url_android }}
    secrets: inherit

  trigger-ios-dual-versions:
    name: Trigger iOS Dual Versions and Extract BrowserStack URLs
    uses: ./.github/workflows/build-ios-upload-to-browserstack.yml
    # Only run if BrowserStack URLs are not provided
    if: ${{ !inputs.browserstack_app_url_ios }}
    secrets: inherit

  run-android-imported-wallet-tests:
    name: Run Android Imported Wallet Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-android-dual-versions]
    if: always() && !failure() && !cancelled()
    with:
      platform: android
      build_type: imported-wallet
      device_matrix: ${{ needs.read-device-matrix.outputs.android_matrix }}
      browserstack_app_url: ${{ needs.trigger-android-dual-versions.outputs.with-srp-browserstack-url || inputs.browserstack_app_url_android }}
      app_version: ${{ needs.trigger-android-dual-versions.outputs.with-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
    secrets:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

  run-android-onboarding-tests:
    name: Run Android Onboarding Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-android-dual-versions]
    if: always() && !failure() && !cancelled()
    with:
      platform: android
      build_type: onboarding
      device_matrix: ${{ needs.read-device-matrix.outputs.android_matrix }}
      browserstack_app_url: ${{ needs.trigger-android-dual-versions.outputs.without-srp-browserstack-url || inputs.browserstack_app_url_android }}
      app_version: ${{ needs.trigger-android-dual-versions.outputs.without-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
    secrets:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

  run-ios-imported-wallet-tests:
    name: Run iOS Imported Wallet Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-ios-dual-versions]
    if: always() && !failure() && !cancelled()
    with:
      platform: ios
      build_type: imported-wallet
      device_matrix: ${{ needs.read-device-matrix.outputs.ios_matrix }}
      browserstack_app_url: ${{ needs.trigger-ios-dual-versions.outputs.with-srp-browserstack-url || inputs.browserstack_app_url_ios }}
      app_version: ${{ needs.trigger-ios-dual-versions.outputs.with-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
    secrets:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

  run-ios-onboarding-tests:
    name: Run iOS Onboarding Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-ios-dual-versions]
    if: always() && !failure() && !cancelled()
    with:
      platform: ios
      build_type: onboarding
      device_matrix: ${{ needs.read-device-matrix.outputs.ios_matrix }}
      browserstack_app_url: ${{ needs.trigger-ios-dual-versions.outputs.without-srp-browserstack-url || inputs.browserstack_app_url_ios }}
      app_version: ${{ needs.trigger-ios-dual-versions.outputs.without-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
    secrets:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

  aggregate-results:
    name: Aggregate All Test Results
    runs-on: ubuntu-latest
    needs: [run-android-imported-wallet-tests, run-android-onboarding-tests, run-ios-imported-wallet-tests, run-ios-onboarding-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: *-test-results-*
          path: ./test-results
          merge-multiple: true
      
      - name: Run aggregation script
        run: |
          echo "Processing all test results..."
          echo "Running aggregation script..."
          node scripts/aggregate-performance-reports.mjs
          echo "Aggregation completed"
      
      - name: Upload Final Combined Results
        uses: actions/upload-artifact@v4
        with:
          name: final-combined-performance-results
          path: |
            appwright/aggregated-reports/
          if-no-files-found: ignore
          retention-days: 30

  slack-notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: [run-android-imported-wallet-tests, run-android-onboarding-tests, run-ios-imported-wallet-tests, run-ios-onboarding-tests, aggregate-results]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Aggregated Results
        uses: actions/download-artifact@v4
        with:
          name: final-combined-performance-results
          path: ./aggregated-reports
      
      - name: Generate Test Summary
        id: summary
        run: |
          if [ -f "aggregated-reports/summary.json" ]; then
            totalTests=$(jq -r '.totalTests // 0' aggregated-reports/summary.json)
            androidDevices=$(jq -r '.platforms.android // 0' aggregated-reports/summary.json)
            iosDevices=$(jq -r '.platforms.ios // 0' aggregated-reports/summary.json)
            androidTests=$(jq -r '.testsByPlatform.android // 0' aggregated-reports/summary.json)
            iosTests=$(jq -r '.testsByPlatform.ios // 0' aggregated-reports/summary.json)
            deviceDetails=$(jq -r '.devices[] | "‚Ä¢ \(.platform | ascii_upcase): \(.device) (\(.testCount) tests)"' aggregated-reports/summary.json | tr '\n' '\n')
            echo "totalTests=$totalTests" >> $GITHUB_OUTPUT
            echo "androidDevices=$androidDevices" >> $GITHUB_OUTPUT
            echo "iosDevices=$iosDevices" >> $GITHUB_OUTPUT
            echo "androidTests=$androidTests" >> $GITHUB_OUTPUT
            echo "iosTests=$iosTests" >> $GITHUB_OUTPUT
            echo "deviceDetails<<EOF" >> $GITHUB_OUTPUT
            echo "$deviceDetails" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "totalTests=0" >> $GITHUB_OUTPUT
            echo "androidDevices=0" >> $GITHUB_OUTPUT
            echo "iosDevices=0" >> $GITHUB_OUTPUT
            echo "androidTests=0" >> $GITHUB_OUTPUT
            echo "iosTests=0" >> $GITHUB_OUTPUT
            echo "deviceDetails=No device details available" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a
        with:
          webhook: ${{ secrets.PERFORMANCE_E2E_SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "üöÄ Performance E2E Tests Completed",
              "blocks": [
                {"type": "header", "text": {"type": "plain_text", "text": "üöÄ Performance E2E Tests Completed"}},
                {"type": "section", "fields": [
                  {"type": "mrkdwn", "text": "*Status:* ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"},
                  {"type": "mrkdwn", "text": "*Total Tests:* ${{ steps.summary.outputs.totalTests }}"},
                  {"type": "mrkdwn", "text": "*Devices:* ${{ steps.summary.outputs.androidDevices }} Android, ${{ steps.summary.outputs.iosDevices }} iOS"},
                  {"type": "mrkdwn", "text": "*Tests:* ${{ steps.summary.outputs.androidTests }} Android, ${{ steps.summary.outputs.iosTests }} iOS"}
                ]},
                {"type": "section", "text": {"type": "mrkdwn", "text": "*Device Results:*\n${{ steps.summary.outputs.deviceDetails }}"}},
                {"type": "section", "text": {"type": "mrkdwn", "text": "*Build Info:*\n‚Ä¢ Commit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\n‚Ä¢ Branch: `${{ github.ref_name }}`\n‚Ä¢ Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>\n‚Ä¢ Reports: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Download Artifacts>"}}
              ]
            }