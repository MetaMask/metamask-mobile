name: Performance E2E Test Manual WorkFlow

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Optional description for this test run'
        required: false
        type: string
      browserstack_app_url_android:
        description: 'BrowserStack Android App URL (bs://...)'
        required: false
        type: string
      browserstack_app_url_ios:
        description: 'BrowserStack iOS App URL (bs://...)'
        required: false
        type: string

env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

jobs:
  read-device-matrix:
    name: Read Device Matrix
    runs-on: ubuntu-latest
    outputs:
      android_matrix: ${{ steps.read-matrix.outputs.android_matrix }}
      ios_matrix: ${{ steps.read-matrix.outputs.ios_matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Read device matrix
        id: read-matrix
        run: |
          echo "Reading device matrix from appwright/device-matrix.json"
          android_matrix=$(jq -c '.android' appwright/device-matrix.json)
          ios_matrix=$(jq -c '.ios' appwright/device-matrix.json)
          echo "android_matrix=$android_matrix" >> $GITHUB_OUTPUT
          echo "ios_matrix=$ios_matrix" >> $GITHUB_OUTPUT
          echo "Android devices: $(echo $android_matrix | jq length)"
          echo "iOS devices: $(echo $ios_matrix | jq length)"

  trigger-android-dual-versions:
    name: Trigger Android Dual Versions and Extract BrowserStack URLs
    uses: ./.github/workflows/build-android-upload-to-browserstack.yml
    # Only run if BrowserStack URLs are not provided
    if: ${{ !inputs.browserstack_app_url_android }}
    secrets: inherit

  trigger-ios-dual-versions:
    name: Trigger iOS Dual Versions and Extract BrowserStack URLs
    uses: ./.github/workflows/build-ios-upload-to-browserstack.yml
    # Only run if BrowserStack URLs are not provided
    if: ${{ !inputs.browserstack_app_url_ios }}
    secrets: inherit

  run-android-imported-wallet-tests:
    name: Run Android Imported Wallet Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-android-dual-versions]
    if: always() && !failure() && !cancelled()
    with:
      platform: android
      build_type: imported-wallet
      device_matrix: ${{ needs.read-device-matrix.outputs.android_matrix }}
      browserstack_app_url: ${{ needs.trigger-android-dual-versions.outputs.with-srp-browserstack-url || inputs.browserstack_app_url_android }}
      app_version: ${{ needs.trigger-android-dual-versions.outputs.with-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
    secrets:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

  run-android-onboarding-tests:
    name: Run Android Onboarding Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-android-dual-versions]
    if: always() && !failure() && !cancelled()
    with:
      platform: android
      build_type: onboarding
      device_matrix: ${{ needs.read-device-matrix.outputs.android_matrix }}
      browserstack_app_url: ${{ needs.trigger-android-dual-versions.outputs.without-srp-browserstack-url || inputs.browserstack_app_url_android }}
      app_version: ${{ needs.trigger-android-dual-versions.outputs.without-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
    secrets:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

  run-ios-imported-wallet-tests:
    name: Run iOS Imported Wallet Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-ios-dual-versions]
    if: always() && !failure() && !cancelled()
    with:
      platform: ios
      build_type: imported-wallet
      device_matrix: ${{ needs.read-device-matrix.outputs.ios_matrix }}
      browserstack_app_url: ${{ needs.trigger-ios-dual-versions.outputs.with-srp-browserstack-url || inputs.browserstack_app_url_ios }}
      app_version: ${{ needs.trigger-ios-dual-versions.outputs.with-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
    secrets:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

  run-ios-onboarding-tests:
    name: Run iOS Onboarding Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-ios-dual-versions]
    if: always() && !failure() && !cancelled()
    with:
      platform: ios
      build_type: onboarding
      device_matrix: ${{ needs.read-device-matrix.outputs.ios_matrix }}
      browserstack_app_url: ${{ needs.trigger-ios-dual-versions.outputs.without-srp-browserstack-url || inputs.browserstack_app_url_ios }}
      app_version: ${{ needs.trigger-ios-dual-versions.outputs.without-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
    secrets:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

  aggregate-results:
    name: Aggregate All Test Results
    runs-on: ubuntu-latest
    needs: [run-android-imported-wallet-tests, run-android-onboarding-tests, run-ios-imported-wallet-tests, run-ios-onboarding-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: "*-test-results-*"
          path: ./test-results
          merge-multiple: true
      
      - name: Run aggregation script
        run: |
          echo "Processing all test results..."
          echo "Running aggregation script..."
          node scripts/aggregate-performance-reports.mjs
          echo "Aggregation completed"
      
      - name: Upload Final Combined Results
        uses: actions/upload-artifact@v4
        with:
          name: final-combined-performance-results
          path: |
            appwright/aggregated-reports/
          if-no-files-found: ignore
          retention-days: 30

  slack-notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: [run-android-imported-wallet-tests, run-android-onboarding-tests, run-ios-imported-wallet-tests, run-ios-onboarding-tests, aggregate-results]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Aggregated Results
        uses: actions/download-artifact@v4
        with:
          name: final-combined-performance-results
          path: ./aggregated-reports
      
      - name: Generate Test Summary
        id: summary
        run: |
          if [ -f "aggregated-reports/summary.json" ]; then
            # Get device information
            androidDevices=$(jq -r '.devices[] | select(.platform == "Android") | "  • \(.device) (\(.osVersion))"' aggregated-reports/summary.json | tr '\n' '\n')
            iosDevices=$(jq -r '.devices[] | select(.platform == "iOS") | "  • \(.device) (\(.osVersion))"' aggregated-reports/summary.json | tr '\n' '\n')
            
            # Get test counts
            androidTests=$(jq -r '.testsByPlatform.android // 0' aggregated-reports/summary.json)
            iosTests=$(jq -r '.testsByPlatform.ios // 0' aggregated-reports/summary.json)
            
            # Determine status (simplified - you can enhance this logic)
            androidStatus=":white_check_mark: PASSED"
            iosStatus=":white_check_mark: PASSED"
            
            # Create formatted summary
            SUMMARY="Performance E2E Tests\n"
            SUMMARY+="---------------\n"
            SUMMARY+="Devices Tested:\n"
            SUMMARY+="• Android:\n"
            SUMMARY+="$androidDevices\n"
            SUMMARY+="• iOS:\n"
            SUMMARY+="$iosDevices\n"
            SUMMARY+="---------------\n"
            SUMMARY+="Test Results:\n"
            SUMMARY+="• Android Tests: $androidStatus\n"
            SUMMARY+="• iOS Tests: $iosStatus\n"
            SUMMARY+="---------------\n"
            SUMMARY+="Build Info:\n"
            SUMMARY+="• Commit Hash: \`${{ github.sha }}\`\n"
            SUMMARY+="• Branch: \`${{ github.ref_name }}\`\n"
            SUMMARY+="---------------\n"
            SUMMARY+="• <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Full Results>\n"
            SUMMARY+="• <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Download Consolidated Report>"
            
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            echo "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "summary=Performance E2E Tests\n---------------\nNo test results available" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a
        with:
          webhook: ${{ secrets.PERFORMANCE_E2E_SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "${{ steps.summary.outputs.summary }}"
            }