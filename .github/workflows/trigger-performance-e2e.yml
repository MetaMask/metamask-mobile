name: Performance E2E Test Manual WorkFlow

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Optional description for this test run'
        required: false
        type: string

      browserstack_app_url_android_onboarding:
        description: 'BrowserStack Android Onboarding App URL (bs://...)'
        required: false
        type: string
      browserstack_app_url_ios_onboarding:
        description: 'BrowserStack iOS Onboarding App URL (bs://...)'
        required: false
        type: string
      browserstack_app_url_android_imported_wallet:
        description: 'BrowserStack Android Imported Wallet App URL (bs://...)'
        required: false
        type: string
      browserstack_app_url_ios_imported_wallet:
        description: 'BrowserStack iOS Imported Wallet App URL (bs://...)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write


env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  MM_TEST_ACCOUNT_SRP: ${{ secrets.MM_TEST_ACCOUNT_SRP }}
  TEST_SRP_1: ${{ secrets.TEST_SRP_1 }}
  TEST_SRP_2: ${{ secrets.TEST_SRP_2 }}
  TEST_SRP_3: ${{ secrets.TEST_SRP_3 }}
  E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
  DISABLE_VIDEO_DOWNLOAD: true

jobs:
  read-device-matrix:
    name: Read Device Matrix
    runs-on: ubuntu-latest
    outputs:
      android_matrix: ${{ steps.read-matrix.outputs.android_matrix }}
      ios_matrix: ${{ steps.read-matrix.outputs.ios_matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Read device matrix
        id: read-matrix
        run: |
          echo "Reading device matrix from appwright/device-matrix.json"
          # Extract Android devices
          ANDROID_MATRIX=$(jq -r ".android_devices | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
          # Extract iOS devices
          IOS_MATRIX=$(jq -r ".ios_devices | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
          
          if [ -n "${{ github.event.inputs.device_matrix }}" ]; then
            # Use custom device matrix from input
            echo "Using custom device matrix from input"
            {
              echo "android=${{ github.event.inputs.device_matrix }}"
              echo "ios=${{ github.event.inputs.device_matrix }}"
            } >> "$GITHUB_OUTPUT"
          else
            # Read from JSON file and filter by category
            echo "Reading device matrix from appwright/device-matrix.json"
            
            # Build jq filter based on category input
            CATEGORY_FILTER=""
            if [ -n "${{ github.event.inputs.device_category }}" ]; then
              CATEGORY_FILTER="| map(select(.category == \"${{ github.event.inputs.device_category }}\"))"
              echo "Filtering devices by category: ${{ github.event.inputs.device_category }}"
            else
              echo "No category filter applied - using all devices"
            fi
            
            # Extract Android devices with optional category filtering
            ANDROID_MATRIX=$(jq -r ".android_devices $CATEGORY_FILTER | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
            # Extract iOS devices with optional category filtering
            IOS_MATRIX=$(jq -r ".ios_devices $CATEGORY_FILTER | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
            
            {
              echo "android=$ANDROID_MATRIX"
              echo "ios=$IOS_MATRIX"
            } >> "$GITHUB_OUTPUT"
            
            echo "Android matrix: $ANDROID_MATRIX"
            echo "iOS matrix: $IOS_MATRIX"
            
            # Validate that we have devices
            ANDROID_COUNT=$(echo "$ANDROID_MATRIX" | jq 'length')
            IOS_COUNT=$(echo "$IOS_MATRIX" | jq 'length')
            
            echo "Found $ANDROID_COUNT Android devices and $IOS_COUNT iOS devices"
            
            if [ "$ANDROID_COUNT" -eq 0 ] && [ "$IOS_COUNT" -eq 0 ]; then
              echo "Error: No devices found matching the criteria"
              if [ -n "${{ github.event.inputs.device_category }}" ]; then
                echo "Try removing the category filter or check if '${{ github.event.inputs.device_category }}' is a valid category"
              fi
              exit 1
            fi
          fi
  android-tests:
    name: Android Tests
    runs-on: ubuntu-latest
    needs: read-device-matrix
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.read-device-matrix.outputs.android_matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies with retry
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 #v3.0.2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: yarn setup
      
      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          project-name: ${{ github.repository }}
      
      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Set Android Test Environment
        run: |
          echo "Setting test environment for device: ${{ matrix.device.name }}"
          {
            echo "android_matrix=$ANDROID_MATRIX"
            echo "ios_matrix=$IOS_MATRIX"
          } >> "$GITHUB_OUTPUT"
          
          yarn run-appwright:android-bs
      
      - name: Upload Android Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 7
  ios-tests:
    name: iOS Tests
    runs-on: ubuntu-latest
    needs: read-device-matrix
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.read-device-matrix.outputs.ios_matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies with retry
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 #v3.0.2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: yarn setup
      
      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          project-name: ${{ github.repository }}
      
      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 15
          echo "BrowserStack Local should be ready now"
      
      - name: Set iOS Test Environment
        run: |
          echo "Setting test environment for device: ${{ matrix.device.name }}"
          {
            echo "BROWSERSTACK_DEVICE=${{ matrix.device.name }}"
            echo "BROWSERSTACK_OS_VERSION=${{ matrix.device.os_version }}"
            echo "BROWSERSTACK_IOS_APP_URL=${{ github.event.inputs.browserstack_app_url_ios }}"
            echo "BROWSERSTACK_BUILD_NAME=iOS-Performance-${{ github.ref_name }}-Branch"
            echo "TEST_SUITE=${{ github.event.inputs.test_suite }}"
          } >> "$GITHUB_ENV"
      
      - name: Run iOS Tests on ${{ matrix.device.name }}
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          echo "=== Testing ${{ matrix.device.name }} (${{ matrix.device.category }}) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          if [ "${{ matrix.device.os_version }}" == "13" ] || [ "${{ matrix.device.os_version }}" == "11" ]; then
            echo "Warning: iOS ${{ matrix.device.os_version }} may not be supported by MetaMask app"
          fi

  set-build-names:
    name: Set Unified BrowserStack Build Names
    runs-on: ubuntu-latest
    outputs:
      android_build_name: ${{ steps.set-builds.outputs.android_build_name }}
      ios_build_name: ${{ steps.set-builds.outputs.ios_build_name }}
    steps:
      - name: Set unified build names
        id: set-builds
        run: |
          echo "android_build_name=Android-Performance-${{ github.ref_name }}-Branch" >> $GITHUB_OUTPUT
          echo "ios_build_name=iOS-Performance-${{ github.ref_name }}-Branch" >> $GITHUB_OUTPUT
          echo "✅ Set unified build names:"
          echo "  Android: Android-Performance-${{ github.ref_name }}-Branch"
          echo "  iOS: iOS-Performance-${{ github.ref_name }}-Branch"

  trigger-android-dual-versions:
    name: Trigger Android Dual Versions and Extract BrowserStack URLs
    uses: ./.github/workflows/build-android-upload-to-browserstack.yml
    # Only run if no Android BrowserStack URLs are provided
    if: ${{ !inputs.browserstack_app_url_android_onboarding && !inputs.browserstack_app_url_android_imported_wallet }}
    secrets: inherit

  trigger-ios-dual-versions:
    name: Trigger iOS Dual Versions and Extract BrowserStack URLs
    uses: ./.github/workflows/build-ios-upload-to-browserstack.yml
    # Only run if no iOS BrowserStack URLs are provided
    if: ${{ !inputs.browserstack_app_url_ios_onboarding && !inputs.browserstack_app_url_ios_imported_wallet }}
    secrets: inherit


  # =============================================================================
  # PHASE 1: ONBOARDING TESTS (Run First)
  # =============================================================================
  
  run-android-onboarding-tests:
    name: Run Android Onboarding Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-android-dual-versions, set-build-names]
    if: always() && !failure() && !cancelled() && (needs.trigger-android-dual-versions.result == 'skipped' || needs.trigger-android-dual-versions.result == 'success') && (inputs.browserstack_app_url_android_onboarding || needs.trigger-android-dual-versions.result == 'success')
    with:
      platform: android
      build_type: onboarding
      device_matrix: ${{ needs.read-device-matrix.outputs.android_matrix }}
      browserstack_app_url: ${{ needs.trigger-android-dual-versions.outputs.without-srp-browserstack-url || inputs.browserstack_app_url_android_onboarding }}
      app_version: ${{ needs.trigger-android-dual-versions.outputs.without-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
      browserstack_build_name: ${{ needs.set-build-names.outputs.android_build_name }}
    secrets: inherit

  run-ios-onboarding-tests:
    name: Run iOS Onboarding Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-ios-dual-versions, set-build-names]
    if: always() && !failure() && !cancelled() && (needs.trigger-ios-dual-versions.result == 'skipped' || needs.trigger-ios-dual-versions.result == 'success') && (inputs.browserstack_app_url_ios_onboarding || needs.trigger-ios-dual-versions.result == 'success')
    with:
      platform: ios
      build_type: onboarding
      device_matrix: ${{ needs.read-device-matrix.outputs.ios_matrix }}
      browserstack_app_url: ${{ needs.trigger-ios-dual-versions.outputs.without-srp-browserstack-url || inputs.browserstack_app_url_ios_onboarding }}
      app_version: ${{ needs.trigger-ios-dual-versions.outputs.without-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
      browserstack_build_name: ${{ needs.set-build-names.outputs.ios_build_name }}
    secrets: inherit

  # =============================================================================
  # PHASE 2: IMPORTED WALLET TESTS (Run After Onboarding Complete)
  # =============================================================================
  
  wait-for-onboarding-completion:
    name: Wait for Onboarding Completion
    runs-on: ubuntu-latest
    needs: [run-android-onboarding-tests, run-ios-onboarding-tests]
    if: always()
    steps:
      - name: Wait for onboarding tests to complete
        run: |
          echo "Onboarding tests have completed (success or failure)"
          echo "Proceeding with imported wallet tests..."
  
  run-android-imported-wallet-tests:
    name: Run Android Imported Wallet Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-android-dual-versions, wait-for-onboarding-completion, set-build-names]
    if: always() && (needs.trigger-android-dual-versions.result == 'skipped' || needs.trigger-android-dual-versions.result == 'success') && (inputs.browserstack_app_url_android_imported_wallet || needs.trigger-android-dual-versions.result == 'success')
    with:
      platform: android
      build_type: imported-wallet
      device_matrix: ${{ needs.read-device-matrix.outputs.android_matrix }}
      browserstack_app_url: ${{ needs.trigger-android-dual-versions.outputs.with-srp-browserstack-url || inputs.browserstack_app_url_android_imported_wallet }}
      app_version: ${{ needs.trigger-android-dual-versions.outputs.with-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
      browserstack_build_name: ${{ needs.set-build-names.outputs.android_build_name }}
    secrets: inherit

  run-ios-imported-wallet-tests:
    name: Run iOS Imported Wallet Tests
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-ios-dual-versions, wait-for-onboarding-completion, set-build-names]
    if: always() && (needs.trigger-ios-dual-versions.result == 'skipped' || needs.trigger-ios-dual-versions.result == 'success') && (inputs.browserstack_app_url_ios_imported_wallet || needs.trigger-ios-dual-versions.result == 'success')
    with:
      platform: ios
      build_type: imported-wallet
      device_matrix: ${{ needs.read-device-matrix.outputs.ios_matrix }}
      browserstack_app_url: ${{ needs.trigger-ios-dual-versions.outputs.with-srp-browserstack-url || inputs.browserstack_app_url_ios_imported_wallet }}
      app_version: ${{ needs.trigger-ios-dual-versions.outputs.with-srp-version || 'Manual-Input' }}
      branch_name: ${{ github.ref_name }}
      browserstack_build_name: ${{ needs.set-build-names.outputs.ios_build_name }}
    secrets: inherit

  aggregate-results:
    name: Aggregate All Test Results
    runs-on: ubuntu-latest
    needs: [run-android-imported-wallet-tests, run-android-onboarding-tests, run-ios-imported-wallet-tests, run-ios-onboarding-tests, wait-for-onboarding-completion]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: "*-test-results-*"
          path: ./test-results
          merge-multiple: true
      
      - name: Run aggregation script
        run: |
          echo "Processing all test results..."
          echo "Running aggregation script..."
          node scripts/aggregate-performance-reports.mjs
          echo "Aggregation completed"
      
      - name: Upload Final Combined Results
        uses: actions/upload-artifact@v4
        with:
          name: aggregated-reports
          path: |
            appwright/aggregated-reports/
          if-no-files-found: ignore
          retention-days: 30

  slack-notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: [run-android-imported-wallet-tests, run-android-onboarding-tests, run-ios-imported-wallet-tests, run-ios-onboarding-tests, aggregate-results]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Aggregated Results
        uses: actions/download-artifact@v4
        with:
          name: aggregated-reports
          path: ./aggregated-reports
      
      - name: Generate Test Summary
        id: summary
        run: |
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          ./scripts/generate-slack-summary.sh aggregated-reports/summary.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      # - name: Send Slack Notification
      #   uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a
      #   with:
      #     webhook: ${{ secrets.PERFORMANCE_E2E_SLACK_WEBHOOK_URL }}
      #     webhook-type: incoming-webhook
      #     payload: |
      #       {
      #         "text": "${{ steps.summary.outputs.summary }}"
      #       }