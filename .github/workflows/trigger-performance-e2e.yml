name: Performance E2E Test Manual WorkFlow

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Optional description for this test run'
        required: false
        type: string
      browserstack_app_url_android:
        description: 'BrowserStack Android App URL (bs://...)'
        required: false
        type: string
      browserstack_app_url_ios:
        description: 'BrowserStack iOS App URL (bs://...)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write


env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  MM_TEST_ACCOUNT_SRP: ${{ secrets.MM_TEST_ACCOUNT_SRP }}
  TEST_SRP_1: ${{ secrets.TEST_SRP_1 }}
  TEST_SRP_2: ${{ secrets.TEST_SRP_2 }}
  TEST_SRP_3: ${{ secrets.TEST_SRP_3 }}
  E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
  DISABLE_VIDEO_DOWNLOAD: true

jobs:
  read-device-matrix:
    name: Read Device Matrix
    runs-on: ubuntu-latest
    outputs:
      android_matrix: ${{ steps.read-matrix.outputs.android_matrix }}
      ios_matrix: ${{ steps.read-matrix.outputs.ios_matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Read device matrix
        id: read-matrix
        run: |
          echo "Reading device matrix from appwright/device-matrix.json"
          # Extract Android devices
          ANDROID_MATRIX=$(jq -r ".android_devices | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
          # Extract iOS devices
          IOS_MATRIX=$(jq -r ".ios_devices | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
          
          {
            echo "android_matrix=$ANDROID_MATRIX"
            echo "ios_matrix=$IOS_MATRIX"
          } >> "$GITHUB_OUTPUT"
          
          echo "Android matrix: $ANDROID_MATRIX"
          echo "iOS matrix: $IOS_MATRIX"
          
          # Validate that we have devices
          ANDROID_COUNT=$(echo "$ANDROID_MATRIX" | jq 'length')
          IOS_COUNT=$(echo "$IOS_MATRIX" | jq 'length')
          
          echo "Found $ANDROID_COUNT Android devices and $IOS_COUNT iOS devices"
          
          if [ "$ANDROID_COUNT" -eq 0 ] && [ "$IOS_COUNT" -eq 0 ]; then
            echo "Error: No devices found in device-matrix.json"
            exit 1
          fi

  trigger-android-dual-versions:
    name: Trigger Android Dual Versions and Extract BrowserStack URLs
    uses: ./.github/workflows/build-android-upload-to-browserstack.yml
    # Only run if BrowserStack URLs are not provided
    if: ${{ !inputs.browserstack_app_url_android }}
    secrets: inherit

  trigger-ios-dual-versions:
    name: Trigger iOS Dual Versions and Extract BrowserStack URLs
    uses: ./.github/workflows/build-ios-upload-to-browserstack.yml
    # Only run if BrowserStack URLs are not provided
    if: ${{ !inputs.browserstack_app_url_ios }}
    secrets: inherit

  run-performance-tests:
    name: Run ${{ matrix.test_type }} Tests on ${{ matrix.platform }} - ${{ matrix.device.name }}
    uses: ./.github/workflows/performance-test-runner.yml
    needs: [read-device-matrix, trigger-android-dual-versions, trigger-ios-dual-versions]
    if: always() && !failure() && !cancelled()
    strategy:
      fail-fast: false
      matrix:
        include:
          # Android - Imported Wallet Tests
          - platform: android
            device: ${{ fromJson(needs.read-device-matrix.outputs.android_matrix) }}
            test_type: imported-wallet
            browserstack_app_url: ${{ needs.trigger-android-dual-versions.outputs.with-srp-browserstack-url || inputs.browserstack_app_url_android }}
            app_version: ${{ needs.trigger-android-dual-versions.outputs.with-srp-version || 'Manual-Input' }}
          # Android - Onboarding Tests
          - platform: android
            device: ${{ fromJson(needs.read-device-matrix.outputs.android_matrix) }}
            test_type: onboarding
            browserstack_app_url: ${{ needs.trigger-android-dual-versions.outputs.without-srp-browserstack-url || inputs.browserstack_app_url_android }}
            app_version: ${{ needs.trigger-android-dual-versions.outputs.without-srp-version || 'Manual-Input' }}
          # iOS - Imported Wallet Tests
          - platform: ios
            device: ${{ fromJson(needs.read-device-matrix.outputs.ios_matrix) }}
            test_type: imported-wallet
            browserstack_app_url: ${{ needs.trigger-ios-dual-versions.outputs.with-srp-browserstack-url || inputs.browserstack_app_url_ios }}
            app_version: ${{ needs.trigger-ios-dual-versions.outputs.with-srp-version || 'Manual-Input' }}
          # iOS - Onboarding Tests
          - platform: ios
            device: ${{ fromJson(needs.read-device-matrix.outputs.ios_matrix) }}
            test_type: onboarding
            browserstack_app_url: ${{ needs.trigger-ios-dual-versions.outputs.without-srp-browserstack-url || inputs.browserstack_app_url_ios }}
            app_version: ${{ needs.trigger-ios-dual-versions.outputs.without-srp-version || 'Manual-Input' }}
    with:
      platform: ${{ matrix.platform }}
      build_type: ${{ matrix.test_type }}
      device_matrix: ${{ matrix.device }}
      browserstack_app_url: ${{ matrix.browserstack_app_url }}
      app_version: ${{ matrix.app_version }}
      branch_name: ${{ github.ref_name }}
    secrets: inherit

  aggregate-results:
    name: Aggregate All Test Results
    runs-on: ubuntu-latest
    needs: [run-performance-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: "*-test-results-*"
          path: ./test-results
          merge-multiple: true
      
      - name: Run aggregation script
        run: |
          echo "Processing all test results..."
          echo "Running aggregation script..."
          node scripts/aggregate-performance-reports.mjs
          echo "Aggregation completed"
      
      - name: Upload Final Combined Results
        uses: actions/upload-artifact@v4
        with:
          name: final-combined-performance-results
          path: |
            appwright/aggregated-reports/
          if-no-files-found: ignore
          retention-days: 30

  slack-notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: [run-performance-tests, aggregate-results]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Aggregated Results
        uses: actions/download-artifact@v4
        with:
          name: final-combined-performance-results
          path: ./aggregated-reports
      
      - name: Generate Test Summary
        id: summary
        run: |
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          ./scripts/generate-slack-summary.sh aggregated-reports/summary.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      # - name: Send Slack Notification
      #   uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a
      #   with:
      #     webhook: ${{ secrets.PERFORMANCE_E2E_SLACK_WEBHOOK_URL }}
      #     webhook-type: incoming-webhook
      #     payload: |
      #       {
      #         "text": "${{ steps.summary.outputs.summary }}"
      #       }