name: Performance E2E Test Manual WorkFlow
on:
  workflow_dispatch:
    inputs:
      info:
        description: 'This workflow runs performance tests on multiple devices for both iOS and Android platforms. Device matrix is automatically read from appwright/device-matrix.json, or you can provide a custom matrix or filter by category.'
        required: false
        type: string
      browserstack_app_url_android:
        description: 'BrowserStack Android App URL (bs://...)'
        required: true
        type: string
      browserstack_app_url_ios:
        description: 'BrowserStack iOS App URL (bs://...)'
        required: true
        type: string
      test_suite:
        description: 'Test suite to run (e.g., **/tests/*.spec.js for all tests)'
        required: false
        default: '**/tests/performance/*.spec.js'
        type: string
      device_matrix:
        description: 'Device matrix JSON string (leave empty to use default from appwright/device-matrix.json)'
        required: false
        type: string
      device_category:
        description: 'Filter devices by category (high, medium, low, or leave empty for all)'
        required: false
        type: string
permissions:
  contents: read
  id-token: write
env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  MM_TEST_ACCOUNT_SRP: ${{ secrets.MM_TEST_ACCOUNT_SRP }}
  TEST_SRP_1: ${{ secrets.TEST_SRP_1 }}
  TEST_SRP_2: ${{ secrets.TEST_SRP_2 }}
  TEST_SRP_3: ${{ secrets.TEST_SRP_3 }}
  DISABLE_VIDEO_DOWNLOAD: true

jobs:
  # Job to read device matrix from JSON file
  read-device-matrix:
    name: Read Device Matrix
    runs-on: ubuntu-latest
    outputs:
      android_matrix: ${{ steps.matrix.outputs.android }}
      ios_matrix: ${{ steps.matrix.outputs.ios }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Read device matrix
        id: matrix
        run: |
          # This step reads the device matrix from appwright/device-matrix.json
          # You can override this by providing a custom device_matrix input
          # You can also filter devices by category using the device_category input
          
          if [ -n "${{ github.event.inputs.device_matrix }}" ]; then
            # Use custom device matrix from input
            echo "Using custom device matrix from input"
            echo "android=${{ github.event.inputs.device_matrix }}" >> $GITHUB_OUTPUT
            echo "ios=${{ github.event.inputs.device_matrix }}" >> $GITHUB_OUTPUT
          else
            # Read from JSON file and filter by category
            echo "Reading device matrix from appwright/device-matrix.json"
            
            # Build jq filter based on category input
            CATEGORY_FILTER=""
            if [ -n "${{ github.event.inputs.device_category }}" ]; then
              CATEGORY_FILTER="| map(select(.category == \"${{ github.event.inputs.device_category }}\"))"
              echo "Filtering devices by category: ${{ github.event.inputs.device_category }}"
            else
              echo "No category filter applied - using all devices"
            fi
            
            # Extract Android devices with optional category filtering
            ANDROID_MATRIX=$(jq -r ".android_devices $CATEGORY_FILTER | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
            echo "android=$ANDROID_MATRIX" >> "$GITHUB_OUTPUT"
            
            # Extract iOS devices with optional category filtering
            IOS_MATRIX=$(jq -r ".ios_devices $CATEGORY_FILTER | map({name: .name, os_version: .os_version, category: .category}) | tojson" appwright/device-matrix.json)
            echo "ios=$IOS_MATRIX" >> "$GITHUB_OUTPUT"
            
            echo "Android matrix: $ANDROID_MATRIX"
            echo "iOS matrix: $IOS_MATRIX"
            
            # Validate that we have devices
            ANDROID_COUNT=$(echo "$ANDROID_MATRIX" | jq 'length')
            IOS_COUNT=$(echo "$IOS_MATRIX" | jq 'length')
            
            echo "Found $ANDROID_COUNT Android devices and $IOS_COUNT iOS devices"
            
            if [ "$ANDROID_COUNT" -eq 0 ] && [ "$IOS_COUNT" -eq 0 ]; then
              echo "Error: No devices found matching the criteria"
              if [ -n "${{ github.event.inputs.device_category }}" ]; then
                echo "Try removing the category filter or check if '${{ github.event.inputs.device_category }}' is a valid category"
              fi
              exit 1
            fi
          fi
  # Sequential Android Tests on Multiple Devices
  android-tests:
    name: Android Tests
    runs-on: ubuntu-latest
    needs: read-device-matrix
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.read-device-matrix.outputs.android_matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn setup
      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ github.repository }}-${{ github.ref_name }}-android-${{ matrix.device.name }}-${{ matrix.device.os_version }}-${{ github.run_number }}
          project-name: ${{ github.repository }}
      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Set Android Test Environment
        run: |
          echo "Setting test environment for device: ${{ matrix.device.name }}"
          echo "BROWSERSTACK_DEVICE=${{ matrix.device.name }}" >> "$GITHUB_ENV"
          echo "BROWSERSTACK_OS_VERSION=${{ matrix.device.os_version }}" >> "$GITHUB_ENV"
          echo "BROWSERSTACK_ANDROID_APP_URL=${{ github.event.inputs.browserstack_app_url_android }}" >> "$GITHUB_ENV"
          echo "BROWSERSTACK_BUILD_NAME=Android-Performance-${{ github.ref_name }}-Branch" >> "$GITHUB_ENV"
          echo "TEST_PLATFORM=android" >> "$GITHUB_ENV"
          echo "TEST_SUITE=${{ github.event.inputs.test_suite }}" >> "$GITHUB_ENV"
      
      - name: Run Android Tests on ${{ matrix.device.name }}
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          echo "=== Testing ${{ matrix.device.name }} (${{ matrix.device.category }}) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          
          yarn run-appwright:android-bs
      
      - name: Upload Android Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 7
  # Sequential iOS Tests on Multiple Devices
  ios-tests:
    name: iOS Tests
    runs-on: ubuntu-latest
    needs: read-device-matrix
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.read-device-matrix.outputs.ios_matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn setup
      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ github.repository }}-${{ github.ref_name }}-ios-${{ matrix.device.name }}-${{ matrix.device.os_version }}-${{ github.run_number }}
          project-name: ${{ github.repository }}
      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Set iOS Test Environment
        run: |
          echo "Setting test environment for device: ${{ matrix.device.name }}"
          echo "BROWSERSTACK_DEVICE=${{ matrix.device.name }}" >> "$GITHUB_ENV"
          echo "BROWSERSTACK_OS_VERSION=${{ matrix.device.os_version }}" >> "$GITHUB_ENV"
          echo "BROWSERSTACK_IOS_APP_URL=${{ github.event.inputs.browserstack_app_url_ios }}" >> "$GITHUB_ENV"
          echo "BROWSERSTACK_BUILD_NAME=iOS-Performance-${{ github.ref_name }}-Branch" >> "$GITHUB_ENV"
          echo "TEST_SUITE=${{ github.event.inputs.test_suite }}" >> "$GITHUB_ENV"
      
      - name: Run iOS Tests on ${{ matrix.device.name }}
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          echo "=== Testing ${{ matrix.device.name }} (${{ matrix.device.category }}) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          if [ "${{ matrix.device.os_version }}" == "13" ] || [ "${{ matrix.device.os_version }}" == "11" ]; then
            echo "Warning: iOS ${{ matrix.device.os_version }} may not be supported by MetaMask app"
          fi
          
          yarn run-appwright:ios-bs
      
      - name: Upload iOS Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 7
  # Results Gathering Job
  gather-results:
    name: Gather Test Results
    runs-on: ubuntu-latest
    needs: [read-device-matrix, android-tests, ios-tests]
    if: always()
    
    steps:
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: appwright/test-reports/
      
      - name: Upload Combined Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: combined-reports
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 14
    
      - name: Check Test Results
        run: |
          if [ "${{ needs.android-tests.result }}" == "failure" ] || [ "${{ needs.ios-tests.result }}" == "failure" ]; then
            echo "Some tests failed. Check the individual job results above."
            echo "Note: iOS 13 and iOS 11 failures are expected due to MetaMask app compatibility."
            exit 1
          else
            echo "All test jobs completed successfully!"
          fi