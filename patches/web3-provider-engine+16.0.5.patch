diff --git a/node_modules/web3-provider-engine/PollingBlockTracker.js b/node_modules/web3-provider-engine/PollingBlockTracker.js
new file mode 100644
index 0000000..7dbbf2e
--- /dev/null
+++ b/node_modules/web3-provider-engine/PollingBlockTracker.js
@@ -0,0 +1,89 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.PollingBlockTracker = void 0;
+const json_rpc_random_id_1 = __importDefault(require("json-rpc-random-id"));
+const pify_1 = __importDefault(require("pify"));
+const BaseBlockTracker_1 = require("eth-block-tracker");
+const createRandomId = json_rpc_random_id_1.default();
+const sec = 1000;
+class PollingBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {
+    constructor(opts = {}) {
+        // parse + validate args
+        if (!opts.provider) {
+            throw new Error('PollingBlockTracker - no provider specified.');
+        }
+        super({
+            blockResetDuration: opts.pollingInterval,
+        });
+        // config
+        this._provider = opts.provider;
+        this._pollingInterval = opts.pollingInterval || 20 * sec;
+        this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;
+        this._keepEventLoopActive = opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;
+        this._setSkipCacheFlag = opts.setSkipCacheFlag || false;
+    }
+    // trigger block polling
+    async checkForLatestBlock() {
+        await this._updateLatestBlock();
+        return await this.getLatestBlock();
+    }
+    _start() {
+        this._synchronize().catch((err) => this.emit('error', err));
+    }
+    async _synchronize() {
+        while (this._isRunning) {
+            try {
+                await this._updateLatestBlock();
+                await timeout(this._pollingInterval, !this._keepEventLoopActive);
+            }
+            catch (err) {
+                const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${err.stack}`);
+                try {
+                    // commenting this emit because it's causing noisy unhandled Sentry error
+                    // this will be replaced in network-controller v9
+                    // this.emit('error', newErr);
+                    console.error(newErr);
+                }
+                catch (emitErr) {
+                    console.error(newErr);
+                }
+                await timeout(this._retryTimeout, !this._keepEventLoopActive);
+            }
+        }
+    }
+    async _updateLatestBlock() {
+        // fetch + set latest block
+        const latestBlock = await this._fetchLatestBlock();
+        this._newPotentialLatest(latestBlock);
+    }
+    async _fetchLatestBlock() {
+        const req = {
+            jsonrpc: '2.0',
+            id: createRandomId(),
+            method: 'eth_blockNumber',
+            params: [],
+        };
+        if (this._setSkipCacheFlag) {
+            req.skipCache = true;
+        }
+        const res = await pify_1.default((cb) => this._provider.sendAsync(req, cb))();
+        if (res.error) {
+            throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error}`);
+        }
+        return res.result;
+    }
+}
+exports.PollingBlockTracker = PollingBlockTracker;
+function timeout(duration, unref) {
+    return new Promise((resolve) => {
+        const timeoutRef = setTimeout(resolve, duration);
+        // don't keep process open
+        if (timeoutRef.unref && unref) {
+            timeoutRef.unref();
+        }
+    });
+}
+//# sourceMappingURL=PollingBlockTracker.js.map
\ No newline at end of file
diff --git a/node_modules/web3-provider-engine/index.js b/node_modules/web3-provider-engine/index.js
index 4a22471..93d5450 100644
--- a/node_modules/web3-provider-engine/index.js
+++ b/node_modules/web3-provider-engine/index.js
@@ -1,7 +1,7 @@
 const EventEmitter = require('events').EventEmitter
 const inherits = require('util').inherits
 const ethUtil = require('ethereumjs-util')
-const { PollingBlockTracker } = require('eth-block-tracker')
+const { PollingBlockTracker } = require('./PollingBlockTracker')
 const map = require('async/map')
 const eachSeries = require('async/eachSeries')
 const Stoplight = require('./util/stoplight.js')
@@ -48,8 +48,29 @@ Web3ProviderEngine.prototype.start = function(cb = noop){
 
   // on new block, request block body and emit as events
   self._blockTracker.on('latest', (blockNumber) => {
+    // PATCH NOTE: These changes are needed temporarily to maintain
+    // compatibility between web3-provider-engine and
+    // @metamask/network-controller v6, v7, and v8. This can be dropped when
+    // we update to @metamask/network-controller v9 (core v53).
+    //
+    // Specifically, this is meant to prevent an error that happens upon
+    // switching networks. The network controller uses a proxied provider and
+    // block tracker as of v6, which migrates all event listeners to the new
+    // provider when the network is switched. In this case, we don't want
+    // this event listener migrated, but there is no straightforward way to
+    // prevent that. Instead we have made it a no-op after switching.
+    if (self._running === false) {
+      return;
+    }
     // get block body
     self._getBlockByNumberWithRetry(blockNumber, (err, block) => {
+      // PATCH NOTE: See the patch note above for more context.
+      // This additional condition prevents console warnings in the case where
+      // an `eth_getBlockByNumber` request was in-flight when the network was
+      // switched.
+      if (self._running === false) {
+        return;
+      }
       if (err) {
         this.emit('error', err)
         return
