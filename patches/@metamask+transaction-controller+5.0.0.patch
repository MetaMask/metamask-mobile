diff --git a/node_modules/@metamask/transaction-controller/dist/.patch.txt b/node_modules/@metamask/transaction-controller/dist/.patch.txt
new file mode 100644
index 0000000..550de56
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/.patch.txt
@@ -0,0 +1,7 @@
+PATCH GENERATED FROM MetaMask/core branch: refactor/transaction-controller-patch-mobile-5
+This patch backports various transaction controller features from the main branch of MetaMask/core
+Steps to update patch:
+* Create a new core branch from: refactor/transaction-controller-patch-mobile-5
+* Run "yarn build" in the core monorepo
+* Run "yarn patch:tx <core-directory>" in the mobile repo
+* Once the new patch is merged, add your changes to: refactor/transaction-controller-patch-mobile-5
diff --git a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts
new file mode 100644
index 0000000..7637754
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts
@@ -0,0 +1,14 @@
+import type { RemoteTransactionSource, RemoteTransactionSourceRequest, TransactionMeta } from './types';
+/**
+ * A RemoteTransactionSource that fetches transaction data from Etherscan.
+ */
+export declare class EtherscanRemoteTransactionSource implements RemoteTransactionSource {
+    #private;
+    constructor({ apiKey, includeTokenTransfers, }?: {
+        apiKey?: string;
+        includeTokenTransfers?: boolean;
+    });
+    isSupportedNetwork(chainId: string, _networkId: string): boolean;
+    fetchTransactions(request: RemoteTransactionSourceRequest): Promise<TransactionMeta[]>;
+}
+//# sourceMappingURL=EtherscanRemoteTransactionSource.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js
new file mode 100644
index 0000000..ef97d13
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js
@@ -0,0 +1,100 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+    if (kind === "m") throw new TypeError("Private method is not writable");
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var _EtherscanRemoteTransactionSource_instances, _EtherscanRemoteTransactionSource_apiKey, _EtherscanRemoteTransactionSource_includeTokenTransfers, _EtherscanRemoteTransactionSource_normalizeTransaction, _EtherscanRemoteTransactionSource_normalizeTokenTransaction, _EtherscanRemoteTransactionSource_normalizeTransactionBase;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.EtherscanRemoteTransactionSource = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const ethereumjs_util_1 = require("ethereumjs-util");
+const uuid_1 = require("uuid");
+const constants_1 = require("./constants");
+const etherscan_1 = require("./etherscan");
+const types_1 = require("./types");
+/**
+ * A RemoteTransactionSource that fetches transaction data from Etherscan.
+ */
+class EtherscanRemoteTransactionSource {
+    constructor({ apiKey, includeTokenTransfers, } = {}) {
+        _EtherscanRemoteTransactionSource_instances.add(this);
+        _EtherscanRemoteTransactionSource_apiKey.set(this, void 0);
+        _EtherscanRemoteTransactionSource_includeTokenTransfers.set(this, void 0);
+        __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_apiKey, apiKey, "f");
+        __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_includeTokenTransfers, includeTokenTransfers !== null && includeTokenTransfers !== void 0 ? includeTokenTransfers : true, "f");
+    }
+    isSupportedNetwork(chainId, _networkId) {
+        return Object.keys(constants_1.ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);
+    }
+    fetchTransactions(request) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const etherscanRequest = Object.assign(Object.assign({}, request), { apiKey: __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_apiKey, "f"), chainId: request.currentChainId });
+            const transactionPromise = (0, etherscan_1.fetchEtherscanTransactions)(etherscanRequest);
+            const tokenTransactionPromise = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_includeTokenTransfers, "f")
+                ? (0, etherscan_1.fetchEtherscanTokenTransactions)(etherscanRequest)
+                : Promise.resolve({
+                    result: [],
+                });
+            const [etherscanTransactions, etherscanTokenTransactions] = yield Promise.all([transactionPromise, tokenTransactionPromise]);
+            const chainIdDecimalString = parseInt(request.currentChainId, 16).toString();
+            const transactions = etherscanTransactions.result.map((tx) => __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransaction).call(this, tx, request.currentNetworkId, chainIdDecimalString));
+            const tokenTransactions = etherscanTokenTransactions.result.map((tx) => __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTokenTransaction).call(this, tx, request.currentNetworkId, chainIdDecimalString));
+            return [...transactions, ...tokenTransactions];
+        });
+    }
+}
+exports.EtherscanRemoteTransactionSource = EtherscanRemoteTransactionSource;
+_EtherscanRemoteTransactionSource_apiKey = new WeakMap(), _EtherscanRemoteTransactionSource_includeTokenTransfers = new WeakMap(), _EtherscanRemoteTransactionSource_instances = new WeakSet(), _EtherscanRemoteTransactionSource_normalizeTransaction = function _EtherscanRemoteTransactionSource_normalizeTransaction(txMeta, currentNetworkId, currentChainId) {
+    const base = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransactionBase).call(this, txMeta, currentNetworkId, currentChainId);
+    return Object.assign(Object.assign(Object.assign({}, base), { transaction: Object.assign(Object.assign({}, base.transaction), { data: txMeta.input }) }), (txMeta.isError === '0'
+        ? { status: types_1.TransactionStatus.confirmed }
+        : {
+            error: new Error('Transaction failed'),
+            status: types_1.TransactionStatus.failed,
+        }));
+}, _EtherscanRemoteTransactionSource_normalizeTokenTransaction = function _EtherscanRemoteTransactionSource_normalizeTokenTransaction(txMeta, currentNetworkId, currentChainId) {
+    const base = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransactionBase).call(this, txMeta, currentNetworkId, currentChainId);
+    return Object.assign(Object.assign({}, base), { isTransfer: true, transferInformation: {
+            contractAddress: txMeta.contractAddress,
+            decimals: Number(txMeta.tokenDecimal),
+            symbol: txMeta.tokenSymbol,
+        } });
+}, _EtherscanRemoteTransactionSource_normalizeTransactionBase = function _EtherscanRemoteTransactionSource_normalizeTransactionBase(txMeta, currentNetworkId, currentChainId) {
+    const time = parseInt(txMeta.timeStamp, 10) * 1000;
+    return {
+        blockNumber: txMeta.blockNumber,
+        chainId: currentChainId,
+        id: (0, uuid_1.v1)({ msecs: time }),
+        networkID: currentNetworkId,
+        status: types_1.TransactionStatus.confirmed,
+        time,
+        transaction: {
+            from: txMeta.from,
+            gas: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gas)),
+            gasPrice: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasPrice)),
+            gasUsed: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasUsed)),
+            nonce: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.nonce)),
+            to: txMeta.to,
+            value: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.value)),
+        },
+        transactionHash: txMeta.hash,
+        verifiedOnBlockchain: false,
+    };
+};
+//# sourceMappingURL=EtherscanRemoteTransactionSource.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts
new file mode 100644
index 0000000..5e1b7fc
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts
@@ -0,0 +1,23 @@
+/// <reference types="node" />
+import EventEmitter from 'events';
+import type { BlockTrackerProxy, NetworkState } from '@metamask/network-controller';
+import type { RemoteTransactionSource, TransactionMeta } from './types';
+export declare class IncomingTransactionHelper {
+    #private;
+    hub: EventEmitter;
+    constructor({ blockTracker, getCurrentAccount, getLastFetchedBlockNumbers, getLocalTransactions, getNetworkState, isEnabled, remoteTransactionSource, transactionLimit, updateTransactions, }: {
+        blockTracker: BlockTrackerProxy;
+        getCurrentAccount: () => string;
+        getNetworkState: () => NetworkState;
+        getLastFetchedBlockNumbers: () => Record<string, number>;
+        getLocalTransactions?: () => TransactionMeta[];
+        isEnabled?: () => boolean;
+        remoteTransactionSource: RemoteTransactionSource;
+        transactionLimit?: number;
+        updateTransactions?: boolean;
+    });
+    start(): void;
+    stop(): void;
+    update(latestBlockNumberHex?: string): Promise<void>;
+}
+//# sourceMappingURL=IncomingTransactionHelper.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js
new file mode 100644
index 0000000..b68ef90
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js
@@ -0,0 +1,192 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+    if (kind === "m") throw new TypeError("Private method is not writable");
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+var _IncomingTransactionHelper_instances, _IncomingTransactionHelper_blockTracker, _IncomingTransactionHelper_getCurrentAccount, _IncomingTransactionHelper_getLastFetchedBlockNumbers, _IncomingTransactionHelper_getLocalTransactions, _IncomingTransactionHelper_getNetworkState, _IncomingTransactionHelper_isEnabled, _IncomingTransactionHelper_isRunning, _IncomingTransactionHelper_mutex, _IncomingTransactionHelper_onLatestBlock, _IncomingTransactionHelper_remoteTransactionSource, _IncomingTransactionHelper_transactionLimit, _IncomingTransactionHelper_updateTransactions, _IncomingTransactionHelper_sortTransactionsByTime, _IncomingTransactionHelper_getNewTransactions, _IncomingTransactionHelper_getUpdatedTransactions, _IncomingTransactionHelper_isTransactionOutdated, _IncomingTransactionHelper_getFromBlock, _IncomingTransactionHelper_updateLastFetchedBlockNumber, _IncomingTransactionHelper_getBlockNumberKey, _IncomingTransactionHelper_canStart, _IncomingTransactionHelper_getCurrentChainId, _IncomingTransactionHelper_getCurrentNetworkId;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.IncomingTransactionHelper = void 0;
+const events_1 = __importDefault(require("events"));
+const async_mutex_1 = require("async-mutex");
+const UPDATE_CHECKS = [
+    (txMeta) => txMeta.status,
+    (txMeta) => txMeta.transaction.gasUsed,
+];
+class IncomingTransactionHelper {
+    constructor({ blockTracker, getCurrentAccount, getLastFetchedBlockNumbers, getLocalTransactions, getNetworkState, isEnabled, remoteTransactionSource, transactionLimit, updateTransactions, }) {
+        _IncomingTransactionHelper_instances.add(this);
+        _IncomingTransactionHelper_blockTracker.set(this, void 0);
+        _IncomingTransactionHelper_getCurrentAccount.set(this, void 0);
+        _IncomingTransactionHelper_getLastFetchedBlockNumbers.set(this, void 0);
+        _IncomingTransactionHelper_getLocalTransactions.set(this, void 0);
+        _IncomingTransactionHelper_getNetworkState.set(this, void 0);
+        _IncomingTransactionHelper_isEnabled.set(this, void 0);
+        _IncomingTransactionHelper_isRunning.set(this, void 0);
+        _IncomingTransactionHelper_mutex.set(this, new async_mutex_1.Mutex());
+        _IncomingTransactionHelper_onLatestBlock.set(this, void 0);
+        _IncomingTransactionHelper_remoteTransactionSource.set(this, void 0);
+        _IncomingTransactionHelper_transactionLimit.set(this, void 0);
+        _IncomingTransactionHelper_updateTransactions.set(this, void 0);
+        this.hub = new events_1.default();
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_blockTracker, blockTracker, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_getCurrentAccount, getCurrentAccount, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, getLastFetchedBlockNumbers, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_getLocalTransactions, getLocalTransactions || (() => []), "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_getNetworkState, getNetworkState, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_isEnabled, isEnabled !== null && isEnabled !== void 0 ? isEnabled : (() => true), "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, false, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_remoteTransactionSource, remoteTransactionSource, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_transactionLimit, transactionLimit, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_updateTransactions, updateTransactions !== null && updateTransactions !== void 0 ? updateTransactions : false, "f");
+        // Using a property instead of a method to provide a listener reference
+        // with the correct scope that we can remove later if stopped.
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_onLatestBlock, (blockNumberHex) => __awaiter(this, void 0, void 0, function* () {
+            try {
+                yield this.update(blockNumberHex);
+            }
+            catch (error) {
+                console.error('Error while checking incoming transactions', error);
+            }
+        }), "f");
+    }
+    start() {
+        if (__classPrivateFieldGet(this, _IncomingTransactionHelper_isRunning, "f")) {
+            return;
+        }
+        if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_canStart).call(this)) {
+            return;
+        }
+        __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").addListener('latest', __classPrivateFieldGet(this, _IncomingTransactionHelper_onLatestBlock, "f"));
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, true, "f");
+    }
+    stop() {
+        __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").removeListener('latest', __classPrivateFieldGet(this, _IncomingTransactionHelper_onLatestBlock, "f"));
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, false, "f");
+    }
+    update(latestBlockNumberHex) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const releaseLock = yield __classPrivateFieldGet(this, _IncomingTransactionHelper_mutex, "f").acquire();
+            try {
+                if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_canStart).call(this)) {
+                    return;
+                }
+                const latestBlockNumber = parseInt(latestBlockNumberHex || (yield __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").getLatestBlock()), 16);
+                const fromBlock = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getFromBlock).call(this, latestBlockNumber);
+                const address = __classPrivateFieldGet(this, _IncomingTransactionHelper_getCurrentAccount, "f").call(this);
+                const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
+                const currentNetworkId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentNetworkId).call(this);
+                let remoteTransactions = [];
+                try {
+                    remoteTransactions =
+                        yield __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f").fetchTransactions({
+                            address,
+                            currentChainId,
+                            currentNetworkId,
+                            fromBlock,
+                            limit: __classPrivateFieldGet(this, _IncomingTransactionHelper_transactionLimit, "f"),
+                        });
+                }
+                catch (error) {
+                    return;
+                }
+                if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_updateTransactions, "f")) {
+                    remoteTransactions = remoteTransactions.filter((tx) => { var _a; return ((_a = tx.transaction.to) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === address.toLowerCase(); });
+                }
+                const localTransactions = !__classPrivateFieldGet(this, _IncomingTransactionHelper_updateTransactions, "f")
+                    ? []
+                    : __classPrivateFieldGet(this, _IncomingTransactionHelper_getLocalTransactions, "f").call(this);
+                const newTransactions = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getNewTransactions).call(this, remoteTransactions, localTransactions);
+                const updatedTransactions = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getUpdatedTransactions).call(this, remoteTransactions, localTransactions);
+                if (newTransactions.length > 0 || updatedTransactions.length > 0) {
+                    __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_sortTransactionsByTime).call(this, newTransactions);
+                    __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_sortTransactionsByTime).call(this, updatedTransactions);
+                    this.hub.emit('transactions', {
+                        added: newTransactions,
+                        updated: updatedTransactions,
+                    });
+                }
+                __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_updateLastFetchedBlockNumber).call(this, remoteTransactions);
+            }
+            finally {
+                releaseLock();
+            }
+        });
+    }
+}
+exports.IncomingTransactionHelper = IncomingTransactionHelper;
+_IncomingTransactionHelper_blockTracker = new WeakMap(), _IncomingTransactionHelper_getCurrentAccount = new WeakMap(), _IncomingTransactionHelper_getLastFetchedBlockNumbers = new WeakMap(), _IncomingTransactionHelper_getLocalTransactions = new WeakMap(), _IncomingTransactionHelper_getNetworkState = new WeakMap(), _IncomingTransactionHelper_isEnabled = new WeakMap(), _IncomingTransactionHelper_isRunning = new WeakMap(), _IncomingTransactionHelper_mutex = new WeakMap(), _IncomingTransactionHelper_onLatestBlock = new WeakMap(), _IncomingTransactionHelper_remoteTransactionSource = new WeakMap(), _IncomingTransactionHelper_transactionLimit = new WeakMap(), _IncomingTransactionHelper_updateTransactions = new WeakMap(), _IncomingTransactionHelper_instances = new WeakSet(), _IncomingTransactionHelper_sortTransactionsByTime = function _IncomingTransactionHelper_sortTransactionsByTime(transactions) {
+    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));
+}, _IncomingTransactionHelper_getNewTransactions = function _IncomingTransactionHelper_getNewTransactions(remoteTxs, localTxs) {
+    return remoteTxs.filter((tx) => !localTxs.some(({ transactionHash }) => transactionHash === tx.transactionHash));
+}, _IncomingTransactionHelper_getUpdatedTransactions = function _IncomingTransactionHelper_getUpdatedTransactions(remoteTxs, localTxs) {
+    return remoteTxs.filter((remoteTx) => localTxs.some((localTx) => remoteTx.transactionHash === localTx.transactionHash &&
+        __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_isTransactionOutdated).call(this, remoteTx, localTx)));
+}, _IncomingTransactionHelper_isTransactionOutdated = function _IncomingTransactionHelper_isTransactionOutdated(remoteTx, localTx) {
+    return UPDATE_CHECKS.some((getValue) => getValue(remoteTx) !== getValue(localTx));
+}, _IncomingTransactionHelper_getFromBlock = function _IncomingTransactionHelper_getFromBlock(_latestBlockNumber) {
+    const lastFetchedKey = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getBlockNumberKey).call(this);
+    const lastFetchedBlockNumber = __classPrivateFieldGet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, "f").call(this)[lastFetchedKey];
+    if (lastFetchedBlockNumber) {
+        return lastFetchedBlockNumber + 1;
+    }
+    // Query entire transaction history
+    return undefined;
+}, _IncomingTransactionHelper_updateLastFetchedBlockNumber = function _IncomingTransactionHelper_updateLastFetchedBlockNumber(remoteTxs) {
+    let lastFetchedBlockNumber = -1;
+    for (const tx of remoteTxs) {
+        const currentBlockNumberValue = tx.blockNumber
+            ? parseInt(tx.blockNumber, 10)
+            : -1;
+        lastFetchedBlockNumber = Math.max(lastFetchedBlockNumber, currentBlockNumberValue);
+    }
+    if (lastFetchedBlockNumber === -1) {
+        return;
+    }
+    const lastFetchedKey = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getBlockNumberKey).call(this);
+    const lastFetchedBlockNumbers = __classPrivateFieldGet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, "f").call(this);
+    const previousValue = lastFetchedBlockNumbers[lastFetchedKey];
+    if (previousValue === lastFetchedBlockNumber) {
+        return;
+    }
+    lastFetchedBlockNumbers[lastFetchedKey] = lastFetchedBlockNumber;
+    this.hub.emit('updatedLastFetchedBlockNumbers', {
+        lastFetchedBlockNumbers,
+        blockNumber: lastFetchedBlockNumber,
+    });
+}, _IncomingTransactionHelper_getBlockNumberKey = function _IncomingTransactionHelper_getBlockNumberKey() {
+    var _a;
+    const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
+    const currentAccount = (_a = __classPrivateFieldGet(this, _IncomingTransactionHelper_getCurrentAccount, "f").call(this)) === null || _a === void 0 ? void 0 : _a.toLowerCase();
+    return [currentChainId, currentAccount].join('#');
+}, _IncomingTransactionHelper_canStart = function _IncomingTransactionHelper_canStart() {
+    const isEnabled = __classPrivateFieldGet(this, _IncomingTransactionHelper_isEnabled, "f").call(this);
+    const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
+    const currentNetworkId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentNetworkId).call(this);
+    const isSupportedNetwork = __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f").isSupportedNetwork(currentChainId, currentNetworkId);
+    return isEnabled && isSupportedNetwork;
+}, _IncomingTransactionHelper_getCurrentChainId = function _IncomingTransactionHelper_getCurrentChainId() {
+    const chainIdDecimalString = __classPrivateFieldGet(this, _IncomingTransactionHelper_getNetworkState, "f").call(this).providerConfig.chainId;
+    return `0x${parseInt(chainIdDecimalString, 10).toString(16)}`;
+}, _IncomingTransactionHelper_getCurrentNetworkId = function _IncomingTransactionHelper_getCurrentNetworkId() {
+    return __classPrivateFieldGet(this, _IncomingTransactionHelper_getNetworkState, "f").call(this).networkId;
+};
+//# sourceMappingURL=IncomingTransactionHelper.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts b/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts
index e242aed..66329b6 100644
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts
@@ -2,8 +2,11 @@
 import { EventEmitter } from 'events';
 import Common from '@ethereumjs/common';
 import { TypedTransaction } from '@ethereumjs/tx';
-import { BaseController, BaseConfig, BaseState } from '@metamask/base-controller';
+import { BaseController, BaseConfig, BaseState, RestrictedControllerMessenger } from '@metamask/base-controller';
 import type { NetworkState, ProviderProxy, BlockTrackerProxy } from '@metamask/network-controller';
+import { AddApprovalRequest } from '@metamask/approval-controller';
+import { NonceLock } from 'nonce-tracker/dist/NonceTracker';
+import { SecurityAlertResponse, SubmitHistoryEntry, Transaction, TransactionMeta, WalletDevice } from './types';
 /**
  * @type Result
  * @property result - Promise resolving to a new transaction hash
@@ -13,44 +16,6 @@ export interface Result {
     result: Promise<string>;
     transactionMeta: TransactionMeta;
 }
-/**
- * @type Fetch All Options
- * @property fromBlock - String containing a specific block decimal number
- * @property etherscanApiKey - API key to be used to fetch token transactions
- */
-export interface FetchAllOptions {
-    fromBlock?: string;
-    etherscanApiKey?: string;
-}
-/**
- * @type Transaction
- *
- * Transaction representation
- * @property chainId - Network ID as per EIP-155
- * @property data - Data to pass with this transaction
- * @property from - Address to send this transaction from
- * @property gas - Gas to send with this transaction
- * @property gasPrice - Price of gas with this transaction
- * @property gasUsed -  Gas used in the transaction
- * @property nonce - Unique number to prevent replay attacks
- * @property to - Address to send this transaction to
- * @property value - Value associated with this transaction
- */
-export interface Transaction {
-    chainId?: number;
-    data?: string;
-    from: string;
-    gas?: string;
-    gasPrice?: string;
-    gasUsed?: string;
-    nonce?: string;
-    to?: string;
-    value?: string;
-    maxFeePerGas?: string;
-    maxPriorityFeePerGas?: string;
-    estimatedBaseFee?: string;
-    estimateGasError?: string;
-}
 export interface GasPriceValue {
     gasPrice: string;
 }
@@ -58,115 +23,6 @@ export interface FeeMarketEIP1559Values {
     maxFeePerGas: string;
     maxPriorityFeePerGas: string;
 }
-/**
- * The status of the transaction. Each status represents the state of the transaction internally
- * in the wallet. Some of these correspond with the state of the transaction on the network, but
- * some are wallet-specific.
- */
-export declare enum TransactionStatus {
-    approved = "approved",
-    cancelled = "cancelled",
-    confirmed = "confirmed",
-    failed = "failed",
-    rejected = "rejected",
-    signed = "signed",
-    submitted = "submitted",
-    unapproved = "unapproved"
-}
-/**
- * Options for wallet device.
- */
-export declare enum WalletDevice {
-    MM_MOBILE = "metamask_mobile",
-    MM_EXTENSION = "metamask_extension",
-    OTHER = "other_device"
-}
-declare type TransactionMetaBase = {
-    isTransfer?: boolean;
-    transferInformation?: {
-        symbol: string;
-        contractAddress: string;
-        decimals: number;
-    };
-    id: string;
-    networkID?: string;
-    chainId?: string;
-    origin?: string;
-    rawTransaction?: string;
-    time: number;
-    toSmartContract?: boolean;
-    transaction: Transaction;
-    transactionHash?: string;
-    blockNumber?: string;
-    deviceConfirmedOn?: WalletDevice;
-    verifiedOnBlockchain?: boolean;
-};
-/**
- * @type TransactionMeta
- *
- * TransactionMeta representation
- * @property error - Synthesized error information for failed transactions
- * @property id - Generated UUID associated with this transaction
- * @property networkID - Network code as per EIP-155 for this transaction
- * @property origin - Origin this transaction was sent from
- * @property deviceConfirmedOn - string to indicate what device the transaction was confirmed
- * @property rawTransaction - Hex representation of the underlying transaction
- * @property status - String status of this transaction
- * @property time - Timestamp associated with this transaction
- * @property toSmartContract - Whether transaction recipient is a smart contract
- * @property transaction - Underlying Transaction object
- * @property transactionHash - Hash of a successful transaction
- * @property blockNumber - Number of the block where the transaction has been included
- */
-export declare type TransactionMeta = ({
-    status: Exclude<TransactionStatus, TransactionStatus.failed>;
-} & TransactionMetaBase) | ({
-    status: TransactionStatus.failed;
-    error: Error;
-} & TransactionMetaBase);
-/**
- * @type EtherscanTransactionMeta
- *
- * EtherscanTransactionMeta representation
- * @property blockNumber - Number of the block where the transaction has been included
- * @property timeStamp - Timestamp associated with this transaction
- * @property hash - Hash of a successful transaction
- * @property nonce - Nonce of the transaction
- * @property blockHash - Hash of the block where the transaction has been included
- * @property transactionIndex - Etherscan internal index for this transaction
- * @property from - Address to send this transaction from
- * @property to - Address to send this transaction to
- * @property gas - Gas to send with this transaction
- * @property gasPrice - Price of gas with this transaction
- * @property isError - Synthesized error information for failed transactions
- * @property txreceipt_status - Receipt status for this transaction
- * @property input - input of the transaction
- * @property contractAddress - Address of the contract
- * @property cumulativeGasUsed - Amount of gas used
- * @property confirmations - Number of confirmations
- */
-export interface EtherscanTransactionMeta {
-    blockNumber: string;
-    timeStamp: string;
-    hash: string;
-    nonce: string;
-    blockHash: string;
-    transactionIndex: string;
-    from: string;
-    to: string;
-    value: string;
-    gas: string;
-    gasPrice: string;
-    cumulativeGasUsed: string;
-    gasUsed: string;
-    isError: string;
-    txreceipt_status: string;
-    input: string;
-    contractAddress: string;
-    confirmations: string;
-    tokenDecimal: string;
-    tokenSymbol: string;
-}
 /**
  * @type TransactionConfig
  *
@@ -203,7 +59,23 @@ export interface TransactionState extends BaseState {
     methodData: {
         [key: string]: MethodData;
     };
+    lastFetchedBlockNumbers: {
+        [key: string]: number;
+    };
+    submitHistory: SubmitHistoryEntry[];
 }
+/**
+ * The name of the {@link TransactionController}.
+ */
+declare const controllerName = "TransactionController";
+/**
+ * The external actions available to the {@link TransactionController}.
+ */
+declare type AllowedActions = AddApprovalRequest;
+/**
+ * The messenger of the {@link TransactionController}.
+ */
+export declare type TransactionControllerMessenger = RestrictedControllerMessenger<typeof controllerName, AllowedActions, never, AllowedActions['type'], never>;
 /**
  * Multiplier used to determine a transaction's increased gas fee during cancellation
  */
@@ -223,19 +95,10 @@ export declare class TransactionController extends BaseController<TransactionCon
     private handle?;
     private mutex;
     private getNetworkState;
+    private messagingSystem;
+    private incomingTransactionHelper;
     private failTransaction;
     private registryLookup;
-    /**
-     * Normalizes the transaction information from etherscan
-     * to be compatible with the TransactionMeta interface.
-     *
-     * @param txMeta - The transaction.
-     * @param currentNetworkID - The current network ID.
-     * @param currentChainId - The current chain ID.
-     * @returns The normalized transaction.
-     */
-    private normalizeTx;
-    private normalizeTokenTx;
     /**
      * EventEmitter instance used to listen to specific transactional events
      */
@@ -252,18 +115,33 @@ export declare class TransactionController extends BaseController<TransactionCon
      * Creates a TransactionController instance.
      *
      * @param options - The controller options.
+     * @param options.blockTracker - The block tracker used to poll for new blocks data.
      * @param options.getNetworkState - Gets the state of the network controller.
+     * @param options.getSelectedAddress - Gets the address of the currently selected account.
+     * @param options.incomingTransactions - Configuration options for incoming transaction support.
+     * @param options.incomingTransactions.apiKey - An optional API key to use when fetching remote transaction data.
+     * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.
+     * @param options.incomingTransactions.isEnabled - Whether or not incoming transaction retrieval is enabled.
+     * @param options.incomingTransactions.updateTransactions - Whether or not to update local transactions using remote transaction data.
+     * @param options.messenger - The controller messenger.
      * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
      * @param options.provider - The provider used to create the underlying EthQuery instance.
-     * @param options.blockTracker - The block tracker used to poll for new blocks data.
      * @param config - Initial options used to configure this controller.
      * @param state - Initial state to set on this controller.
      */
-    constructor({ getNetworkState, onNetworkStateChange, provider, blockTracker, }: {
+    constructor({ blockTracker, getNetworkState, getSelectedAddress, incomingTransactions, messenger, onNetworkStateChange, provider, }: {
+        blockTracker: BlockTrackerProxy;
         getNetworkState: () => NetworkState;
+        getSelectedAddress: () => string;
+        incomingTransactions: {
+            apiKey?: string;
+            includeTokenTransfers?: boolean;
+            isEnabled?: () => boolean;
+            updateTransactions?: boolean;
+        };
+        messenger: TransactionControllerMessenger;
         onNetworkStateChange: (listener: (state: NetworkState) => void) => void;
         provider: ProviderProxy;
-        blockTracker: BlockTrackerProxy;
     }, config?: Partial<TransactionConfig>, state?: Partial<TransactionState>);
     /**
      * Starts a new polling interval.
@@ -284,11 +162,20 @@ export declare class TransactionController extends BaseController<TransactionCon
      * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.
      *
      * @param transaction - The transaction object to add.
-     * @param origin - The domain origin to append to the generated TransactionMeta.
-     * @param deviceConfirmedOn - An enum to indicate what device the transaction was confirmed to append to the generated TransactionMeta.
+     * @param opts - Additional options to control how the transaction is added.
+     * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
+     * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
+     * @param opts.securityAlertResponse - Response from security validator.
      * @returns Object containing a promise resolving to the transaction hash if approved.
      */
-    addTransaction(transaction: Transaction, origin?: string, deviceConfirmedOn?: WalletDevice): Promise<Result>;
+    addTransaction(transaction: Transaction, { deviceConfirmedOn, origin, securityAlertResponse, }?: {
+        deviceConfirmedOn?: WalletDevice;
+        origin?: string;
+        securityAlertResponse?: SecurityAlertResponse;
+    }): Promise<Result>;
+    startIncomingTransactionPolling(): void;
+    stopIncomingTransactionPolling(): void;
+    updateIncomingTransactions(): Promise<void>;
     prepareUnsignedEthTx(txParams: Record<string, unknown>): TypedTransaction;
     /**
      * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for
@@ -300,22 +187,6 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @returns {Common} common configuration object
      */
     getCommonConfiguration(): Common;
-    /**
-     * Approves a transaction and updates it's status in state. If this is not a
-     * retry transaction, a nonce will be generated. The transaction is signed
-     * using the sign configuration property, then published to the blockchain.
-     * A `<tx.id>:finished` hub event is fired after success or failure.
-     *
-     * @param transactionID - The ID of the transaction to approve.
-     */
-    approveTransaction(transactionID: string): Promise<void>;
-    /**
-     * Cancels a transaction based on its ID by setting its status to "rejected"
-     * and emitting a `<tx.id>:finished` hub event.
-     *
-     * @param transactionID - The ID of the transaction to cancel.
-     */
-    cancelTransaction(transactionID: string): void;
     /**
      * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
      * and emitting a `<tx.id>:finished` hub event.
@@ -357,6 +228,13 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param transactionMeta - The new transaction to store in state.
      */
     updateTransaction(transactionMeta: TransactionMeta): void;
+    /**
+     * Update the security alert response for a transaction.
+     *
+     * @param transactionId - ID of the transaction.
+     * @param securityAlertResponse - The new security alert response for the transaction.
+     */
+    updateSecurityAlertResponse(transactionId: string, securityAlertResponse: SecurityAlertResponse): void;
     /**
      * Removes all transactions from state, optionally based on the current network.
      *
@@ -365,15 +243,13 @@ export declare class TransactionController extends BaseController<TransactionCon
      */
     wipeTransactions(ignoreNetwork?: boolean): void;
     /**
-     * Get transactions from Etherscan for the given address. By default all transactions are
-     * returned, but the `fromBlock` option can be given to filter just for transactions from a
-     * specific block onward.
+     * Gets the next nonce according to the nonce-tracker.
+     * Ensure `releaseLock` is called once processing of the `nonce` value is complete.
      *
-     * @param address - The address to fetch the transactions for.
-     * @param opt - Object containing optional data, fromBlock and Etherscan API key.
-     * @returns The block number of the latest incoming transaction.
+     * @param address - The hex string address for the transaction.
+     * @returns object with the `nextNonce` `nonceDetails`, and the releaseLock.
      */
-    fetchAll(address: string, opt?: FetchAllOptions): Promise<string | void>;
+    getNonceLock(address: string): Promise<NonceLock>;
     /**
      * Trim the amount of transactions that are set on the state. Checks
      * if the length of the tx history is longer then desired persistence
@@ -413,59 +289,39 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @returns Whether the transaction has failed.
      */
     private checkTxReceiptStatusIsFailed;
+    private processApproval;
+    private requestApproval;
+    private getApprovalId;
     /**
-     * Method to verify the state of transactions using Etherscan as a source of truth.
-     *
-     * @param remoteTxs - Transactions to reconcile that are from a remote source.
-     * @param localTxs - Transactions to reconcile that are local.
-     * @returns A tuple containing a boolean indicating whether or not an update was required, and the updated transaction.
-     */
-    private etherscanTransactionStateReconciler;
-    /**
-     * Get all transactions that are in the remote transactions array
-     * but not in the local transactions array.
-     *
-     * @param remoteTxs - Array of transactions from remote source.
-     * @param localTxs - Array of transactions stored locally.
-     * @returns The new transactions.
-     */
-    private getNewTransactions;
-    /**
-     * Get all the transactions that are locally outdated with respect
-     * to a remote source (etherscan or blockchain). The returned array
-     * contains the transactions with the updated data.
-     *
-     * @param remoteTxs - Array of transactions from remote source.
-     * @param localTxs - Array of transactions stored locally.
-     * @returns The updated transactions.
-     */
-    private getUpdatedTransactions;
-    /**
-     * Verifies if a local transaction is outdated with respect to the remote transaction.
+     * Approves a transaction and updates it's status in state. If this is not a
+     * retry transaction, a nonce will be generated. The transaction is signed
+     * using the sign configuration property, then published to the blockchain.
+     * A `<tx.id>:finished` hub event is fired after success or failure.
      *
-     * @param remoteTx - The remote transaction from Etherscan.
-     * @param localTx - The local transaction.
-     * @returns Whether the transaction is outdated.
+     * @param transactionID - The ID of the transaction to approve.
      */
-    private isTransactionOutdated;
+    private approveTransaction;
+    private publishTransaction;
     /**
-     * Verifies if the status of a local transaction is outdated with respect to the remote transaction.
+     * Cancels a transaction based on its ID by setting its status to "rejected"
+     * and emitting a `<tx.id>:finished` hub event.
      *
-     * @param remoteTxHash - Remote transaction hash.
-     * @param localTxHash - Local transaction hash.
-     * @param remoteTxStatus - Remote transaction status.
-     * @param localTxStatus - Local transaction status.
-     * @returns Whether the status is outdated.
+     * @param transactionID - The ID of the transaction to cancel.
      */
-    private isStatusOutdated;
+    private cancelTransaction;
     /**
-     * Verifies if the gas data of a local transaction is outdated with respect to the remote transaction.
+     * Whether the transaction has at least completed all local processing.
      *
-     * @param remoteGasUsed - Remote gas used in the transaction.
-     * @param localGasUsed - Local gas used in the transaction.
-     * @returns Whether the gas data is outdated.
+     * @param status - The transaction status.
+     * @returns Whether the transaction is in a final state.
      */
-    private isGasDataOutdated;
+    private isLocalFinalState;
+    private getTransaction;
+    private isTransactionCompleted;
+    private onIncomingTransactions;
+    private onUpdatedLastFetchedBlockNumbers;
+    private getNonceTrackerTransactions;
+    private updateSubmitHistory;
 }
 export default TransactionController;
 //# sourceMappingURL=TransactionController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts.map b/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts.map
deleted file mode 100644
index 07781b0..0000000
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"TransactionController.d.ts","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.js b/node_modules/@metamask/transaction-controller/dist/TransactionController.js
index 814a899..f157440 100644
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.js
+++ b/node_modules/@metamask/transaction-controller/dist/TransactionController.js
@@ -12,7 +12,7 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.TransactionController = exports.SPEED_UP_RATE = exports.CANCEL_RATE = exports.WalletDevice = exports.TransactionStatus = void 0;
+exports.TransactionController = exports.SPEED_UP_RATE = exports.CANCEL_RATE = void 0;
 const events_1 = require("events");
 const ethereumjs_util_1 = require("ethereumjs-util");
 const eth_rpc_errors_1 = require("eth-rpc-errors");
@@ -22,36 +22,20 @@ const common_1 = __importDefault(require("@ethereumjs/common"));
 const tx_1 = require("@ethereumjs/tx");
 const uuid_1 = require("uuid");
 const async_mutex_1 = require("async-mutex");
+const lodash_1 = require("lodash");
 const base_controller_1 = require("@metamask/base-controller");
 const controller_utils_1 = require("@metamask/controller-utils");
 const nonce_tracker_1 = __importDefault(require("nonce-tracker"));
 const utils_1 = require("./utils");
+const IncomingTransactionHelper_1 = require("./IncomingTransactionHelper");
+const EtherscanRemoteTransactionSource_1 = require("./EtherscanRemoteTransactionSource");
+const types_1 = require("./types");
 const HARDFORK = 'london';
+const SUBMIT_HISTORY_LIMIT = 100;
 /**
- * The status of the transaction. Each status represents the state of the transaction internally
- * in the wallet. Some of these correspond with the state of the transaction on the network, but
- * some are wallet-specific.
+ * The name of the {@link TransactionController}.
  */
-var TransactionStatus;
-(function (TransactionStatus) {
-    TransactionStatus["approved"] = "approved";
-    TransactionStatus["cancelled"] = "cancelled";
-    TransactionStatus["confirmed"] = "confirmed";
-    TransactionStatus["failed"] = "failed";
-    TransactionStatus["rejected"] = "rejected";
-    TransactionStatus["signed"] = "signed";
-    TransactionStatus["submitted"] = "submitted";
-    TransactionStatus["unapproved"] = "unapproved";
-})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
-/**
- * Options for wallet device.
- */
-var WalletDevice;
-(function (WalletDevice) {
-    WalletDevice["MM_MOBILE"] = "metamask_mobile";
-    WalletDevice["MM_EXTENSION"] = "metamask_extension";
-    WalletDevice["OTHER"] = "other_device";
-})(WalletDevice = exports.WalletDevice || (exports.WalletDevice = {}));
+const controllerName = 'TransactionController';
 /**
  * Multiplier used to determine a transaction's increased gas fee during cancellation
  */
@@ -68,44 +52,23 @@ class TransactionController extends base_controller_1.BaseController {
      * Creates a TransactionController instance.
      *
      * @param options - The controller options.
+     * @param options.blockTracker - The block tracker used to poll for new blocks data.
      * @param options.getNetworkState - Gets the state of the network controller.
+     * @param options.getSelectedAddress - Gets the address of the currently selected account.
+     * @param options.incomingTransactions - Configuration options for incoming transaction support.
+     * @param options.incomingTransactions.apiKey - An optional API key to use when fetching remote transaction data.
+     * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.
+     * @param options.incomingTransactions.isEnabled - Whether or not incoming transaction retrieval is enabled.
+     * @param options.incomingTransactions.updateTransactions - Whether or not to update local transactions using remote transaction data.
+     * @param options.messenger - The controller messenger.
      * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
      * @param options.provider - The provider used to create the underlying EthQuery instance.
-     * @param options.blockTracker - The block tracker used to poll for new blocks data.
      * @param config - Initial options used to configure this controller.
      * @param state - Initial state to set on this controller.
      */
-    constructor({ getNetworkState, onNetworkStateChange, provider, blockTracker, }, config, state) {
+    constructor({ blockTracker, getNetworkState, getSelectedAddress, incomingTransactions = {}, messenger, onNetworkStateChange, provider, }, config, state) {
         super(config, state);
         this.mutex = new async_mutex_1.Mutex();
-        this.normalizeTokenTx = (txMeta, currentNetworkID, currentChainId) => {
-            const time = parseInt(txMeta.timeStamp, 10) * 1000;
-            const { to, from, gas, gasPrice, gasUsed, hash, contractAddress, tokenDecimal, tokenSymbol, value, } = txMeta;
-            return {
-                id: (0, uuid_1.v1)({ msecs: time }),
-                isTransfer: true,
-                networkID: currentNetworkID,
-                chainId: currentChainId,
-                status: TransactionStatus.confirmed,
-                time,
-                transaction: {
-                    chainId: 1,
-                    from,
-                    gas,
-                    gasPrice,
-                    gasUsed,
-                    to,
-                    value,
-                },
-                transactionHash: hash,
-                transferInformation: {
-                    contractAddress,
-                    decimals: Number(tokenDecimal),
-                    symbol: tokenSymbol,
-                },
-                verifiedOnBlockchain: false,
-            };
-        };
         /**
          * EventEmitter instance used to listen to specific transactional events
          */
@@ -121,18 +84,37 @@ class TransactionController extends base_controller_1.BaseController {
         this.defaultState = {
             methodData: {},
             transactions: [],
+            lastFetchedBlockNumbers: {},
+            submitHistory: [],
         };
         this.initialize();
         this.provider = provider;
         this.getNetworkState = getNetworkState;
         this.ethQuery = new eth_query_1.default(provider);
         this.registry = new eth_method_registry_1.default({ provider });
+        this.messagingSystem = messenger;
         this.nonceTracker = new nonce_tracker_1.default({
             provider,
             blockTracker,
-            getPendingTransactions: (address) => (0, utils_1.getAndFormatTransactionsForNonceTracker)(address, TransactionStatus.submitted, this.state.transactions),
-            getConfirmedTransactions: (address) => (0, utils_1.getAndFormatTransactionsForNonceTracker)(address, TransactionStatus.confirmed, this.state.transactions),
+            getPendingTransactions: this.getNonceTrackerTransactions.bind(this, types_1.TransactionStatus.submitted),
+            getConfirmedTransactions: this.getNonceTrackerTransactions.bind(this, types_1.TransactionStatus.confirmed),
         });
+        this.incomingTransactionHelper = new IncomingTransactionHelper_1.IncomingTransactionHelper({
+            blockTracker,
+            getCurrentAccount: getSelectedAddress,
+            getLastFetchedBlockNumbers: () => this.state.lastFetchedBlockNumbers,
+            getLocalTransactions: () => this.state.transactions,
+            getNetworkState,
+            isEnabled: incomingTransactions.isEnabled,
+            remoteTransactionSource: new EtherscanRemoteTransactionSource_1.EtherscanRemoteTransactionSource({
+                apiKey: incomingTransactions.apiKey,
+                includeTokenTransfers: incomingTransactions.includeTokenTransfers,
+            }),
+            transactionLimit: this.config.txHistoryLimit,
+            updateTransactions: incomingTransactions.updateTransactions,
+        });
+        this.incomingTransactionHelper.hub.on('transactions', this.onIncomingTransactions.bind(this));
+        this.incomingTransactionHelper.hub.on('updatedLastFetchedBlockNumbers', this.onUpdatedLastFetchedBlockNumbers.bind(this));
         onNetworkStateChange(() => {
             this.ethQuery = new eth_query_1.default(this.provider);
             this.registry = new eth_method_registry_1.default({ provider: this.provider });
@@ -140,7 +122,7 @@ class TransactionController extends base_controller_1.BaseController {
         this.poll();
     }
     failTransaction(transactionMeta, error) {
-        const newTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { error, status: TransactionStatus.failed });
+        const newTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { error, status: types_1.TransactionStatus.failed });
         this.updateTransaction(newTransactionMeta);
         this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);
     }
@@ -151,43 +133,6 @@ class TransactionController extends base_controller_1.BaseController {
             return { registryMethod, parsedRegistryMethod };
         });
     }
-    /**
-     * Normalizes the transaction information from etherscan
-     * to be compatible with the TransactionMeta interface.
-     *
-     * @param txMeta - The transaction.
-     * @param currentNetworkID - The current network ID.
-     * @param currentChainId - The current chain ID.
-     * @returns The normalized transaction.
-     */
-    normalizeTx(txMeta, currentNetworkID, currentChainId) {
-        const time = parseInt(txMeta.timeStamp, 10) * 1000;
-        const normalizedTransactionBase = {
-            blockNumber: txMeta.blockNumber,
-            id: (0, uuid_1.v1)({ msecs: time }),
-            networkID: currentNetworkID,
-            chainId: currentChainId,
-            time,
-            transaction: {
-                data: txMeta.input,
-                from: txMeta.from,
-                gas: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gas)),
-                gasPrice: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasPrice)),
-                gasUsed: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasUsed)),
-                nonce: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.nonce)),
-                to: txMeta.to,
-                value: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.value)),
-            },
-            transactionHash: txMeta.hash,
-            verifiedOnBlockchain: false,
-        };
-        /* istanbul ignore else */
-        if (txMeta.isError === '0') {
-            return Object.assign(Object.assign({}, normalizedTransactionBase), { status: TransactionStatus.confirmed });
-        }
-        /* istanbul ignore next */
-        return Object.assign(Object.assign({}, normalizedTransactionBase), { error: new Error('Transaction failed'), status: TransactionStatus.failed });
-    }
     /**
      * Starts a new polling interval.
      *
@@ -235,11 +180,13 @@ class TransactionController extends base_controller_1.BaseController {
      * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.
      *
      * @param transaction - The transaction object to add.
-     * @param origin - The domain origin to append to the generated TransactionMeta.
-     * @param deviceConfirmedOn - An enum to indicate what device the transaction was confirmed to append to the generated TransactionMeta.
+     * @param opts - Additional options to control how the transaction is added.
+     * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
+     * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
+     * @param opts.securityAlertResponse - Response from security validator.
      * @returns Object containing a promise resolving to the transaction hash if approved.
      */
-    addTransaction(transaction, origin, deviceConfirmedOn) {
+    addTransaction(transaction, { deviceConfirmedOn, origin, securityAlertResponse, } = {}) {
         return __awaiter(this, void 0, void 0, function* () {
             const { providerConfig, networkId } = this.getNetworkState();
             const { transactions } = this.state;
@@ -250,11 +197,12 @@ class TransactionController extends base_controller_1.BaseController {
                 networkID: networkId !== null && networkId !== void 0 ? networkId : undefined,
                 chainId: providerConfig.chainId,
                 origin,
-                status: TransactionStatus.unapproved,
+                status: types_1.TransactionStatus.unapproved,
                 time: Date.now(),
                 transaction,
                 deviceConfirmedOn,
                 verifiedOnBlockchain: false,
+                securityAlertResponse,
             };
             try {
                 const { gas, estimateGasError } = yield this.estimateGas(transaction);
@@ -265,27 +213,24 @@ class TransactionController extends base_controller_1.BaseController {
                 this.failTransaction(transactionMeta, error);
                 return Promise.reject(error);
             }
-            const result = new Promise((resolve, reject) => {
-                this.hub.once(`${transactionMeta.id}:finished`, (meta) => {
-                    switch (meta.status) {
-                        case TransactionStatus.submitted:
-                            return resolve(meta.transactionHash);
-                        case TransactionStatus.rejected:
-                            return reject(eth_rpc_errors_1.ethErrors.provider.userRejectedRequest('User rejected the transaction'));
-                        case TransactionStatus.cancelled:
-                            return reject(eth_rpc_errors_1.ethErrors.rpc.internal('User cancelled the transaction'));
-                        case TransactionStatus.failed:
-                            return reject(eth_rpc_errors_1.ethErrors.rpc.internal(meta.error.message));
-                        /* istanbul ignore next */
-                        default:
-                            return reject(eth_rpc_errors_1.ethErrors.rpc.internal(`MetaMask Tx Signature: Unknown problem: ${JSON.stringify(meta)}`));
-                    }
-                });
-            });
             transactions.push(transactionMeta);
             this.update({ transactions: this.trimTransactionsForState(transactions) });
             this.hub.emit(`unapprovedTransaction`, transactionMeta);
-            return { result, transactionMeta };
+            return {
+                result: this.processApproval(transactionMeta),
+                transactionMeta,
+            };
+        });
+    }
+    startIncomingTransactionPolling() {
+        this.incomingTransactionHelper.start();
+    }
+    stopIncomingTransactionPolling() {
+        this.incomingTransactionHelper.stop();
+    }
+    updateIncomingTransactions() {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this.incomingTransactionHelper.update();
         });
     }
     prepareUnsignedEthTx(txParams) {
@@ -305,7 +250,9 @@ class TransactionController extends base_controller_1.BaseController {
      */
     getCommonConfiguration() {
         const { networkId, providerConfig: { type: chain, chainId, nickname: name }, } = this.getNetworkState();
-        if (chain !== controller_utils_1.RPC) {
+        if (chain !== controller_utils_1.RPC &&
+            chain !== 'linea-goerli' &&
+            chain !== 'linea-mainnet') {
             return new common_1.default({ chain, hardfork: HARDFORK });
         }
         const customChainParams = {
@@ -315,100 +262,6 @@ class TransactionController extends base_controller_1.BaseController {
         };
         return common_1.default.forCustomChain(controller_utils_1.NetworkType.mainnet, customChainParams, HARDFORK);
     }
-    /**
-     * Approves a transaction and updates it's status in state. If this is not a
-     * retry transaction, a nonce will be generated. The transaction is signed
-     * using the sign configuration property, then published to the blockchain.
-     * A `<tx.id>:finished` hub event is fired after success or failure.
-     *
-     * @param transactionID - The ID of the transaction to approve.
-     */
-    approveTransaction(transactionID) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const { transactions } = this.state;
-            const releaseLock = yield this.mutex.acquire();
-            const { providerConfig } = this.getNetworkState();
-            const { chainId: currentChainId } = providerConfig;
-            const index = transactions.findIndex(({ id }) => transactionID === id);
-            const transactionMeta = transactions[index];
-            const { transaction: { nonce, from }, } = transactionMeta;
-            let nonceLock;
-            try {
-                if (!this.sign) {
-                    releaseLock();
-                    this.failTransaction(transactionMeta, new Error('No sign method defined.'));
-                    return;
-                }
-                else if (!currentChainId) {
-                    releaseLock();
-                    this.failTransaction(transactionMeta, new Error('No chainId defined.'));
-                    return;
-                }
-                const chainId = parseInt(currentChainId, undefined);
-                const { approved: status } = TransactionStatus;
-                let nonceToUse = nonce;
-                // if a nonce already exists on the transactionMeta it means this is a speedup or cancel transaction
-                // so we want to reuse that nonce and hope that it beats the previous attempt to chain. Otherwise use a new locked nonce
-                if (!nonceToUse) {
-                    nonceLock = yield this.nonceTracker.getNonceLock(from);
-                    nonceToUse = (0, ethereumjs_util_1.addHexPrefix)(nonceLock.nextNonce.toString(16));
-                }
-                transactionMeta.status = status;
-                transactionMeta.transaction.nonce = nonceToUse;
-                transactionMeta.transaction.chainId = chainId;
-                const baseTxParams = Object.assign(Object.assign({}, transactionMeta.transaction), { gasLimit: transactionMeta.transaction.gas });
-                const isEIP1559 = (0, utils_1.isEIP1559Transaction)(transactionMeta.transaction);
-                const txParams = isEIP1559
-                    ? Object.assign(Object.assign({}, baseTxParams), { maxFeePerGas: transactionMeta.transaction.maxFeePerGas, maxPriorityFeePerGas: transactionMeta.transaction.maxPriorityFeePerGas, estimatedBaseFee: transactionMeta.transaction.estimatedBaseFee, 
-                        // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set
-                        type: 2 }) : baseTxParams;
-                // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set
-                if (isEIP1559) {
-                    delete txParams.gasPrice;
-                }
-                const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
-                const signedTx = yield this.sign(unsignedEthTx, from);
-                transactionMeta.status = TransactionStatus.signed;
-                this.updateTransaction(transactionMeta);
-                const rawTransaction = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
-                transactionMeta.rawTransaction = rawTransaction;
-                this.updateTransaction(transactionMeta);
-                const transactionHash = yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [
-                    rawTransaction,
-                ]);
-                transactionMeta.transactionHash = transactionHash;
-                transactionMeta.status = TransactionStatus.submitted;
-                this.updateTransaction(transactionMeta);
-                this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
-            }
-            catch (error) {
-                this.failTransaction(transactionMeta, error);
-            }
-            finally {
-                // must set transaction to submitted/failed before releasing lock
-                if (nonceLock) {
-                    nonceLock.releaseLock();
-                }
-                releaseLock();
-            }
-        });
-    }
-    /**
-     * Cancels a transaction based on its ID by setting its status to "rejected"
-     * and emitting a `<tx.id>:finished` hub event.
-     *
-     * @param transactionID - The ID of the transaction to cancel.
-     */
-    cancelTransaction(transactionID) {
-        const transactionMeta = this.state.transactions.find(({ id }) => id === transactionID);
-        if (!transactionMeta) {
-            return;
-        }
-        transactionMeta.status = TransactionStatus.rejected;
-        this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
-        const transactions = this.state.transactions.filter(({ id }) => id !== transactionID);
-        this.update({ transactions: this.trimTransactionsForState(transactions) });
-    }
     /**
      * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
      * and emitting a `<tx.id>:finished` hub event.
@@ -471,8 +324,8 @@ class TransactionController extends base_controller_1.BaseController {
             const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
             const signedTx = yield this.sign(unsignedEthTx, transactionMeta.transaction.from);
             const rawTransaction = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
-            yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTransaction]);
-            transactionMeta.status = TransactionStatus.cancelled;
+            yield this.publishTransaction(rawTransaction, txParams, transactionMeta.chainId, 'cancel');
+            transactionMeta.status = types_1.TransactionStatus.cancelled;
             this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
         });
     }
@@ -523,9 +376,7 @@ class TransactionController extends base_controller_1.BaseController {
             const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
             const signedTx = yield this.sign(unsignedEthTx, transactionMeta.transaction.from);
             const rawTransaction = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
-            const transactionHash = yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [
-                rawTransaction,
-            ]);
+            const transactionHash = yield this.publishTransaction(rawTransaction, txParams, transactionMeta.chainId, controller_utils_1.ORIGIN_METAMASK);
             const baseTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { id: (0, uuid_1.v1)(), time: Date.now(), transactionHash });
             const newTransactionMeta = newMaxFeePerGas && newMaxPriorityFeePerGas
                 ? Object.assign(Object.assign({}, baseTransactionMeta), { transaction: Object.assign(Object.assign({}, transactionMeta.transaction), { maxFeePerGas: newMaxFeePerGas, maxPriorityFeePerGas: newMaxPriorityFeePerGas }) }) : Object.assign(Object.assign({}, baseTransactionMeta), { transaction: Object.assign(Object.assign({}, transactionMeta.transaction), { gasPrice: newGasPrice }) });
@@ -649,6 +500,23 @@ class TransactionController extends base_controller_1.BaseController {
         transactions[index] = transactionMeta;
         this.update({ transactions: this.trimTransactionsForState(transactions) });
     }
+    /**
+     * Update the security alert response for a transaction.
+     *
+     * @param transactionId - ID of the transaction.
+     * @param securityAlertResponse - The new security alert response for the transaction.
+     */
+    updateSecurityAlertResponse(transactionId, securityAlertResponse) {
+        if (!securityAlertResponse) {
+            throw new Error('updateSecurityAlertResponse: securityAlertResponse should not be null');
+        }
+        const transactionMeta = this.getTransaction(transactionId);
+        if (!transactionMeta) {
+            throw new Error(`Cannot update security alert response as no transaction metadata found`);
+        }
+        const updatedMeta = (0, lodash_1.merge)(transactionMeta, { securityAlertResponse });
+        this.updateTransaction(updatedMeta);
+    }
     /**
      * Removes all transactions from state, optionally based on the current network.
      *
@@ -674,67 +542,15 @@ class TransactionController extends base_controller_1.BaseController {
         });
     }
     /**
-     * Get transactions from Etherscan for the given address. By default all transactions are
-     * returned, but the `fromBlock` option can be given to filter just for transactions from a
-     * specific block onward.
+     * Gets the next nonce according to the nonce-tracker.
+     * Ensure `releaseLock` is called once processing of the `nonce` value is complete.
      *
-     * @param address - The address to fetch the transactions for.
-     * @param opt - Object containing optional data, fromBlock and Etherscan API key.
-     * @returns The block number of the latest incoming transaction.
+     * @param address - The hex string address for the transaction.
+     * @returns object with the `nextNonce` `nonceDetails`, and the releaseLock.
      */
-    fetchAll(address, opt) {
+    getNonceLock(address) {
         return __awaiter(this, void 0, void 0, function* () {
-            const { providerConfig, networkId: currentNetworkID } = this.getNetworkState();
-            const { chainId: currentChainId, type: networkType } = providerConfig;
-            const { transactions } = this.state;
-            const supportedNetworkIds = ['1', '5', '11155111'];
-            /* istanbul ignore next */
-            if (currentNetworkID === null ||
-                supportedNetworkIds.indexOf(currentNetworkID) === -1) {
-                return undefined;
-            }
-            const [etherscanTxResponse, etherscanTokenResponse] = yield (0, utils_1.handleTransactionFetch)(networkType, address, this.config.txHistoryLimit, opt);
-            const normalizedTxs = etherscanTxResponse.result.map((tx) => this.normalizeTx(tx, currentNetworkID, currentChainId));
-            const normalizedTokenTxs = etherscanTokenResponse.result.map((tx) => this.normalizeTokenTx(tx, currentNetworkID, currentChainId));
-            const [updateRequired, allTxs] = this.etherscanTransactionStateReconciler([...normalizedTxs, ...normalizedTokenTxs], transactions);
-            allTxs.sort((a, b) => (a.time < b.time ? -1 : 1));
-            let latestIncomingTxBlockNumber;
-            allTxs.forEach((tx) => __awaiter(this, void 0, void 0, function* () {
-                /* istanbul ignore next */
-                if (
-                // Using fallback to networkID only when there is no chainId present. Should be removed when networkID is completely removed.
-                (tx.chainId === currentChainId ||
-                    (!tx.chainId && tx.networkID === currentNetworkID)) &&
-                    tx.transaction.to &&
-                    tx.transaction.to.toLowerCase() === address.toLowerCase()) {
-                    if (tx.blockNumber &&
-                        (!latestIncomingTxBlockNumber ||
-                            parseInt(latestIncomingTxBlockNumber, 10) <
-                                parseInt(tx.blockNumber, 10))) {
-                        latestIncomingTxBlockNumber = tx.blockNumber;
-                    }
-                }
-                /* istanbul ignore else */
-                if (tx.toSmartContract === undefined) {
-                    // If not `to` is a contract deploy, if not `data` is send eth
-                    if (tx.transaction.to &&
-                        (!tx.transaction.data || tx.transaction.data !== '0x')) {
-                        const code = yield (0, controller_utils_1.query)(this.ethQuery, 'getCode', [
-                            tx.transaction.to,
-                        ]);
-                        tx.toSmartContract = (0, controller_utils_1.isSmartContractCode)(code);
-                    }
-                    else {
-                        tx.toSmartContract = false;
-                    }
-                }
-            }));
-            // Update state only if new transactions were fetched or
-            // the status or gas data of a transaction has changed
-            if (updateRequired) {
-                this.update({ transactions: this.trimTransactionsForState(allTxs) });
-            }
-            return latestIncomingTxBlockNumber;
+            return this.nonceTracker.getNonceLock(address);
         });
     }
     /**
@@ -753,7 +569,9 @@ class TransactionController extends base_controller_1.BaseController {
      */
     trimTransactionsForState(transactions) {
         const nonceNetworkSet = new Set();
-        const txsToKeep = transactions.reverse().filter((tx) => {
+        const txsToKeep = transactions
+            .sort((a, b) => (a.time > b.time ? -1 : 1)) // Descending time order
+            .filter((tx) => {
             const { chainId, networkID, status, transaction, time } = tx;
             if (transaction) {
                 const key = `${transaction.nonce}-${chainId !== null && chainId !== void 0 ? chainId : networkID}-${new Date(time).toDateString()}`;
@@ -768,7 +586,7 @@ class TransactionController extends base_controller_1.BaseController {
             }
             return false;
         });
-        txsToKeep.reverse();
+        txsToKeep.reverse(); // Ascending time order
         return txsToKeep;
     }
     /**
@@ -778,10 +596,10 @@ class TransactionController extends base_controller_1.BaseController {
      * @returns Whether the transaction is in a final state.
      */
     isFinalState(status) {
-        return (status === TransactionStatus.rejected ||
-            status === TransactionStatus.confirmed ||
-            status === TransactionStatus.failed ||
-            status === TransactionStatus.cancelled);
+        return (status === types_1.TransactionStatus.rejected ||
+            status === types_1.TransactionStatus.confirmed ||
+            status === types_1.TransactionStatus.failed ||
+            status === types_1.TransactionStatus.cancelled);
     }
     /**
      * Method to verify the state of a transaction using the Blockchain as a source of truth.
@@ -793,7 +611,7 @@ class TransactionController extends base_controller_1.BaseController {
         return __awaiter(this, void 0, void 0, function* () {
             const { status, transactionHash } = meta;
             switch (status) {
-                case TransactionStatus.confirmed:
+                case types_1.TransactionStatus.confirmed:
                     const txReceipt = yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionReceipt', [
                         transactionHash,
                     ]);
@@ -810,7 +628,7 @@ class TransactionController extends base_controller_1.BaseController {
                         return [meta, false];
                     }
                     return [meta, true];
-                case TransactionStatus.submitted:
+                case types_1.TransactionStatus.submitted:
                     const txObj = yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionByHash', [
                         transactionHash,
                     ]);
@@ -825,9 +643,17 @@ class TransactionController extends base_controller_1.BaseController {
                     }
                     /* istanbul ignore next */
                     if (txObj === null || txObj === void 0 ? void 0 : txObj.blockNumber) {
-                        meta.status = TransactionStatus.confirmed;
-                        this.hub.emit(`${meta.id}:confirmed`, meta);
-                        return [meta, true];
+                        // transactions can be added to a block and still fail, so we need to check the transaction status before emitting the confirmed event
+                        const txStatusFailed = yield this.checkTxReceiptStatusIsFailed(transactionHash);
+                        if (txStatusFailed) {
+                            const error = new Error('Transaction failed. The transaction was reversed');
+                            this.failTransaction(meta, error);
+                        }
+                        else {
+                            meta.status = types_1.TransactionStatus.confirmed;
+                            this.hub.emit(`${meta.id}:confirmed`, meta);
+                            return [meta, true];
+                        }
                     }
                     return [meta, false];
                 default:
@@ -856,88 +682,234 @@ class TransactionController extends base_controller_1.BaseController {
             return Number(txReceipt.status) === 0;
         });
     }
-    /**
-     * Method to verify the state of transactions using Etherscan as a source of truth.
-     *
-     * @param remoteTxs - Transactions to reconcile that are from a remote source.
-     * @param localTxs - Transactions to reconcile that are local.
-     * @returns A tuple containing a boolean indicating whether or not an update was required, and the updated transaction.
-     */
-    etherscanTransactionStateReconciler(remoteTxs, localTxs) {
-        const updatedTxs = this.getUpdatedTransactions(remoteTxs, localTxs);
-        const newTxs = this.getNewTransactions(remoteTxs, localTxs);
-        const updatedLocalTxs = localTxs.map((tx) => {
-            const txIdx = updatedTxs.findIndex(({ transactionHash }) => transactionHash === tx.transactionHash);
-            return txIdx === -1 ? tx : updatedTxs[txIdx];
+    processApproval(transactionMeta) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const transactionId = transactionMeta.id;
+            let resultCallbacks;
+            try {
+                const acceptResult = yield this.requestApproval(transactionMeta);
+                resultCallbacks = acceptResult.resultCallbacks;
+                const { meta, isCompleted } = this.isTransactionCompleted(transactionId);
+                if (meta && !isCompleted) {
+                    yield this.approveTransaction(transactionId);
+                }
+            }
+            catch (error) {
+                const { meta, isCompleted } = this.isTransactionCompleted(transactionId);
+                if (meta && !isCompleted) {
+                    if (error.code === eth_rpc_errors_1.errorCodes.provider.userRejectedRequest) {
+                        this.cancelTransaction(transactionId);
+                        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest('User rejected the transaction');
+                    }
+                    else {
+                        this.failTransaction(meta, error);
+                    }
+                }
+            }
+            const finalMeta = this.getTransaction(transactionId);
+            switch (finalMeta === null || finalMeta === void 0 ? void 0 : finalMeta.status) {
+                case types_1.TransactionStatus.failed:
+                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(finalMeta.error);
+                    throw eth_rpc_errors_1.ethErrors.rpc.internal(finalMeta.error.message);
+                case types_1.TransactionStatus.cancelled:
+                    const cancelError = eth_rpc_errors_1.ethErrors.rpc.internal('User cancelled the transaction');
+                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(cancelError);
+                    throw cancelError;
+                case types_1.TransactionStatus.submitted:
+                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.success();
+                    return finalMeta.transactionHash;
+                default:
+                    const internalError = eth_rpc_errors_1.ethErrors.rpc.internal(`MetaMask Tx Signature: Unknown problem: ${JSON.stringify(finalMeta || transactionId)}`);
+                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(internalError);
+                    throw internalError;
+            }
         });
-        const updateRequired = newTxs.length > 0 || updatedLocalTxs.length > 0;
-        return [updateRequired, [...newTxs, ...updatedLocalTxs]];
     }
-    /**
-     * Get all transactions that are in the remote transactions array
-     * but not in the local transactions array.
-     *
-     * @param remoteTxs - Array of transactions from remote source.
-     * @param localTxs - Array of transactions stored locally.
-     * @returns The new transactions.
-     */
-    getNewTransactions(remoteTxs, localTxs) {
-        return remoteTxs.filter((tx) => {
-            const alreadyInTransactions = localTxs.find(({ transactionHash }) => transactionHash === tx.transactionHash);
-            return !alreadyInTransactions;
+    requestApproval(txMeta) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const id = this.getApprovalId(txMeta);
+            const { origin } = txMeta;
+            const type = 'transaction';
+            const requestData = { txId: txMeta.id };
+            return this.messagingSystem.call('ApprovalController:addRequest', {
+                id,
+                origin: origin || 'metamask',
+                type,
+                requestData,
+                expectsResult: true,
+            }, true);
         });
     }
+    getApprovalId(txMeta) {
+        return String(txMeta.id);
+    }
     /**
-     * Get all the transactions that are locally outdated with respect
-     * to a remote source (etherscan or blockchain). The returned array
-     * contains the transactions with the updated data.
+     * Approves a transaction and updates it's status in state. If this is not a
+     * retry transaction, a nonce will be generated. The transaction is signed
+     * using the sign configuration property, then published to the blockchain.
+     * A `<tx.id>:finished` hub event is fired after success or failure.
      *
-     * @param remoteTxs - Array of transactions from remote source.
-     * @param localTxs - Array of transactions stored locally.
-     * @returns The updated transactions.
+     * @param transactionID - The ID of the transaction to approve.
      */
-    getUpdatedTransactions(remoteTxs, localTxs) {
-        return remoteTxs.filter((remoteTx) => {
-            const isTxOutdated = localTxs.find((localTx) => {
-                return (remoteTx.transactionHash === localTx.transactionHash &&
-                    this.isTransactionOutdated(remoteTx, localTx));
-            });
-            return isTxOutdated;
+    approveTransaction(transactionID) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { transactions } = this.state;
+            const releaseLock = yield this.mutex.acquire();
+            const { providerConfig } = this.getNetworkState();
+            const { chainId: currentChainId } = providerConfig;
+            const index = transactions.findIndex(({ id }) => transactionID === id);
+            const transactionMeta = transactions[index];
+            const { transaction: { nonce, from }, } = transactionMeta;
+            let nonceLock;
+            try {
+                if (!this.sign) {
+                    releaseLock();
+                    this.failTransaction(transactionMeta, new Error('No sign method defined.'));
+                    return;
+                }
+                else if (!currentChainId) {
+                    releaseLock();
+                    this.failTransaction(transactionMeta, new Error('No chainId defined.'));
+                    return;
+                }
+                const chainId = parseInt(currentChainId, undefined);
+                const { approved: status } = types_1.TransactionStatus;
+                let nonceToUse = nonce;
+                // if a nonce already exists on the transactionMeta it means this is a speedup or cancel transaction
+                // so we want to reuse that nonce and hope that it beats the previous attempt to chain. Otherwise use a new locked nonce
+                if (!nonceToUse) {
+                    nonceLock = yield this.nonceTracker.getNonceLock(from);
+                    nonceToUse = (0, ethereumjs_util_1.addHexPrefix)(nonceLock.nextNonce.toString(16));
+                }
+                transactionMeta.status = status;
+                transactionMeta.transaction.nonce = nonceToUse;
+                transactionMeta.transaction.chainId = chainId;
+                const baseTxParams = Object.assign(Object.assign({}, transactionMeta.transaction), { gasLimit: transactionMeta.transaction.gas });
+                const isEIP1559 = (0, utils_1.isEIP1559Transaction)(transactionMeta.transaction);
+                const txParams = isEIP1559
+                    ? Object.assign(Object.assign({}, baseTxParams), { maxFeePerGas: transactionMeta.transaction.maxFeePerGas, maxPriorityFeePerGas: transactionMeta.transaction.maxPriorityFeePerGas, estimatedBaseFee: transactionMeta.transaction.estimatedBaseFee, 
+                        // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set
+                        type: 2 }) : baseTxParams;
+                // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set
+                if (isEIP1559) {
+                    delete txParams.gasPrice;
+                }
+                const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
+                const signedTx = yield this.sign(unsignedEthTx, from);
+                transactionMeta.status = types_1.TransactionStatus.signed;
+                this.updateTransaction(transactionMeta);
+                const rawTransaction = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
+                transactionMeta.rawTransaction = rawTransaction;
+                this.updateTransaction(transactionMeta);
+                const transactionHash = yield this.publishTransaction(rawTransaction, txParams, currentChainId, transactionMeta.origin);
+                transactionMeta.transactionHash = transactionHash;
+                transactionMeta.status = types_1.TransactionStatus.submitted;
+                this.updateTransaction(transactionMeta);
+                this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
+            }
+            catch (error) {
+                this.failTransaction(transactionMeta, error);
+            }
+            finally {
+                // must set transaction to submitted/failed before releasing lock
+                if (nonceLock) {
+                    nonceLock.releaseLock();
+                }
+                releaseLock();
+            }
         });
     }
-    /**
-     * Verifies if a local transaction is outdated with respect to the remote transaction.
-     *
-     * @param remoteTx - The remote transaction from Etherscan.
-     * @param localTx - The local transaction.
-     * @returns Whether the transaction is outdated.
-     */
-    isTransactionOutdated(remoteTx, localTx) {
-        const statusOutdated = this.isStatusOutdated(remoteTx.transactionHash, localTx.transactionHash, remoteTx.status, localTx.status);
-        const gasDataOutdated = this.isGasDataOutdated(remoteTx.transaction.gasUsed, localTx.transaction.gasUsed);
-        return statusOutdated || gasDataOutdated;
+    publishTransaction(rawTransaction, transaction, chainId, origin) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const transactionHash = yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [
+                rawTransaction,
+            ]);
+            this.updateSubmitHistory(rawTransaction, transactionHash, transaction, chainId, origin);
+            return transactionHash;
+        });
     }
     /**
-     * Verifies if the status of a local transaction is outdated with respect to the remote transaction.
+     * Cancels a transaction based on its ID by setting its status to "rejected"
+     * and emitting a `<tx.id>:finished` hub event.
      *
-     * @param remoteTxHash - Remote transaction hash.
-     * @param localTxHash - Local transaction hash.
-     * @param remoteTxStatus - Remote transaction status.
-     * @param localTxStatus - Local transaction status.
-     * @returns Whether the status is outdated.
+     * @param transactionID - The ID of the transaction to cancel.
      */
-    isStatusOutdated(remoteTxHash, localTxHash, remoteTxStatus, localTxStatus) {
-        return remoteTxHash === localTxHash && remoteTxStatus !== localTxStatus;
+    cancelTransaction(transactionID) {
+        const transactionMeta = this.state.transactions.find(({ id }) => id === transactionID);
+        if (!transactionMeta) {
+            return;
+        }
+        transactionMeta.status = types_1.TransactionStatus.rejected;
+        this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
+        const transactions = this.state.transactions.filter(({ id }) => id !== transactionID);
+        this.update({ transactions: this.trimTransactionsForState(transactions) });
     }
     /**
-     * Verifies if the gas data of a local transaction is outdated with respect to the remote transaction.
+     * Whether the transaction has at least completed all local processing.
      *
-     * @param remoteGasUsed - Remote gas used in the transaction.
-     * @param localGasUsed - Local gas used in the transaction.
-     * @returns Whether the gas data is outdated.
+     * @param status - The transaction status.
+     * @returns Whether the transaction is in a final state.
      */
-    isGasDataOutdated(remoteGasUsed, localGasUsed) {
-        return remoteGasUsed !== localGasUsed;
+    isLocalFinalState(status) {
+        return [
+            types_1.TransactionStatus.cancelled,
+            types_1.TransactionStatus.confirmed,
+            types_1.TransactionStatus.failed,
+            types_1.TransactionStatus.rejected,
+            types_1.TransactionStatus.submitted,
+        ].includes(status);
+    }
+    getTransaction(transactionID) {
+        const { transactions } = this.state;
+        return transactions.find(({ id }) => id === transactionID);
+    }
+    isTransactionCompleted(transactionid) {
+        const transaction = this.getTransaction(transactionid);
+        if (!transaction) {
+            return { meta: undefined, isCompleted: false };
+        }
+        const isCompleted = this.isLocalFinalState(transaction.status);
+        return { meta: transaction, isCompleted };
+    }
+    onIncomingTransactions({ added, updated, }) {
+        const { transactions: currentTransactions } = this.state;
+        const updatedTransactions = [
+            ...added,
+            ...currentTransactions.map((originalTransaction) => {
+                const updatedTransaction = updated.find(({ transactionHash }) => transactionHash === originalTransaction.transactionHash);
+                return updatedTransaction !== null && updatedTransaction !== void 0 ? updatedTransaction : originalTransaction;
+            }),
+        ];
+        this.update({
+            transactions: this.trimTransactionsForState(updatedTransactions),
+        });
+        this.hub.emit('incomingTransactions', { added, updated });
+    }
+    onUpdatedLastFetchedBlockNumbers({ lastFetchedBlockNumbers, blockNumber, }) {
+        this.update({ lastFetchedBlockNumbers });
+        this.hub.emit('incomingTransactionBlock', blockNumber);
+    }
+    getNonceTrackerTransactions(status, address) {
+        const { chainId: currentChainId } = this.getNetworkState().providerConfig;
+        return (0, utils_1.getAndFormatTransactionsForNonceTracker)(currentChainId, address, status, this.state.transactions);
+    }
+    updateSubmitHistory(rawTransaction, hash, transaction, chainId, origin) {
+        const { rpcTarget: networkUrl, type: networkType } = this.getNetworkState().providerConfig;
+        const submitHistoryEntry = {
+            chainId,
+            hash,
+            networkType,
+            networkUrl,
+            origin,
+            time: Date.now(),
+            transaction,
+            rawTransaction,
+        };
+        const submitHistory = [submitHistoryEntry, ...this.state.submitHistory];
+        if (submitHistory.length > SUBMIT_HISTORY_LIMIT) {
+            submitHistory.pop();
+        }
+        this.update({ submitHistory });
     }
 }
 exports.TransactionController = TransactionController;
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.js.map b/node_modules/@metamask/transaction-controller/dist/TransactionController.js.map
deleted file mode 100644
index e834efc..0000000
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"TransactionController.js","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { addHexPrefix, bufferToHex, BN } from 'ethereumjs-util';\nimport { ethErrors } from 'eth-rpc-errors';\nimport MethodRegistry from 'eth-method-registry';\nimport EthQuery from 'eth-query';\nimport Common from '@ethereumjs/common';\nimport { TransactionFactory, TypedTransaction } from '@ethereumjs/tx';\nimport { v1 as random } from 'uuid';\nimport { Mutex } from 'async-mutex';\nimport {\n  BaseController,\n  BaseConfig,\n  BaseState,\n} from '@metamask/base-controller';\nimport type {\n  NetworkState,\n  ProviderProxy,\n  BlockTrackerProxy,\n} from '@metamask/network-controller';\nimport {\n  BNToHex,\n  fractionBN,\n  hexToBN,\n  safelyExecute,\n  isSmartContractCode,\n  query,\n  NetworkType,\n  RPC,\n} from '@metamask/controller-utils';\nimport NonceTracker from 'nonce-tracker';\nimport {\n  getAndFormatTransactionsForNonceTracker,\n  normalizeTransaction,\n  validateTransaction,\n  handleTransactionFetch,\n  getIncreasedPriceFromExisting,\n  isEIP1559Transaction,\n  isGasPriceValue,\n  isFeeMarketEIP1559Values,\n  validateGasValues,\n  validateMinimumIncrease,\n  ESTIMATE_GAS_ERROR,\n} from './utils';\n\nconst HARDFORK = 'london';\n\n/**\n * @type Result\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\n/**\n * @type Fetch All Options\n * @property fromBlock - String containing a specific block decimal number\n * @property etherscanApiKey - API key to be used to fetch token transactions\n */\nexport interface FetchAllOptions {\n  fromBlock?: string;\n  etherscanApiKey?: string;\n}\n\n/**\n * @type Transaction\n *\n * Transaction representation\n * @property chainId - Network ID as per EIP-155\n * @property data - Data to pass with this transaction\n * @property from - Address to send this transaction from\n * @property gas - Gas to send with this transaction\n * @property gasPrice - Price of gas with this transaction\n * @property gasUsed -  Gas used in the transaction\n * @property nonce - Unique number to prevent replay attacks\n * @property to - Address to send this transaction to\n * @property value - Value associated with this transaction\n */\nexport interface Transaction {\n  chainId?: number;\n  data?: string;\n  from: string;\n  gas?: string;\n  gasPrice?: string;\n  gasUsed?: string;\n  nonce?: string;\n  to?: string;\n  value?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n  estimatedBaseFee?: string;\n  estimateGasError?: string;\n}\n\nexport interface GasPriceValue {\n  gasPrice: string;\n}\n\nexport interface FeeMarketEIP1559Values {\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n}\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\nexport enum TransactionStatus {\n  approved = 'approved',\n  cancelled = 'cancelled',\n  confirmed = 'confirmed',\n  failed = 'failed',\n  rejected = 'rejected',\n  signed = 'signed',\n  submitted = 'submitted',\n  unapproved = 'unapproved',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\ntype TransactionMetaBase = {\n  isTransfer?: boolean;\n  transferInformation?: {\n    symbol: string;\n    contractAddress: string;\n    decimals: number;\n  };\n  id: string;\n  networkID?: string;\n  chainId?: string;\n  origin?: string;\n  rawTransaction?: string;\n  time: number;\n  toSmartContract?: boolean;\n  transaction: Transaction;\n  transactionHash?: string;\n  blockNumber?: string;\n  deviceConfirmedOn?: WalletDevice;\n  verifiedOnBlockchain?: boolean;\n};\n\n/**\n * @type TransactionMeta\n *\n * TransactionMeta representation\n * @property error - Synthesized error information for failed transactions\n * @property id - Generated UUID associated with this transaction\n * @property networkID - Network code as per EIP-155 for this transaction\n * @property origin - Origin this transaction was sent from\n * @property deviceConfirmedOn - string to indicate what device the transaction was confirmed\n * @property rawTransaction - Hex representation of the underlying transaction\n * @property status - String status of this transaction\n * @property time - Timestamp associated with this transaction\n * @property toSmartContract - Whether transaction recipient is a smart contract\n * @property transaction - Underlying Transaction object\n * @property transactionHash - Hash of a successful transaction\n * @property blockNumber - Number of the block where the transaction has been included\n */\nexport type TransactionMeta =\n  | ({\n      status: Exclude<TransactionStatus, TransactionStatus.failed>;\n    } & TransactionMetaBase)\n  | ({ status: TransactionStatus.failed; error: Error } & TransactionMetaBase);\n\n/**\n * @type EtherscanTransactionMeta\n *\n * EtherscanTransactionMeta representation\n * @property blockNumber - Number of the block where the transaction has been included\n * @property timeStamp - Timestamp associated with this transaction\n * @property hash - Hash of a successful transaction\n * @property nonce - Nonce of the transaction\n * @property blockHash - Hash of the block where the transaction has been included\n * @property transactionIndex - Etherscan internal index for this transaction\n * @property from - Address to send this transaction from\n * @property to - Address to send this transaction to\n * @property gas - Gas to send with this transaction\n * @property gasPrice - Price of gas with this transaction\n * @property isError - Synthesized error information for failed transactions\n * @property txreceipt_status - Receipt status for this transaction\n * @property input - input of the transaction\n * @property contractAddress - Address of the contract\n * @property cumulativeGasUsed - Amount of gas used\n * @property confirmations - Number of confirmations\n */\nexport interface EtherscanTransactionMeta {\n  blockNumber: string;\n  timeStamp: string;\n  hash: string;\n  nonce: string;\n  blockHash: string;\n  transactionIndex: string;\n  from: string;\n  to: string;\n  value: string;\n  gas: string;\n  gasPrice: string;\n  cumulativeGasUsed: string;\n  gasUsed: string;\n  isError: string;\n  txreceipt_status: string;\n  input: string;\n  contractAddress: string;\n  confirmations: string;\n  tokenDecimal: string;\n  tokenSymbol: string;\n}\n\n/**\n * @type TransactionConfig\n *\n * Transaction controller configuration\n * @property interval - Polling interval used to fetch new currency rate\n * @property provider - Provider used to create a new underlying EthQuery instance\n * @property sign - Method used to sign transactions\n */\nexport interface TransactionConfig extends BaseConfig {\n  interval: number;\n  sign?: (transaction: Transaction, from: string) => Promise<any>;\n  txHistoryLimit: number;\n}\n\n/**\n * @type MethodData\n *\n * Method data registry object\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport interface MethodData {\n  registryMethod: string;\n  parsedRegistryMethod: Record<string, unknown>;\n}\n\n/**\n * @type TransactionState\n *\n * Transaction controller state\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n */\nexport interface TransactionState extends BaseState {\n  transactions: TransactionMeta[];\n  methodData: { [key: string]: MethodData };\n}\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.5;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  TransactionConfig,\n  TransactionState\n> {\n  private ethQuery: any;\n\n  private nonceTracker: NonceTracker;\n\n  private registry: any;\n\n  private provider: ProviderProxy;\n\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private mutex = new Mutex();\n\n  private getNetworkState: () => NetworkState;\n\n  private failTransaction(transactionMeta: TransactionMeta, error: Error) {\n    const newTransactionMeta = {\n      ...transactionMeta,\n      error,\n      status: TransactionStatus.failed,\n    };\n    this.updateTransaction(newTransactionMeta);\n    this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);\n  }\n\n  private async registryLookup(fourBytePrefix: string): Promise<MethodData> {\n    const registryMethod = await this.registry.lookup(fourBytePrefix);\n    const parsedRegistryMethod = this.registry.parse(registryMethod);\n    return { registryMethod, parsedRegistryMethod };\n  }\n\n  /**\n   * Normalizes the transaction information from etherscan\n   * to be compatible with the TransactionMeta interface.\n   *\n   * @param txMeta - The transaction.\n   * @param currentNetworkID - The current network ID.\n   * @param currentChainId - The current chain ID.\n   * @returns The normalized transaction.\n   */\n  private normalizeTx(\n    txMeta: EtherscanTransactionMeta,\n    currentNetworkID: string,\n    currentChainId: string,\n  ): TransactionMeta {\n    const time = parseInt(txMeta.timeStamp, 10) * 1000;\n    const normalizedTransactionBase = {\n      blockNumber: txMeta.blockNumber,\n      id: random({ msecs: time }),\n      networkID: currentNetworkID,\n      chainId: currentChainId,\n      time,\n      transaction: {\n        data: txMeta.input,\n        from: txMeta.from,\n        gas: BNToHex(new BN(txMeta.gas)),\n        gasPrice: BNToHex(new BN(txMeta.gasPrice)),\n        gasUsed: BNToHex(new BN(txMeta.gasUsed)),\n        nonce: BNToHex(new BN(txMeta.nonce)),\n        to: txMeta.to,\n        value: BNToHex(new BN(txMeta.value)),\n      },\n      transactionHash: txMeta.hash,\n      verifiedOnBlockchain: false,\n    };\n\n    /* istanbul ignore else */\n    if (txMeta.isError === '0') {\n      return {\n        ...normalizedTransactionBase,\n        status: TransactionStatus.confirmed,\n      };\n    }\n\n    /* istanbul ignore next */\n    return {\n      ...normalizedTransactionBase,\n      error: new Error('Transaction failed'),\n      status: TransactionStatus.failed,\n    };\n  }\n\n  private normalizeTokenTx = (\n    txMeta: EtherscanTransactionMeta,\n    currentNetworkID: string,\n    currentChainId: string,\n  ): TransactionMeta => {\n    const time = parseInt(txMeta.timeStamp, 10) * 1000;\n    const {\n      to,\n      from,\n      gas,\n      gasPrice,\n      gasUsed,\n      hash,\n      contractAddress,\n      tokenDecimal,\n      tokenSymbol,\n      value,\n    } = txMeta;\n    return {\n      id: random({ msecs: time }),\n      isTransfer: true,\n      networkID: currentNetworkID,\n      chainId: currentChainId,\n      status: TransactionStatus.confirmed,\n      time,\n      transaction: {\n        chainId: 1,\n        from,\n        gas,\n        gasPrice,\n        gasUsed,\n        to,\n        value,\n      },\n      transactionHash: hash,\n      transferInformation: {\n        contractAddress,\n        decimals: Number(tokenDecimal),\n        symbol: tokenSymbol,\n      },\n      verifiedOnBlockchain: false,\n    };\n  };\n\n  /**\n   * EventEmitter instance used to listen to specific transactional events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TransactionController';\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Creates a TransactionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.provider - The provider used to create the underlying EthQuery instance.\n   * @param options.blockTracker - The block tracker used to poll for new blocks data.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      getNetworkState,\n      onNetworkStateChange,\n      provider,\n      blockTracker,\n    }: {\n      getNetworkState: () => NetworkState;\n      onNetworkStateChange: (listener: (state: NetworkState) => void) => void;\n      provider: ProviderProxy;\n      blockTracker: BlockTrackerProxy;\n    },\n    config?: Partial<TransactionConfig>,\n    state?: Partial<TransactionState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 15000,\n      txHistoryLimit: 40,\n    };\n\n    this.defaultState = {\n      methodData: {},\n      transactions: [],\n    };\n    this.initialize();\n    this.provider = provider;\n    this.getNetworkState = getNetworkState;\n    this.ethQuery = new EthQuery(provider);\n    this.registry = new MethodRegistry({ provider });\n    this.nonceTracker = new NonceTracker({\n      provider,\n      blockTracker,\n      getPendingTransactions: (address) =>\n        getAndFormatTransactionsForNonceTracker(\n          address,\n          TransactionStatus.submitted,\n          this.state.transactions,\n        ),\n      getConfirmedTransactions: (address) =>\n        getAndFormatTransactionsForNonceTracker(\n          address,\n          TransactionStatus.confirmed,\n          this.state.transactions,\n        ),\n    });\n\n    onNetworkStateChange(() => {\n      this.ethQuery = new EthQuery(this.provider);\n      this.registry = new MethodRegistry({ provider: this.provider });\n    });\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - The polling interval used to fetch new transaction statuses.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.queryTransactionStatuses());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(fourBytePrefix: string): Promise<MethodData> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { methodData } = this.state;\n      const knownMethod = Object.keys(methodData).find(\n        (knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix,\n      );\n      if (knownMethod) {\n        return methodData[fourBytePrefix];\n      }\n      const registry = await this.registryLookup(fourBytePrefix);\n      this.update({\n        methodData: { ...methodData, ...{ [fourBytePrefix]: registry } },\n      });\n      return registry;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param transaction - The transaction object to add.\n   * @param origin - The domain origin to append to the generated TransactionMeta.\n   * @param deviceConfirmedOn - An enum to indicate what device the transaction was confirmed to append to the generated TransactionMeta.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    transaction: Transaction,\n    origin?: string,\n    deviceConfirmedOn?: WalletDevice,\n  ): Promise<Result> {\n    const { providerConfig, networkId } = this.getNetworkState();\n    const { transactions } = this.state;\n    transaction = normalizeTransaction(transaction);\n    validateTransaction(transaction);\n\n    const transactionMeta: TransactionMeta = {\n      id: random(),\n      networkID: networkId ?? undefined,\n      chainId: providerConfig.chainId,\n      origin,\n      status: TransactionStatus.unapproved as TransactionStatus.unapproved,\n      time: Date.now(),\n      transaction,\n      deviceConfirmedOn,\n      verifiedOnBlockchain: false,\n    };\n\n    try {\n      const { gas, estimateGasError } = await this.estimateGas(transaction);\n      transaction.gas = gas;\n      transaction.estimateGasError = estimateGasError;\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n      return Promise.reject(error);\n    }\n\n    const result: Promise<string> = new Promise((resolve, reject) => {\n      this.hub.once(\n        `${transactionMeta.id}:finished`,\n        (meta: TransactionMeta) => {\n          switch (meta.status) {\n            case TransactionStatus.submitted:\n              return resolve(meta.transactionHash as string);\n            case TransactionStatus.rejected:\n              return reject(\n                ethErrors.provider.userRejectedRequest(\n                  'User rejected the transaction',\n                ),\n              );\n            case TransactionStatus.cancelled:\n              return reject(\n                ethErrors.rpc.internal('User cancelled the transaction'),\n              );\n            case TransactionStatus.failed:\n              return reject(ethErrors.rpc.internal(meta.error.message));\n            /* istanbul ignore next */\n            default:\n              return reject(\n                ethErrors.rpc.internal(\n                  `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n                    meta,\n                  )}`,\n                ),\n              );\n          }\n        },\n      );\n    });\n\n    transactions.push(transactionMeta);\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n    this.hub.emit(`unapprovedTransaction`, transactionMeta);\n    return { result, transactionMeta };\n  }\n\n  prepareUnsignedEthTx(txParams: Record<string, unknown>): TypedTransaction {\n    return TransactionFactory.fromTxData(txParams, {\n      common: this.getCommonConfiguration(),\n      freeze: false,\n    });\n  }\n\n  /**\n   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for\n   * specifying which chain, network, hardfork and EIPs to support for\n   * a transaction. By referencing this configuration, and analyzing the fields\n   * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718\n   * transaction type to use.\n   *\n   * @returns {Common} common configuration object\n   */\n\n  getCommonConfiguration(): Common {\n    const {\n      networkId,\n      providerConfig: { type: chain, chainId, nickname: name },\n    } = this.getNetworkState();\n\n    if (chain !== RPC) {\n      return new Common({ chain, hardfork: HARDFORK });\n    }\n\n    const customChainParams = {\n      name,\n      chainId: parseInt(chainId, undefined),\n      networkId: networkId === null ? NaN : parseInt(networkId, undefined),\n    };\n\n    return Common.forCustomChain(\n      NetworkType.mainnet,\n      customChainParams,\n      HARDFORK,\n    );\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionID - The ID of the transaction to approve.\n   */\n  async approveTransaction(transactionID: string) {\n    const { transactions } = this.state;\n    const releaseLock = await this.mutex.acquire();\n    const { providerConfig } = this.getNetworkState();\n    const { chainId: currentChainId } = providerConfig;\n    const index = transactions.findIndex(({ id }) => transactionID === id);\n    const transactionMeta = transactions[index];\n    const {\n      transaction: { nonce, from },\n    } = transactionMeta;\n    let nonceLock;\n    try {\n      if (!this.sign) {\n        releaseLock();\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return;\n      } else if (!currentChainId) {\n        releaseLock();\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return;\n      }\n\n      const chainId = parseInt(currentChainId, undefined);\n      const { approved: status } = TransactionStatus;\n      let nonceToUse = nonce;\n      // if a nonce already exists on the transactionMeta it means this is a speedup or cancel transaction\n      // so we want to reuse that nonce and hope that it beats the previous attempt to chain. Otherwise use a new locked nonce\n      if (!nonceToUse) {\n        nonceLock = await this.nonceTracker.getNonceLock(from);\n        nonceToUse = addHexPrefix(nonceLock.nextNonce.toString(16));\n      }\n\n      transactionMeta.status = status;\n      transactionMeta.transaction.nonce = nonceToUse;\n      transactionMeta.transaction.chainId = chainId;\n\n      const baseTxParams = {\n        ...transactionMeta.transaction,\n        gasLimit: transactionMeta.transaction.gas,\n      };\n\n      const isEIP1559 = isEIP1559Transaction(transactionMeta.transaction);\n\n      const txParams = isEIP1559\n        ? {\n            ...baseTxParams,\n            maxFeePerGas: transactionMeta.transaction.maxFeePerGas,\n            maxPriorityFeePerGas:\n              transactionMeta.transaction.maxPriorityFeePerGas,\n            estimatedBaseFee: transactionMeta.transaction.estimatedBaseFee,\n            // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set\n            type: 2,\n          }\n        : baseTxParams;\n\n      // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set\n      if (isEIP1559) {\n        delete txParams.gasPrice;\n      }\n\n      const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n      const signedTx = await this.sign(unsignedEthTx, from);\n      transactionMeta.status = TransactionStatus.signed;\n      this.updateTransaction(transactionMeta);\n      const rawTransaction = bufferToHex(signedTx.serialize());\n\n      transactionMeta.rawTransaction = rawTransaction;\n      this.updateTransaction(transactionMeta);\n      const transactionHash = await query(this.ethQuery, 'sendRawTransaction', [\n        rawTransaction,\n      ]);\n      transactionMeta.transactionHash = transactionHash;\n      transactionMeta.status = TransactionStatus.submitted;\n      this.updateTransaction(transactionMeta);\n      this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n    } finally {\n      // must set transaction to submitted/failed before releasing lock\n      if (nonceLock) {\n        nonceLock.releaseLock();\n      }\n      releaseLock();\n    }\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionID - The ID of the transaction to cancel.\n   */\n  cancelTransaction(transactionID: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionID,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    transactionMeta.status = TransactionStatus.rejected;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    const transactions = this.state.transactions.filter(\n      ({ id }) => id !== transactionID,\n    );\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionID - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transation.\n   */\n  async stopTransaction(\n    transactionID: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n  ) {\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionID,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.transaction.gasPrice,\n      CANCEL_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.transaction?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.transaction?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            from: transactionMeta.transaction.from,\n            gasLimit: transactionMeta.transaction.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n            nonce: transactionMeta.transaction.nonce,\n            to: transactionMeta.transaction.from,\n            value: '0x0',\n          }\n        : {\n            from: transactionMeta.transaction.from,\n            gasLimit: transactionMeta.transaction.gas,\n            gasPrice: newGasPrice,\n            nonce: transactionMeta.transaction.nonce,\n            to: transactionMeta.transaction.from,\n            value: '0x0',\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.transaction.from,\n    );\n    const rawTransaction = bufferToHex(signedTx.serialize());\n    await query(this.ethQuery, 'sendRawTransaction', [rawTransaction]);\n    transactionMeta.status = TransactionStatus.cancelled;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionID - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transation.\n   */\n  async speedUpTransaction(\n    transactionID: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n  ) {\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionID,\n    );\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const { transactions } = this.state;\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.transaction.gasPrice,\n      SPEED_UP_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.transaction?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.transaction?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...transactionMeta.transaction,\n            gasLimit: transactionMeta.transaction.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n          }\n        : {\n            ...transactionMeta.transaction,\n            gasLimit: transactionMeta.transaction.gas,\n            gasPrice: newGasPrice,\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.transaction.from,\n    );\n    const rawTransaction = bufferToHex(signedTx.serialize());\n    const transactionHash = await query(this.ethQuery, 'sendRawTransaction', [\n      rawTransaction,\n    ]);\n    const baseTransactionMeta = {\n      ...transactionMeta,\n      id: random(),\n      time: Date.now(),\n      transactionHash,\n    };\n    const newTransactionMeta =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...baseTransactionMeta,\n            transaction: {\n              ...transactionMeta.transaction,\n              maxFeePerGas: newMaxFeePerGas,\n              maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            },\n          }\n        : {\n            ...baseTransactionMeta,\n            transaction: {\n              ...transactionMeta.transaction,\n              gasPrice: newGasPrice,\n            },\n          };\n    transactions.push(newTransactionMeta);\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n    this.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(transaction: Transaction) {\n    const estimatedTransaction = { ...transaction };\n    const {\n      gas,\n      gasPrice: providedGasPrice,\n      to,\n      value,\n      data,\n    } = estimatedTransaction;\n    const gasPrice =\n      typeof providedGasPrice === 'undefined'\n        ? await query(this.ethQuery, 'gasPrice')\n        : providedGasPrice;\n    const { providerConfig } = this.getNetworkState();\n    const isCustomNetwork = providerConfig.type === NetworkType.rpc;\n    // 1. If gas is already defined on the transaction, use it\n    if (typeof gas !== 'undefined') {\n      return { gas, gasPrice };\n    }\n    const { gasLimit } = await query(this.ethQuery, 'getBlockByNumber', [\n      'latest',\n      false,\n    ]);\n\n    // 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000.\n    // If the newtwork is a custom network then bypass this check and fetch 'estimateGas'.\n    /* istanbul ignore next */\n    const code = to ? await query(this.ethQuery, 'getCode', [to]) : undefined;\n    /* istanbul ignore next */\n    if (\n      !isCustomNetwork &&\n      (!to || (to && !data && (!code || code === '0x')))\n    ) {\n      return { gas: '0x5208', gasPrice };\n    }\n\n    // if data, should be hex string format\n    estimatedTransaction.data = !data\n      ? data\n      : /* istanbul ignore next */ addHexPrefix(data);\n\n    // 3. If this is a contract address, safely estimate gas using RPC\n    estimatedTransaction.value =\n      typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n    const gasLimitBN = hexToBN(gasLimit);\n    estimatedTransaction.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));\n\n    let gasHex;\n    let estimateGasError;\n    try {\n      gasHex = await query(this.ethQuery, 'estimateGas', [\n        estimatedTransaction,\n      ]);\n    } catch (error) {\n      estimateGasError = ESTIMATE_GAS_ERROR;\n    }\n    // 4. Pad estimated gas without exceeding the most recent block gasLimit. If the network is a\n    // a custom network then return the eth_estimateGas value.\n    const gasBN = hexToBN(gasHex);\n    const maxGasBN = gasLimitBN.muln(0.9);\n    const paddedGasBN = gasBN.muln(1.5);\n    /* istanbul ignore next */\n    if (gasBN.gt(maxGasBN) || isCustomNetwork) {\n      return { gas: addHexPrefix(gasHex), gasPrice, estimateGasError };\n    }\n\n    /* istanbul ignore next */\n    if (paddedGasBN.lt(maxGasBN)) {\n      return {\n        gas: addHexPrefix(BNToHex(paddedGasBN)),\n        gasPrice,\n        estimateGasError,\n      };\n    }\n    return { gas: addHexPrefix(BNToHex(maxGasBN)), gasPrice };\n  }\n\n  /**\n   * Check the status of submitted transactions on the network to determine whether they have\n   * been included in a block. Any that have been included in a block are marked as confirmed.\n   */\n  async queryTransactionStatuses() {\n    const { transactions } = this.state;\n    const { providerConfig, networkId: currentNetworkID } =\n      this.getNetworkState();\n    const { chainId: currentChainId } = providerConfig;\n    let gotUpdates = false;\n    await safelyExecute(() =>\n      Promise.all(\n        transactions.map(async (meta, index) => {\n          // Using fallback to networkID only when there is no chainId present.\n          // Should be removed when networkID is completely removed.\n          const txBelongsToCurrentChain =\n            meta.chainId === currentChainId ||\n            (!meta.chainId && meta.networkID === currentNetworkID);\n\n          if (!meta.verifiedOnBlockchain && txBelongsToCurrentChain) {\n            const [reconciledTx, updateRequired] =\n              await this.blockchainTransactionStateReconciler(meta);\n            if (updateRequired) {\n              transactions[index] = reconciledTx;\n              gotUpdates = updateRequired;\n            }\n          }\n        }),\n      ),\n    );\n\n    /* istanbul ignore else */\n    if (gotUpdates) {\n      this.update({\n        transactions: this.trimTransactionsForState(transactions),\n      });\n    }\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   */\n  updateTransaction(transactionMeta: TransactionMeta) {\n    const { transactions } = this.state;\n    transactionMeta.transaction = normalizeTransaction(\n      transactionMeta.transaction,\n    );\n    validateTransaction(transactionMeta.transaction);\n    const index = transactions.findIndex(({ id }) => transactionMeta.id === id);\n    transactions[index] = transactionMeta;\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Removes all transactions from state, optionally based on the current network.\n   *\n   * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the\n   * current network. If `true`, all transactions are wiped.\n   */\n  wipeTransactions(ignoreNetwork?: boolean) {\n    /* istanbul ignore next */\n    if (ignoreNetwork) {\n      this.update({ transactions: [] });\n      return;\n    }\n    const { providerConfig, networkId: currentNetworkID } =\n      this.getNetworkState();\n    const { chainId: currentChainId } = providerConfig;\n    const newTransactions = this.state.transactions.filter(\n      ({ networkID, chainId }) => {\n        // Using fallback to networkID only when there is no chainId present. Should be removed when networkID is completely removed.\n        const isCurrentNetwork =\n          chainId === currentChainId ||\n          (!chainId && networkID === currentNetworkID);\n        return !isCurrentNetwork;\n      },\n    );\n\n    this.update({\n      transactions: this.trimTransactionsForState(newTransactions),\n    });\n  }\n\n  /**\n   * Get transactions from Etherscan for the given address. By default all transactions are\n   * returned, but the `fromBlock` option can be given to filter just for transactions from a\n   * specific block onward.\n   *\n   * @param address - The address to fetch the transactions for.\n   * @param opt - Object containing optional data, fromBlock and Etherscan API key.\n   * @returns The block number of the latest incoming transaction.\n   */\n  async fetchAll(\n    address: string,\n    opt?: FetchAllOptions,\n  ): Promise<string | void> {\n    const { providerConfig, networkId: currentNetworkID } =\n      this.getNetworkState();\n    const { chainId: currentChainId, type: networkType } = providerConfig;\n    const { transactions } = this.state;\n\n    const supportedNetworkIds = ['1', '5', '11155111'];\n    /* istanbul ignore next */\n    if (\n      currentNetworkID === null ||\n      supportedNetworkIds.indexOf(currentNetworkID) === -1\n    ) {\n      return undefined;\n    }\n\n    const [etherscanTxResponse, etherscanTokenResponse] =\n      await handleTransactionFetch(\n        networkType,\n        address,\n        this.config.txHistoryLimit,\n        opt,\n      );\n\n    const normalizedTxs = etherscanTxResponse.result.map(\n      (tx: EtherscanTransactionMeta) =>\n        this.normalizeTx(tx, currentNetworkID, currentChainId),\n    );\n    const normalizedTokenTxs = etherscanTokenResponse.result.map(\n      (tx: EtherscanTransactionMeta) =>\n        this.normalizeTokenTx(tx, currentNetworkID, currentChainId),\n    );\n\n    const [updateRequired, allTxs] = this.etherscanTransactionStateReconciler(\n      [...normalizedTxs, ...normalizedTokenTxs],\n      transactions,\n    );\n\n    allTxs.sort((a, b) => (a.time < b.time ? -1 : 1));\n\n    let latestIncomingTxBlockNumber: string | undefined;\n    allTxs.forEach(async (tx) => {\n      /* istanbul ignore next */\n      if (\n        // Using fallback to networkID only when there is no chainId present. Should be removed when networkID is completely removed.\n        (tx.chainId === currentChainId ||\n          (!tx.chainId && tx.networkID === currentNetworkID)) &&\n        tx.transaction.to &&\n        tx.transaction.to.toLowerCase() === address.toLowerCase()\n      ) {\n        if (\n          tx.blockNumber &&\n          (!latestIncomingTxBlockNumber ||\n            parseInt(latestIncomingTxBlockNumber, 10) <\n              parseInt(tx.blockNumber, 10))\n        ) {\n          latestIncomingTxBlockNumber = tx.blockNumber;\n        }\n      }\n\n      /* istanbul ignore else */\n      if (tx.toSmartContract === undefined) {\n        // If not `to` is a contract deploy, if not `data` is send eth\n        if (\n          tx.transaction.to &&\n          (!tx.transaction.data || tx.transaction.data !== '0x')\n        ) {\n          const code = await query(this.ethQuery, 'getCode', [\n            tx.transaction.to,\n          ]);\n          tx.toSmartContract = isSmartContractCode(code);\n        } else {\n          tx.toSmartContract = false;\n        }\n      }\n    });\n\n    // Update state only if new transactions were fetched or\n    // the status or gas data of a transaction has changed\n    if (updateRequired) {\n      this.update({ transactions: this.trimTransactionsForState(allTxs) });\n    }\n    return latestIncomingTxBlockNumber;\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for transactions of the same\n   * nonce, same day and network combo can result in confusing or broken experiences\n   * in the UI. The transactions are then updated using the BaseController update.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n    const txsToKeep = transactions.reverse().filter((tx) => {\n      const { chainId, networkID, status, transaction, time } = tx;\n      if (transaction) {\n        const key = `${transaction.nonce}-${chainId ?? networkID}-${new Date(\n          time,\n        ).toDateString()}`;\n        if (nonceNetworkSet.has(key)) {\n          return true;\n        } else if (\n          nonceNetworkSet.size < this.config.txHistoryLimit ||\n          !this.isFinalState(status)\n        ) {\n          nonceNetworkSet.add(key);\n          return true;\n        }\n      }\n      return false;\n    });\n    txsToKeep.reverse();\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed ||\n      status === TransactionStatus.cancelled\n    );\n  }\n\n  /**\n   * Method to verify the state of a transaction using the Blockchain as a source of truth.\n   *\n   * @param meta - The local transaction to verify on the blockchain.\n   * @returns A tuple containing the updated transaction, and whether or not an update was required.\n   */\n  private async blockchainTransactionStateReconciler(\n    meta: TransactionMeta,\n  ): Promise<[TransactionMeta, boolean]> {\n    const { status, transactionHash } = meta;\n    switch (status) {\n      case TransactionStatus.confirmed:\n        const txReceipt = await query(this.ethQuery, 'getTransactionReceipt', [\n          transactionHash,\n        ]);\n\n        if (!txReceipt) {\n          return [meta, false];\n        }\n\n        meta.verifiedOnBlockchain = true;\n        meta.transaction.gasUsed = txReceipt.gasUsed;\n\n        // According to the Web3 docs:\n        // TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n        if (Number(txReceipt.status) === 0) {\n          const error: Error = new Error(\n            'Transaction failed. The transaction was reversed',\n          );\n          this.failTransaction(meta, error);\n          return [meta, false];\n        }\n\n        return [meta, true];\n      case TransactionStatus.submitted:\n        const txObj = await query(this.ethQuery, 'getTransactionByHash', [\n          transactionHash,\n        ]);\n\n        if (!txObj) {\n          const receiptShowsFailedStatus =\n            await this.checkTxReceiptStatusIsFailed(transactionHash);\n\n          // Case the txObj is evaluated as false, a second check will\n          // determine if the tx failed or it is pending or confirmed\n          if (receiptShowsFailedStatus) {\n            const error: Error = new Error(\n              'Transaction failed. The transaction was dropped or replaced by a new one',\n            );\n            this.failTransaction(meta, error);\n          }\n        }\n\n        /* istanbul ignore next */\n        if (txObj?.blockNumber) {\n          meta.status = TransactionStatus.confirmed;\n          this.hub.emit(`${meta.id}:confirmed`, meta);\n          return [meta, true];\n        }\n\n        return [meta, false];\n      default:\n        return [meta, false];\n    }\n  }\n\n  /**\n   * Method to check if a tx has failed according to their receipt\n   * According to the Web3 docs:\n   * TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n   * The receipt is not available for pending transactions and returns null.\n   *\n   * @param txHash - The transaction hash.\n   * @returns Whether the transaction has failed.\n   */\n  private async checkTxReceiptStatusIsFailed(\n    txHash: string | undefined,\n  ): Promise<boolean> {\n    const txReceipt = await query(this.ethQuery, 'getTransactionReceipt', [\n      txHash,\n    ]);\n    if (!txReceipt) {\n      // Transaction is pending\n      return false;\n    }\n    return Number(txReceipt.status) === 0;\n  }\n\n  /**\n   * Method to verify the state of transactions using Etherscan as a source of truth.\n   *\n   * @param remoteTxs - Transactions to reconcile that are from a remote source.\n   * @param localTxs - Transactions to reconcile that are local.\n   * @returns A tuple containing a boolean indicating whether or not an update was required, and the updated transaction.\n   */\n  private etherscanTransactionStateReconciler(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): [boolean, TransactionMeta[]] {\n    const updatedTxs: TransactionMeta[] = this.getUpdatedTransactions(\n      remoteTxs,\n      localTxs,\n    );\n\n    const newTxs: TransactionMeta[] = this.getNewTransactions(\n      remoteTxs,\n      localTxs,\n    );\n\n    const updatedLocalTxs = localTxs.map((tx: TransactionMeta) => {\n      const txIdx = updatedTxs.findIndex(\n        ({ transactionHash }) => transactionHash === tx.transactionHash,\n      );\n      return txIdx === -1 ? tx : updatedTxs[txIdx];\n    });\n\n    const updateRequired = newTxs.length > 0 || updatedLocalTxs.length > 0;\n\n    return [updateRequired, [...newTxs, ...updatedLocalTxs]];\n  }\n\n  /**\n   * Get all transactions that are in the remote transactions array\n   * but not in the local transactions array.\n   *\n   * @param remoteTxs - Array of transactions from remote source.\n   * @param localTxs - Array of transactions stored locally.\n   * @returns The new transactions.\n   */\n  private getNewTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((tx) => {\n      const alreadyInTransactions = localTxs.find(\n        ({ transactionHash }) => transactionHash === tx.transactionHash,\n      );\n      return !alreadyInTransactions;\n    });\n  }\n\n  /**\n   * Get all the transactions that are locally outdated with respect\n   * to a remote source (etherscan or blockchain). The returned array\n   * contains the transactions with the updated data.\n   *\n   * @param remoteTxs - Array of transactions from remote source.\n   * @param localTxs - Array of transactions stored locally.\n   * @returns The updated transactions.\n   */\n  private getUpdatedTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((remoteTx) => {\n      const isTxOutdated = localTxs.find((localTx) => {\n        return (\n          remoteTx.transactionHash === localTx.transactionHash &&\n          this.isTransactionOutdated(remoteTx, localTx)\n        );\n      });\n      return isTxOutdated;\n    });\n  }\n\n  /**\n   * Verifies if a local transaction is outdated with respect to the remote transaction.\n   *\n   * @param remoteTx - The remote transaction from Etherscan.\n   * @param localTx - The local transaction.\n   * @returns Whether the transaction is outdated.\n   */\n  private isTransactionOutdated(\n    remoteTx: TransactionMeta,\n    localTx: TransactionMeta,\n  ): boolean {\n    const statusOutdated = this.isStatusOutdated(\n      remoteTx.transactionHash,\n      localTx.transactionHash,\n      remoteTx.status,\n      localTx.status,\n    );\n    const gasDataOutdated = this.isGasDataOutdated(\n      remoteTx.transaction.gasUsed,\n      localTx.transaction.gasUsed,\n    );\n    return statusOutdated || gasDataOutdated;\n  }\n\n  /**\n   * Verifies if the status of a local transaction is outdated with respect to the remote transaction.\n   *\n   * @param remoteTxHash - Remote transaction hash.\n   * @param localTxHash - Local transaction hash.\n   * @param remoteTxStatus - Remote transaction status.\n   * @param localTxStatus - Local transaction status.\n   * @returns Whether the status is outdated.\n   */\n  private isStatusOutdated(\n    remoteTxHash: string | undefined,\n    localTxHash: string | undefined,\n    remoteTxStatus: TransactionStatus,\n    localTxStatus: TransactionStatus,\n  ): boolean {\n    return remoteTxHash === localTxHash && remoteTxStatus !== localTxStatus;\n  }\n\n  /**\n   * Verifies if the gas data of a local transaction is outdated with respect to the remote transaction.\n   *\n   * @param remoteGasUsed - Remote gas used in the transaction.\n   * @param localGasUsed - Local gas used in the transaction.\n   * @returns Whether the gas data is outdated.\n   */\n  private isGasDataOutdated(\n    remoteGasUsed: string | undefined,\n    localGasUsed: string | undefined,\n  ): boolean {\n    return remoteGasUsed !== localGasUsed;\n  }\n}\n\nexport default TransactionController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/constants.d.ts b/node_modules/@metamask/transaction-controller/dist/constants.d.ts
new file mode 100644
index 0000000..c7de118
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/constants.d.ts
@@ -0,0 +1,119 @@
+export declare const CHAIN_IDS: {
+    readonly MAINNET: "0x1";
+    readonly GOERLI: "0x5";
+    readonly BSC: "0x38";
+    readonly BSC_TESTNET: "0x61";
+    readonly OPTIMISM: "0xa";
+    readonly OPTIMISM_TESTNET: "0x1a4";
+    readonly POLYGON: "0x89";
+    readonly POLYGON_TESTNET: "0x13881";
+    readonly AVALANCHE: "0xa86a";
+    readonly AVALANCHE_TESTNET: "0xa869";
+    readonly FANTOM: "0xfa";
+    readonly FANTOM_TESTNET: "0xfa2";
+    readonly SEPOLIA: "0xaa36a7";
+    readonly LINEA_GOERLI: "0xe704";
+    readonly LINEA_MAINNET: "0xe708";
+    readonly MOONBEAM: "0x504";
+    readonly MOONBEAM_TESTNET: "0x507";
+    readonly MOONRIVER: "0x505";
+    readonly GNOSIS: "0x64";
+};
+export declare const ETHERSCAN_SUPPORTED_NETWORKS: {
+    "0x5": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0x1": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0xaa36a7": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0xe704": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0xe708": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0x38": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0x61": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0xa": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0x1a4": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0x89": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0x13881": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0xa86a": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0xa869": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0xfa": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0xfa2": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0x504": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0x507": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0x505": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+    "0x64": {
+        domain: string;
+        subdomain: string;
+        networkId: string;
+    };
+};
+//# sourceMappingURL=constants.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/constants.js b/node_modules/@metamask/transaction-controller/dist/constants.js
new file mode 100644
index 0000000..a19d2ca
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/constants.js
@@ -0,0 +1,124 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.ETHERSCAN_SUPPORTED_NETWORKS = exports.CHAIN_IDS = void 0;
+exports.CHAIN_IDS = {
+    MAINNET: '0x1',
+    GOERLI: '0x5',
+    BSC: '0x38',
+    BSC_TESTNET: '0x61',
+    OPTIMISM: '0xa',
+    OPTIMISM_TESTNET: '0x1a4',
+    POLYGON: '0x89',
+    POLYGON_TESTNET: '0x13881',
+    AVALANCHE: '0xa86a',
+    AVALANCHE_TESTNET: '0xa869',
+    FANTOM: '0xfa',
+    FANTOM_TESTNET: '0xfa2',
+    SEPOLIA: '0xaa36a7',
+    LINEA_GOERLI: '0xe704',
+    LINEA_MAINNET: '0xe708',
+    MOONBEAM: '0x504',
+    MOONBEAM_TESTNET: '0x507',
+    MOONRIVER: '0x505',
+    GNOSIS: '0x64',
+};
+const DEFAULT_ETHERSCAN_DOMAIN = 'etherscan.io';
+const DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = 'api';
+exports.ETHERSCAN_SUPPORTED_NETWORKS = {
+    [exports.CHAIN_IDS.GOERLI]: {
+        domain: DEFAULT_ETHERSCAN_DOMAIN,
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`,
+        networkId: parseInt(exports.CHAIN_IDS.GOERLI, 16).toString(),
+    },
+    [exports.CHAIN_IDS.MAINNET]: {
+        domain: DEFAULT_ETHERSCAN_DOMAIN,
+        subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
+        networkId: parseInt(exports.CHAIN_IDS.MAINNET, 16).toString(),
+    },
+    [exports.CHAIN_IDS.SEPOLIA]: {
+        domain: DEFAULT_ETHERSCAN_DOMAIN,
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`,
+        networkId: parseInt(exports.CHAIN_IDS.SEPOLIA, 16).toString(),
+    },
+    [exports.CHAIN_IDS.LINEA_GOERLI]: {
+        domain: 'lineascan.build',
+        subdomain: 'goerli',
+        networkId: parseInt(exports.CHAIN_IDS.LINEA_GOERLI, 16).toString(),
+    },
+    [exports.CHAIN_IDS.LINEA_MAINNET]: {
+        domain: 'lineascan.build',
+        subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
+        networkId: parseInt(exports.CHAIN_IDS.LINEA_MAINNET, 16).toString(),
+    },
+    [exports.CHAIN_IDS.BSC]: {
+        domain: 'bscscan.com',
+        subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
+        networkId: parseInt(exports.CHAIN_IDS.BSC, 16).toString(),
+    },
+    [exports.CHAIN_IDS.BSC_TESTNET]: {
+        domain: 'bscscan.com',
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,
+        networkId: parseInt(exports.CHAIN_IDS.BSC_TESTNET, 16).toString(),
+    },
+    [exports.CHAIN_IDS.OPTIMISM]: {
+        domain: DEFAULT_ETHERSCAN_DOMAIN,
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-optimistic`,
+        networkId: parseInt(exports.CHAIN_IDS.OPTIMISM, 16).toString(),
+    },
+    [exports.CHAIN_IDS.OPTIMISM_TESTNET]: {
+        domain: DEFAULT_ETHERSCAN_DOMAIN,
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli-optimistic`,
+        networkId: parseInt(exports.CHAIN_IDS.OPTIMISM_TESTNET, 16).toString(),
+    },
+    [exports.CHAIN_IDS.POLYGON]: {
+        domain: 'polygonscan.com',
+        subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
+        networkId: parseInt(exports.CHAIN_IDS.POLYGON, 16).toString(),
+    },
+    [exports.CHAIN_IDS.POLYGON_TESTNET]: {
+        domain: 'polygonscan.com',
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-mumbai`,
+        networkId: parseInt(exports.CHAIN_IDS.POLYGON_TESTNET, 16).toString(),
+    },
+    [exports.CHAIN_IDS.AVALANCHE]: {
+        domain: 'snowtrace.io',
+        subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
+        networkId: parseInt(exports.CHAIN_IDS.AVALANCHE, 16).toString(),
+    },
+    [exports.CHAIN_IDS.AVALANCHE_TESTNET]: {
+        domain: 'snowtrace.io',
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,
+        networkId: parseInt(exports.CHAIN_IDS.AVALANCHE_TESTNET, 16).toString(),
+    },
+    [exports.CHAIN_IDS.FANTOM]: {
+        domain: 'ftmscan.com',
+        subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
+        networkId: parseInt(exports.CHAIN_IDS.FANTOM, 16).toString(),
+    },
+    [exports.CHAIN_IDS.FANTOM_TESTNET]: {
+        domain: 'ftmscan.com',
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,
+        networkId: parseInt(exports.CHAIN_IDS.FANTOM_TESTNET, 16).toString(),
+    },
+    [exports.CHAIN_IDS.MOONBEAM]: {
+        domain: 'moonscan.io',
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbeam`,
+        networkId: parseInt(exports.CHAIN_IDS.MOONBEAM, 16).toString(),
+    },
+    [exports.CHAIN_IDS.MOONBEAM_TESTNET]: {
+        domain: 'moonscan.io',
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbase`,
+        networkId: parseInt(exports.CHAIN_IDS.MOONBEAM_TESTNET, 16).toString(),
+    },
+    [exports.CHAIN_IDS.MOONRIVER]: {
+        domain: 'moonscan.io',
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonriver`,
+        networkId: parseInt(exports.CHAIN_IDS.MOONRIVER, 16).toString(),
+    },
+    [exports.CHAIN_IDS.GNOSIS]: {
+        domain: 'gnosisscan.io',
+        subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-gnosis`,
+        networkId: parseInt(exports.CHAIN_IDS.GNOSIS, 16).toString(),
+    },
+};
+//# sourceMappingURL=constants.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts b/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts
new file mode 100644
index 0000000..a49d68f
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts
@@ -0,0 +1,64 @@
+export interface EtherscanTransactionMetaBase {
+    blockNumber: string;
+    blockHash: string;
+    confirmations: string;
+    contractAddress: string;
+    cumulativeGasUsed: string;
+    from: string;
+    gas: string;
+    gasPrice: string;
+    gasUsed: string;
+    hash: string;
+    nonce: string;
+    timeStamp: string;
+    to: string;
+    transactionIndex: string;
+    value: string;
+}
+export interface EtherscanTransactionMeta extends EtherscanTransactionMetaBase {
+    functionName: string;
+    input: string;
+    isError: string;
+    methodId: string;
+    txreceipt_status: string;
+}
+export interface EtherscanTokenTransactionMeta extends EtherscanTransactionMetaBase {
+    tokenDecimal: string;
+    tokenName: string;
+    tokenSymbol: string;
+}
+export interface EtherscanTransactionResponse<T extends EtherscanTransactionMetaBase> {
+    result: T[];
+}
+export interface EtherscanTransactionRequest {
+    address: string;
+    apiKey?: string;
+    chainId: string;
+    fromBlock?: number;
+    limit?: number;
+}
+/**
+ * Retrieves transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch transactions.
+ * @param request.address - Address to retrieve transactions for.
+ * @param request.apiKey - Etherscan API key.
+ * @param request.chainId - Current chain ID used to determine subdomain and domain.
+ * @param request.fromBlock - Block number to start fetching transactions from.
+ * @param request.limit - Number of transactions to retrieve.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+export declare function fetchEtherscanTransactions({ address, apiKey, chainId, fromBlock, limit, }: EtherscanTransactionRequest): Promise<EtherscanTransactionResponse<EtherscanTransactionMeta>>;
+/**
+ * Retrieves token transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch token transactions.
+ * @param request.address - Address to retrieve token transactions for.
+ * @param request.apiKey - Etherscan API key.
+ * @param request.chainId - Current chain ID used to determine subdomain and domain.
+ * @param request.fromBlock - Block number to start fetching token transactions from.
+ * @param request.limit - Number of token transactions to retrieve.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+export declare function fetchEtherscanTokenTransactions({ address, apiKey, chainId, fromBlock, limit, }: EtherscanTransactionRequest): Promise<EtherscanTransactionResponse<EtherscanTokenTransactionMeta>>;
+//# sourceMappingURL=etherscan.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/etherscan.js b/node_modules/@metamask/transaction-controller/dist/etherscan.js
new file mode 100644
index 0000000..0757847
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/etherscan.js
@@ -0,0 +1,118 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.fetchEtherscanTokenTransactions = exports.fetchEtherscanTransactions = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const constants_1 = require("./constants");
+/**
+ * Retrieves transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch transactions.
+ * @param request.address - Address to retrieve transactions for.
+ * @param request.apiKey - Etherscan API key.
+ * @param request.chainId - Current chain ID used to determine subdomain and domain.
+ * @param request.fromBlock - Block number to start fetching transactions from.
+ * @param request.limit - Number of transactions to retrieve.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+function fetchEtherscanTransactions({ address, apiKey, chainId, fromBlock, limit, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield fetchTransactions('txlist', {
+            address,
+            apiKey,
+            chainId,
+            fromBlock,
+            limit,
+        });
+    });
+}
+exports.fetchEtherscanTransactions = fetchEtherscanTransactions;
+/**
+ * Retrieves token transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch token transactions.
+ * @param request.address - Address to retrieve token transactions for.
+ * @param request.apiKey - Etherscan API key.
+ * @param request.chainId - Current chain ID used to determine subdomain and domain.
+ * @param request.fromBlock - Block number to start fetching token transactions from.
+ * @param request.limit - Number of token transactions to retrieve.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+function fetchEtherscanTokenTransactions({ address, apiKey, chainId, fromBlock, limit, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield fetchTransactions('tokentx', {
+            address,
+            apiKey,
+            chainId,
+            fromBlock,
+            limit,
+        });
+    });
+}
+exports.fetchEtherscanTokenTransactions = fetchEtherscanTokenTransactions;
+/**
+ * Retrieves transaction data from Etherscan from a specific endpoint.
+ *
+ * @param action - The Etherscan endpoint to use.
+ * @param options - Options bag.
+ * @param options.address - Address to retrieve transactions for.
+ * @param options.apiKey - Etherscan API key.
+ * @param options.chainId - Current chain ID used to determine subdomain and domain.
+ * @param options.fromBlock - Block number to start fetching transactions from.
+ * @param options.limit - Number of transactions to retrieve.
+ * @returns An object containing the request status and an array of transaction data.
+ */
+function fetchTransactions(action, { address, apiKey, chainId, limit, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const urlParams = {
+            module: 'account',
+            address,
+            // Not previously used in mobile due to bug, temporarily disabled to match existing behaviour.
+            startBlock: undefined,
+            apikey: apiKey,
+            offset: limit === null || limit === void 0 ? void 0 : limit.toString(),
+            sort: 'desc',
+        };
+        const etherscanTxUrl = getEtherscanApiUrl(chainId, Object.assign(Object.assign({}, urlParams), { action }));
+        const response = (yield (0, controller_utils_1.handleFetch)(etherscanTxUrl));
+        let result = response.result;
+        if (response.status === '0') {
+            result = [];
+        }
+        return { result };
+    });
+}
+/**
+ * Return a URL that can be used to fetch data from Etherscan.
+ *
+ * @param chainId - Current chain ID used to determine subdomain and domain.
+ * @param urlParams - The parameters used to construct the URL.
+ * @returns URL to access Etherscan data.
+ */
+function getEtherscanApiUrl(chainId, urlParams) {
+    const networkInfo = constants_1.ETHERSCAN_SUPPORTED_NETWORKS[chainId];
+    if (!networkInfo) {
+        throw new Error(`Etherscan does not support chain with ID: ${chainId}`);
+    }
+    const apiUrl = `https://${networkInfo.subdomain}.${networkInfo.domain}`;
+    let url = `${apiUrl}/api?`;
+    // eslint-disable-next-line guard-for-in
+    for (const paramKey in urlParams) {
+        const value = urlParams[paramKey];
+        if (!value) {
+            continue;
+        }
+        url += `${paramKey}=${value}&`;
+    }
+    url += 'tag=latest&page=1';
+    return url;
+}
+//# sourceMappingURL=etherscan.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.d.ts b/node_modules/@metamask/transaction-controller/dist/index.d.ts
index fc7f49b..cd9486a 100644
--- a/node_modules/@metamask/transaction-controller/dist/index.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/index.d.ts
@@ -1,3 +1,4 @@
 export * from './TransactionController';
 export { isEIP1559Transaction } from './utils';
+export * from './types';
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.d.ts.map b/node_modules/@metamask/transaction-controller/dist/index.d.ts.map
deleted file mode 100644
index 2175387..0000000
--- a/node_modules/@metamask/transaction-controller/dist/index.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,yBAAyB,CAAC;AACxC,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.js b/node_modules/@metamask/transaction-controller/dist/index.js
index a1c07c8..602f51c 100644
--- a/node_modules/@metamask/transaction-controller/dist/index.js
+++ b/node_modules/@metamask/transaction-controller/dist/index.js
@@ -18,4 +18,5 @@ exports.isEIP1559Transaction = void 0;
 __exportStar(require("./TransactionController"), exports);
 var utils_1 = require("./utils");
 Object.defineProperty(exports, "isEIP1559Transaction", { enumerable: true, get: function () { return utils_1.isEIP1559Transaction; } });
+__exportStar(require("./types"), exports);
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.js.map b/node_modules/@metamask/transaction-controller/dist/index.js.map
deleted file mode 100644
index a4460fa..0000000
--- a/node_modules/@metamask/transaction-controller/dist/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,0DAAwC;AACxC,iCAA+C;AAAtC,6GAAA,oBAAoB,OAAA","sourcesContent":["export * from './TransactionController';\nexport { isEIP1559Transaction } from './utils';\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.d.ts b/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.d.ts
deleted file mode 100644
index 688af82..0000000
--- a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.d.ts
+++ /dev/null
@@ -1,64 +0,0 @@
-import { TransactionMeta } from '../TransactionController';
-export declare const ethTxsMock: (ethTxHash: string) => ({
-    blockNumber: string;
-    confirmations: string;
-    contractAddress: string;
-    cumulativeGasUsed: string;
-    from: string;
-    gas: string;
-    gasPrice: string;
-    gasUsed: string;
-    hash: string;
-    input: string;
-    isError: string;
-    nonce: string;
-    timeStamp: string;
-    to: string;
-    transactionIndex: string;
-    txreceipt_status: string;
-    value: string;
-} | {
-    blockNumber: string;
-    confirmations: string;
-    contractAddress: string;
-    cumulativeGasUsed: string;
-    from: string;
-    gas: string;
-    gasPrice: string;
-    gasUsed: string;
-    hash: string;
-    input: string;
-    isError: string;
-    nonce: string;
-    timeStamp: string;
-    transactionIndex: string;
-    txreceipt_status: string;
-    value: string;
-    to?: undefined;
-})[];
-export declare const tokenTxsMock: (tokenTxHash: string) => {
-    blockNumber: string;
-    timeStamp: string;
-    hash: string;
-    nonce: string;
-    blockHash: string;
-    from: string;
-    contractAddress: string;
-    to: string;
-    value: string;
-    tokenName: string;
-    tokenSymbol: string;
-    tokenDecimal: string;
-    transactionIndex: string;
-    gas: string;
-    gasPrice: string;
-    gasUsed: string;
-    cumulativeGasUsed: string;
-    input: string;
-    confirmations: string;
-}[];
-export declare const txsInStateMock: (ethTxHash: string, tokenTxHash: string) => TransactionMeta[];
-export declare const txsInStateWithOutdatedStatusMock: (ethTxHash: string, tokenTxHash: string) => TransactionMeta[];
-export declare const txsInStateWithOutdatedGasDataMock: (ethTxHash: string, tokenTxHash: string) => TransactionMeta[];
-export declare const txsInStateWithOutdatedStatusAndGasDataMock: (ethTxHash: string, tokenTxHash: string) => TransactionMeta[];
-//# sourceMappingURL=txsMock.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.d.ts.map b/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.d.ts.map
deleted file mode 100644
index 2611b68..0000000
--- a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"txsMock.d.ts","sourceRoot":"","sources":["../../src/mocks/txsMock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAqB,MAAM,0BAA0B,CAAC;AAE9E,eAAO,MAAM,UAAU,cAAe,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4E3C,CAAC;AAEF,eAAO,MAAM,YAAY,gBAAiB,MAAM;;;;;;;;;;;;;;;;;;;;GA+R/C,CAAC;AAEF,eAAO,MAAM,cAAc,cACd,MAAM,eACJ,MAAM,KAClB,eAAe,EAqCjB,CAAC;AAEF,eAAO,MAAM,gCAAgC,cAChC,MAAM,eACJ,MAAM,KAClB,eAAe,EAqCjB,CAAC;AAEF,eAAO,MAAM,iCAAiC,cACjC,MAAM,eACJ,MAAM,KAClB,eAAe,EAqCjB,CAAC;AAEF,eAAO,MAAM,0CAA0C,cAC1C,MAAM,eACJ,MAAM,KAClB,eAAe,EAqCjB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js b/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js
deleted file mode 100644
index 47cf349..0000000
--- a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js
+++ /dev/null
@@ -1,515 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.txsInStateWithOutdatedStatusAndGasDataMock = exports.txsInStateWithOutdatedGasDataMock = exports.txsInStateWithOutdatedStatusMock = exports.txsInStateMock = exports.tokenTxsMock = exports.ethTxsMock = void 0;
-const TransactionController_1 = require("../TransactionController");
-const ethTxsMock = (ethTxHash) => [
-    {
-        blockNumber: '4535101',
-        confirmations: '10',
-        contractAddress: '',
-        cumulativeGasUsed: '120607',
-        from: '0xe46abaf75cfbff815c0b7ffed6f02b0760ea27f1',
-        gas: '335208',
-        gasPrice: '10000000000',
-        gasUsed: '21000',
-        hash: ethTxHash,
-        input: '0x',
-        isError: '0',
-        nonce: '9',
-        timeStamp: '1543596286',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        transactionIndex: '2',
-        txreceipt_status: '1',
-        value: '100000000000000000',
-    },
-    {
-        blockNumber: '4535108',
-        confirmations: '3',
-        contractAddress: '',
-        cumulativeGasUsed: '693910',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        gas: '335208',
-        gasPrice: '20000000000',
-        gasUsed: '21000',
-        hash: '0x342e9d73e10004af41d04973339fc7219dbadcbb5629730cfe65e9f9cb15ff92',
-        input: '0x',
-        isError: '0',
-        nonce: '0',
-        timeStamp: '1543596378',
-        to: '0xb2d191b6fe03c5b8a1ab249cfe88c37553357a23',
-        transactionIndex: '12',
-        txreceipt_status: '1',
-        value: '50000000000000000',
-    },
-    {
-        blockNumber: '4535105',
-        confirmations: '4',
-        contractAddress: '',
-        cumulativeGasUsed: '693910',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        gas: '335208',
-        gasPrice: '20000000000',
-        gasUsed: '21000',
-        hash: '0x342e9d73e10004af41d04973339fc7219dbadcbb5629730cfe65e9f9cb15ff91',
-        input: '0x',
-        isError: '0',
-        nonce: '1',
-        timeStamp: '1543596356',
-        transactionIndex: '13',
-        txreceipt_status: '1',
-        value: '50000000000000000',
-    },
-    {
-        blockNumber: '4535106',
-        confirmations: '4',
-        contractAddress: '',
-        cumulativeGasUsed: '693910',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        gas: '335208',
-        gasPrice: '20000000000',
-        gasUsed: '21000',
-        hash: '0x342e9d73e10004af41d04973139fc7219dbadcbb5629730cfe65e9f9cb15ff91',
-        input: '0x11',
-        isError: '0',
-        nonce: '3',
-        timeStamp: '1543596356',
-        to: '0xb2d191b6fe03c5b8a1ab249cfe88c37553357a23',
-        transactionIndex: '13',
-        txreceipt_status: '1',
-        value: '50000000000000000',
-    },
-];
-exports.ethTxsMock = ethTxsMock;
-const tokenTxsMock = (tokenTxHash) => [
-    {
-        blockNumber: '8222239',
-        timeStamp: '1564091067',
-        hash: tokenTxHash,
-        nonce: '2329',
-        blockHash: '0x3c30a9be9aea7be13caad419444140c11839d72e70479ec7e9c6d8bd08c533bc',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '69',
-        gas: '624874',
-        gasPrice: '20000000000',
-        gasUsed: '21000',
-        cumulativeGasUsed: '3203881',
-        input: 'deprecated',
-        confirmations: '3659676',
-    },
-    {
-        blockNumber: '8222250',
-        timeStamp: '1564091247',
-        hash: '0xdcd1c8bee545d3f76d80b20a23ad44276ba2e376681228eb4570cf3518491279',
-        nonce: '2330',
-        blockHash: '0x16986dd66bedb20a5b846ec2b6c0ecaa62f1c4b51fac58c1326101fd9126dd82',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '40',
-        gas: '594268',
-        gasPrice: '20000000000',
-        gasUsed: '579268',
-        cumulativeGasUsed: '2009011',
-        input: 'deprecated',
-        confirmations: '3659665',
-    },
-    {
-        blockNumber: '8223771',
-        timeStamp: '1564111652',
-        hash: '0x070369e6f560b0deca52e050ff1a961fa7b688bbec5cea08435921c9d9b0f52e',
-        nonce: '2333',
-        blockHash: '0x0aff8b36881be99df6d176d7c64c2171672c0483684a10c112d2c90fefe30a0a',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '132',
-        gas: '583810',
-        gasPrice: '6000000000',
-        gasUsed: '568810',
-        cumulativeGasUsed: '6956245',
-        input: 'deprecated',
-        confirmations: '3658144',
-    },
-    {
-        blockNumber: '8224850',
-        timeStamp: '1564126442',
-        hash: '0x8ef20ec9597c8c2e945bcc76d2668e5d3bb088b081fe8c5b5af2e1cbd315a20f',
-        nonce: '31',
-        blockHash: '0xb80d4d861ecb7a3cb14e591c0aaeb226842d0267772affa2acc1a590c7535647',
-        from: '0x6c70e3563cef0c6835703bb2664c9f59a92353e4',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '10000000000000000000',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '169',
-        gas: '78447',
-        gasPrice: '2000000000',
-        gasUsed: '52298',
-        cumulativeGasUsed: '7047823',
-        input: 'deprecated',
-        confirmations: '3657065',
-    },
-    {
-        blockNumber: '8228053',
-        timeStamp: '1564168901',
-        hash: '0xa0f2d7b558bb3cc28fa568f6feb8ed30eb28a01a674d7c0d4ae603fc691e6020',
-        nonce: '2368',
-        blockHash: '0x62c515ea049842c968ca67499f47a32a11394364d319d9c9cc0a0211652a7294',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '43',
-        gas: '567156',
-        gasPrice: '3000000000',
-        gasUsed: '552156',
-        cumulativeGasUsed: '3048261',
-        input: 'deprecated',
-        confirmations: '3653862',
-    },
-    {
-        blockNumber: '8315335',
-        timeStamp: '1565339223',
-        hash: '0x464df60fe00b6dd04c9e8ab341d02af9b10a619d2fcd60fd2971f10edf12118f',
-        nonce: '206760',
-        blockHash: '0x98275388ef6708debe35ac7bf2e30143c9b1fd9e0e457ca03598fc1f4209e273',
-        from: '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad',
-        contractAddress: '0x4dc3643dbc642b72c158e7f3d2ff232df61cb6ce',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '100000000000000000',
-        tokenName: 'Amber',
-        tokenSymbol: 'AMB',
-        tokenDecimal: '18',
-        transactionIndex: '186',
-        gas: '60000',
-        gasPrice: '2000000000',
-        gasUsed: '52108',
-        cumulativeGasUsed: '7490707',
-        input: 'deprecated',
-        confirmations: '3566580',
-    },
-    {
-        blockNumber: '8350846',
-        timeStamp: '1565815049',
-        hash: '0xc0682327ad3efd56dfa33e8206b4e09efad4e419a6191076069d217e3ee2341f',
-        nonce: '2506',
-        blockHash: '0xd0aa3c0e319fdfeb21b0192cf77b9760b8668060a5977a5f10f8413531083afa',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '4',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '48',
-        gas: '578737',
-        gasPrice: '3000000000',
-        gasUsed: '518737',
-        cumulativeGasUsed: '2848015',
-        input: 'deprecated',
-        confirmations: '3531069',
-    },
-    {
-        blockNumber: '8350859',
-        timeStamp: '1565815221',
-        hash: '0x989ea9f3ee576fa43957f44363e839adf1a4a397c3d8392a4f7cbbf7949fd0ae',
-        nonce: '2',
-        blockHash: '0xb9cf1d29c665c052e3831b5754903e539c5b0b1d33b8bcab6cd2d450764d601f',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x09cabec1ead1c0ba254b09efb3ee13841712be14',
-        value: '10000000000000000000',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '31',
-        gas: '60734',
-        gasPrice: '1000000000',
-        gasUsed: '54745',
-        cumulativeGasUsed: '7833857',
-        input: 'deprecated',
-        confirmations: '3531056',
-    },
-    {
-        blockNumber: '8679548',
-        timeStamp: '1570244087',
-        hash: '0xc0016b89b3b525b30d73f242653b0d80ec3ebf285376dff5bb52cef3261498b2',
-        nonce: '3',
-        blockHash: '0x1ceb2f8b83087f010773e2acf63d1526633c8a884bd1980f118a1bba576be69f',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '56',
-        gas: '993379',
-        gasPrice: '1440000000',
-        gasUsed: '647253',
-        cumulativeGasUsed: '3562204',
-        input: 'deprecated',
-        confirmations: '3202367',
-    },
-    {
-        blockNumber: '8679548',
-        timeStamp: '1570244087',
-        hash: '0xc0016b89b3b525b30d73f242653b0d80ec3ebf285376dff5bb52cef3261498b2',
-        nonce: '3',
-        blockHash: '0x1ceb2f8b83087f010773e2acf63d1526633c8a884bd1980f118a1bba576be69f',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '56',
-        gas: '993379',
-        gasPrice: '1440000000',
-        gasUsed: '647253',
-        cumulativeGasUsed: '3562204',
-        input: 'deprecated',
-        confirmations: '3202367',
-    },
-    {
-        blockNumber: '8694142',
-        timeStamp: '1570440625',
-        hash: '0xd8397138bb93d56e50d01e92a9eae99ebd3ae28844acdaa4663976a5501116cf',
-        nonce: '2837',
-        blockHash: '0xba45dd64e71e146066af9b6d2dd3bc5d72f4a3399148c155dced74c139fc3c51',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '217',
-        gas: '600632',
-        gasPrice: '9000000000',
-        gasUsed: '570632',
-        cumulativeGasUsed: '9023725',
-        input: 'deprecated',
-        confirmations: '3187773',
-    },
-    {
-        blockNumber: '10877041',
-        timeStamp: '1600310867',
-        hash: '0xc8bd16b6b41b4c24849eb6869702e1489c808cb5b125b01f084e38fefcb5ea77',
-        nonce: '4',
-        blockHash: '0x7fa16a022bcf1f69c2d7adf6bd7d3f058e808eec5c66aaa910dfa8016a5333d1',
-        from: '0x090d4613473dee047c3f2706764f49e0821d256e',
-        contractAddress: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '400000000000000000000',
-        tokenName: 'Uniswap',
-        tokenSymbol: 'UNI',
-        tokenDecimal: '18',
-        transactionIndex: '42',
-        gas: '90038',
-        gasPrice: '550000000000',
-        gasUsed: '81853',
-        cumulativeGasUsed: '3163540',
-        input: 'deprecated',
-        confirmations: '1004874',
-    },
-    {
-        blockNumber: '10877897',
-        timeStamp: '1600321973',
-        hash: '0xa7162489faef826ee77862ed5210b01726524f09428f69842118dad394842d62',
-        nonce: '6',
-        blockHash: '0xa74eb9d16f65f307dde4ce58c813c981b28f242edf1090ee2ac42caac9dccaca',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        contractAddress: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
-        to: '0x5e736f1f25992b2cad20ded179a52823d3d24b26',
-        value: '400000000000000000000',
-        tokenName: 'Uniswap',
-        tokenSymbol: 'UNI',
-        tokenDecimal: '18',
-        transactionIndex: '86',
-        gas: '60759',
-        gasPrice: '640000000000',
-        gasUsed: '25506',
-        cumulativeGasUsed: '4408393',
-        input: 'deprecated',
-        confirmations: '1004018',
-    },
-];
-exports.tokenTxsMock = tokenTxsMock;
-const txsInStateMock = (ethTxHash, tokenTxHash) => [
-    {
-        id: 'token-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.confirmed,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '624874',
-            gasPrice: '20000000000',
-            gasUsed: '21000',
-            nonce: '0x12',
-            to: '0x881d40237659c251811cec9c364ef91dc08d300c',
-            value: '0x0',
-        },
-        transactionHash: tokenTxHash,
-        toSmartContract: true,
-    },
-    {
-        id: 'eth-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.confirmed,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '0x51d68',
-            gasPrice: '0x2540be400',
-            gasUsed: '0x5208',
-            nonce: '0x12',
-            to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            value: '100000000000000000',
-        },
-        transactionHash: ethTxHash,
-        toSmartContract: false,
-    },
-];
-exports.txsInStateMock = txsInStateMock;
-const txsInStateWithOutdatedStatusMock = (ethTxHash, tokenTxHash) => [
-    {
-        id: 'token-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.rejected,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '624874',
-            gasPrice: '20000000000',
-            gasUsed: '21000',
-            nonce: '0x12',
-            to: '0x881d40237659c251811cec9c364ef91dc08d300c',
-            value: '0x0',
-        },
-        transactionHash: tokenTxHash,
-        toSmartContract: true,
-    },
-    {
-        id: 'eth-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.rejected,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '0x51d68',
-            gasPrice: '0x2540be400',
-            gasUsed: '0x5208',
-            nonce: '0x12',
-            to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            value: '100000000000000000',
-        },
-        transactionHash: ethTxHash,
-        toSmartContract: false,
-    },
-];
-exports.txsInStateWithOutdatedStatusMock = txsInStateWithOutdatedStatusMock;
-const txsInStateWithOutdatedGasDataMock = (ethTxHash, tokenTxHash) => [
-    {
-        id: 'token-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.confirmed,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '624874',
-            gasPrice: '20000000000',
-            gasUsed: undefined,
-            nonce: '0x12',
-            to: '0x881d40237659c251811cec9c364ef91dc08d300c',
-            value: '0x0',
-        },
-        transactionHash: tokenTxHash,
-        toSmartContract: true,
-    },
-    {
-        id: 'eth-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.confirmed,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '0x51d68',
-            gasPrice: '0x2540be400',
-            gasUsed: undefined,
-            nonce: '0x12',
-            to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            value: '100000000000000000',
-        },
-        transactionHash: ethTxHash,
-        toSmartContract: false,
-    },
-];
-exports.txsInStateWithOutdatedGasDataMock = txsInStateWithOutdatedGasDataMock;
-const txsInStateWithOutdatedStatusAndGasDataMock = (ethTxHash, tokenTxHash) => [
-    {
-        id: 'token-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.rejected,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '624874',
-            gasPrice: '20000000000',
-            gasUsed: undefined,
-            nonce: '0x12',
-            to: '0x881d40237659c251811cec9c364ef91dc08d300c',
-            value: '0x0',
-        },
-        transactionHash: tokenTxHash,
-        toSmartContract: true,
-    },
-    {
-        id: 'eth-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.rejected,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '0x51d68',
-            gasPrice: '0x2540be400',
-            gasUsed: undefined,
-            nonce: '0x12',
-            to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            value: '100000000000000000',
-        },
-        transactionHash: ethTxHash,
-        toSmartContract: false,
-    },
-];
-exports.txsInStateWithOutdatedStatusAndGasDataMock = txsInStateWithOutdatedStatusAndGasDataMock;
-//# sourceMappingURL=txsMock.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js.map b/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js.map
deleted file mode 100644
index f038698..0000000
--- a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"txsMock.js","sourceRoot":"","sources":["../../src/mocks/txsMock.ts"],"names":[],"mappings":"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","sourcesContent":["import { TransactionMeta, TransactionStatus } from '../TransactionController';\n\nexport const ethTxsMock = (ethTxHash: string) => [\n  {\n    blockNumber: '4535101',\n    confirmations: '10',\n    contractAddress: '',\n    cumulativeGasUsed: '120607',\n    from: '0xe46abaf75cfbff815c0b7ffed6f02b0760ea27f1',\n    gas: '335208',\n    gasPrice: '10000000000',\n    gasUsed: '21000',\n    hash: ethTxHash,\n    input: '0x',\n    isError: '0',\n    nonce: '9',\n    timeStamp: '1543596286',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    transactionIndex: '2',\n    txreceipt_status: '1',\n    value: '100000000000000000',\n  },\n  {\n    blockNumber: '4535108',\n    confirmations: '3',\n    contractAddress: '',\n    cumulativeGasUsed: '693910',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    gas: '335208',\n    gasPrice: '20000000000',\n    gasUsed: '21000',\n    hash: '0x342e9d73e10004af41d04973339fc7219dbadcbb5629730cfe65e9f9cb15ff92',\n    input: '0x',\n    isError: '0',\n    nonce: '0',\n    timeStamp: '1543596378',\n    to: '0xb2d191b6fe03c5b8a1ab249cfe88c37553357a23',\n    transactionIndex: '12',\n    txreceipt_status: '1',\n    value: '50000000000000000',\n  },\n  {\n    blockNumber: '4535105',\n    confirmations: '4',\n    contractAddress: '',\n    cumulativeGasUsed: '693910',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    gas: '335208',\n    gasPrice: '20000000000',\n    gasUsed: '21000',\n    hash: '0x342e9d73e10004af41d04973339fc7219dbadcbb5629730cfe65e9f9cb15ff91',\n    input: '0x',\n    isError: '0',\n    nonce: '1',\n    timeStamp: '1543596356',\n    transactionIndex: '13',\n    txreceipt_status: '1',\n    value: '50000000000000000',\n  },\n  {\n    blockNumber: '4535106',\n    confirmations: '4',\n    contractAddress: '',\n    cumulativeGasUsed: '693910',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    gas: '335208',\n    gasPrice: '20000000000',\n    gasUsed: '21000',\n    hash: '0x342e9d73e10004af41d04973139fc7219dbadcbb5629730cfe65e9f9cb15ff91',\n    input: '0x11',\n    isError: '0',\n    nonce: '3',\n    timeStamp: '1543596356',\n    to: '0xb2d191b6fe03c5b8a1ab249cfe88c37553357a23',\n    transactionIndex: '13',\n    txreceipt_status: '1',\n    value: '50000000000000000',\n  },\n];\n\nexport const tokenTxsMock = (tokenTxHash: string) => [\n  {\n    blockNumber: '8222239',\n    timeStamp: '1564091067',\n    hash: tokenTxHash,\n    nonce: '2329',\n    blockHash:\n      '0x3c30a9be9aea7be13caad419444140c11839d72e70479ec7e9c6d8bd08c533bc',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '69',\n    gas: '624874',\n    gasPrice: '20000000000',\n    gasUsed: '21000',\n    cumulativeGasUsed: '3203881',\n    input: 'deprecated',\n    confirmations: '3659676',\n  },\n  {\n    blockNumber: '8222250',\n    timeStamp: '1564091247',\n    hash: '0xdcd1c8bee545d3f76d80b20a23ad44276ba2e376681228eb4570cf3518491279',\n    nonce: '2330',\n    blockHash:\n      '0x16986dd66bedb20a5b846ec2b6c0ecaa62f1c4b51fac58c1326101fd9126dd82',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '40',\n    gas: '594268',\n    gasPrice: '20000000000',\n    gasUsed: '579268',\n    cumulativeGasUsed: '2009011',\n    input: 'deprecated',\n    confirmations: '3659665',\n  },\n  {\n    blockNumber: '8223771',\n    timeStamp: '1564111652',\n    hash: '0x070369e6f560b0deca52e050ff1a961fa7b688bbec5cea08435921c9d9b0f52e',\n    nonce: '2333',\n    blockHash:\n      '0x0aff8b36881be99df6d176d7c64c2171672c0483684a10c112d2c90fefe30a0a',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '132',\n    gas: '583810',\n    gasPrice: '6000000000',\n    gasUsed: '568810',\n    cumulativeGasUsed: '6956245',\n    input: 'deprecated',\n    confirmations: '3658144',\n  },\n  {\n    blockNumber: '8224850',\n    timeStamp: '1564126442',\n    hash: '0x8ef20ec9597c8c2e945bcc76d2668e5d3bb088b081fe8c5b5af2e1cbd315a20f',\n    nonce: '31',\n    blockHash:\n      '0xb80d4d861ecb7a3cb14e591c0aaeb226842d0267772affa2acc1a590c7535647',\n    from: '0x6c70e3563cef0c6835703bb2664c9f59a92353e4',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '10000000000000000000',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '169',\n    gas: '78447',\n    gasPrice: '2000000000',\n    gasUsed: '52298',\n    cumulativeGasUsed: '7047823',\n    input: 'deprecated',\n    confirmations: '3657065',\n  },\n  {\n    blockNumber: '8228053',\n    timeStamp: '1564168901',\n    hash: '0xa0f2d7b558bb3cc28fa568f6feb8ed30eb28a01a674d7c0d4ae603fc691e6020',\n    nonce: '2368',\n    blockHash:\n      '0x62c515ea049842c968ca67499f47a32a11394364d319d9c9cc0a0211652a7294',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '43',\n    gas: '567156',\n    gasPrice: '3000000000',\n    gasUsed: '552156',\n    cumulativeGasUsed: '3048261',\n    input: 'deprecated',\n    confirmations: '3653862',\n  },\n  {\n    blockNumber: '8315335',\n    timeStamp: '1565339223',\n    hash: '0x464df60fe00b6dd04c9e8ab341d02af9b10a619d2fcd60fd2971f10edf12118f',\n    nonce: '206760',\n    blockHash:\n      '0x98275388ef6708debe35ac7bf2e30143c9b1fd9e0e457ca03598fc1f4209e273',\n    from: '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad',\n    contractAddress: '0x4dc3643dbc642b72c158e7f3d2ff232df61cb6ce',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '100000000000000000',\n    tokenName: 'Amber',\n    tokenSymbol: 'AMB',\n    tokenDecimal: '18',\n    transactionIndex: '186',\n    gas: '60000',\n    gasPrice: '2000000000',\n    gasUsed: '52108',\n    cumulativeGasUsed: '7490707',\n    input: 'deprecated',\n    confirmations: '3566580',\n  },\n  {\n    blockNumber: '8350846',\n    timeStamp: '1565815049',\n    hash: '0xc0682327ad3efd56dfa33e8206b4e09efad4e419a6191076069d217e3ee2341f',\n    nonce: '2506',\n    blockHash:\n      '0xd0aa3c0e319fdfeb21b0192cf77b9760b8668060a5977a5f10f8413531083afa',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '4',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '48',\n    gas: '578737',\n    gasPrice: '3000000000',\n    gasUsed: '518737',\n    cumulativeGasUsed: '2848015',\n    input: 'deprecated',\n    confirmations: '3531069',\n  },\n  {\n    blockNumber: '8350859',\n    timeStamp: '1565815221',\n    hash: '0x989ea9f3ee576fa43957f44363e839adf1a4a397c3d8392a4f7cbbf7949fd0ae',\n    nonce: '2',\n    blockHash:\n      '0xb9cf1d29c665c052e3831b5754903e539c5b0b1d33b8bcab6cd2d450764d601f',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x09cabec1ead1c0ba254b09efb3ee13841712be14',\n    value: '10000000000000000000',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '31',\n    gas: '60734',\n    gasPrice: '1000000000',\n    gasUsed: '54745',\n    cumulativeGasUsed: '7833857',\n    input: 'deprecated',\n    confirmations: '3531056',\n  },\n  {\n    blockNumber: '8679548',\n    timeStamp: '1570244087',\n    hash: '0xc0016b89b3b525b30d73f242653b0d80ec3ebf285376dff5bb52cef3261498b2',\n    nonce: '3',\n    blockHash:\n      '0x1ceb2f8b83087f010773e2acf63d1526633c8a884bd1980f118a1bba576be69f',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '56',\n    gas: '993379',\n    gasPrice: '1440000000',\n    gasUsed: '647253',\n    cumulativeGasUsed: '3562204',\n    input: 'deprecated',\n    confirmations: '3202367',\n  },\n  {\n    blockNumber: '8679548',\n    timeStamp: '1570244087',\n    hash: '0xc0016b89b3b525b30d73f242653b0d80ec3ebf285376dff5bb52cef3261498b2',\n    nonce: '3',\n    blockHash:\n      '0x1ceb2f8b83087f010773e2acf63d1526633c8a884bd1980f118a1bba576be69f',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '56',\n    gas: '993379',\n    gasPrice: '1440000000',\n    gasUsed: '647253',\n    cumulativeGasUsed: '3562204',\n    input: 'deprecated',\n    confirmations: '3202367',\n  },\n  {\n    blockNumber: '8694142',\n    timeStamp: '1570440625',\n    hash: '0xd8397138bb93d56e50d01e92a9eae99ebd3ae28844acdaa4663976a5501116cf',\n    nonce: '2837',\n    blockHash:\n      '0xba45dd64e71e146066af9b6d2dd3bc5d72f4a3399148c155dced74c139fc3c51',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '217',\n    gas: '600632',\n    gasPrice: '9000000000',\n    gasUsed: '570632',\n    cumulativeGasUsed: '9023725',\n    input: 'deprecated',\n    confirmations: '3187773',\n  },\n  {\n    blockNumber: '10877041',\n    timeStamp: '1600310867',\n    hash: '0xc8bd16b6b41b4c24849eb6869702e1489c808cb5b125b01f084e38fefcb5ea77',\n    nonce: '4',\n    blockHash:\n      '0x7fa16a022bcf1f69c2d7adf6bd7d3f058e808eec5c66aaa910dfa8016a5333d1',\n    from: '0x090d4613473dee047c3f2706764f49e0821d256e',\n    contractAddress: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '400000000000000000000',\n    tokenName: 'Uniswap',\n    tokenSymbol: 'UNI',\n    tokenDecimal: '18',\n    transactionIndex: '42',\n    gas: '90038',\n    gasPrice: '550000000000',\n    gasUsed: '81853',\n    cumulativeGasUsed: '3163540',\n    input: 'deprecated',\n    confirmations: '1004874',\n  },\n  {\n    blockNumber: '10877897',\n    timeStamp: '1600321973',\n    hash: '0xa7162489faef826ee77862ed5210b01726524f09428f69842118dad394842d62',\n    nonce: '6',\n    blockHash:\n      '0xa74eb9d16f65f307dde4ce58c813c981b28f242edf1090ee2ac42caac9dccaca',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    contractAddress: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',\n    to: '0x5e736f1f25992b2cad20ded179a52823d3d24b26',\n    value: '400000000000000000000',\n    tokenName: 'Uniswap',\n    tokenSymbol: 'UNI',\n    tokenDecimal: '18',\n    transactionIndex: '86',\n    gas: '60759',\n    gasPrice: '640000000000',\n    gasUsed: '25506',\n    cumulativeGasUsed: '4408393',\n    input: 'deprecated',\n    confirmations: '1004018',\n  },\n];\n\nexport const txsInStateMock = (\n  ethTxHash: string,\n  tokenTxHash: string,\n): TransactionMeta[] => [\n  {\n    id: 'token-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.confirmed,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '624874',\n      gasPrice: '20000000000',\n      gasUsed: '21000',\n      nonce: '0x12',\n      to: '0x881d40237659c251811cec9c364ef91dc08d300c',\n      value: '0x0',\n    },\n    transactionHash: tokenTxHash,\n    toSmartContract: true,\n  },\n  {\n    id: 'eth-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.confirmed,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '0x51d68',\n      gasPrice: '0x2540be400',\n      gasUsed: '0x5208',\n      nonce: '0x12',\n      to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      value: '100000000000000000',\n    },\n    transactionHash: ethTxHash,\n    toSmartContract: false,\n  },\n];\n\nexport const txsInStateWithOutdatedStatusMock = (\n  ethTxHash: string,\n  tokenTxHash: string,\n): TransactionMeta[] => [\n  {\n    id: 'token-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.rejected,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '624874',\n      gasPrice: '20000000000',\n      gasUsed: '21000',\n      nonce: '0x12',\n      to: '0x881d40237659c251811cec9c364ef91dc08d300c',\n      value: '0x0',\n    },\n    transactionHash: tokenTxHash,\n    toSmartContract: true,\n  },\n  {\n    id: 'eth-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.rejected,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '0x51d68',\n      gasPrice: '0x2540be400',\n      gasUsed: '0x5208',\n      nonce: '0x12',\n      to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      value: '100000000000000000',\n    },\n    transactionHash: ethTxHash,\n    toSmartContract: false,\n  },\n];\n\nexport const txsInStateWithOutdatedGasDataMock = (\n  ethTxHash: string,\n  tokenTxHash: string,\n): TransactionMeta[] => [\n  {\n    id: 'token-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.confirmed,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '624874',\n      gasPrice: '20000000000',\n      gasUsed: undefined,\n      nonce: '0x12',\n      to: '0x881d40237659c251811cec9c364ef91dc08d300c',\n      value: '0x0',\n    },\n    transactionHash: tokenTxHash,\n    toSmartContract: true,\n  },\n  {\n    id: 'eth-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.confirmed,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '0x51d68',\n      gasPrice: '0x2540be400',\n      gasUsed: undefined,\n      nonce: '0x12',\n      to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      value: '100000000000000000',\n    },\n    transactionHash: ethTxHash,\n    toSmartContract: false,\n  },\n];\n\nexport const txsInStateWithOutdatedStatusAndGasDataMock = (\n  ethTxHash: string,\n  tokenTxHash: string,\n): TransactionMeta[] => [\n  {\n    id: 'token-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.rejected,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '624874',\n      gasPrice: '20000000000',\n      gasUsed: undefined,\n      nonce: '0x12',\n      to: '0x881d40237659c251811cec9c364ef91dc08d300c',\n      value: '0x0',\n    },\n    transactionHash: tokenTxHash,\n    toSmartContract: true,\n  },\n  {\n    id: 'eth-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.rejected,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '0x51d68',\n      gasPrice: '0x2540be400',\n      gasUsed: undefined,\n      nonce: '0x12',\n      to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      value: '100000000000000000',\n    },\n    transactionHash: ethTxHash,\n    toSmartContract: false,\n  },\n];\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types.d.ts b/node_modules/@metamask/transaction-controller/dist/types.d.ts
new file mode 100644
index 0000000..68e0396
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types.d.ts
@@ -0,0 +1,173 @@
+/**
+ * @type TransactionMeta
+ *
+ * TransactionMeta representation
+ * @property error - Synthesized error information for failed transactions
+ * @property id - Generated UUID associated with this transaction
+ * @property networkID - Network code as per EIP-155 for this transaction
+ * @property origin - Origin this transaction was sent from
+ * @property deviceConfirmedOn - string to indicate what device the transaction was confirmed
+ * @property rawTransaction - Hex representation of the underlying transaction
+ * @property status - String status of this transaction
+ * @property time - Timestamp associated with this transaction
+ * @property toSmartContract - Whether transaction recipient is a smart contract
+ * @property transaction - Underlying Transaction object
+ * @property transactionHash - Hash of a successful transaction
+ * @property blockNumber - Number of the block where the transaction has been included
+ */
+export declare type TransactionMeta = ({
+    status: Exclude<TransactionStatus, TransactionStatus.failed>;
+} & TransactionMetaBase) | ({
+    status: TransactionStatus.failed;
+    error: Error;
+} & TransactionMetaBase);
+declare type TransactionMetaBase = {
+    isTransfer?: boolean;
+    transferInformation?: {
+        symbol: string;
+        contractAddress: string;
+        decimals: number;
+    };
+    id: string;
+    networkID?: string;
+    chainId?: string;
+    origin?: string;
+    rawTransaction?: string;
+    time: number;
+    toSmartContract?: boolean;
+    transaction: Transaction;
+    transactionHash?: string;
+    blockNumber?: string;
+    deviceConfirmedOn?: WalletDevice;
+    verifiedOnBlockchain?: boolean;
+    /**
+     * Response from security validator.
+     */
+    securityAlertResponse?: SecurityAlertResponse;
+};
+/**
+ * The status of the transaction. Each status represents the state of the transaction internally
+ * in the wallet. Some of these correspond with the state of the transaction on the network, but
+ * some are wallet-specific.
+ */
+export declare enum TransactionStatus {
+    approved = "approved",
+    cancelled = "cancelled",
+    confirmed = "confirmed",
+    failed = "failed",
+    rejected = "rejected",
+    signed = "signed",
+    submitted = "submitted",
+    unapproved = "unapproved"
+}
+/**
+ * Options for wallet device.
+ */
+export declare enum WalletDevice {
+    MM_MOBILE = "metamask_mobile",
+    MM_EXTENSION = "metamask_extension",
+    OTHER = "other_device"
+}
+/**
+ * @type Transaction
+ *
+ * Transaction representation
+ * @property chainId - Network ID as per EIP-155
+ * @property data - Data to pass with this transaction
+ * @property from - Address to send this transaction from
+ * @property gas - Gas to send with this transaction
+ * @property gasPrice - Price of gas with this transaction
+ * @property gasUsed - Gas used in the transaction
+ * @property nonce - Unique number to prevent replay attacks
+ * @property to - Address to send this transaction to
+ * @property value - Value associated with this transaction
+ */
+export interface Transaction {
+    chainId?: number;
+    data?: string;
+    from: string;
+    gas?: string;
+    gasPrice?: string;
+    gasUsed?: string;
+    nonce?: string;
+    to?: string;
+    value?: string;
+    maxFeePerGas?: string;
+    maxPriorityFeePerGas?: string;
+    estimatedBaseFee?: string;
+    estimateGasError?: string;
+    type?: string;
+}
+/**
+ * The configuration required to fetch transaction data from a RemoteTransactionSource.
+ */
+export interface RemoteTransactionSourceRequest {
+    /**
+     * The address of the account to fetch transactions for.
+     */
+    address: string;
+    /**
+     * API key if required by the remote source.
+     */
+    apiKey?: string;
+    /**
+     * The chainId of the current network.
+     */
+    currentChainId: string;
+    /**
+     * The networkId of the current network.
+     */
+    currentNetworkId: string;
+    /**
+     * Block number to start fetching transactions from.
+     */
+    fromBlock?: number;
+    /**
+     * Maximum number of transactions to retrieve.
+     */
+    limit?: number;
+}
+/**
+ * An object capable of fetching transaction data from a remote source.
+ * Used by the IncomingTransactionHelper to retrieve remote transaction data.
+ */
+export interface RemoteTransactionSource {
+    isSupportedNetwork: (chainId: string, networkId: string) => boolean;
+    fetchTransactions: (request: RemoteTransactionSourceRequest) => Promise<TransactionMeta[]>;
+}
+export declare type SecurityAlertResponse = {
+    reason: string;
+    features?: string[];
+    result_type: string;
+    providerRequestsCount?: Record<string, number>;
+};
+/**
+ * Data concerning a successfully submitted transaction.
+ * Used for debugging purposes.
+ */
+export declare type SubmitHistoryEntry = {
+    /** The chain ID of the transaction as a decimal string. */
+    chainId?: string;
+    /** The hash of the transaction returned from the RPC provider. */
+    hash: string;
+    /** True if the entry was generated using the migration and existing transaction metadata. */
+    migration?: boolean;
+    /** The type of the network where the transaction was submitted. */
+    networkType?: string;
+    /**
+     * The URL of the network the transaction was submitted to.
+     * A single network URL if it was recorded when submitted.
+     * An array of potential network URLs if it cannot be confirmed since the migration was used.
+     */
+    networkUrl?: string | string[];
+    /** The origin of the transaction. */
+    origin?: string;
+    /** The raw transaction data that was submitted. */
+    rawTransaction: string;
+    /** When the transaction was submitted. */
+    time: number;
+    /** The transaction parameters that were submitted. */
+    transaction: Record<string, unknown>;
+};
+export {};
+//# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types.js b/node_modules/@metamask/transaction-controller/dist/types.js
new file mode 100644
index 0000000..1cddb49
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types.js
@@ -0,0 +1,29 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.WalletDevice = exports.TransactionStatus = void 0;
+/**
+ * The status of the transaction. Each status represents the state of the transaction internally
+ * in the wallet. Some of these correspond with the state of the transaction on the network, but
+ * some are wallet-specific.
+ */
+var TransactionStatus;
+(function (TransactionStatus) {
+    TransactionStatus["approved"] = "approved";
+    TransactionStatus["cancelled"] = "cancelled";
+    TransactionStatus["confirmed"] = "confirmed";
+    TransactionStatus["failed"] = "failed";
+    TransactionStatus["rejected"] = "rejected";
+    TransactionStatus["signed"] = "signed";
+    TransactionStatus["submitted"] = "submitted";
+    TransactionStatus["unapproved"] = "unapproved";
+})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
+/**
+ * Options for wallet device.
+ */
+var WalletDevice;
+(function (WalletDevice) {
+    WalletDevice["MM_MOBILE"] = "metamask_mobile";
+    WalletDevice["MM_EXTENSION"] = "metamask_extension";
+    WalletDevice["OTHER"] = "other_device";
+})(WalletDevice = exports.WalletDevice || (exports.WalletDevice = {}));
+//# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.d.ts b/node_modules/@metamask/transaction-controller/dist/utils.d.ts
index ccf3362..301b1b5 100644
--- a/node_modules/@metamask/transaction-controller/dist/utils.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/utils.d.ts
@@ -1,6 +1,6 @@
 import type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';
-import { Transaction, FetchAllOptions, GasPriceValue, FeeMarketEIP1559Values, TransactionStatus } from './TransactionController';
-import type { TransactionMeta } from './TransactionController';
+import { GasPriceValue, FeeMarketEIP1559Values } from './TransactionController';
+import { Transaction, TransactionStatus, TransactionMeta } from './types';
 export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
 /**
  * Return a URL that can be used to fetch ETH transactions.
@@ -32,20 +32,6 @@ export declare function validateTransaction(transaction: Transaction): void;
  * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.
  */
 export declare const isEIP1559Transaction: (transaction: Transaction) => boolean;
-/**
- * Handles the fetch of incoming transactions.
- *
- * @param networkType - Network type of desired network.
- * @param address - Address to get the transactions from.
- * @param txHistoryLimit - The maximum number of transactions to fetch.
- * @param opt - Object that can contain fromBlock and Etherscan service API key.
- * @returns Responses for both ETH and ERC20 token transactions.
- */
-export declare function handleTransactionFetch(networkType: string, address: string, txHistoryLimit: number, opt?: FetchAllOptions): Promise<[{
-    [result: string]: [];
-}, {
-    [result: string]: [];
-}]>;
 export declare const validateGasValues: (gasValues: GasPriceValue | FeeMarketEIP1559Values) => void;
 export declare const isFeeMarketEIP1559Values: (gasValues?: GasPriceValue | FeeMarketEIP1559Values | undefined) => gasValues is FeeMarketEIP1559Values;
 export declare const isGasPriceValue: (gasValues?: GasPriceValue | FeeMarketEIP1559Values | undefined) => gasValues is GasPriceValue;
@@ -63,10 +49,11 @@ export declare function validateMinimumIncrease(proposed: string, min: string):
 /**
  * Helper function to filter and format transactions for the nonce tracker.
  *
+ * @param currentChainId - Chain ID of the current network.
  * @param fromAddress - Address of the account from which the transactions to filter from are sent.
  * @param transactionStatus - Status of the transactions for which to filter.
  * @param transactions - Array of transactionMeta objects that have been prefiltered.
  * @returns Array of transactions formatted for the nonce tracker.
  */
-export declare function getAndFormatTransactionsForNonceTracker(fromAddress: string, transactionStatus: TransactionStatus, transactions: TransactionMeta[]): NonceTrackerTransaction[];
+export declare function getAndFormatTransactionsForNonceTracker(currentChainId: string, fromAddress: string, transactionStatus: TransactionStatus, transactions: TransactionMeta[]): NonceTrackerTransaction[];
 //# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.d.ts.map b/node_modules/@metamask/transaction-controller/dist/utils.d.ts.map
deleted file mode 100644
index 9d4045c..0000000
--- a/node_modules/@metamask/transaction-controller/dist/utils.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAOA,OAAO,KAAK,EAAE,WAAW,IAAI,uBAAuB,EAAE,MAAM,iCAAiC,CAAC;AAC9F,OAAO,EACL,WAAW,EACX,eAAe,EACf,aAAa,EACb,sBAAsB,EACtB,iBAAiB,EAClB,MAAM,yBAAyB,CAAC;AACjC,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAE/D,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAiBrE;;;;;;GAMG;AACH,wBAAgB,kBAAkB,CAChC,WAAW,EAAE,MAAM,EACnB,SAAS,EAAE,GAAG,GACb,MAAM,CAeR;AAED;;;;;GAKG;AACH,wBAAgB,oBAAoB,CAAC,WAAW,EAAE,WAAW,eAS5D;AAED;;;;;GAKG;AACH,wBAAgB,mBAAmB,CAAC,WAAW,EAAE,WAAW,QAmD3D;AAED;;;;;;GAMG;AACH,eAAO,MAAM,oBAAoB,gBAAiB,WAAW,KAAG,OAO/D,CAAC;AAEF;;;;;;;;GAQG;AACH,wBAAsB,sBAAsB,CAC1C,WAAW,EAAE,MAAM,EACnB,OAAO,EAAE,MAAM,EACf,cAAc,EAAE,MAAM,EACtB,GAAG,CAAC,EAAE,eAAe,GACpB,OAAO,CAAC,CAAC;IAAE,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,CAAA;CAAE,EAAE;IAAE,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,CAAA;CAAE,CAAC,CAAC,CA8C/D;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAUlD,CAAC;AAEF,eAAO,MAAM,wBAAwB,yGAIsC,CAAC;AAE5E,eAAO,MAAM,eAAe,gGAG0B,CAAC;AAEvD,eAAO,MAAM,oBAAoB,UAAW,MAAM,QAAQ,MAAM,KAAG,MACF,CAAC;AAElE,eAAO,MAAM,6BAA6B,UACjC,MAAM,GAAG,SAAS,QACnB,MAAM,KACX,MAEF,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,UAQpE;AAED;;;;;;;GAOG;AACH,wBAAgB,uCAAuC,CACrD,WAAW,EAAE,MAAM,EACnB,iBAAiB,EAAE,iBAAiB,EACpC,YAAY,EAAE,eAAe,EAAE,GAC9B,uBAAuB,EAAE,CAsB3B"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.js b/node_modules/@metamask/transaction-controller/dist/utils.js
index 179a564..e15322d 100644
--- a/node_modules/@metamask/transaction-controller/dist/utils.js
+++ b/node_modules/@metamask/transaction-controller/dist/utils.js
@@ -1,15 +1,6 @@
 "use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.getAndFormatTransactionsForNonceTracker = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.handleTransactionFetch = exports.isEIP1559Transaction = exports.validateTransaction = exports.normalizeTransaction = exports.getEtherscanApiUrl = exports.ESTIMATE_GAS_ERROR = void 0;
+exports.getAndFormatTransactionsForNonceTracker = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.validateTransaction = exports.normalizeTransaction = exports.getEtherscanApiUrl = exports.ESTIMATE_GAS_ERROR = void 0;
 const ethereumjs_util_1 = require("ethereumjs-util");
 const controller_utils_1 = require("@metamask/controller-utils");
 exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
@@ -24,6 +15,7 @@ const NORMALIZERS = {
     maxFeePerGas: (maxFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxFeePerGas),
     maxPriorityFeePerGas: (maxPriorityFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxPriorityFeePerGas),
     estimatedBaseFee: (maxPriorityFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxPriorityFeePerGas),
+    type: (type) => (type === '0x0' ? '0x0' : undefined),
 };
 /**
  * Return a URL that can be used to fetch ETH transactions.
@@ -121,50 +113,6 @@ const isEIP1559Transaction = (transaction) => {
         hasOwnProp(transaction, 'maxPriorityFeePerGas'));
 };
 exports.isEIP1559Transaction = isEIP1559Transaction;
-/**
- * Handles the fetch of incoming transactions.
- *
- * @param networkType - Network type of desired network.
- * @param address - Address to get the transactions from.
- * @param txHistoryLimit - The maximum number of transactions to fetch.
- * @param opt - Object that can contain fromBlock and Etherscan service API key.
- * @returns Responses for both ETH and ERC20 token transactions.
- */
-function handleTransactionFetch(networkType, address, txHistoryLimit, opt) {
-    return __awaiter(this, void 0, void 0, function* () {
-        // transactions
-        const urlParams = {
-            module: 'account',
-            address,
-            startBlock: opt === null || opt === void 0 ? void 0 : opt.fromBlock,
-            apikey: opt === null || opt === void 0 ? void 0 : opt.etherscanApiKey,
-            offset: txHistoryLimit.toString(),
-            order: 'desc',
-        };
-        const etherscanTxUrl = getEtherscanApiUrl(networkType, Object.assign(Object.assign({}, urlParams), { action: 'txlist' }));
-        const etherscanTxResponsePromise = (0, controller_utils_1.handleFetch)(etherscanTxUrl);
-        // tokens
-        const etherscanTokenUrl = getEtherscanApiUrl(networkType, Object.assign(Object.assign({}, urlParams), { action: 'tokentx' }));
-        const etherscanTokenResponsePromise = (0, controller_utils_1.handleFetch)(etherscanTokenUrl);
-        let [etherscanTxResponse, etherscanTokenResponse] = yield Promise.all([
-            etherscanTxResponsePromise,
-            etherscanTokenResponsePromise,
-        ]);
-        if (etherscanTxResponse.status === '0' ||
-            etherscanTxResponse.result.length <= 0) {
-            etherscanTxResponse = { status: etherscanTxResponse.status, result: [] };
-        }
-        if (etherscanTokenResponse.status === '0' ||
-            etherscanTokenResponse.result.length <= 0) {
-            etherscanTokenResponse = {
-                status: etherscanTokenResponse.status,
-                result: [],
-            };
-        }
-        return [etherscanTxResponse, etherscanTokenResponse];
-    });
-}
-exports.handleTransactionFetch = handleTransactionFetch;
 const validateGasValues = (gasValues) => {
     Object.keys(gasValues).forEach((key) => {
         const value = gasValues[key];
@@ -206,14 +154,17 @@ exports.validateMinimumIncrease = validateMinimumIncrease;
 /**
  * Helper function to filter and format transactions for the nonce tracker.
  *
+ * @param currentChainId - Chain ID of the current network.
  * @param fromAddress - Address of the account from which the transactions to filter from are sent.
  * @param transactionStatus - Status of the transactions for which to filter.
  * @param transactions - Array of transactionMeta objects that have been prefiltered.
  * @returns Array of transactions formatted for the nonce tracker.
  */
-function getAndFormatTransactionsForNonceTracker(fromAddress, transactionStatus, transactions) {
+function getAndFormatTransactionsForNonceTracker(currentChainId, fromAddress, transactionStatus, transactions) {
     return transactions
-        .filter(({ status, transaction: { from } }) => status === transactionStatus &&
+        .filter(({ chainId, isTransfer, status, transaction: { from } }) => !isTransfer &&
+        chainId === currentChainId &&
+        status === transactionStatus &&
         from.toLowerCase() === fromAddress.toLowerCase())
         .map(({ status, transaction: { from, gas, value, nonce } }) => {
         // the only value we care about is the nonce
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.js.map b/node_modules/@metamask/transaction-controller/dist/utils.js.map
deleted file mode 100644
index 8f2f6e3..0000000
--- a/node_modules/@metamask/transaction-controller/dist/utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qDAA4D;AAC5D,iEAKoC;AAWvB,QAAA,kBAAkB,GAAG,kCAAkC,CAAC;AAErE,MAAM,WAAW,GAA0C;IACzD,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,IAAI,CAAC;IAC1C,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,IAAI,CAAC,CAAC,WAAW,EAAE;IACxD,GAAG,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,GAAG,CAAC;IACvC,QAAQ,EAAE,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,QAAQ,CAAC;IACtD,KAAK,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,KAAK,CAAC;IAC7C,EAAE,EAAE,CAAC,EAAU,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,EAAE,CAAC,CAAC,WAAW,EAAE;IAClD,KAAK,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,KAAK,CAAC;IAC7C,YAAY,EAAE,CAAC,YAAoB,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,YAAY,CAAC;IAClE,oBAAoB,EAAE,CAAC,oBAA4B,EAAE,EAAE,CACrD,IAAA,8BAAY,EAAC,oBAAoB,CAAC;IACpC,gBAAgB,EAAE,CAAC,oBAA4B,EAAE,EAAE,CACjD,IAAA,8BAAY,EAAC,oBAAoB,CAAC;CACrC,CAAC;AAEF;;;;;;GAMG;AACH,SAAgB,kBAAkB,CAChC,WAAmB,EACnB,SAAc;IAEd,IAAI,kBAAkB,GAAG,KAAK,CAAC;IAC/B,IAAI,WAAW,KAAK,8BAAW,CAAC,OAAO,EAAE;QACvC,kBAAkB,GAAG,OAAO,WAAW,EAAE,CAAC;KAC3C;IACD,MAAM,MAAM,GAAG,WAAW,kBAAkB,eAAe,CAAC;IAC5D,IAAI,GAAG,GAAG,GAAG,MAAM,OAAO,CAAC;IAE3B,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,IAAI,SAAS,CAAC,QAAQ,CAAC,EAAE;YACvB,GAAG,IAAI,GAAG,QAAQ,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC;SAC9C;KACF;IACD,GAAG,IAAI,mBAAmB,CAAC;IAC3B,OAAO,GAAG,CAAC;AACb,CAAC;AAlBD,gDAkBC;AAED;;;;;GAKG;AACH,SAAgB,oBAAoB,CAAC,WAAwB;IAC3D,MAAM,qBAAqB,GAAgB,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;IACxD,IAAI,GAAsB,CAAC;IAC3B,KAAK,GAAG,IAAI,WAAW,EAAE;QACvB,IAAI,WAAW,CAAC,GAAwB,CAAC,EAAE;YACzC,qBAAqB,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAU,CAAC;SAC1E;KACF;IACD,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AATD,oDASC;AAED;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,WAAwB;IAC1D,IACE,CAAC,WAAW,CAAC,IAAI;QACjB,OAAO,WAAW,CAAC,IAAI,KAAK,QAAQ;QACpC,CAAC,IAAA,oCAAiB,EAAC,WAAW,CAAC,IAAI,CAAC,EACpC;QACA,MAAM,IAAI,KAAK,CACb,2BAA2B,WAAW,CAAC,IAAI,0BAA0B,CACtE,CAAC;KACH;IAED,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,IAAI,WAAW,CAAC,EAAE,KAAK,SAAS,EAAE;QAC3D,IAAI,WAAW,CAAC,IAAI,EAAE;YACpB,OAAO,WAAW,CAAC,EAAE,CAAC;SACvB;aAAM;YACL,MAAM,IAAI,KAAK,CACb,yBAAyB,WAAW,CAAC,EAAE,0BAA0B,CAClE,CAAC;SACH;KACF;SAAM,IACL,WAAW,CAAC,EAAE,KAAK,SAAS;QAC5B,CAAC,IAAA,oCAAiB,EAAC,WAAW,CAAC,EAAE,CAAC,EAClC;QACA,MAAM,IAAI,KAAK,CACb,yBAAyB,WAAW,CAAC,EAAE,0BAA0B,CAClE,CAAC;KACH;IAED,IAAI,WAAW,CAAC,KAAK,KAAK,SAAS,EAAE;QACnC,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC3C,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,4BAA4B,CAAC,CAAC;SACxE;QAED,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CACb,oBAAoB,KAAK,qCAAqC,CAC/D,CAAC;SACH;QACD,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjD,MAAM,OAAO,GACX,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YACzB,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YACvB,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CACb,oBAAoB,KAAK,iCAAiC,CAC3D,CAAC;SACH;KACF;AACH,CAAC;AAnDD,kDAmDC;AAED;;;;;;GAMG;AACI,MAAM,oBAAoB,GAAG,CAAC,WAAwB,EAAW,EAAE;IACxE,MAAM,UAAU,GAAG,CAAC,GAAgB,EAAE,GAAW,EAAE,EAAE,CACnD,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACjD,OAAO,CACL,UAAU,CAAC,WAAW,EAAE,cAAc,CAAC;QACvC,UAAU,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAChD,CAAC;AACJ,CAAC,CAAC;AAPW,QAAA,oBAAoB,wBAO/B;AAEF;;;;;;;;GAQG;AACH,SAAsB,sBAAsB,CAC1C,WAAmB,EACnB,OAAe,EACf,cAAsB,EACtB,GAAqB;;QAErB,eAAe;QACf,MAAM,SAAS,GAAG;YAChB,MAAM,EAAE,SAAS;YACjB,OAAO;YACP,UAAU,EAAE,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,SAAS;YAC1B,MAAM,EAAE,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,eAAe;YAC5B,MAAM,EAAE,cAAc,CAAC,QAAQ,EAAE;YACjC,KAAK,EAAE,MAAM;SACd,CAAC;QACF,MAAM,cAAc,GAAG,kBAAkB,CAAC,WAAW,kCAChD,SAAS,KACZ,MAAM,EAAE,QAAQ,IAChB,CAAC;QACH,MAAM,0BAA0B,GAAG,IAAA,8BAAW,EAAC,cAAc,CAAC,CAAC;QAE/D,SAAS;QACT,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,WAAW,kCACnD,SAAS,KACZ,MAAM,EAAE,SAAS,IACjB,CAAC;QACH,MAAM,6BAA6B,GAAG,IAAA,8BAAW,EAAC,iBAAiB,CAAC,CAAC;QAErE,IAAI,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACpE,0BAA0B;YAC1B,6BAA6B;SAC9B,CAAC,CAAC;QAEH,IACE,mBAAmB,CAAC,MAAM,KAAK,GAAG;YAClC,mBAAmB,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EACtC;YACA,mBAAmB,GAAG,EAAE,MAAM,EAAE,mBAAmB,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;SAC1E;QAED,IACE,sBAAsB,CAAC,MAAM,KAAK,GAAG;YACrC,sBAAsB,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EACzC;YACA,sBAAsB,GAAG;gBACvB,MAAM,EAAE,sBAAsB,CAAC,MAAM;gBACrC,MAAM,EAAE,EAAE;aACX,CAAC;SACH;QAED,OAAO,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;IACvD,CAAC;CAAA;AAnDD,wDAmDC;AAEM,MAAM,iBAAiB,GAAG,CAC/B,SAAiD,EACjD,EAAE;IACF,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACrC,MAAM,KAAK,GAAI,SAAiB,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,IAAA,6BAAW,EAAC,KAAK,CAAC,EAAE;YACpD,MAAM,IAAI,SAAS,CACjB,2BAA2B,GAAG,kBAAkB,KAAK,EAAE,CACxD,CAAC;SACH;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAXW,QAAA,iBAAiB,qBAW5B;AAEK,MAAM,wBAAwB,GAAG,CACtC,SAAkD,EACb,EAAE,CACvC,CAAC,SAAoC,aAApC,SAAS,uBAAT,SAAS,CAA6B,YAAY,MAAK,SAAS;IACjE,CAAC,SAAoC,aAApC,SAAS,uBAAT,SAAS,CAA6B,oBAAoB,MAAK,SAAS,CAAC;AAJ/D,QAAA,wBAAwB,4BAIuC;AAErE,MAAM,eAAe,GAAG,CAC7B,SAAkD,EACtB,EAAE,CAC9B,CAAC,SAA2B,aAA3B,SAAS,uBAAT,SAAS,CAAoB,QAAQ,MAAK,SAAS,CAAC;AAH1C,QAAA,eAAe,mBAG2B;AAEhD,MAAM,oBAAoB,GAAG,CAAC,KAAa,EAAE,IAAY,EAAU,EAAE,CAC1E,IAAA,8BAAY,EAAC,GAAG,QAAQ,CAAC,GAAG,KAAK,GAAG,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AADrD,QAAA,oBAAoB,wBACiC;AAE3D,MAAM,6BAA6B,GAAG,CAC3C,KAAyB,EACzB,IAAY,EACJ,EAAE;IACV,OAAO,IAAA,4BAAoB,EAAC,IAAA,sCAAmB,EAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;AAChE,CAAC,CAAC;AALW,QAAA,6BAA6B,iCAKxC;AAEF;;;;;;;GAOG;AACH,SAAgB,uBAAuB,CAAC,QAAgB,EAAE,GAAW;IACnE,MAAM,eAAe,GAAG,IAAA,sCAAmB,EAAC,QAAQ,CAAC,CAAC;IACtD,MAAM,UAAU,GAAG,IAAA,sCAAmB,EAAC,GAAG,CAAC,CAAC;IAC5C,IAAI,eAAe,IAAI,UAAU,EAAE;QACjC,OAAO,QAAQ,CAAC;KACjB;IACD,MAAM,QAAQ,GAAG,uBAAuB,eAAe,6CAA6C,UAAU,EAAE,CAAC;IACjH,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC5B,CAAC;AARD,0DAQC;AAED;;;;;;;GAOG;AACH,SAAgB,uCAAuC,CACrD,WAAmB,EACnB,iBAAoC,EACpC,YAA+B;IAE/B,OAAO,YAAY;SAChB,MAAM,CACL,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CACpC,MAAM,KAAK,iBAAiB;QAC5B,IAAI,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE,CACnD;SACA,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;QAC5D,4CAA4C;QAC5C,6DAA6D;QAC7D,kDAAkD;QAClD,OAAO;YACL,MAAM;YACN,OAAO,EAAE,CAAC,EAAE,CAAC;YACb,QAAQ,EAAE;gBACR,IAAI,EAAE,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,EAAE;gBAChB,GAAG,EAAE,GAAG,aAAH,GAAG,cAAH,GAAG,GAAI,EAAE;gBACd,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE;gBAClB,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE;aACnB;SACF,CAAC;IACJ,CAAC,CAAC,CAAC;AACP,CAAC;AA1BD,0FA0BC","sourcesContent":["import { addHexPrefix, isHexString } from 'ethereumjs-util';\nimport {\n  NetworkType,\n  convertHexToDecimal,\n  handleFetch,\n  isValidHexAddress,\n} from '@metamask/controller-utils';\nimport type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';\nimport {\n  Transaction,\n  FetchAllOptions,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n  TransactionStatus,\n} from './TransactionController';\nimport type { TransactionMeta } from './TransactionController';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst NORMALIZERS: { [param in keyof Transaction]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n  maxFeePerGas: (maxFeePerGas: string) => addHexPrefix(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n};\n\n/**\n * Return a URL that can be used to fetch ETH transactions.\n *\n * @param networkType - Network type of desired network.\n * @param urlParams - The parameters used to construct the URL.\n * @returns URL to fetch the access the endpoint.\n */\nexport function getEtherscanApiUrl(\n  networkType: string,\n  urlParams: any,\n): string {\n  let etherscanSubdomain = 'api';\n  if (networkType !== NetworkType.mainnet) {\n    etherscanSubdomain = `api-${networkType}`;\n  }\n  const apiUrl = `https://${etherscanSubdomain}.etherscan.io`;\n  let url = `${apiUrl}/api?`;\n\n  for (const paramKey in urlParams) {\n    if (urlParams[paramKey]) {\n      url += `${paramKey}=${urlParams[paramKey]}&`;\n    }\n  }\n  url += 'tag=latest&page=1';\n  return url;\n}\n\n/**\n * Normalizes properties on a Transaction object.\n *\n * @param transaction - Transaction object to normalize.\n * @returns Normalized Transaction object.\n */\nexport function normalizeTransaction(transaction: Transaction) {\n  const normalizedTransaction: Transaction = { from: '' };\n  let key: keyof Transaction;\n  for (key in NORMALIZERS) {\n    if (transaction[key as keyof Transaction]) {\n      normalizedTransaction[key] = NORMALIZERS[key](transaction[key]) as never;\n    }\n  }\n  return normalizedTransaction;\n}\n\n/**\n * Validates a Transaction object for required properties and throws in\n * the event of any validation error.\n *\n * @param transaction - Transaction object to validate.\n */\nexport function validateTransaction(transaction: Transaction) {\n  if (\n    !transaction.from ||\n    typeof transaction.from !== 'string' ||\n    !isValidHexAddress(transaction.from)\n  ) {\n    throw new Error(\n      `Invalid \"from\" address: ${transaction.from} must be a valid string.`,\n    );\n  }\n\n  if (transaction.to === '0x' || transaction.to === undefined) {\n    if (transaction.data) {\n      delete transaction.to;\n    } else {\n      throw new Error(\n        `Invalid \"to\" address: ${transaction.to} must be a valid string.`,\n      );\n    }\n  } else if (\n    transaction.to !== undefined &&\n    !isValidHexAddress(transaction.to)\n  ) {\n    throw new Error(\n      `Invalid \"to\" address: ${transaction.to} must be a valid string.`,\n    );\n  }\n\n  if (transaction.value !== undefined) {\n    const value = transaction.value.toString();\n    if (value.includes('-')) {\n      throw new Error(`Invalid \"value\": ${value} is not a positive number.`);\n    }\n\n    if (value.includes('.')) {\n      throw new Error(\n        `Invalid \"value\": ${value} number must be denominated in wei.`,\n      );\n    }\n    const intValue = parseInt(transaction.value, 10);\n    const isValid =\n      Number.isFinite(intValue) &&\n      !Number.isNaN(intValue) &&\n      !isNaN(Number(value)) &&\n      Number.isSafeInteger(intValue);\n    if (!isValid) {\n      throw new Error(\n        `Invalid \"value\": ${value} number must be a valid number.`,\n      );\n    }\n  }\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param transaction - Transaction object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport const isEIP1559Transaction = (transaction: Transaction): boolean => {\n  const hasOwnProp = (obj: Transaction, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(transaction, 'maxFeePerGas') &&\n    hasOwnProp(transaction, 'maxPriorityFeePerGas')\n  );\n};\n\n/**\n * Handles the fetch of incoming transactions.\n *\n * @param networkType - Network type of desired network.\n * @param address - Address to get the transactions from.\n * @param txHistoryLimit - The maximum number of transactions to fetch.\n * @param opt - Object that can contain fromBlock and Etherscan service API key.\n * @returns Responses for both ETH and ERC20 token transactions.\n */\nexport async function handleTransactionFetch(\n  networkType: string,\n  address: string,\n  txHistoryLimit: number,\n  opt?: FetchAllOptions,\n): Promise<[{ [result: string]: [] }, { [result: string]: [] }]> {\n  // transactions\n  const urlParams = {\n    module: 'account',\n    address,\n    startBlock: opt?.fromBlock,\n    apikey: opt?.etherscanApiKey,\n    offset: txHistoryLimit.toString(),\n    order: 'desc',\n  };\n  const etherscanTxUrl = getEtherscanApiUrl(networkType, {\n    ...urlParams,\n    action: 'txlist',\n  });\n  const etherscanTxResponsePromise = handleFetch(etherscanTxUrl);\n\n  // tokens\n  const etherscanTokenUrl = getEtherscanApiUrl(networkType, {\n    ...urlParams,\n    action: 'tokentx',\n  });\n  const etherscanTokenResponsePromise = handleFetch(etherscanTokenUrl);\n\n  let [etherscanTxResponse, etherscanTokenResponse] = await Promise.all([\n    etherscanTxResponsePromise,\n    etherscanTokenResponsePromise,\n  ]);\n\n  if (\n    etherscanTxResponse.status === '0' ||\n    etherscanTxResponse.result.length <= 0\n  ) {\n    etherscanTxResponse = { status: etherscanTxResponse.status, result: [] };\n  }\n\n  if (\n    etherscanTokenResponse.status === '0' ||\n    etherscanTokenResponse.result.length <= 0\n  ) {\n    etherscanTokenResponse = {\n      status: etherscanTokenResponse.status,\n      result: [],\n    };\n  }\n\n  return [etherscanTxResponse, etherscanTokenResponse];\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\nexport const isFeeMarketEIP1559Values = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is FeeMarketEIP1559Values =>\n  (gasValues as FeeMarketEIP1559Values)?.maxFeePerGas !== undefined ||\n  (gasValues as FeeMarketEIP1559Values)?.maxPriorityFeePerGas !== undefined;\n\nexport const isGasPriceValue = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is GasPriceValue =>\n  (gasValues as GasPriceValue)?.gasPrice !== undefined;\n\nexport const getIncreasedPriceHex = (value: number, rate: number): string =>\n  addHexPrefix(`${parseInt(`${value * rate}`, 10).toString(16)}`);\n\nexport const getIncreasedPriceFromExisting = (\n  value: string | undefined,\n  rate: number,\n): string => {\n  return getIncreasedPriceHex(convertHexToDecimal(value), rate);\n};\n\n/**\n * Validates that the proposed value is greater than or equal to the minimum value.\n *\n * @param proposed - The proposed value.\n * @param min - The minimum value.\n * @returns The proposed value.\n * @throws Will throw if the proposed value is too low.\n */\nexport function validateMinimumIncrease(proposed: string, min: string) {\n  const proposedDecimal = convertHexToDecimal(proposed);\n  const minDecimal = convertHexToDecimal(min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\n\n/**\n * Helper function to filter and format transactions for the nonce tracker.\n *\n * @param fromAddress - Address of the account from which the transactions to filter from are sent.\n * @param transactionStatus - Status of the transactions for which to filter.\n * @param transactions - Array of transactionMeta objects that have been prefiltered.\n * @returns Array of transactions formatted for the nonce tracker.\n */\nexport function getAndFormatTransactionsForNonceTracker(\n  fromAddress: string,\n  transactionStatus: TransactionStatus,\n  transactions: TransactionMeta[],\n): NonceTrackerTransaction[] {\n  return transactions\n    .filter(\n      ({ status, transaction: { from } }) =>\n        status === transactionStatus &&\n        from.toLowerCase() === fromAddress.toLowerCase(),\n    )\n    .map(({ status, transaction: { from, gas, value, nonce } }) => {\n      // the only value we care about is the nonce\n      // but we need to return the other values to satisfy the type\n      // TODO: refactor nonceTracker to not require this\n      return {\n        status,\n        history: [{}],\n        txParams: {\n          from: from ?? '',\n          gas: gas ?? '',\n          value: value ?? '',\n          nonce: nonce ?? '',\n        },\n      };\n    });\n}\n"]}
\ No newline at end of file
