diff --git a/node_modules/@metamask/preferences-controller/.idea/.gitignore b/node_modules/@metamask/preferences-controller/.idea/.gitignore
new file mode 100644
index 0000000..b58b603
--- /dev/null
+++ b/node_modules/@metamask/preferences-controller/.idea/.gitignore
@@ -0,0 +1,5 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
diff --git a/node_modules/@metamask/preferences-controller/.idea/modules.xml b/node_modules/@metamask/preferences-controller/.idea/modules.xml
new file mode 100644
index 0000000..ecac035
--- /dev/null
+++ b/node_modules/@metamask/preferences-controller/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/preferences-controller.iml" filepath="$PROJECT_DIR$/.idea/preferences-controller.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/node_modules/@metamask/preferences-controller/.idea/preferences-controller.iml b/node_modules/@metamask/preferences-controller/.idea/preferences-controller.iml
new file mode 100644
index 0000000..24643cc
--- /dev/null
+++ b/node_modules/@metamask/preferences-controller/.idea/preferences-controller.iml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.tmp" />
+      <excludeFolder url="file://$MODULE_DIR$/temp" />
+      <excludeFolder url="file://$MODULE_DIR$/tmp" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/node_modules/@metamask/preferences-controller/.idea/workspace.xml b/node_modules/@metamask/preferences-controller/.idea/workspace.xml
new file mode 100644
index 0000000..dbf94fd
--- /dev/null
+++ b/node_modules/@metamask/preferences-controller/.idea/workspace.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ChangeListManager">
+    <list default="true" id="605ad92a-3a3b-409b-aace-8d3cf5420af6" name="Changes" comment="" />
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="ProjectColorInfo"><![CDATA[{
+  "customColor": "",
+  "associatedIndex": 6
+}]]></component>
+  <component name="ProjectId" id="2mZDhfDgVzYvTMobnnTEx2OWDXx" />
+  <component name="ProjectViewState">
+    <option name="autoscrollToSource" value="true" />
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "nodejs_package_manager_path": "npm",
+    "ts.external.directory.path": "/Users/salim/Applications/JetBrains Toolbox/IntelliJ IDEA Ultimate.app/WebStorm.app/Contents/plugins/javascript-plugin/jsLanguageServicesImpl/external",
+    "vue.rearranger.settings.migration": "true"
+  }
+}]]></component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-WS-241.17011.90" />
+      </set>
+    </attachedChunks>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="605ad92a-3a3b-409b-aace-8d3cf5420af6" name="Changes" comment="" />
+      <created>1727275325414</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1727275325414</updated>
+      <workItem from="1727275327335" duration="201000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/node_modules/@metamask/preferences-controller/dist/chunk-FSWGV6H6.js b/node_modules/@metamask/preferences-controller/dist/chunk-FSWGV6H6.js
index 30e985c..db94bbf 100644
--- a/node_modules/@metamask/preferences-controller/dist/chunk-FSWGV6H6.js
+++ b/node_modules/@metamask/preferences-controller/dist/chunk-FSWGV6H6.js
@@ -1,12 +1,10 @@
-"use strict";Object.defineProperty(exports, "__esModule", {value: true});
-
-
+'use strict';
+Object.defineProperty(exports, '__esModule', { value: true });

 var _chunkPOA2PUW4js = require('./chunk-POA2PUW4.js');

 // src/PreferencesController.ts

-
 var _basecontroller = require('@metamask/base-controller');
 var _controllerutils = require('@metamask/controller-utils');
 var metadata = {
@@ -17,29 +15,33 @@ var metadata = {
   isIpfsGatewayEnabled: { persist: true, anonymous: true },
   isMultiAccountBalancesEnabled: { persist: true, anonymous: true },
   lostIdentities: { persist: true, anonymous: false },
-  openSeaEnabled: { persist: true, anonymous: true },
+  displayNftMedia: { persist: true, anonymous: true },
+  useSafeChainsListValidation: { persist: true, anonymous: true },
   securityAlertsEnabled: { persist: true, anonymous: true },
   selectedAddress: { persist: true, anonymous: false },
   showTestNetworks: { persist: true, anonymous: true },
   showIncomingTransactions: { persist: true, anonymous: true },
   useNftDetection: { persist: true, anonymous: true },
-  useTokenDetection: { persist: true, anonymous: true }
+  useTokenDetection: { persist: true, anonymous: true },
+  smartTransactionsOptInStatus: { persist: true, anonymous: true },
+  useTransactionSimulations: { persist: true, anonymous: true },
+  showMultiRpcModal: { persist: false, anonymous: false },
 };
-var name = "PreferencesController";
+var name = 'PreferencesController';
 function getDefaultPreferencesState() {
   return {
     disabledRpcMethodPreferences: {
-      eth_sign: false
+      eth_sign: false,
     },
     featureFlags: {},
     identities: {},
-    ipfsGateway: "https://ipfs.io/ipfs/",
+    ipfsGateway: 'https://ipfs.io/ipfs/',
     isIpfsGatewayEnabled: true,
     isMultiAccountBalancesEnabled: true,
     lostIdentities: {},
-    openSeaEnabled: false,
+    displayNftMedia: false,
     securityAlertsEnabled: false,
-    selectedAddress: "",
+    selectedAddress: '',
     showIncomingTransactions: {
       [_chunkPOA2PUW4js.ETHERSCAN_SUPPORTED_CHAIN_IDS.MAINNET]: true,
       [_chunkPOA2PUW4js.ETHERSCAN_SUPPORTED_CHAIN_IDS.GOERLI]: true,
@@ -60,11 +62,15 @@ function getDefaultPreferencesState() {
       [_chunkPOA2PUW4js.ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONBEAM]: true,
       [_chunkPOA2PUW4js.ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONBEAM_TESTNET]: true,
       [_chunkPOA2PUW4js.ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONRIVER]: true,
-      [_chunkPOA2PUW4js.ETHERSCAN_SUPPORTED_CHAIN_IDS.GNOSIS]: true
+      [_chunkPOA2PUW4js.ETHERSCAN_SUPPORTED_CHAIN_IDS.GNOSIS]: true,
     },
     showTestNetworks: false,
     useNftDetection: false,
-    useTokenDetection: true
+    useTokenDetection: true,
+    useSafeChainsListValidation: true,
+    smartTransactionsOptInStatus: false,
+    useTransactionSimulations: true,
+    showMultiRpcModal: false,
   };
 }
 var _syncIdentities, syncIdentities_fn;
@@ -76,18 +82,15 @@ var PreferencesController = class extends _basecontroller.BaseController {
    * @param args.messenger - The preferences controller messenger.
    * @param args.state - Preferences controller state.
    */
-  constructor({
-    messenger,
-    state
-  }) {
+  constructor({ messenger, state }) {
     super({
       name,
       metadata,
       messenger,
       state: {
         ...getDefaultPreferencesState(),
-        ...state
-      }
+        ...state,
+      },
     });
     /**
      * Synchronizes the current identity list with new identities.
@@ -95,20 +98,19 @@ var PreferencesController = class extends _basecontroller.BaseController {
      * @param addresses - List of addresses corresponding to identities to sync.
      */
     _chunkPOA2PUW4js.__privateAdd.call(void 0, this, _syncIdentities);
-    messenger.subscribe(
-      "KeyringController:stateChange",
-      (keyringState) => {
-        const accounts = /* @__PURE__ */ new Set();
-        for (const keyring of keyringState.keyrings) {
-          for (const account of keyring.accounts) {
-            accounts.add(account);
-          }
-        }
-        if (accounts.size > 0) {
-          _chunkPOA2PUW4js.__privateMethod.call(void 0, this, _syncIdentities, syncIdentities_fn).call(this, Array.from(accounts));
+    messenger.subscribe('KeyringController:stateChange', (keyringState) => {
+      const accounts = /* @__PURE__ */ new Set();
+      for (const keyring of keyringState.keyrings) {
+        for (const account of keyring.accounts) {
+          accounts.add(account);
         }
       }
-    );
+      if (accounts.size > 0) {
+        _chunkPOA2PUW4js.__privateMethod
+          .call(void 0, this, _syncIdentities, syncIdentities_fn)
+          .call(this, Array.from(accounts));
+      }
+    });
   }
   /**
    * Adds identities to state.
@@ -116,8 +118,8 @@ var PreferencesController = class extends _basecontroller.BaseController {
    * @param addresses - List of addresses to use to generate new identities.
    */
   addIdentities(addresses) {
-    const checksummedAddresses = addresses.map(
-      (address) => _controllerutils.toChecksumHexAddress.call(void 0, address)
+    const checksummedAddresses = addresses.map((address) =>
+      _controllerutils.toChecksumHexAddress.call(void 0, address),
     );
     this.update((state) => {
       const { identities } = state;
@@ -129,7 +131,7 @@ var PreferencesController = class extends _basecontroller.BaseController {
         identities[address] = {
           name: `Account ${identityCount + 1}`,
           address,
-          importTime: Date.now()
+          importTime: Date.now(),
         };
       }
     });
@@ -184,7 +186,10 @@ var PreferencesController = class extends _basecontroller.BaseController {
    */
   setSelectedAddress(selectedAddress) {
     this.update((state) => {
-      state.selectedAddress = _controllerutils.toChecksumHexAddress.call(void 0, selectedAddress);
+      state.selectedAddress = _controllerutils.toChecksumHexAddress.call(
+        void 0,
+        selectedAddress,
+      );
     });
   }
   /**
@@ -213,9 +218,9 @@ var PreferencesController = class extends _basecontroller.BaseController {
    * @param useNftDetection - Boolean indicating user preference on NFT detection.
    */
   setUseNftDetection(useNftDetection) {
-    if (useNftDetection && !this.state.openSeaEnabled) {
+    if (useNftDetection && !this.state.displayNftMedia) {
       throw new Error(
-        "useNftDetection cannot be enabled if openSeaEnabled is false"
+        'useNftDetection cannot be enabled if displayNftMedia is false',
       );
     }
     this.update((state) => {
@@ -223,18 +228,33 @@ var PreferencesController = class extends _basecontroller.BaseController {
     });
   }
   /**
-   * Toggle the opensea enabled setting.
+   * Toggle the display nft media enabled setting.
    *
-   * @param openSeaEnabled - Boolean indicating user preference on using OpenSea's API.
+   * @param displayNftMedia - Boolean indicating user preference on using web2 third parties.
    */
-  setOpenSeaEnabled(openSeaEnabled) {
+  setDisplayNftMedia(displayNftMedia) {
     this.update((state) => {
-      state.openSeaEnabled = openSeaEnabled;
-      if (!openSeaEnabled) {
+      state.displayNftMedia = displayNftMedia;
+      if (!displayNftMedia) {
         state.useNftDetection = false;
       }
     });
   }
+
+  /**
+   * Toggle the use safe chains list validation.
+   *
+   * @param useSafeChainsListValidation - Boolean indicating user preference on using chainid.network third part to check safe networks.
+   */
+  setUseSafeChainsListValidation(useSafeChainsListValidation) {
+    this.update((state) => {
+      state.useSafeChainsListValidation = useSafeChainsListValidation;
+      if (!useSafeChainsListValidation) {
+        state.useSafeChainsListValidation = false;
+      }
+    });
+  }
+
   /**
    * Toggle the security alert enabled setting.
    *
@@ -245,6 +265,43 @@ var PreferencesController = class extends _basecontroller.BaseController {
       state.securityAlertsEnabled = securityAlertsEnabled;
     });
   }
+
+  /**
+   * Toggle multi rpc migration modal.
+   *
+   * @param showMultiRpcModal - Boolean indicating if the multi rpc modal will be displayed or not.
+   */
+  setShowMultiRpcModal(showMultiRpcModal) {
+    this.update((state) => {
+      state.showMultiRpcModal = showMultiRpcModal;
+      if (showMultiRpcModal) {
+        state.showMultiRpcModal = false;
+      }
+    });
+  }
+
+  /**
+   * A setter for the user to opt into smart transactions
+   *
+   * @param smartTransactionsOptInStatus - true to opt into smart transactions
+   */
+  setSmartTransactionsOptInStatus(smartTransactionsOptInStatus) {
+    this.update((state) => {
+      state.smartTransactionsOptInStatus = smartTransactionsOptInStatus;
+    });
+  }
+
+  /**
+   * A setter for the user to opt into transaction simulations
+   *
+   * @param useTransactionSimulations - true to opt into transaction simulations
+   */
+  setUseTransactionSimulations(useTransactionSimulations) {
+    this.update((state) => {
+      state.useTransactionSimulations = useTransactionSimulations;
+    });
+  }
+
   /**
    * A setter for the user preferences to enable/disable rpc methods.
    *
@@ -255,7 +312,7 @@ var PreferencesController = class extends _basecontroller.BaseController {
     const { disabledRpcMethodPreferences } = this.state;
     const newDisabledRpcMethods = {
       ...disabledRpcMethodPreferences,
-      [methodName]: isEnabled
+      [methodName]: isEnabled,
     };
     this.update((state) => {
       state.disabledRpcMethodPreferences = newDisabledRpcMethods;
@@ -297,21 +354,28 @@ var PreferencesController = class extends _basecontroller.BaseController {
    * @param chainId - On hexadecimal format to enable the incoming transaction network
    * @param isIncomingTransactionNetworkEnable - true to enable incoming transactions
    */
-  setEnableNetworkIncomingTransactions(chainId, isIncomingTransactionNetworkEnable) {
-    if (Object.values(_chunkPOA2PUW4js.ETHERSCAN_SUPPORTED_CHAIN_IDS).includes(chainId)) {
+  setEnableNetworkIncomingTransactions(
+    chainId,
+    isIncomingTransactionNetworkEnable,
+  ) {
+    if (
+      Object.values(_chunkPOA2PUW4js.ETHERSCAN_SUPPORTED_CHAIN_IDS).includes(
+        chainId,
+      )
+    ) {
       this.update((state) => {
         state.showIncomingTransactions = {
           ...this.state.showIncomingTransactions,
-          [chainId]: isIncomingTransactionNetworkEnable
+          [chainId]: isIncomingTransactionNetworkEnable,
         };
       });
     }
   }
 };
 _syncIdentities = new WeakSet();
-syncIdentities_fn = function(addresses) {
-  addresses = addresses.map(
-    (address) => _controllerutils.toChecksumHexAddress.call(void 0, address)
+syncIdentities_fn = function (addresses) {
+  addresses = addresses.map((address) =>
+    _controllerutils.toChecksumHexAddress.call(void 0, address),
   );
   this.update((state) => {
     const { identities } = state;
@@ -335,9 +399,7 @@ syncIdentities_fn = function(addresses) {
 };
 var PreferencesController_default = PreferencesController;

-
-
-
-
-exports.getDefaultPreferencesState = getDefaultPreferencesState; exports.PreferencesController = PreferencesController; exports.PreferencesController_default = PreferencesController_default;
+exports.getDefaultPreferencesState = getDefaultPreferencesState;
+exports.PreferencesController = PreferencesController;
+exports.PreferencesController_default = PreferencesController_default;
 //# sourceMappingURL=chunk-FSWGV6H6.js.map
diff --git a/node_modules/@metamask/preferences-controller/dist/types/PreferencesController.d.ts b/node_modules/@metamask/preferences-controller/dist/types/PreferencesController.d.ts
index 7e3ba15..a15d67e 100644
--- a/node_modules/@metamask/preferences-controller/dist/types/PreferencesController.d.ts
+++ b/node_modules/@metamask/preferences-controller/dist/types/PreferencesController.d.ts
@@ -1,265 +1,335 @@
-import { BaseController, type ControllerStateChangeEvent, type ControllerGetStateAction, type RestrictedControllerMessenger } from '@metamask/base-controller';
+import {
+  BaseController,
+  type ControllerStateChangeEvent,
+  type ControllerGetStateAction,
+  type RestrictedControllerMessenger,
+} from '@metamask/base-controller';
 import type { KeyringControllerStateChangeEvent } from '@metamask/keyring-controller';
 import { ETHERSCAN_SUPPORTED_CHAIN_IDS } from './constants';
 /**
  * A representation of a MetaMask identity
  */
 export type Identity = {
-    /**
-     * The address of the identity
-     */
-    address: string;
-    /**
-     * The timestamp for when this identity was first added
-     */
-    importTime?: number;
-    /**
-     * The name of the identity
-     */
-    name: string;
+  /**
+   * The address of the identity
+   */
+  address: string;
+  /**
+   * The timestamp for when this identity was first added
+   */
+  importTime?: number;
+  /**
+   * The name of the identity
+   */
+  name: string;
 };
 /**
  * A type union of the name for each chain that is supported by Etherscan or
  * an Etherscan-compatible service.
  */
-export type EtherscanSupportedChains = keyof typeof ETHERSCAN_SUPPORTED_CHAIN_IDS;
+export type EtherscanSupportedChains =
+  keyof typeof ETHERSCAN_SUPPORTED_CHAIN_IDS;
 /**
  * A type union of the chain ID for each chain that is supported by Etherscan
  * or an Etherscan-compatible service.
  */
-export type EtherscanSupportedHexChainId = (typeof ETHERSCAN_SUPPORTED_CHAIN_IDS)[EtherscanSupportedChains];
+export type EtherscanSupportedHexChainId =
+  (typeof ETHERSCAN_SUPPORTED_CHAIN_IDS)[EtherscanSupportedChains];
 /**
  * Preferences controller state
  */
 export type PreferencesState = {
-    /**
-     * A map of RPC method names to enabled state (true is enabled, false is disabled)
-     */
-    disabledRpcMethodPreferences: {
-        [methodName: string]: boolean;
-    };
-    /**
-     * Map of specific features to enable or disable
-     */
-    featureFlags: {
-        [feature: string]: boolean;
-    };
-    /**
-     * Map of addresses to Identity objects
-     */
-    identities: {
-        [address: string]: Identity;
-    };
-    /**
-     * The configured IPFS gateway
-     */
-    ipfsGateway: string;
-    /**
-     * Controls whether IPFS is enabled or not
-     */
-    isIpfsGatewayEnabled: boolean;
-    /**
-     * Controls whether multi-account balances are enabled or not
-     */
-    isMultiAccountBalancesEnabled: boolean;
-    /**
-     * Map of lost addresses to Identity objects
-     */
-    lostIdentities: {
-        [address: string]: Identity;
-    };
-    /**
-     * Controls whether the OpenSea API is used
-     */
-    openSeaEnabled: boolean;
-    /**
-     * Controls whether "security alerts" are enabled
-     */
-    securityAlertsEnabled: boolean;
-    /**
-     * The current selected address
-     */
-    selectedAddress: string;
-    /**
-     * Controls whether incoming transactions are enabled, per-chain (for Etherscan-supported chains)
-     */
-    showIncomingTransactions: {
-        [chainId in EtherscanSupportedHexChainId]: boolean;
-    };
-    /**
-     * Controls whether test networks are shown in the wallet
-     */
-    showTestNetworks: boolean;
-    /**
-     * Controls whether NFT detection is enabled
-     */
-    useNftDetection: boolean;
-    /**
-     * Controls whether token detection is enabled
-     */
-    useTokenDetection: boolean;
+  /**
+   * A map of RPC method names to enabled state (true is enabled, false is disabled)
+   */
+  disabledRpcMethodPreferences: {
+    [methodName: string]: boolean;
+  };
+  /**
+   * Map of specific features to enable or disable
+   */
+  featureFlags: {
+    [feature: string]: boolean;
+  };
+  /**
+   * Map of addresses to Identity objects
+   */
+  identities: {
+    [address: string]: Identity;
+  };
+  /**
+   * The configured IPFS gateway
+   */
+  ipfsGateway: string;
+  /**
+   * Controls whether IPFS is enabled or not
+   */
+  isIpfsGatewayEnabled: boolean;
+  /**
+   * Controls whether multi-account balances are enabled or not
+   */
+  isMultiAccountBalancesEnabled: boolean;
+  /**
+   * Map of lost addresses to Identity objects
+   */
+  lostIdentities: {
+    [address: string]: Identity;
+  };
+  /**
+   * Controls whether the web2 third parties are used
+   */
+  displayNftMedia: boolean;
+  useSafeChainsListValidation: boolean;
+  /**
+   * Controls whether "security alerts" are enabled
+   */
+  securityAlertsEnabled: boolean;
+  /**
+   * The current selected address
+   */
+  selectedAddress: string;
+  /**
+   * Controls whether incoming transactions are enabled, per-chain (for Etherscan-supported chains)
+   */
+  showIncomingTransactions: {
+    [chainId in EtherscanSupportedHexChainId]: boolean;
+  };
+  /**
+   * Controls whether test networks are shown in the wallet
+   */
+  showTestNetworks: boolean;
+  /**
+   * Controls whether NFT detection is enabled
+   */
+  useNftDetection: boolean;
+  /**
+   * Controls whether token detection is enabled
+   */
+  useTokenDetection: boolean;
+  /**
+   * Controls whether smart transactions are opted into
+   */
+  smartTransactionsOptInStatus: boolean;
+  /**
+   * Controls whether transaction simulations are opted into
+   */
+  useTransactionSimulations: boolean;
+  /**
+   * Controls whether Multi rpc modal is displayed or not
+   */
+  showMultiRpcModal: boolean;
 };
-declare const name = "PreferencesController";
-export type PreferencesControllerGetStateAction = ControllerGetStateAction<typeof name, PreferencesState>;
-export type PreferencesControllerStateChangeEvent = ControllerStateChangeEvent<typeof name, PreferencesState>;
+declare const name = 'PreferencesController';
+export type PreferencesControllerGetStateAction = ControllerGetStateAction<
+  typeof name,
+  PreferencesState
+>;
+export type PreferencesControllerStateChangeEvent = ControllerStateChangeEvent<
+  typeof name,
+  PreferencesState
+>;
 export type PreferencesControllerActions = PreferencesControllerGetStateAction;
 export type PreferencesControllerEvents = PreferencesControllerStateChangeEvent;
 export type AllowedEvents = KeyringControllerStateChangeEvent;
-export type PreferencesControllerMessenger = RestrictedControllerMessenger<typeof name, PreferencesControllerActions, PreferencesControllerEvents | AllowedEvents, never, AllowedEvents['type']>;
+export type PreferencesControllerMessenger = RestrictedControllerMessenger<
+  typeof name,
+  PreferencesControllerActions,
+  PreferencesControllerEvents | AllowedEvents,
+  never,
+  AllowedEvents['type']
+>;
 /**
  * Get the default PreferencesController state.
  *
  * @returns The default PreferencesController state.
  */
 export declare function getDefaultPreferencesState(): {
-    disabledRpcMethodPreferences: {
-        eth_sign: boolean;
-    };
-    featureFlags: {};
-    identities: {};
-    ipfsGateway: string;
-    isIpfsGatewayEnabled: boolean;
-    isMultiAccountBalancesEnabled: boolean;
-    lostIdentities: {};
-    openSeaEnabled: boolean;
-    securityAlertsEnabled: boolean;
-    selectedAddress: string;
-    showIncomingTransactions: {
-        "0x1": boolean;
-        "0x5": boolean;
-        "0x38": boolean;
-        "0x61": boolean;
-        "0xa": boolean;
-        "0xaa37dc": boolean;
-        "0x89": boolean;
-        "0x13881": boolean;
-        "0xa86a": boolean;
-        "0xa869": boolean;
-        "0xfa": boolean;
-        "0xfa2": boolean;
-        "0xaa36a7": boolean;
-        "0xe704": boolean;
-        "0xe705": boolean;
-        "0xe708": boolean;
-        "0x504": boolean;
-        "0x507": boolean;
-        "0x505": boolean;
-        "0x64": boolean;
-    };
-    showTestNetworks: boolean;
-    useNftDetection: boolean;
-    useTokenDetection: boolean;
+  disabledRpcMethodPreferences: {
+    eth_sign: boolean;
+  };
+  featureFlags: {};
+  identities: {};
+  ipfsGateway: string;
+  isIpfsGatewayEnabled: boolean;
+  isMultiAccountBalancesEnabled: boolean;
+  lostIdentities: {};
+  displayNftMedia: boolean;
+  securityAlertsEnabled: boolean;
+  selectedAddress: string;
+  showIncomingTransactions: {
+    '0x1': boolean;
+    '0x5': boolean;
+    '0x38': boolean;
+    '0x61': boolean;
+    '0xa': boolean;
+    '0xaa37dc': boolean;
+    '0x89': boolean;
+    '0x13881': boolean;
+    '0xa86a': boolean;
+    '0xa869': boolean;
+    '0xfa': boolean;
+    '0xfa2': boolean;
+    '0xaa36a7': boolean;
+    '0xe704': boolean;
+    '0xe705': boolean;
+    '0xe708': boolean;
+    '0x504': boolean;
+    '0x507': boolean;
+    '0x505': boolean;
+    '0x64': boolean;
+  };
+  showTestNetworks: boolean;
+  useNftDetection: boolean;
+  useTokenDetection: boolean;
+  smartTransactionsOptInStatus: boolean;
+  useTransactionSimulations: boolean;
+  showMultiRpcModal: boolean;
 };
 /**
  * Controller that stores shared settings and exposes convenience methods
  */
-export declare class PreferencesController extends BaseController<typeof name, PreferencesState, PreferencesControllerMessenger> {
-    #private;
-    /**
-     * Creates a PreferencesController instance.
-     *
-     * @param args - Arguments
-     * @param args.messenger - The preferences controller messenger.
-     * @param args.state - Preferences controller state.
-     */
-    constructor({ messenger, state, }: {
-        messenger: PreferencesControllerMessenger;
-        state?: Partial<PreferencesState>;
-    });
-    /**
-     * Adds identities to state.
-     *
-     * @param addresses - List of addresses to use to generate new identities.
-     */
-    addIdentities(addresses: string[]): void;
-    /**
-     * Removes an identity from state.
-     *
-     * @param address - Address of the identity to remove.
-     */
-    removeIdentity(address: string): void;
-    /**
-     * Associates a new label with an identity.
-     *
-     * @param address - Address of the identity to associate.
-     * @param label - New label to assign.
-     */
-    setAccountLabel(address: string, label: string): void;
-    /**
-     * Enable or disable a specific feature flag.
-     *
-     * @param feature - Feature to toggle.
-     * @param activated - Value to assign.
-     */
-    setFeatureFlag(feature: string, activated: boolean): void;
-    /**
-     * Sets selected address.
-     *
-     * @param selectedAddress - Ethereum address.
-     */
-    setSelectedAddress(selectedAddress: string): void;
-    /**
-     * Sets new IPFS gateway.
-     *
-     * @param ipfsGateway - IPFS gateway string.
-     */
-    setIpfsGateway(ipfsGateway: string): void;
-    /**
-     * Toggle the token detection setting.
-     *
-     * @param useTokenDetection - Boolean indicating user preference on token detection.
-     */
-    setUseTokenDetection(useTokenDetection: boolean): void;
-    /**
-     * Toggle the NFT detection setting.
-     *
-     * @param useNftDetection - Boolean indicating user preference on NFT detection.
-     */
-    setUseNftDetection(useNftDetection: boolean): void;
-    /**
-     * Toggle the opensea enabled setting.
-     *
-     * @param openSeaEnabled - Boolean indicating user preference on using OpenSea's API.
-     */
-    setOpenSeaEnabled(openSeaEnabled: boolean): void;
-    /**
-     * Toggle the security alert enabled setting.
-     *
-     * @param securityAlertsEnabled - Boolean indicating user preference on using security alerts.
-     */
-    setSecurityAlertsEnabled(securityAlertsEnabled: boolean): void;
-    /**
-     * A setter for the user preferences to enable/disable rpc methods.
-     *
-     * @param methodName - The RPC method name to change the setting of.
-     * @param isEnabled - true to enable the rpc method, false to disable it.
-     */
-    setDisabledRpcMethodPreference(methodName: string, isEnabled: boolean): void;
-    /**
-     * A setter for the user preferences to enable/disable fetch of multiple accounts balance.
-     *
-     * @param isMultiAccountBalancesEnabled - true to enable multiple accounts balance fetch, false to fetch only selectedAddress.
-     */
-    setIsMultiAccountBalancesEnabled(isMultiAccountBalancesEnabled: boolean): void;
-    /**
-     * A setter for the user have the test networks visible/hidden.
-     *
-     * @param showTestNetworks - true to show test networks, false to hidden.
-     */
-    setShowTestNetworks(showTestNetworks: boolean): void;
-    /**
-     * A setter for the user allow to be fetched IPFS content
-     *
-     * @param isIpfsGatewayEnabled - true to enable ipfs source
-     */
-    setIsIpfsGatewayEnabled(isIpfsGatewayEnabled: boolean): void;
-    /**
-     * A setter for the user allow to be fetched IPFS content
-     *
-     * @param chainId - On hexadecimal format to enable the incoming transaction network
-     * @param isIncomingTransactionNetworkEnable - true to enable incoming transactions
-     */
-    setEnableNetworkIncomingTransactions(chainId: EtherscanSupportedHexChainId, isIncomingTransactionNetworkEnable: boolean): void;
+export declare class PreferencesController extends BaseController<
+  typeof name,
+  PreferencesState,
+  PreferencesControllerMessenger
+> {
+  #private;
+  /**
+   * Creates a PreferencesController instance.
+   *
+   * @param args - Arguments
+   * @param args.messenger - The preferences controller messenger.
+   * @param args.state - Preferences controller state.
+   */
+  constructor({
+    messenger,
+    state,
+  }: {
+    messenger: PreferencesControllerMessenger;
+    state?: Partial<PreferencesState>;
+  });
+  /**
+   * Adds identities to state.
+   *
+   * @param addresses - List of addresses to use to generate new identities.
+   */
+  addIdentities(addresses: string[]): void;
+  /**
+   * Removes an identity from state.
+   *
+   * @param address - Address of the identity to remove.
+   */
+  removeIdentity(address: string): void;
+  /**
+   * Associates a new label with an identity.
+   *
+   * @param address - Address of the identity to associate.
+   * @param label - New label to assign.
+   */
+  setAccountLabel(address: string, label: string): void;
+  /**
+   * Enable or disable a specific feature flag.
+   *
+   * @param feature - Feature to toggle.
+   * @param activated - Value to assign.
+   */
+  setFeatureFlag(feature: string, activated: boolean): void;
+  /**
+   * Sets selected address.
+   *
+   * @param selectedAddress - Ethereum address.
+   */
+  setSelectedAddress(selectedAddress: string): void;
+  /**
+   * Sets new IPFS gateway.
+   *
+   * @param ipfsGateway - IPFS gateway string.
+   */
+  setIpfsGateway(ipfsGateway: string): void;
+  /**
+   * Toggle the token detection setting.
+   *
+   * @param useTokenDetection - Boolean indicating user preference on token detection.
+   */
+  setUseTokenDetection(useTokenDetection: boolean): void;
+  /**
+   * Toggle the NFT detection setting.
+   *
+   * @param useNftDetection - Boolean indicating user preference on NFT detection.
+   */
+  setUseNftDetection(useNftDetection: boolean): void;
+  /**
+   * Toggle the display nft media enabled setting.
+   *
+   * @param displayNftMedia - Boolean indicating user preference on using web2 third parties.
+   */
+  setDisplayNftMedia(displayNftMedia: boolean): void;
+  /**
+   * Toggle the use safe chains list validation.
+   * @param useSafeChainsListValidation - Boolean indicating user preference on using chainid.network third part to check safe networks.
+   */
+  setUseSafeChainsListValidation(useSafeChainsListValidation: boolean): void;
+  /**
+   * Toggle the security alert enabled setting.
+   *
+   * @param securityAlertsEnabled - Boolean indicating user preference on using security alerts.
+   */
+  setSecurityAlertsEnabled(securityAlertsEnabled: boolean): void;
+  /**
+   * A setter for the user preferences to enable/disable rpc methods.
+   *
+   * @param methodName - The RPC method name to change the setting of.
+   * @param isEnabled - true to enable the rpc method, false to disable it.
+   */
+  setDisabledRpcMethodPreference(methodName: string, isEnabled: boolean): void;
+  /**
+   * A setter for the user preferences to enable/disable fetch of multiple accounts balance.
+   *
+   * @param isMultiAccountBalancesEnabled - true to enable multiple accounts balance fetch, false to fetch only selectedAddress.
+   */
+  setIsMultiAccountBalancesEnabled(
+    isMultiAccountBalancesEnabled: boolean,
+  ): void;
+  /**
+   * A setter for the user have the test networks visible/hidden.
+   *
+   * @param showTestNetworks - true to show test networks, false to hidden.
+   */
+  setShowTestNetworks(showTestNetworks: boolean): void;
+  /**
+   * A setter for the user allow to be fetched IPFS content
+   *
+   * @param isIpfsGatewayEnabled - true to enable ipfs source
+   */
+  setIsIpfsGatewayEnabled(isIpfsGatewayEnabled: boolean): void;
+  /**
+   * A setter for the user allow to be fetched IPFS content
+   *
+   * @param chainId - On hexadecimal format to enable the incoming transaction network
+   * @param isIncomingTransactionNetworkEnable - true to enable incoming transactions
+   */
+  setEnableNetworkIncomingTransactions(
+    chainId: EtherscanSupportedHexChainId,
+    isIncomingTransactionNetworkEnable: boolean,
+  ): void;
+  /**
+   * A setter for the user to opt into smart transactions
+   *
+   * @param smartTransactionsOptInStatus - true to opt into smart transactions
+   */
+  setSmartTransactionsOptInStatus(smartTransactionsOptInStatus: boolean): void;
+  /**
+   * A setter for the user to opt into transaction simulations
+   *
+   * @param useTransactionSimulations - true to opt into transaction simulations
+   */
+  setUseTransactionSimulations(useTransactionSimulations: boolean): void;
+  /**
+   * Toggle multi rpc migration modal.
+   *
+   * @param showMultiRpcModal - Boolean indicating if the multi rpc modal will be displayed or not.
+   * * */
+  setShowMultiRpcModal(showMultiRpcModal: boolean): void;
 }
 export default PreferencesController;
 //# sourceMappingURL=PreferencesController.d.ts.map
