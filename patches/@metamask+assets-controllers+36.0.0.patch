diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-DSDI75PJ.js b/node_modules/@metamask/assets-controllers/dist/chunk-DSDI75PJ.js
index f95d90f..3c33263 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-DSDI75PJ.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-DSDI75PJ.js
@@ -173,6 +173,17 @@ var TokenRatesController = class extends _pollingcontroller.StaticIntervalPollin
     _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _subscribeToNetworkStateChange, subscribeToNetworkStateChange_fn).call(this);
     _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _subscribeToAccountChange, subscribeToAccountChange_fn).call(this);
   }
+
+  /**
+  * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+  * Resets to the default state
+  */
+  reset() {
+    this.update((state) => {
+        state.marketData = {};
+    });
+  }
+  
   /**
    * Allows controller to make active and passive polling requests
    */
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-HTIZ4JKG.js b/node_modules/@metamask/assets-controllers/dist/chunk-HTIZ4JKG.js
index a9f6736..ecd98e7 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-HTIZ4JKG.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-HTIZ4JKG.js
@@ -46,7 +46,7 @@ var getDefaultNftControllerState = () => ({
   allNfts: {},
   ignoredNfts: []
 });
-var _mutex, _selectedAccountId, _chainId, _ipfsGateway, _openSeaEnabled, _useIpfsSubdomains, _isIpfsGatewayEnabled, _getERC721AssetName, _getERC721AssetSymbol, _getERC721TokenURI, _getERC721OwnerOf, _getERC1155BalanceOf, _getERC1155TokenURI, _onNftAdded, _onNetworkControllerNetworkDidChange, onNetworkControllerNetworkDidChange_fn, _onPreferencesControllerStateChange, onPreferencesControllerStateChange_fn, _onSelectedAccountChange, onSelectedAccountChange_fn, _updateNestedNftState, updateNestedNftState_fn, _getNftInformationFromApi, getNftInformationFromApi_fn, _getNftInformationFromTokenURI, getNftInformationFromTokenURI_fn, _getNftURIAndStandard, getNftURIAndStandard_fn, _getNftInformation, getNftInformation_fn, _getNftContractInformationFromContract, getNftContractInformationFromContract_fn, _getNftContractInformation, getNftContractInformation_fn, _addIndividualNft, addIndividualNft_fn, _addNftContract, addNftContract_fn, _removeAndIgnoreIndividualNft, removeAndIgnoreIndividualNft_fn, _removeIndividualNft, removeIndividualNft_fn, _removeNftContract, removeNftContract_fn, _validateWatchNft, validateWatchNft_fn, _getCorrectChainId, getCorrectChainId_fn, _getAddressOrSelectedAddress, getAddressOrSelectedAddress_fn, _updateNftUpdateForAccount, updateNftUpdateForAccount_fn;
+var _mutex, _selectedAccountId, _chainId, _ipfsGateway, _displayNftMedia, _useIpfsSubdomains, _isIpfsGatewayEnabled, _getERC721AssetName, _getERC721AssetSymbol, _getERC721TokenURI, _getERC721OwnerOf, _getERC1155BalanceOf, _getERC1155TokenURI, _onNftAdded, _onNetworkControllerNetworkDidChange, onNetworkControllerNetworkDidChange_fn, _onPreferencesControllerStateChange, onPreferencesControllerStateChange_fn, _onSelectedAccountChange, onSelectedAccountChange_fn, _updateNestedNftState, updateNestedNftState_fn, _getNftInformationFromApi, getNftInformationFromApi_fn, _getNftInformationFromTokenURI, getNftInformationFromTokenURI_fn, _getNftURIAndStandard, getNftURIAndStandard_fn, _getNftInformation, getNftInformation_fn, _getNftContractInformationFromContract, getNftContractInformationFromContract_fn, _getNftContractInformation, getNftContractInformation_fn, _addIndividualNft, addIndividualNft_fn, _addNftContract, addNftContract_fn, _removeAndIgnoreIndividualNft, removeAndIgnoreIndividualNft_fn, _removeIndividualNft, removeIndividualNft_fn, _removeNftContract, removeNftContract_fn, _validateWatchNft, validateWatchNft_fn, _getCorrectChainId, getCorrectChainId_fn, _getAddressOrSelectedAddress, getAddressOrSelectedAddress_fn, _updateNftUpdateForAccount, updateNftUpdateForAccount_fn;
 var NftController = class extends _basecontroller.BaseController {
   /**
    * Creates an NftController instance.
@@ -54,7 +54,7 @@ var NftController = class extends _basecontroller.BaseController {
    * @param options - The controller options.
    * @param options.chainId - The chain ID of the current network.
    * @param options.ipfsGateway - The configured IPFS gateway.
-   * @param options.openSeaEnabled - Controls whether the OpenSea API is used.
+   * @param options.displayNftMedia - Controls whether the OpenSea API is used.
    * @param options.useIpfsSubdomains - Controls whether IPFS subdomains are used.
    * @param options.isIpfsGatewayEnabled - Controls whether IPFS is enabled or not.
    * @param options.getERC721AssetName - Gets the name of the asset at the given address.
@@ -71,7 +71,7 @@ var NftController = class extends _basecontroller.BaseController {
   constructor({
     chainId: initialChainId,
     ipfsGateway = _controllerutils.IPFS_DEFAULT_GATEWAY_URL,
-    openSeaEnabled = false,
+    displayNftMedia = false,
     useIpfsSubdomains = true,
     isIpfsGatewayEnabled = true,
     getERC721AssetName,
@@ -103,7 +103,7 @@ var NftController = class extends _basecontroller.BaseController {
      * Handles the state change of the preference controller.
      * @param preferencesState - The new state of the preference controller.
      * @param preferencesState.ipfsGateway - The configured IPFS gateway.
-     * @param preferencesState.openSeaEnabled - Controls whether the OpenSea API is used.
+     * @param preferencesState.displayNftMedia - Controls whether the OpenSea API is used.
      * @param preferencesState.isIpfsGatewayEnabled - Controls whether IPFS is enabled or not.
      */
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onPreferencesControllerStateChange);
@@ -239,7 +239,7 @@ var NftController = class extends _basecontroller.BaseController {
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _selectedAccountId, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _chainId, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _ipfsGateway, void 0);
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _openSeaEnabled, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _displayNftMedia, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _useIpfsSubdomains, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isIpfsGatewayEnabled, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getERC721AssetName, void 0);
@@ -254,7 +254,7 @@ var NftController = class extends _basecontroller.BaseController {
     ).id);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _chainId, initialChainId);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _ipfsGateway, ipfsGateway);
-    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _openSeaEnabled, openSeaEnabled);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _displayNftMedia, displayNftMedia);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _useIpfsSubdomains, useIpfsSubdomains);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isIpfsGatewayEnabled, isIpfsGatewayEnabled);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getERC721AssetName, getERC721AssetName);
@@ -281,6 +281,19 @@ var NftController = class extends _basecontroller.BaseController {
       _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onSelectedAccountChange, onSelectedAccountChange_fn).bind(this)
     );
   }
+
+  /**
+  * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+  * Resets to the default state
+  */
+  reset() {
+    this.update((state) => {
+      state.allNftContracts = {};
+      state.allNfts = {};
+      state.ignoredNfts = [];
+    });
+  }
+  
   getNftApi() {
     return `${_controllerutils.NFT_API_BASE_URL}/tokens`;
   }
@@ -799,7 +812,7 @@ _mutex = new WeakMap();
 _selectedAccountId = new WeakMap();
 _chainId = new WeakMap();
 _ipfsGateway = new WeakMap();
-_openSeaEnabled = new WeakMap();
+_displayNftMedia = new WeakMap();
 _useIpfsSubdomains = new WeakMap();
 _isIpfsGatewayEnabled = new WeakMap();
 _getERC721AssetName = new WeakMap();
@@ -824,7 +837,7 @@ onNetworkControllerNetworkDidChange_fn = function({
 _onPreferencesControllerStateChange = new WeakSet();
 onPreferencesControllerStateChange_fn = async function({
   ipfsGateway,
-  openSeaEnabled,
+  displayNftMedia,
   isIpfsGatewayEnabled
 }) {
   const selectedAccount = this.messagingSystem.call(
@@ -832,9 +845,9 @@ onPreferencesControllerStateChange_fn = async function({
   );
   _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _selectedAccountId, selectedAccount.id);
   _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _ipfsGateway, ipfsGateway);
-  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _openSeaEnabled, openSeaEnabled);
+  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _displayNftMedia, displayNftMedia);
   _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isIpfsGatewayEnabled, isIpfsGatewayEnabled);
-  const needsUpdateNftMetadata = isIpfsGatewayEnabled && ipfsGateway !== "" || openSeaEnabled;
+  const needsUpdateNftMetadata = isIpfsGatewayEnabled && ipfsGateway !== "" || displayNftMedia;
   if (needsUpdateNftMetadata && selectedAccount) {
     await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateNftUpdateForAccount, updateNftUpdateForAccount_fn).call(this, selectedAccount);
   }
@@ -843,7 +856,7 @@ _onSelectedAccountChange = new WeakSet();
 onSelectedAccountChange_fn = async function(internalAccount) {
   const oldSelectedAccountId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _selectedAccountId);
   _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _selectedAccountId, internalAccount.id);
-  const needsUpdateNftMetadata = (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isIpfsGatewayEnabled) && _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _ipfsGateway) !== "" || _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _openSeaEnabled)) && oldSelectedAccountId !== internalAccount.id;
+  const needsUpdateNftMetadata = (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isIpfsGatewayEnabled) && _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _ipfsGateway) !== "" || _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _displayNftMedia)) && oldSelectedAccountId !== internalAccount.id;
   if (needsUpdateNftMetadata) {
     await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateNftUpdateForAccount, updateNftUpdateForAccount_fn).call(this, internalAccount);
   }
@@ -900,7 +913,8 @@ getNftInformationFromApi_fn = async function(contractAddress, tokenId) {
       name: null,
       description: null,
       image: null,
-      standard: null
+      standard: null,
+      error: 'Opensea import error',
     };
   }
   const {
@@ -961,7 +975,7 @@ getNftInformationFromTokenURI_fn = async function(contractAddress, tokenId, netw
       tokenURI: tokenURI ?? null
     };
   }
-  const isDisplayNFTMediaToggleEnabled = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _openSeaEnabled);
+  const isDisplayNFTMediaToggleEnabled = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _displayNftMedia);
   if (!hasIpfsTokenURI && !isDisplayNFTMediaToggleEnabled) {
     return {
       image: null,
@@ -969,7 +983,8 @@ getNftInformationFromTokenURI_fn = async function(contractAddress, tokenId, netw
       description: null,
       standard: standard || null,
       favorite: false,
-      tokenURI: tokenURI ?? null
+      tokenURI: tokenURI ?? null,
+      error: 'URI import error',
     };
   }
   if (hasIpfsTokenURI) {
@@ -1010,7 +1025,8 @@ getNftInformationFromTokenURI_fn = async function(contractAddress, tokenId, netw
       description: null,
       standard: standard || null,
       favorite: false,
-      tokenURI: tokenURI ?? null
+      tokenURI: tokenURI ?? null,
+      error: 'URI import error',
     };
   }
 };
@@ -1041,10 +1057,21 @@ getNftInformation_fn = async function(contractAddress, tokenId, networkClientId)
     _controllerutils.safelyExecute.call(void 0, 
       () => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNftInformationFromTokenURI, getNftInformationFromTokenURI_fn).call(this, contractAddress, tokenId, networkClientId)
     ),
-    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _openSeaEnabled) && chainId === "0x1" ? _controllerutils.safelyExecute.call(void 0, 
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _displayNftMedia) && chainId === "0x1" ? _controllerutils.safelyExecute.call(void 0, 
       () => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNftInformationFromApi, getNftInformationFromApi_fn).call(this, contractAddress, tokenId)
     ) : void 0
   ]);
+  if (blockchainMetadata?.error && nftApiMetadata?.error) {
+    return {
+      image: null,
+      name: null,
+      description: null,
+      standard: blockchainMetadata.standard ?? null,
+      favorite: false,
+      tokenURI: blockchainMetadata.tokenURI ?? null,
+      error: 'Both import failed',
+    };
+  }
   return {
     ...nftApiMetadata,
     name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,
@@ -1161,7 +1188,8 @@ addIndividualNft_fn = async function(tokenAddress, tokenId, nftMetadata, nftCont
         symbol: nftContract.symbol,
         tokenId: tokenId.toString(),
         standard: nftMetadata.standard,
-        source
+        source,
+        tokenURI: nftMetadata.tokenURI,
       });
     }
   } finally {
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-NHFZIY2K.js b/node_modules/@metamask/assets-controllers/dist/chunk-NHFZIY2K.js
index 995ec6b..7222a8a 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-NHFZIY2K.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-NHFZIY2K.js
@@ -19,7 +19,7 @@ function getDefaultTokenBalancesState() {
     contractBalances: {}
   };
 }
-var _handle, _getERC20BalanceOf, _interval, _tokens, _disabled;
+var _handle, _getERC20BalanceOf, _interval, _tokens, _disabled, _updateInProgress;
 var TokenBalancesController = class extends _basecontroller.BaseController {
   /**
    * Construct a Token Balances Controller.
@@ -54,9 +54,11 @@ var TokenBalancesController = class extends _basecontroller.BaseController {
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _interval, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _tokens, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _disabled, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateInProgress, void 0);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _disabled, disabled);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _interval, interval);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _tokens, tokens);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _updateInProgress, false);
     this.messagingSystem.subscribe(
       "TokensController:stateChange",
       ({ tokens: newTokens, detectedTokens }) => {
@@ -67,6 +69,17 @@ var TokenBalancesController = class extends _basecontroller.BaseController {
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getERC20BalanceOf, getERC20BalanceOf);
     this.poll();
   }
+
+  /**
+  * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+  * Resets to the default state
+  */
+  reset() {
+    this.update((state) => {
+      state.contractBalances = {};
+    });
+  }
+  
   /**
    * Allows controller to update tracked tokens contract balances.
    */
@@ -107,20 +120,27 @@ var TokenBalancesController = class extends _basecontroller.BaseController {
       "AccountsController:getSelectedAccount"
     );
     const newContractBalances = {};
-    for (const token of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _tokens)) {
+    const balancePromises = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _tokens).map((token) => {
       const { address } = token;
-      try {
-        const balance = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getERC20BalanceOf).call(this, address, selectedInternalAccount.address);
-        newContractBalances[address] = _controllerutils.toHex.call(void 0, balance);
-        token.hasBalanceError = false;
-      } catch (error) {
-        newContractBalances[address] = _controllerutils.toHex.call(void 0, 0);
-        token.hasBalanceError = true;
-      }
-    }
+      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getERC20BalanceOf).call(this, address, selectedInternalAccount.address).then((balance) => {
+          newContractBalances[address] = _controllerutils.toHex.call(void 0, balance);
+              token = {
+                ...token,
+                hasBalanceError: false
+              };
+      }).catch((error) => {
+          newContractBalances[address] = _controllerutils.toHex.call(void 0, 0);
+              token = {
+                ...token,
+                hasBalanceError: true
+              };
+          });
+    });
+    await Promise.all(balancePromises);
     this.update((state) => {
       state.contractBalances = newContractBalances;
     });
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _updateInProgress, false);
   }
 };
 _handle = new WeakMap();
@@ -128,6 +148,7 @@ _getERC20BalanceOf = new WeakMap();
 _interval = new WeakMap();
 _tokens = new WeakMap();
 _disabled = new WeakMap();
+_updateInProgress = new WeakMap();
 var TokenBalancesController_default = TokenBalancesController;
 
 
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-T5ZX5BV7.js b/node_modules/@metamask/assets-controllers/dist/chunk-T5ZX5BV7.js
index 9c89a65..2ac17ba 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-T5ZX5BV7.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-T5ZX5BV7.js
@@ -87,6 +87,7 @@ var CurrencyRateController = class extends _pollingcontroller.StaticIntervalPoll
     const nativeCurrencyForExchangeRate = Object.values(
       _controllerutils.TESTNET_TICKER_SYMBOLS
     ).includes(nativeCurrency) ? _controllerutils.FALL_BACK_VS_CURRENCY : nativeCurrency;
+    let shouldUpdateState = true;
     try {
       if (currentCurrency && nativeCurrency && // if either currency is an empty string we can skip the comparison
       // because it will result in an error from the api and ultimately
@@ -103,23 +104,27 @@ var CurrencyRateController = class extends _pollingcontroller.StaticIntervalPoll
       }
     } catch (error) {
       if (!(error instanceof Error && error.message.includes("market does not exist for this coin pair"))) {
+        // Don't update state on transient / unexpected errors
+        shouldUpdateState = false;
         throw error;
       }
     } finally {
       try {
-        this.update(() => {
-          return {
-            currencyRates: {
-              ...currencyRates,
-              [nativeCurrency]: {
-                conversionDate,
-                conversionRate,
-                usdConversionRate
-              }
-            },
-            currentCurrency
-          };
-        });
+        if(shouldUpdateState) {
+          this.update(() => {
+            return {
+              currencyRates: {
+                ...currencyRates,
+                [nativeCurrency]: {
+                  conversionDate,
+                  conversionRate,
+                  usdConversionRate
+                }
+              },
+              currentCurrency
+            };
+          });
+        }
       } finally {
         releaseLock();
       }
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-TPUVGGNO.js b/node_modules/@metamask/assets-controllers/dist/chunk-TPUVGGNO.js
index baaf7d0..cfefb60 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-TPUVGGNO.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-TPUVGGNO.js
@@ -189,6 +189,20 @@ var TokensController = class extends _basecontroller.BaseController {
       }
     );
   }
+
+  /**
+  * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+  * Resets to the default state
+  */
+  reset() {
+    this.update((state) => {
+      state.allTokens = {};
+      state.allIgnoredTokens = {};
+      state.ignoredTokens = [];
+      state.tokens = [];
+    });
+  }
+
   /**
    * Adds a token to the stored token list.
    *
diff --git a/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts
index a69c32d..077e2db 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts
@@ -108,6 +108,7 @@ export type NftMetadata = {
     creator?: string;
     transactionId?: string;
     tokenURI?: string | null;
+    error?: string;
     collection?: Collection;
     address?: string;
     attributes?: Attributes[];
@@ -421,6 +422,11 @@ export declare class NftController extends BaseController<typeof controllerName,
      */
     resetNftTransactionStatusByTransactionId(transactionId: string, selectedAddress: string, chainId: Hex): boolean;
     _requestApproval(suggestedNftMeta: SuggestedNftMeta): Promise<unknown>;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+    */
+    reset(): void;
 }
 export default NftController;
 //# sourceMappingURL=NftController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts
index 45d58f8..ce24723 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts
@@ -79,6 +79,11 @@ export declare class TokenBalancesController extends BaseController<typeof contr
      * Updates balances for all tokens.
      */
     updateBalances(): Promise<void>;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+    */
+    reset(): void;
 }
 export default TokenBalancesController;
 //# sourceMappingURL=TokenBalancesController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/TokenRatesController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/TokenRatesController.d.ts
index bc11572..36be424 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/TokenRatesController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/TokenRatesController.d.ts
@@ -165,6 +165,11 @@ export declare class TokenRatesController extends StaticIntervalPollingControlle
      * @returns The controller state.
      */
     _executePoll(networkClientId: NetworkClientId): Promise<void>;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+    */
+    reset(): void;
 }
 export default TokenRatesController;
 //# sourceMappingURL=TokenRatesController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/TokensController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/TokensController.d.ts
index a3eb08b..9bbc823 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/TokensController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/TokensController.d.ts
@@ -160,6 +160,11 @@ export declare class TokensController extends BaseController<typeof controllerNa
      * Removes all tokens from the ignored list.
      */
     clearIgnoredTokens(): void;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+    */
+    reset(): void;
 }
 export default TokensController;
 //# sourceMappingURL=TokensController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/index.d.ts b/node_modules/@metamask/assets-controllers/dist/types/index.d.ts
index 2a42816..f0d02dc 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/index.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/index.d.ts
@@ -6,7 +6,7 @@ export type { NftControllerState, NftControllerMessenger, NftControllerActions,
 export { getDefaultNftControllerState, NftController } from './NftController';
 export type { NftDetectionControllerMessenger, ApiNft, ApiNftContract, ApiNftLastSale, ApiNftCreator, ReservoirResponse, TokensResponse, BlockaidResultType, Blockaid, Market, TokenResponse, TopBid, LastSale, FeeBreakdown, Attributes, Collection, Royalties, Ownership, FloorAsk, Price, Metadata, } from './NftDetectionController';
 export { NftDetectionController } from './NftDetectionController';
-export type { TokenBalancesControllerMessenger, TokenBalancesControllerActions, TokenBalancesControllerGetStateAction, TokenBalancesControllerEvents, TokenBalancesControllerStateChangeEvent, } from './TokenBalancesController';
+export type { TokenBalancesControllerMessenger, TokenBalancesControllerActions, TokenBalancesControllerGetStateAction, TokenBalancesControllerEvents, TokenBalancesControllerStateChangeEvent, TokenBalancesControllerState, } from './TokenBalancesController';
 export { TokenBalancesController } from './TokenBalancesController';
 export type { TokenDetectionControllerMessenger, TokenDetectionControllerActions, TokenDetectionControllerGetStateAction, TokenDetectionControllerEvents, TokenDetectionControllerStateChangeEvent, } from './TokenDetectionController';
 export { TokenDetectionController } from './TokenDetectionController';
