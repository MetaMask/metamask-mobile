diff --git a/node_modules/react-native/Libraries/Core/InitializeCore.js b/node_modules/react-native/Libraries/Core/InitializeCore.js
index 25377f6..5542973 100644
--- a/node_modules/react-native/Libraries/Core/InitializeCore.js
+++ b/node_modules/react-native/Libraries/Core/InitializeCore.js
@@ -24,27 +24,37 @@
 
 'use strict';
 
+const Platform = require('../Utilities/Platform');
+
+if (Platform.OS === 'ios' && !global?.HermesInternal) {
+  require('./setUpSes');
+}
+
 const start = Date.now();
 
 require('./setUpGlobals');
 require('./setUpDOM');
 require('./setUpPerformance');
 require('./setUpErrorHandling');
+
 require('./polyfillPromise');
+
 require('./setUpRegeneratorRuntime');
+
 require('./setUpTimers');
 require('./setUpXHR');
+
 require('./setUpAlert');
 require('./setUpNavigator');
 require('./setUpBatchedBridge');
 require('./setUpSegmentFetcher');
 if (__DEV__) {
   require('./checkNativeVersion');
-  require('./setUpDeveloperTools');
+  require('./setUpDeveloperTools'); // console.log calls visible in Metro from here
   require('../LogBox/LogBox').default.install();
 }
 
-require('../ReactNative/AppRegistry');
+require('../ReactNative/AppRegistry'); // reflect-metadata imported after here causes: https://github.com/LavaMoat/docs/issues/26
 
 const GlobalPerformanceLogger = require('../Utilities/GlobalPerformanceLogger');
 // We could just call GlobalPerformanceLogger.markPoint at the top of the file,
diff --git a/node_modules/react-native/Libraries/Core/setUpSes.js b/node_modules/react-native/Libraries/Core/setUpSes.js
new file mode 100644
index 0000000..5dc1859
--- /dev/null
+++ b/node_modules/react-native/Libraries/Core/setUpSes.js
@@ -0,0 +1,60 @@
+/**
+ * Copyright (c) 2024 MetaMask
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+/**
+ * Set up Hardened JS (SES) via InitializeCore,
+ * provided the given MMKV storage key exists.
+ */
+
+import { MMKV } from 'react-native-mmkv';
+
+const storage = new MMKV(); // id: mmkv.default
+var isSesEnabled = storage.getBoolean('is-ses-enabled');
+
+// Enable SES by default
+if (isSesEnabled === undefined) {
+  isSesEnabled = true;
+  storage.set('is-ses-enabled', true);
+}
+
+/**
+ * SES disabled in debug-mode for now like we do in metamask-extension.
+ * To prevent react-jsx-runtime.development.js obscuring errors.
+ * See: https://github.com/MetaMask/metamask-mobile/issues/7923
+ */
+
+if (isSesEnabled && !__DEV__) {
+  require('../../../../ses.cjs');
+  /**
+   * Without consoleTaming: 'unsafe' causes:
+   * - Attempting to define property on object that is not extensible.
+   * Without errorTrapping 'none' causes:
+   * - TypeError: undefined is not a function (near '...globalThis.process.on...')
+   * Without unhandledRejectionTrapping 'none' causes:
+   * - TypeError: globalThis.process.on is not a function. (In 'globalThis.process.on('unhandledRejection', h.unhandledRejectionHandler)', 'globalThis.process.on' is undefined)
+   * overrideTaming 'severe' is ideal (default override?)
+   * Nb: global.process is only partially shimmed, which confuses SES
+   * Nb: All are Unhandled JS Exceptions, since we call lockdown before setUpErrorHandling
+  */
+  repairIntrinsics({ errorTaming: 'unsafe', consoleTaming: 'unsafe', errorTrapping: 'none', unhandledRejectionTrapping: 'none', overrideTaming: 'severe', stackFiltering: 'verbose' });
+  require('reflect-metadata'); // Vetted shim required to fix: https://github.com/LavaMoat/docs/issues/26
+  hardenIntrinsics();
+}
diff --git a/node_modules/react-native/ReactAndroid/build.gradle b/node_modules/react-native/ReactAndroid/build.gradle
index c2b76ed..2a19785 100644
--- a/node_modules/react-native/ReactAndroid/build.gradle
+++ b/node_modules/react-native/ReactAndroid/build.gradle
@@ -437,12 +437,8 @@ android {
 
     // Used to override the NDK path/version on internal CI or by allowing
     // users to customize the NDK path/version from their root project (e.g. for M1 support)
-    if (rootProject.hasProperty("ndkPath")) {
-        ndkPath rootProject.ext.ndkPath
-    }
-    if (rootProject.hasProperty("ndkVersion")) {
-        ndkVersion rootProject.ext.ndkVersion
-    }
+    // Added patch to apply ndk Path from MetaMask app gradle.build this is required for M1 Bitrise builds to work
+    ndkPath = project.getProperties().get("ndkPath")
 
     defaultConfig {
         minSdkVersion(21)
diff --git a/node_modules/react-native/ReactAndroid/hermes-engine/build.gradle b/node_modules/react-native/ReactAndroid/hermes-engine/build.gradle
index 5ebaf48..f5dde30 100644
--- a/node_modules/react-native/ReactAndroid/hermes-engine/build.gradle
+++ b/node_modules/react-native/ReactAndroid/hermes-engine/build.gradle
@@ -131,12 +131,9 @@ android {
 
     // Used to override the NDK path/version on internal CI or by allowing
     // users to customize the NDK path/version from their root project (e.g. for M1 support)
-    if (rootProject.hasProperty("ndkPath")) {
-        ndkPath rootProject.ext.ndkPath
-    }
-    if (rootProject.hasProperty("ndkVersion")) {
-        ndkVersion rootProject.ext.ndkVersion
-    }
+
+    // Added patch to apply ndk Path from MetaMask app gradle.build this is required for M1 Bitrise builds to work
+    ndkPath = project.getProperties().get("ndkPath")
 
     defaultConfig {
         minSdkVersion 21
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
index ced37be..a158541 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
@@ -38,6 +38,7 @@ import android.view.MenuItem;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.accessibility.AccessibilityNodeInfo;
+import android.view.inputmethod.BaseInputConnection;
 import android.view.inputmethod.EditorInfo;
 import android.view.inputmethod.InputConnection;
 import android.view.inputmethod.InputMethodManager;
@@ -99,6 +100,16 @@ public class ReactEditText extends AppCompatEditText
   /** A count of events sent to JS or C++. */
   protected int mNativeEventCount;
 
+  /**
+   * Taken from EditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING We can't use that
+   * value directly as it was only added on Oreo, but we can apply the value
+   * anyway.
+   */
+  private static final int IME_FLAG_NO_PERSONALIZED_LEARNING = 0x1000000;
+  /** Samsung Manufacturer Name */
+  private static final String SAMSUNG_MANUFACTURER_NAME = "samsung";
+  /** Samsung Device Check */
+  private static final Boolean IS_SAMSUNG_DEVICE = Build.MANUFACTURER.equals(SAMSUNG_MANUFACTURER_NAME);
   private static final int UNSET = -1;
 
   private @Nullable ArrayList<TextWatcher> mListeners;
@@ -288,16 +299,24 @@ public class ReactEditText extends AppCompatEditText
   @Override
   public InputConnection onCreateInputConnection(EditorInfo outAttrs) {
     ReactContext reactContext = getReactContext(this);
-    InputConnection inputConnection = super.onCreateInputConnection(outAttrs);
-    if (inputConnection != null && mOnKeyPress) {
-      inputConnection =
-          new ReactEditTextInputConnectionWrapper(
-              inputConnection, reactContext, this, mEventDispatcher);
-    }
-
-    if (isMultiline() && (shouldBlurOnReturn() || shouldSubmitOnReturn())) {
-      // Remove IME_FLAG_NO_ENTER_ACTION to keep the original IME_OPTION
-      outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;
+    InputConnection inputConnection;
+    // Don't apply learning flag on Samsung devices. Samsung Keyboards do not
+    // support incognito mode.
+    if (IS_SAMSUNG_DEVICE) {
+      // Default React-Native implementation
+      inputConnection = super.onCreateInputConnection(outAttrs);
+      if (isMultiline() && (shouldBlurOnReturn() || shouldSubmitOnReturn())) {
+        // Remove IME_FLAG_NO_ENTER_ACTION to keep the original IME_OPTION
+        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;
+      }
+    } else {
+      inputConnection = new BaseInputConnection(this, false);
+      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+        outAttrs.imeOptions = EditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING;
+      } else {
+        // Cover OS versions below Oreo
+        outAttrs.imeOptions = IME_FLAG_NO_PERSONALIZED_LEARNING;
+      }
     }
     return inputConnection;
   }
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ComponentDescriptors.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ComponentDescriptors.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.cpp
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.cpp
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/RCTComponentViewHelpers.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/RCTComponentViewHelpers.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.cpp
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.cpp
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.h
new file mode 100644
index 0000000..e69de29
