diff --git a/node_modules/react-native/Libraries/Core/InitializeCore.js b/node_modules/react-native/Libraries/Core/InitializeCore.js
index 25377f6..5542973 100644
--- a/node_modules/react-native/Libraries/Core/InitializeCore.js
+++ b/node_modules/react-native/Libraries/Core/InitializeCore.js
@@ -24,27 +24,37 @@
 
 'use strict';
 
+const Platform = require('../Utilities/Platform');
+
+if (Platform.OS === 'ios' && !global?.HermesInternal) {
+  require('./setUpSes');
+}
+
 const start = Date.now();
 
 require('./setUpGlobals');
 require('./setUpDOM');
 require('./setUpPerformance');
 require('./setUpErrorHandling');
+
 require('./polyfillPromise');
+
 require('./setUpRegeneratorRuntime');
+
 require('./setUpTimers');
 require('./setUpXHR');
+
 require('./setUpAlert');
 require('./setUpNavigator');
 require('./setUpBatchedBridge');
 require('./setUpSegmentFetcher');
 if (__DEV__) {
   require('./checkNativeVersion');
-  require('./setUpDeveloperTools');
+  require('./setUpDeveloperTools'); // console.log calls visible in Metro from here
   require('../LogBox/LogBox').default.install();
 }
 
-require('../ReactNative/AppRegistry');
+require('../ReactNative/AppRegistry'); // reflect-metadata imported after here causes: https://github.com/LavaMoat/docs/issues/26
 
 const GlobalPerformanceLogger = require('../Utilities/GlobalPerformanceLogger');
 // We could just call GlobalPerformanceLogger.markPoint at the top of the file,
diff --git a/node_modules/react-native/Libraries/Core/setUpSes.js b/node_modules/react-native/Libraries/Core/setUpSes.js
new file mode 100644
index 0000000..5dc1859
--- /dev/null
+++ b/node_modules/react-native/Libraries/Core/setUpSes.js
@@ -0,0 +1,60 @@
+/**
+ * Copyright (c) 2024 MetaMask
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+/**
+ * Set up Hardened JS (SES) via InitializeCore,
+ * provided the given MMKV storage key exists.
+ */
+
+import { MMKV } from 'react-native-mmkv';
+
+const storage = new MMKV(); // id: mmkv.default
+var isSesEnabled = storage.getBoolean('is-ses-enabled');
+
+// Enable SES by default
+if (isSesEnabled === undefined) {
+  isSesEnabled = true;
+  storage.set('is-ses-enabled', true);
+}
+
+/**
+ * SES disabled in debug-mode for now like we do in metamask-extension.
+ * To prevent react-jsx-runtime.development.js obscuring errors.
+ * See: https://github.com/MetaMask/metamask-mobile/issues/7923
+ */
+
+if (isSesEnabled && !__DEV__) {
+  require('../../../../ses.cjs');
+  /**
+   * Without consoleTaming: 'unsafe' causes:
+   * - Attempting to define property on object that is not extensible.
+   * Without errorTrapping 'none' causes:
+   * - TypeError: undefined is not a function (near '...globalThis.process.on...')
+   * Without unhandledRejectionTrapping 'none' causes:
+   * - TypeError: globalThis.process.on is not a function. (In 'globalThis.process.on('unhandledRejection', h.unhandledRejectionHandler)', 'globalThis.process.on' is undefined)
+   * overrideTaming 'severe' is ideal (default override?)
+   * Nb: global.process is only partially shimmed, which confuses SES
+   * Nb: All are Unhandled JS Exceptions, since we call lockdown before setUpErrorHandling
+  */
+  repairIntrinsics({ errorTaming: 'unsafe', consoleTaming: 'unsafe', errorTrapping: 'none', unhandledRejectionTrapping: 'none', overrideTaming: 'severe', stackFiltering: 'verbose' });
+  require('reflect-metadata'); // Vetted shim required to fix: https://github.com/LavaMoat/docs/issues/26
+  hardenIntrinsics();
+}
diff --git a/node_modules/react-native/ReactAndroid/build.gradle b/node_modules/react-native/ReactAndroid/build.gradle
index c2b76ed..2a19785 100644
--- a/node_modules/react-native/ReactAndroid/build.gradle
+++ b/node_modules/react-native/ReactAndroid/build.gradle
@@ -437,12 +437,8 @@ android {
 
     // Used to override the NDK path/version on internal CI or by allowing
     // users to customize the NDK path/version from their root project (e.g. for M1 support)
-    if (rootProject.hasProperty("ndkPath")) {
-        ndkPath rootProject.ext.ndkPath
-    }
-    if (rootProject.hasProperty("ndkVersion")) {
-        ndkVersion rootProject.ext.ndkVersion
-    }
+    // Added patch to apply ndk Path from MetaMask app gradle.build this is required for M1 Bitrise builds to work
+    ndkPath = project.getProperties().get("ndkPath")
 
     defaultConfig {
         minSdkVersion(21)
diff --git a/node_modules/react-native/ReactAndroid/hermes-engine/build.gradle b/node_modules/react-native/ReactAndroid/hermes-engine/build.gradle
index 5ebaf48..f5dde30 100644
--- a/node_modules/react-native/ReactAndroid/hermes-engine/build.gradle
+++ b/node_modules/react-native/ReactAndroid/hermes-engine/build.gradle
@@ -131,12 +131,9 @@ android {
 
     // Used to override the NDK path/version on internal CI or by allowing
     // users to customize the NDK path/version from their root project (e.g. for M1 support)
-    if (rootProject.hasProperty("ndkPath")) {
-        ndkPath rootProject.ext.ndkPath
-    }
-    if (rootProject.hasProperty("ndkVersion")) {
-        ndkVersion rootProject.ext.ndkVersion
-    }
+
+    // Added patch to apply ndk Path from MetaMask app gradle.build this is required for M1 Bitrise builds to work
+    ndkPath = project.getProperties().get("ndkPath")
 
     defaultConfig {
         minSdkVersion 21
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
index ced37be..a158541 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
@@ -38,6 +38,7 @@ import android.view.MenuItem;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.accessibility.AccessibilityNodeInfo;
+import android.view.inputmethod.BaseInputConnection;
 import android.view.inputmethod.EditorInfo;
 import android.view.inputmethod.InputConnection;
 import android.view.inputmethod.InputMethodManager;
@@ -99,6 +100,16 @@ public class ReactEditText extends AppCompatEditText
   /** A count of events sent to JS or C++. */
   protected int mNativeEventCount;
 
+  /**
+   * Taken from EditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING We can't use that
+   * value directly as it was only added on Oreo, but we can apply the value
+   * anyway.
+   */
+  private static final int IME_FLAG_NO_PERSONALIZED_LEARNING = 0x1000000;
+  /** Samsung Manufacturer Name */
+  private static final String SAMSUNG_MANUFACTURER_NAME = "samsung";
+  /** Samsung Device Check */
+  private static final Boolean IS_SAMSUNG_DEVICE = Build.MANUFACTURER.equals(SAMSUNG_MANUFACTURER_NAME);
   private static final int UNSET = -1;
 
   private @Nullable ArrayList<TextWatcher> mListeners;
@@ -288,16 +299,24 @@ public class ReactEditText extends AppCompatEditText
   @Override
   public InputConnection onCreateInputConnection(EditorInfo outAttrs) {
     ReactContext reactContext = getReactContext(this);
-    InputConnection inputConnection = super.onCreateInputConnection(outAttrs);
-    if (inputConnection != null && mOnKeyPress) {
-      inputConnection =
-          new ReactEditTextInputConnectionWrapper(
-              inputConnection, reactContext, this, mEventDispatcher);
-    }
-
-    if (isMultiline() && (shouldBlurOnReturn() || shouldSubmitOnReturn())) {
-      // Remove IME_FLAG_NO_ENTER_ACTION to keep the original IME_OPTION
-      outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;
+    InputConnection inputConnection;
+    // Don't apply learning flag on Samsung devices. Samsung Keyboards do not
+    // support incognito mode.
+    if (IS_SAMSUNG_DEVICE) {
+      // Default React-Native implementation
+      inputConnection = super.onCreateInputConnection(outAttrs);
+      if (isMultiline() && (shouldBlurOnReturn() || shouldSubmitOnReturn())) {
+        // Remove IME_FLAG_NO_ENTER_ACTION to keep the original IME_OPTION
+        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;
+      }
+    } else {
+      inputConnection = new BaseInputConnection(this, false);
+      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+        outAttrs.imeOptions = EditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING;
+      } else {
+        // Cover OS versions below Oreo
+        outAttrs.imeOptions = IME_FLAG_NO_PERSONALIZED_LEARNING;
+      }
     }
     return inputConnection;
   }
diff --git a/node_modules/react-native/ReactCommon/jsc/JSCRuntime.cpp b/node_modules/react-native/ReactCommon/jsc/JSCRuntime.cpp
index 8448d02..ea15e73 100644
--- a/node_modules/react-native/ReactCommon/jsc/JSCRuntime.cpp
+++ b/node_modules/react-native/ReactCommon/jsc/JSCRuntime.cpp
@@ -421,12 +421,6 @@ JSCRuntime::~JSCRuntime() {
   // has started.
   ctxInvalid_ = true;
   JSGlobalContextRelease(ctx_);
-#ifndef NDEBUG
-  assert(
-      objectCounter_ == 0 && "JSCRuntime destroyed with a dangling API object");
-  assert(
-      stringCounter_ == 0 && "JSCRuntime destroyed with a dangling API string");
-#endif
 }
 
 std::shared_ptr<const jsi::PreparedJavaScript> JSCRuntime::prepareJavaScript(
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ComponentDescriptors.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ComponentDescriptors.h
new file mode 100644
index 0000000..37b7d8d
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ComponentDescriptors.h
@@ -0,0 +1,29 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/rncore/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using AndroidHorizontalScrollContentViewComponentDescriptor = ConcreteComponentDescriptor<AndroidHorizontalScrollContentViewShadowNode>;
+using AndroidSwipeRefreshLayoutComponentDescriptor = ConcreteComponentDescriptor<AndroidSwipeRefreshLayoutShadowNode>;
+using PullToRefreshViewComponentDescriptor = ConcreteComponentDescriptor<PullToRefreshViewShadowNode>;
+using AndroidDrawerLayoutComponentDescriptor = ConcreteComponentDescriptor<AndroidDrawerLayoutShadowNode>;
+using ActivityIndicatorViewComponentDescriptor = ConcreteComponentDescriptor<ActivityIndicatorViewShadowNode>;
+using UnimplementedNativeViewComponentDescriptor = ConcreteComponentDescriptor<UnimplementedNativeViewShadowNode>;
+using SwitchComponentDescriptor = ConcreteComponentDescriptor<SwitchShadowNode>;
+using TraceUpdateOverlayComponentDescriptor = ConcreteComponentDescriptor<TraceUpdateOverlayShadowNode>;
+
+} // namespace react
+} // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.cpp
new file mode 100644
index 0000000..229fadc
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.cpp
@@ -0,0 +1,111 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/rncore/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+
+void AndroidSwipeRefreshLayoutEventEmitter::onRefresh(OnRefresh event) const {
+  dispatchEvent("refresh", [](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    
+    return payload;
+  });
+}
+void PullToRefreshViewEventEmitter::onRefresh(OnRefresh event) const {
+  dispatchEvent("refresh", [](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    
+    return payload;
+  });
+}
+
+void AndroidDrawerLayoutEventEmitter::onDrawerSlide(OnDrawerSlide event) const {
+  dispatchEvent("drawerSlide", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, "offset", event.offset);
+    return payload;
+  });
+}
+void AndroidDrawerLayoutEventEmitter::onDrawerStateChanged(OnDrawerStateChanged event) const {
+  dispatchEvent("drawerStateChanged", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, "drawerState", event.drawerState);
+    return payload;
+  });
+}
+void AndroidDrawerLayoutEventEmitter::onDrawerOpen(OnDrawerOpen event) const {
+  dispatchEvent("drawerOpen", [](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    
+    return payload;
+  });
+}
+void AndroidDrawerLayoutEventEmitter::onDrawerClose(OnDrawerClose event) const {
+  dispatchEvent("drawerClose", [](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    
+    return payload;
+  });
+}
+
+
+void SwitchEventEmitter::onChange(OnChange event) const {
+  dispatchEvent("change", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, "value", event.value);
+payload.setProperty(runtime, "target", event.target);
+    return payload;
+  });
+}
+void AndroidSwitchEventEmitter::onChange(OnChange event) const {
+  dispatchEvent("change", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, "value", event.value);
+payload.setProperty(runtime, "target", event.target);
+    return payload;
+  });
+}
+
+void ModalHostViewEventEmitter::onRequestClose(OnRequestClose event) const {
+  dispatchEvent("requestClose", [](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    
+    return payload;
+  });
+}
+void ModalHostViewEventEmitter::onShow(OnShow event) const {
+  dispatchEvent("show", [](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    
+    return payload;
+  });
+}
+void ModalHostViewEventEmitter::onDismiss(OnDismiss event) const {
+  dispatchEvent("dismiss", [](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    
+    return payload;
+  });
+}
+void ModalHostViewEventEmitter::onOrientationChange(OnOrientationChange event) const {
+  dispatchEvent("orientationChange", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, "orientation", toString(event.orientation));
+    return payload;
+  });
+}
+
+} // namespace react
+} // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.h
new file mode 100644
index 0000000..1897be1
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.h
@@ -0,0 +1,186 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+#include <jsi/jsi.h>
+
+namespace facebook {
+namespace react {
+
+class JSI_EXPORT SafeAreaViewEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+
+  
+};
+class JSI_EXPORT AndroidHorizontalScrollContentViewEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+
+  
+};
+class JSI_EXPORT AndroidProgressBarEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+
+  
+};
+class JSI_EXPORT AndroidSwipeRefreshLayoutEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnRefresh {
+      
+    };
+
+  void onRefresh(OnRefresh value) const;
+};
+class JSI_EXPORT PullToRefreshViewEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnRefresh {
+      
+    };
+
+  void onRefresh(OnRefresh value) const;
+};
+class JSI_EXPORT InputAccessoryEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+
+  
+};
+class JSI_EXPORT AndroidDrawerLayoutEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnDrawerSlide {
+      Float offset;
+    };
+
+  struct OnDrawerStateChanged {
+      int drawerState;
+    };
+
+  struct OnDrawerOpen {
+      
+    };
+
+  struct OnDrawerClose {
+      
+    };
+
+  void onDrawerSlide(OnDrawerSlide value) const;
+
+  void onDrawerStateChanged(OnDrawerStateChanged value) const;
+
+  void onDrawerOpen(OnDrawerOpen value) const;
+
+  void onDrawerClose(OnDrawerClose value) const;
+};
+class JSI_EXPORT ActivityIndicatorViewEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+
+  
+};
+class JSI_EXPORT UnimplementedNativeViewEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+
+  
+};
+class JSI_EXPORT SwitchEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnChange {
+      bool value;
+    int target;
+    };
+
+  void onChange(OnChange value) const;
+};
+class JSI_EXPORT AndroidSwitchEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnChange {
+      bool value;
+    int target;
+    };
+
+  void onChange(OnChange value) const;
+};
+class JSI_EXPORT TraceUpdateOverlayEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+
+  
+};
+class JSI_EXPORT ModalHostViewEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnRequestClose {
+      
+    };
+
+  struct OnShow {
+      
+    };
+
+  struct OnDismiss {
+      
+    };
+
+  enum class OnOrientationChangeOrientation {
+    Portrait,
+    Landscape
+  };
+
+  static char const *toString(const OnOrientationChangeOrientation value) {
+    switch (value) {
+      case OnOrientationChangeOrientation::Portrait: return "portrait";
+      case OnOrientationChangeOrientation::Landscape: return "landscape";
+    }
+  }
+
+  struct OnOrientationChange {
+      OnOrientationChangeOrientation orientation;
+    };
+
+  void onRequestClose(OnRequestClose value) const;
+
+  void onShow(OnShow value) const;
+
+  void onDismiss(OnDismiss value) const;
+
+  void onOrientationChange(OnOrientationChange value) const;
+};
+
+} // namespace react
+} // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.cpp
new file mode 100644
index 0000000..59f24e5
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.cpp
@@ -0,0 +1,157 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/rncore/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+SafeAreaViewProps::SafeAreaViewProps(
+    const PropsParserContext &context,
+    const SafeAreaViewProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)
+
+    
+      {}
+AndroidHorizontalScrollContentViewProps::AndroidHorizontalScrollContentViewProps(
+    const PropsParserContext &context,
+    const AndroidHorizontalScrollContentViewProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    removeClippedSubviews(convertRawProp(context, rawProps, "removeClippedSubviews", sourceProps.removeClippedSubviews, {false}))
+      {}
+AndroidProgressBarProps::AndroidProgressBarProps(
+    const PropsParserContext &context,
+    const AndroidProgressBarProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    styleAttr(convertRawProp(context, rawProps, "styleAttr", sourceProps.styleAttr, {})),
+    typeAttr(convertRawProp(context, rawProps, "typeAttr", sourceProps.typeAttr, {})),
+    indeterminate(convertRawProp(context, rawProps, "indeterminate", sourceProps.indeterminate, {false})),
+    progress(convertRawProp(context, rawProps, "progress", sourceProps.progress, {0.0})),
+    animating(convertRawProp(context, rawProps, "animating", sourceProps.animating, {true})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    testID(convertRawProp(context, rawProps, "testID", sourceProps.testID, {""}))
+      {}
+AndroidSwipeRefreshLayoutProps::AndroidSwipeRefreshLayoutProps(
+    const PropsParserContext &context,
+    const AndroidSwipeRefreshLayoutProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    enabled(convertRawProp(context, rawProps, "enabled", sourceProps.enabled, {true})),
+    colors(convertRawProp(context, rawProps, "colors", sourceProps.colors, {})),
+    progressBackgroundColor(convertRawProp(context, rawProps, "progressBackgroundColor", sourceProps.progressBackgroundColor, {})),
+    size(convertRawProp(context, rawProps, "size", sourceProps.size, {AndroidSwipeRefreshLayoutSize::Default})),
+    progressViewOffset(convertRawProp(context, rawProps, "progressViewOffset", sourceProps.progressViewOffset, {0.0})),
+    refreshing(convertRawProp(context, rawProps, "refreshing", sourceProps.refreshing, {false}))
+      {}
+PullToRefreshViewProps::PullToRefreshViewProps(
+    const PropsParserContext &context,
+    const PullToRefreshViewProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    tintColor(convertRawProp(context, rawProps, "tintColor", sourceProps.tintColor, {})),
+    titleColor(convertRawProp(context, rawProps, "titleColor", sourceProps.titleColor, {})),
+    title(convertRawProp(context, rawProps, "title", sourceProps.title, {})),
+    progressViewOffset(convertRawProp(context, rawProps, "progressViewOffset", sourceProps.progressViewOffset, {0.0})),
+    refreshing(convertRawProp(context, rawProps, "refreshing", sourceProps.refreshing, {false}))
+      {}
+InputAccessoryProps::InputAccessoryProps(
+    const PropsParserContext &context,
+    const InputAccessoryProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    backgroundColor(convertRawProp(context, rawProps, "backgroundColor", sourceProps.backgroundColor, {}))
+      {}
+AndroidDrawerLayoutProps::AndroidDrawerLayoutProps(
+    const PropsParserContext &context,
+    const AndroidDrawerLayoutProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    keyboardDismissMode(convertRawProp(context, rawProps, "keyboardDismissMode", sourceProps.keyboardDismissMode, {AndroidDrawerLayoutKeyboardDismissMode::None})),
+    drawerBackgroundColor(convertRawProp(context, rawProps, "drawerBackgroundColor", sourceProps.drawerBackgroundColor, {})),
+    drawerPosition(convertRawProp(context, rawProps, "drawerPosition", sourceProps.drawerPosition, {AndroidDrawerLayoutDrawerPosition::Left})),
+    drawerWidth(convertRawProp(context, rawProps, "drawerWidth", sourceProps.drawerWidth, {})),
+    drawerLockMode(convertRawProp(context, rawProps, "drawerLockMode", sourceProps.drawerLockMode, {AndroidDrawerLayoutDrawerLockMode::Unlocked})),
+    statusBarBackgroundColor(convertRawProp(context, rawProps, "statusBarBackgroundColor", sourceProps.statusBarBackgroundColor, {}))
+      {}
+ActivityIndicatorViewProps::ActivityIndicatorViewProps(
+    const PropsParserContext &context,
+    const ActivityIndicatorViewProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    hidesWhenStopped(convertRawProp(context, rawProps, "hidesWhenStopped", sourceProps.hidesWhenStopped, {false})),
+    animating(convertRawProp(context, rawProps, "animating", sourceProps.animating, {false})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    size(convertRawProp(context, rawProps, "size", sourceProps.size, {ActivityIndicatorViewSize::Small}))
+      {}
+UnimplementedNativeViewProps::UnimplementedNativeViewProps(
+    const PropsParserContext &context,
+    const UnimplementedNativeViewProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {""}))
+      {}
+SwitchProps::SwitchProps(
+    const PropsParserContext &context,
+    const SwitchProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    disabled(convertRawProp(context, rawProps, "disabled", sourceProps.disabled, {false})),
+    value(convertRawProp(context, rawProps, "value", sourceProps.value, {false})),
+    tintColor(convertRawProp(context, rawProps, "tintColor", sourceProps.tintColor, {})),
+    onTintColor(convertRawProp(context, rawProps, "onTintColor", sourceProps.onTintColor, {})),
+    thumbTintColor(convertRawProp(context, rawProps, "thumbTintColor", sourceProps.thumbTintColor, {})),
+    thumbColor(convertRawProp(context, rawProps, "thumbColor", sourceProps.thumbColor, {})),
+    trackColorForFalse(convertRawProp(context, rawProps, "trackColorForFalse", sourceProps.trackColorForFalse, {})),
+    trackColorForTrue(convertRawProp(context, rawProps, "trackColorForTrue", sourceProps.trackColorForTrue, {}))
+      {}
+AndroidSwitchProps::AndroidSwitchProps(
+    const PropsParserContext &context,
+    const AndroidSwitchProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    disabled(convertRawProp(context, rawProps, "disabled", sourceProps.disabled, {false})),
+    enabled(convertRawProp(context, rawProps, "enabled", sourceProps.enabled, {true})),
+    thumbColor(convertRawProp(context, rawProps, "thumbColor", sourceProps.thumbColor, {})),
+    trackColorForFalse(convertRawProp(context, rawProps, "trackColorForFalse", sourceProps.trackColorForFalse, {})),
+    trackColorForTrue(convertRawProp(context, rawProps, "trackColorForTrue", sourceProps.trackColorForTrue, {})),
+    value(convertRawProp(context, rawProps, "value", sourceProps.value, {false})),
+    on(convertRawProp(context, rawProps, "on", sourceProps.on, {false})),
+    thumbTintColor(convertRawProp(context, rawProps, "thumbTintColor", sourceProps.thumbTintColor, {})),
+    trackTintColor(convertRawProp(context, rawProps, "trackTintColor", sourceProps.trackTintColor, {}))
+      {}
+TraceUpdateOverlayProps::TraceUpdateOverlayProps(
+    const PropsParserContext &context,
+    const TraceUpdateOverlayProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)
+
+    
+      {}
+ModalHostViewProps::ModalHostViewProps(
+    const PropsParserContext &context,
+    const ModalHostViewProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    animationType(convertRawProp(context, rawProps, "animationType", sourceProps.animationType, {ModalHostViewAnimationType::None})),
+    presentationStyle(convertRawProp(context, rawProps, "presentationStyle", sourceProps.presentationStyle, {ModalHostViewPresentationStyle::FullScreen})),
+    transparent(convertRawProp(context, rawProps, "transparent", sourceProps.transparent, {false})),
+    statusBarTranslucent(convertRawProp(context, rawProps, "statusBarTranslucent", sourceProps.statusBarTranslucent, {false})),
+    hardwareAccelerated(convertRawProp(context, rawProps, "hardwareAccelerated", sourceProps.hardwareAccelerated, {false})),
+    visible(convertRawProp(context, rawProps, "visible", sourceProps.visible, {false})),
+    animated(convertRawProp(context, rawProps, "animated", sourceProps.animated, {false})),
+    supportedOrientations(convertRawProp(context, rawProps, "supportedOrientations", sourceProps.supportedOrientations, {static_cast<ModalHostViewSupportedOrientationsMask>(ModalHostViewSupportedOrientations::Portrait)})),
+    identifier(convertRawProp(context, rawProps, "identifier", sourceProps.identifier, {0}))
+      {}
+
+} // namespace react
+} // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.h
new file mode 100644
index 0000000..f402340
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.h
@@ -0,0 +1,395 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <cinttypes>
+#include <jsi/jsi.h>
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/graphics/Color.h>
+#include <vector>
+
+namespace facebook {
+namespace react {
+
+class JSI_EXPORT SafeAreaViewProps final : public ViewProps {
+ public:
+  SafeAreaViewProps() = default;
+  SafeAreaViewProps(const PropsParserContext& context, const SafeAreaViewProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  
+};
+
+class JSI_EXPORT AndroidHorizontalScrollContentViewProps final : public ViewProps {
+ public:
+  AndroidHorizontalScrollContentViewProps() = default;
+  AndroidHorizontalScrollContentViewProps(const PropsParserContext& context, const AndroidHorizontalScrollContentViewProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool removeClippedSubviews{false};
+};
+
+class JSI_EXPORT AndroidProgressBarProps final : public ViewProps {
+ public:
+  AndroidProgressBarProps() = default;
+  AndroidProgressBarProps(const PropsParserContext& context, const AndroidProgressBarProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string styleAttr{};
+  std::string typeAttr{};
+  bool indeterminate{false};
+  double progress{0.0};
+  bool animating{true};
+  SharedColor color{};
+  std::string testID{""};
+};
+
+enum class AndroidSwipeRefreshLayoutSize { Default, Large };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, AndroidSwipeRefreshLayoutSize &result) {
+  auto string = (std::string)value;
+  if (string == "default") { result = AndroidSwipeRefreshLayoutSize::Default; return; }
+  if (string == "large") { result = AndroidSwipeRefreshLayoutSize::Large; return; }
+  abort();
+}
+
+static inline std::string toString(const AndroidSwipeRefreshLayoutSize &value) {
+  switch (value) {
+    case AndroidSwipeRefreshLayoutSize::Default: return "default";
+    case AndroidSwipeRefreshLayoutSize::Large: return "large";
+  }
+}
+
+class JSI_EXPORT AndroidSwipeRefreshLayoutProps final : public ViewProps {
+ public:
+  AndroidSwipeRefreshLayoutProps() = default;
+  AndroidSwipeRefreshLayoutProps(const PropsParserContext& context, const AndroidSwipeRefreshLayoutProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool enabled{true};
+  std::vector<SharedColor> colors{};
+  SharedColor progressBackgroundColor{};
+  AndroidSwipeRefreshLayoutSize size{AndroidSwipeRefreshLayoutSize::Default};
+  Float progressViewOffset{0.0};
+  bool refreshing{false};
+};
+
+class JSI_EXPORT PullToRefreshViewProps final : public ViewProps {
+ public:
+  PullToRefreshViewProps() = default;
+  PullToRefreshViewProps(const PropsParserContext& context, const PullToRefreshViewProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  SharedColor tintColor{};
+  SharedColor titleColor{};
+  std::string title{};
+  Float progressViewOffset{0.0};
+  bool refreshing{false};
+};
+
+class JSI_EXPORT InputAccessoryProps final : public ViewProps {
+ public:
+  InputAccessoryProps() = default;
+  InputAccessoryProps(const PropsParserContext& context, const InputAccessoryProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  SharedColor backgroundColor{};
+};
+
+enum class AndroidDrawerLayoutKeyboardDismissMode { None, OnDrag };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, AndroidDrawerLayoutKeyboardDismissMode &result) {
+  auto string = (std::string)value;
+  if (string == "none") { result = AndroidDrawerLayoutKeyboardDismissMode::None; return; }
+  if (string == "on-drag") { result = AndroidDrawerLayoutKeyboardDismissMode::OnDrag; return; }
+  abort();
+}
+
+static inline std::string toString(const AndroidDrawerLayoutKeyboardDismissMode &value) {
+  switch (value) {
+    case AndroidDrawerLayoutKeyboardDismissMode::None: return "none";
+    case AndroidDrawerLayoutKeyboardDismissMode::OnDrag: return "on-drag";
+  }
+}
+enum class AndroidDrawerLayoutDrawerPosition { Left, Right };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, AndroidDrawerLayoutDrawerPosition &result) {
+  auto string = (std::string)value;
+  if (string == "left") { result = AndroidDrawerLayoutDrawerPosition::Left; return; }
+  if (string == "right") { result = AndroidDrawerLayoutDrawerPosition::Right; return; }
+  abort();
+}
+
+static inline std::string toString(const AndroidDrawerLayoutDrawerPosition &value) {
+  switch (value) {
+    case AndroidDrawerLayoutDrawerPosition::Left: return "left";
+    case AndroidDrawerLayoutDrawerPosition::Right: return "right";
+  }
+}
+enum class AndroidDrawerLayoutDrawerLockMode { Unlocked, LockedClosed, LockedOpen };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, AndroidDrawerLayoutDrawerLockMode &result) {
+  auto string = (std::string)value;
+  if (string == "unlocked") { result = AndroidDrawerLayoutDrawerLockMode::Unlocked; return; }
+  if (string == "locked-closed") { result = AndroidDrawerLayoutDrawerLockMode::LockedClosed; return; }
+  if (string == "locked-open") { result = AndroidDrawerLayoutDrawerLockMode::LockedOpen; return; }
+  abort();
+}
+
+static inline std::string toString(const AndroidDrawerLayoutDrawerLockMode &value) {
+  switch (value) {
+    case AndroidDrawerLayoutDrawerLockMode::Unlocked: return "unlocked";
+    case AndroidDrawerLayoutDrawerLockMode::LockedClosed: return "locked-closed";
+    case AndroidDrawerLayoutDrawerLockMode::LockedOpen: return "locked-open";
+  }
+}
+
+class JSI_EXPORT AndroidDrawerLayoutProps final : public ViewProps {
+ public:
+  AndroidDrawerLayoutProps() = default;
+  AndroidDrawerLayoutProps(const PropsParserContext& context, const AndroidDrawerLayoutProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  AndroidDrawerLayoutKeyboardDismissMode keyboardDismissMode{AndroidDrawerLayoutKeyboardDismissMode::None};
+  SharedColor drawerBackgroundColor{};
+  AndroidDrawerLayoutDrawerPosition drawerPosition{AndroidDrawerLayoutDrawerPosition::Left};
+  Float drawerWidth{};
+  AndroidDrawerLayoutDrawerLockMode drawerLockMode{AndroidDrawerLayoutDrawerLockMode::Unlocked};
+  SharedColor statusBarBackgroundColor{};
+};
+
+enum class ActivityIndicatorViewSize { Small, Large };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ActivityIndicatorViewSize &result) {
+  auto string = (std::string)value;
+  if (string == "small") { result = ActivityIndicatorViewSize::Small; return; }
+  if (string == "large") { result = ActivityIndicatorViewSize::Large; return; }
+  abort();
+}
+
+static inline std::string toString(const ActivityIndicatorViewSize &value) {
+  switch (value) {
+    case ActivityIndicatorViewSize::Small: return "small";
+    case ActivityIndicatorViewSize::Large: return "large";
+  }
+}
+
+class JSI_EXPORT ActivityIndicatorViewProps final : public ViewProps {
+ public:
+  ActivityIndicatorViewProps() = default;
+  ActivityIndicatorViewProps(const PropsParserContext& context, const ActivityIndicatorViewProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool hidesWhenStopped{false};
+  bool animating{false};
+  SharedColor color{};
+  ActivityIndicatorViewSize size{ActivityIndicatorViewSize::Small};
+};
+
+class JSI_EXPORT UnimplementedNativeViewProps final : public ViewProps {
+ public:
+  UnimplementedNativeViewProps() = default;
+  UnimplementedNativeViewProps(const PropsParserContext& context, const UnimplementedNativeViewProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{""};
+};
+
+class JSI_EXPORT SwitchProps final : public ViewProps {
+ public:
+  SwitchProps() = default;
+  SwitchProps(const PropsParserContext& context, const SwitchProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool disabled{false};
+  bool value{false};
+  SharedColor tintColor{};
+  SharedColor onTintColor{};
+  SharedColor thumbTintColor{};
+  SharedColor thumbColor{};
+  SharedColor trackColorForFalse{};
+  SharedColor trackColorForTrue{};
+};
+
+class JSI_EXPORT AndroidSwitchProps final : public ViewProps {
+ public:
+  AndroidSwitchProps() = default;
+  AndroidSwitchProps(const PropsParserContext& context, const AndroidSwitchProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool disabled{false};
+  bool enabled{true};
+  SharedColor thumbColor{};
+  SharedColor trackColorForFalse{};
+  SharedColor trackColorForTrue{};
+  bool value{false};
+  bool on{false};
+  SharedColor thumbTintColor{};
+  SharedColor trackTintColor{};
+};
+
+class JSI_EXPORT TraceUpdateOverlayProps final : public ViewProps {
+ public:
+  TraceUpdateOverlayProps() = default;
+  TraceUpdateOverlayProps(const PropsParserContext& context, const TraceUpdateOverlayProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  
+};
+
+enum class ModalHostViewAnimationType { None, Slide, Fade };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ModalHostViewAnimationType &result) {
+  auto string = (std::string)value;
+  if (string == "none") { result = ModalHostViewAnimationType::None; return; }
+  if (string == "slide") { result = ModalHostViewAnimationType::Slide; return; }
+  if (string == "fade") { result = ModalHostViewAnimationType::Fade; return; }
+  abort();
+}
+
+static inline std::string toString(const ModalHostViewAnimationType &value) {
+  switch (value) {
+    case ModalHostViewAnimationType::None: return "none";
+    case ModalHostViewAnimationType::Slide: return "slide";
+    case ModalHostViewAnimationType::Fade: return "fade";
+  }
+}
+enum class ModalHostViewPresentationStyle { FullScreen, PageSheet, FormSheet, OverFullScreen };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ModalHostViewPresentationStyle &result) {
+  auto string = (std::string)value;
+  if (string == "fullScreen") { result = ModalHostViewPresentationStyle::FullScreen; return; }
+  if (string == "pageSheet") { result = ModalHostViewPresentationStyle::PageSheet; return; }
+  if (string == "formSheet") { result = ModalHostViewPresentationStyle::FormSheet; return; }
+  if (string == "overFullScreen") { result = ModalHostViewPresentationStyle::OverFullScreen; return; }
+  abort();
+}
+
+static inline std::string toString(const ModalHostViewPresentationStyle &value) {
+  switch (value) {
+    case ModalHostViewPresentationStyle::FullScreen: return "fullScreen";
+    case ModalHostViewPresentationStyle::PageSheet: return "pageSheet";
+    case ModalHostViewPresentationStyle::FormSheet: return "formSheet";
+    case ModalHostViewPresentationStyle::OverFullScreen: return "overFullScreen";
+  }
+}
+using ModalHostViewSupportedOrientationsMask = uint32_t;
+
+enum class ModalHostViewSupportedOrientations: ModalHostViewSupportedOrientationsMask {
+  Portrait = 1 << 0,
+  PortraitUpsideDown = 1 << 1,
+  Landscape = 1 << 2,
+  LandscapeLeft = 1 << 3,
+  LandscapeRight = 1 << 4
+};
+
+constexpr bool operator&(
+  ModalHostViewSupportedOrientationsMask const lhs,
+  enum ModalHostViewSupportedOrientations const rhs) {
+  return lhs & static_cast<ModalHostViewSupportedOrientationsMask>(rhs);
+}
+
+constexpr ModalHostViewSupportedOrientationsMask operator|(
+  ModalHostViewSupportedOrientationsMask const lhs,
+  enum ModalHostViewSupportedOrientations const rhs) {
+  return lhs | static_cast<ModalHostViewSupportedOrientationsMask>(rhs);
+}
+
+constexpr void operator|=(
+  ModalHostViewSupportedOrientationsMask &lhs,
+  enum ModalHostViewSupportedOrientations const rhs) {
+  lhs = lhs | static_cast<ModalHostViewSupportedOrientationsMask>(rhs);
+}
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ModalHostViewSupportedOrientationsMask &result) {
+  auto items = std::vector<std::string>{value};
+  for (const auto &item : items) {
+    if (item == "portrait") {
+      result |= ModalHostViewSupportedOrientations::Portrait;
+      continue;
+    }
+    if (item == "portrait-upside-down") {
+      result |= ModalHostViewSupportedOrientations::PortraitUpsideDown;
+      continue;
+    }
+    if (item == "landscape") {
+      result |= ModalHostViewSupportedOrientations::Landscape;
+      continue;
+    }
+    if (item == "landscape-left") {
+      result |= ModalHostViewSupportedOrientations::LandscapeLeft;
+      continue;
+    }
+    if (item == "landscape-right") {
+      result |= ModalHostViewSupportedOrientations::LandscapeRight;
+      continue;
+    }
+    abort();
+  }
+}
+
+static inline std::string toString(const ModalHostViewSupportedOrientationsMask &value) {
+    auto result = std::string{};
+    auto separator = std::string{", "};
+
+    if (value & ModalHostViewSupportedOrientations::Portrait) {
+      result += "portrait" + separator;
+    }
+    if (value & ModalHostViewSupportedOrientations::PortraitUpsideDown) {
+      result += "portrait-upside-down" + separator;
+    }
+    if (value & ModalHostViewSupportedOrientations::Landscape) {
+      result += "landscape" + separator;
+    }
+    if (value & ModalHostViewSupportedOrientations::LandscapeLeft) {
+      result += "landscape-left" + separator;
+    }
+    if (value & ModalHostViewSupportedOrientations::LandscapeRight) {
+      result += "landscape-right" + separator;
+    }
+    if (!result.empty()) {
+      result.erase(result.length() - separator.length());
+    }
+    return result;
+}
+
+class JSI_EXPORT ModalHostViewProps final : public ViewProps {
+ public:
+  ModalHostViewProps() = default;
+  ModalHostViewProps(const PropsParserContext& context, const ModalHostViewProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  ModalHostViewAnimationType animationType{ModalHostViewAnimationType::None};
+  ModalHostViewPresentationStyle presentationStyle{ModalHostViewPresentationStyle::FullScreen};
+  bool transparent{false};
+  bool statusBarTranslucent{false};
+  bool hardwareAccelerated{false};
+  bool visible{false};
+  bool animated{false};
+  ModalHostViewSupportedOrientationsMask supportedOrientations{static_cast<ModalHostViewSupportedOrientationsMask>(ModalHostViewSupportedOrientations::Portrait)};
+  int identifier{0};
+};
+
+} // namespace react
+} // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/RCTComponentViewHelpers.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/RCTComponentViewHelpers.h
new file mode 100644
index 0000000..e08f2ae
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/RCTComponentViewHelpers.h
@@ -0,0 +1,257 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTSafeAreaViewViewProtocol <NSObject>
+
+@end
+
+@protocol RCTAndroidHorizontalScrollContentViewViewProtocol <NSObject>
+
+@end
+
+@protocol RCTAndroidProgressBarViewProtocol <NSObject>
+
+@end
+
+@protocol RCTAndroidSwipeRefreshLayoutViewProtocol <NSObject>
+- (void)setNativeRefreshing:(BOOL)value;
+@end
+
+RCT_EXTERN inline void RCTAndroidSwipeRefreshLayoutHandleCommand(
+  id<RCTAndroidSwipeRefreshLayoutViewProtocol> componentView,
+  NSString const *commandName,
+  NSArray const *args)
+{
+  if ([commandName isEqualToString:@"setNativeRefreshing"]) {
+#if RCT_DEBUG
+  if ([args count] != 1) {
+    RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"AndroidSwipeRefreshLayout", commandName, (int)[args count], 1);
+    return;
+  }
+#endif
+
+  NSObject *arg0 = args[0];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @"boolean", @"AndroidSwipeRefreshLayout", commandName, @"1st")) {
+    return;
+  }
+#endif
+  BOOL value = [(NSNumber *)arg0 boolValue];
+
+  [componentView setNativeRefreshing:value];
+  return;
+}
+
+#if RCT_DEBUG
+  RCTLogError(@"%@ received command %@, which is not a supported command.", @"AndroidSwipeRefreshLayout", commandName);
+#endif
+}
+
+@protocol RCTPullToRefreshViewViewProtocol <NSObject>
+- (void)setNativeRefreshing:(BOOL)refreshing;
+@end
+
+RCT_EXTERN inline void RCTPullToRefreshViewHandleCommand(
+  id<RCTPullToRefreshViewViewProtocol> componentView,
+  NSString const *commandName,
+  NSArray const *args)
+{
+  if ([commandName isEqualToString:@"setNativeRefreshing"]) {
+#if RCT_DEBUG
+  if ([args count] != 1) {
+    RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"PullToRefreshView", commandName, (int)[args count], 1);
+    return;
+  }
+#endif
+
+  NSObject *arg0 = args[0];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @"boolean", @"PullToRefreshView", commandName, @"1st")) {
+    return;
+  }
+#endif
+  BOOL refreshing = [(NSNumber *)arg0 boolValue];
+
+  [componentView setNativeRefreshing:refreshing];
+  return;
+}
+
+#if RCT_DEBUG
+  RCTLogError(@"%@ received command %@, which is not a supported command.", @"PullToRefreshView", commandName);
+#endif
+}
+
+@protocol RCTInputAccessoryViewProtocol <NSObject>
+
+@end
+
+@protocol RCTAndroidDrawerLayoutViewProtocol <NSObject>
+- (void)openDrawer;
+- (void)closeDrawer;
+@end
+
+RCT_EXTERN inline void RCTAndroidDrawerLayoutHandleCommand(
+  id<RCTAndroidDrawerLayoutViewProtocol> componentView,
+  NSString const *commandName,
+  NSArray const *args)
+{
+  if ([commandName isEqualToString:@"openDrawer"]) {
+#if RCT_DEBUG
+  if ([args count] != 0) {
+    RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"AndroidDrawerLayout", commandName, (int)[args count], 0);
+    return;
+  }
+#endif
+
+  
+
+  [componentView openDrawer];
+  return;
+}
+
+if ([commandName isEqualToString:@"closeDrawer"]) {
+#if RCT_DEBUG
+  if ([args count] != 0) {
+    RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"AndroidDrawerLayout", commandName, (int)[args count], 0);
+    return;
+  }
+#endif
+
+  
+
+  [componentView closeDrawer];
+  return;
+}
+
+#if RCT_DEBUG
+  RCTLogError(@"%@ received command %@, which is not a supported command.", @"AndroidDrawerLayout", commandName);
+#endif
+}
+
+@protocol RCTActivityIndicatorViewViewProtocol <NSObject>
+
+@end
+
+@protocol RCTUnimplementedNativeViewViewProtocol <NSObject>
+
+@end
+
+@protocol RCTSwitchViewProtocol <NSObject>
+- (void)setValue:(BOOL)value;
+@end
+
+RCT_EXTERN inline void RCTSwitchHandleCommand(
+  id<RCTSwitchViewProtocol> componentView,
+  NSString const *commandName,
+  NSArray const *args)
+{
+  if ([commandName isEqualToString:@"setValue"]) {
+#if RCT_DEBUG
+  if ([args count] != 1) {
+    RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"Switch", commandName, (int)[args count], 1);
+    return;
+  }
+#endif
+
+  NSObject *arg0 = args[0];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @"boolean", @"Switch", commandName, @"1st")) {
+    return;
+  }
+#endif
+  BOOL value = [(NSNumber *)arg0 boolValue];
+
+  [componentView setValue:value];
+  return;
+}
+
+#if RCT_DEBUG
+  RCTLogError(@"%@ received command %@, which is not a supported command.", @"Switch", commandName);
+#endif
+}
+
+@protocol RCTAndroidSwitchViewProtocol <NSObject>
+- (void)setNativeValue:(BOOL)value;
+@end
+
+RCT_EXTERN inline void RCTAndroidSwitchHandleCommand(
+  id<RCTAndroidSwitchViewProtocol> componentView,
+  NSString const *commandName,
+  NSArray const *args)
+{
+  if ([commandName isEqualToString:@"setNativeValue"]) {
+#if RCT_DEBUG
+  if ([args count] != 1) {
+    RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"AndroidSwitch", commandName, (int)[args count], 1);
+    return;
+  }
+#endif
+
+  NSObject *arg0 = args[0];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @"boolean", @"AndroidSwitch", commandName, @"1st")) {
+    return;
+  }
+#endif
+  BOOL value = [(NSNumber *)arg0 boolValue];
+
+  [componentView setNativeValue:value];
+  return;
+}
+
+#if RCT_DEBUG
+  RCTLogError(@"%@ received command %@, which is not a supported command.", @"AndroidSwitch", commandName);
+#endif
+}
+
+@protocol RCTTraceUpdateOverlayViewProtocol <NSObject>
+- (void)draw:(NSString *)overlays;
+@end
+
+RCT_EXTERN inline void RCTTraceUpdateOverlayHandleCommand(
+  id<RCTTraceUpdateOverlayViewProtocol> componentView,
+  NSString const *commandName,
+  NSArray const *args)
+{
+  if ([commandName isEqualToString:@"draw"]) {
+#if RCT_DEBUG
+  if ([args count] != 1) {
+    RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"TraceUpdateOverlay", commandName, (int)[args count], 1);
+    return;
+  }
+#endif
+
+  NSObject *arg0 = args[0];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg0, [NSString class], @"string", @"TraceUpdateOverlay", commandName, @"1st")) {
+    return;
+  }
+#endif
+  NSString * overlays = (NSString *)arg0;
+
+  [componentView draw:overlays];
+  return;
+}
+
+#if RCT_DEBUG
+  RCTLogError(@"%@ received command %@, which is not a supported command.", @"TraceUpdateOverlay", commandName);
+#endif
+}
+
+@protocol RCTModalHostViewViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END
\ No newline at end of file
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.cpp
new file mode 100644
index 0000000..d9a2760
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.cpp
@@ -0,0 +1,26 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/rncore/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char AndroidHorizontalScrollContentViewComponentName[] = "AndroidHorizontalScrollContentView";
+extern const char AndroidSwipeRefreshLayoutComponentName[] = "AndroidSwipeRefreshLayout";
+extern const char PullToRefreshViewComponentName[] = "PullToRefreshView";
+extern const char AndroidDrawerLayoutComponentName[] = "AndroidDrawerLayout";
+extern const char ActivityIndicatorViewComponentName[] = "ActivityIndicatorView";
+extern const char UnimplementedNativeViewComponentName[] = "UnimplementedNativeView";
+extern const char SwitchComponentName[] = "Switch";
+extern const char TraceUpdateOverlayComponentName[] = "TraceUpdateOverlay";
+
+} // namespace react
+} // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.h
new file mode 100644
index 0000000..a5874dc
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.h
@@ -0,0 +1,111 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/rncore/EventEmitters.h>
+#include <react/renderer/components/rncore/Props.h>
+#include <react/renderer/components/rncore/States.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+#include <jsi/jsi.h>
+
+namespace facebook {
+namespace react {
+
+JSI_EXPORT extern const char AndroidHorizontalScrollContentViewComponentName[];
+
+/*
+ * `ShadowNode` for <AndroidHorizontalScrollContentView> component.
+ */
+using AndroidHorizontalScrollContentViewShadowNode = ConcreteViewShadowNode<
+    AndroidHorizontalScrollContentViewComponentName,
+    AndroidHorizontalScrollContentViewProps,
+    AndroidHorizontalScrollContentViewEventEmitter,
+    AndroidHorizontalScrollContentViewState>;
+
+JSI_EXPORT extern const char AndroidSwipeRefreshLayoutComponentName[];
+
+/*
+ * `ShadowNode` for <AndroidSwipeRefreshLayout> component.
+ */
+using AndroidSwipeRefreshLayoutShadowNode = ConcreteViewShadowNode<
+    AndroidSwipeRefreshLayoutComponentName,
+    AndroidSwipeRefreshLayoutProps,
+    AndroidSwipeRefreshLayoutEventEmitter,
+    AndroidSwipeRefreshLayoutState>;
+
+JSI_EXPORT extern const char PullToRefreshViewComponentName[];
+
+/*
+ * `ShadowNode` for <PullToRefreshView> component.
+ */
+using PullToRefreshViewShadowNode = ConcreteViewShadowNode<
+    PullToRefreshViewComponentName,
+    PullToRefreshViewProps,
+    PullToRefreshViewEventEmitter,
+    PullToRefreshViewState>;
+
+JSI_EXPORT extern const char AndroidDrawerLayoutComponentName[];
+
+/*
+ * `ShadowNode` for <AndroidDrawerLayout> component.
+ */
+using AndroidDrawerLayoutShadowNode = ConcreteViewShadowNode<
+    AndroidDrawerLayoutComponentName,
+    AndroidDrawerLayoutProps,
+    AndroidDrawerLayoutEventEmitter,
+    AndroidDrawerLayoutState>;
+
+JSI_EXPORT extern const char ActivityIndicatorViewComponentName[];
+
+/*
+ * `ShadowNode` for <ActivityIndicatorView> component.
+ */
+using ActivityIndicatorViewShadowNode = ConcreteViewShadowNode<
+    ActivityIndicatorViewComponentName,
+    ActivityIndicatorViewProps,
+    ActivityIndicatorViewEventEmitter,
+    ActivityIndicatorViewState>;
+
+JSI_EXPORT extern const char UnimplementedNativeViewComponentName[];
+
+/*
+ * `ShadowNode` for <UnimplementedNativeView> component.
+ */
+using UnimplementedNativeViewShadowNode = ConcreteViewShadowNode<
+    UnimplementedNativeViewComponentName,
+    UnimplementedNativeViewProps,
+    UnimplementedNativeViewEventEmitter,
+    UnimplementedNativeViewState>;
+
+JSI_EXPORT extern const char SwitchComponentName[];
+
+/*
+ * `ShadowNode` for <Switch> component.
+ */
+using SwitchShadowNode = ConcreteViewShadowNode<
+    SwitchComponentName,
+    SwitchProps,
+    SwitchEventEmitter,
+    SwitchState>;
+
+JSI_EXPORT extern const char TraceUpdateOverlayComponentName[];
+
+/*
+ * `ShadowNode` for <TraceUpdateOverlay> component.
+ */
+using TraceUpdateOverlayShadowNode = ConcreteViewShadowNode<
+    TraceUpdateOverlayComponentName,
+    TraceUpdateOverlayProps,
+    TraceUpdateOverlayEventEmitter,
+    TraceUpdateOverlayState>;
+
+} // namespace react
+} // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.cpp
new file mode 100644
index 0000000..3b5a0f5
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.cpp
@@ -0,0 +1,18 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateStateCpp.js
+ */
+#include <react/renderer/components/rncore/States.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.h
new file mode 100644
index 0000000..29ac2df
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.h
@@ -0,0 +1,141 @@
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateStateH.js
+ */
+#pragma once
+
+#ifdef ANDROID
+#include <folly/dynamic.h>
+#include <react/renderer/mapbuffer/MapBuffer.h>
+#include <react/renderer/mapbuffer/MapBufferBuilder.h>
+#endif
+
+namespace facebook {
+namespace react {
+
+class AndroidHorizontalScrollContentViewState {
+public:
+  AndroidHorizontalScrollContentViewState() = default;
+
+#ifdef ANDROID
+  AndroidHorizontalScrollContentViewState(AndroidHorizontalScrollContentViewState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+  MapBuffer getMapBuffer() const {
+    return MapBufferBuilder::EMPTY();
+  };
+#endif
+};
+
+class AndroidSwipeRefreshLayoutState {
+public:
+  AndroidSwipeRefreshLayoutState() = default;
+
+#ifdef ANDROID
+  AndroidSwipeRefreshLayoutState(AndroidSwipeRefreshLayoutState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+  MapBuffer getMapBuffer() const {
+    return MapBufferBuilder::EMPTY();
+  };
+#endif
+};
+
+class PullToRefreshViewState {
+public:
+  PullToRefreshViewState() = default;
+
+#ifdef ANDROID
+  PullToRefreshViewState(PullToRefreshViewState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+  MapBuffer getMapBuffer() const {
+    return MapBufferBuilder::EMPTY();
+  };
+#endif
+};
+
+class AndroidDrawerLayoutState {
+public:
+  AndroidDrawerLayoutState() = default;
+
+#ifdef ANDROID
+  AndroidDrawerLayoutState(AndroidDrawerLayoutState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+  MapBuffer getMapBuffer() const {
+    return MapBufferBuilder::EMPTY();
+  };
+#endif
+};
+
+class ActivityIndicatorViewState {
+public:
+  ActivityIndicatorViewState() = default;
+
+#ifdef ANDROID
+  ActivityIndicatorViewState(ActivityIndicatorViewState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+  MapBuffer getMapBuffer() const {
+    return MapBufferBuilder::EMPTY();
+  };
+#endif
+};
+
+class UnimplementedNativeViewState {
+public:
+  UnimplementedNativeViewState() = default;
+
+#ifdef ANDROID
+  UnimplementedNativeViewState(UnimplementedNativeViewState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+  MapBuffer getMapBuffer() const {
+    return MapBufferBuilder::EMPTY();
+  };
+#endif
+};
+
+class SwitchState {
+public:
+  SwitchState() = default;
+
+#ifdef ANDROID
+  SwitchState(SwitchState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+  MapBuffer getMapBuffer() const {
+    return MapBufferBuilder::EMPTY();
+  };
+#endif
+};
+
+class TraceUpdateOverlayState {
+public:
+  TraceUpdateOverlayState() = default;
+
+#ifdef ANDROID
+  TraceUpdateOverlayState(TraceUpdateOverlayState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+  MapBuffer getMapBuffer() const {
+    return MapBufferBuilder::EMPTY();
+  };
+#endif
+};
+
+} // namespace react
+} // namespace facebook
\ No newline at end of file
