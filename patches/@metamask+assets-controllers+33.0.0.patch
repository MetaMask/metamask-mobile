diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-354SINOH.js b/node_modules/@metamask/assets-controllers/dist/chunk-354SINOH.js
index 7f87776..ed19186 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-354SINOH.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-354SINOH.js
@@ -9,7 +9,7 @@ var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
 var _basecontroller = require('@metamask/base-controller');
 
 
-
+var _chunkNYVA7ZTQjs = require('./chunk-NYVA7ZTQ.js');
 
 
 
@@ -25,6 +25,7 @@ var BlockaidResultType = /* @__PURE__ */ ((BlockaidResultType2) => {
   BlockaidResultType2["Malicious"] = "Malicious";
   return BlockaidResultType2;
 })(BlockaidResultType || {});
+var MAX_GET_COLLECTION_BATCH_SIZE = 20;
 var _disabled, _addNft, _getNftState, _inProcessNftFetchingUpdates, _onPreferencesControllerStateChange, onPreferencesControllerStateChange_fn, _getOwnerNftApi, getOwnerNftApi_fn, _getOwnerNfts, getOwnerNfts_fn;
 var NftDetectionController = class extends _basecontroller.BaseController {
   /**
@@ -134,6 +135,61 @@ var NftDetectionController = class extends _basecontroller.BaseController {
         apiNfts = resultNftApi.tokens.filter(
           (elm) => elm.token.isSpam === false && (elm.blockaidResult?.result_type ? elm.blockaidResult?.result_type === "Benign" /* Benign */ : true)
         );
+
+        const collections = apiNfts.reduce((acc, currValue) => {
+          if (!acc.includes(currValue.token.contract) && currValue.token.contract === currValue?.token?.collection?.id) {
+              acc.push(currValue.token.contract);
+          }
+          return acc;
+        }, []);
+        if (collections.length !== 0) {
+          const collectionResponse = await _chunkNYVA7ZTQjs.reduceInBatchesSerially.call(void 0, {
+            values: collections,
+            batchSize: MAX_GET_COLLECTION_BATCH_SIZE,
+            eachBatch: async (allResponses, batch) => {
+              const params = new URLSearchParams(
+                batch.map((s) => ["contract", s])
+              );
+              params.append("chainId", "1");
+              const collectionResponseForBatch = await _controllerutils.fetchWithErrorHandling.call(void 0, 
+                  {
+                    url: `${_controllerutils.NFT_API_BASE_URL}/collections?${params.toString()}`,
+                    options: {
+                    headers: {
+                    Version: '1'
+                    }
+                    },
+                    timeout: 15000
+                  }
+                );
+                return {
+                ...allResponses,
+                ...collectionResponseForBatch
+                };
+              },
+            initialResult: {}
+          });
+          if (collectionResponse.collections?.length) {
+            apiNfts.forEach((singleNFT) => {
+                const found = collectionResponse.collections.find(
+                (elm) => elm.id?.toLowerCase() === singleNFT.token.contract.toLowerCase()
+                );
+                if (found) {
+                    singleNFT.token = {
+                    ...singleNFT.token,
+                    collection: {
+                      ...singleNFT.token.collection ?? {},
+                      creator: found?.creator,
+                      openseaVerificationStatus: found?.openseaVerificationStatus,
+                      contractDeployedAt: found.contractDeployedAt,
+                      ownerCount: found.ownerCount,
+                      topBid: found.topBid
+                    }
+                  };
+                }
+            });
+          }
+        }
         const addNftPromises = apiNfts.map(async (nft) => {
           const {
             tokenId,
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-7JWDWDXT.js b/node_modules/@metamask/assets-controllers/dist/chunk-7JWDWDXT.js
index af5d784..99e4a32 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-7JWDWDXT.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-7JWDWDXT.js
@@ -44,7 +44,7 @@ var getDefaultNftControllerState = () => ({
   allNfts: {},
   ignoredNfts: []
 });
-var _mutex, _selectedAccountId, _chainId, _ipfsGateway, _openSeaEnabled, _useIpfsSubdomains, _isIpfsGatewayEnabled, _getERC721AssetName, _getERC721AssetSymbol, _getERC721TokenURI, _getERC721OwnerOf, _getERC1155BalanceOf, _getERC1155TokenURI, _onNftAdded, _onNetworkControllerNetworkDidChange, onNetworkControllerNetworkDidChange_fn, _onPreferencesControllerStateChange, onPreferencesControllerStateChange_fn, _onSelectedAccountChange, onSelectedAccountChange_fn, _updateNestedNftState, updateNestedNftState_fn, _getNftInformationFromApi, getNftInformationFromApi_fn, _getNftInformationFromTokenURI, getNftInformationFromTokenURI_fn, _getNftURIAndStandard, getNftURIAndStandard_fn, _getNftInformation, getNftInformation_fn, _getNftContractInformationFromContract, getNftContractInformationFromContract_fn, _getNftContractInformation, getNftContractInformation_fn, _addIndividualNft, addIndividualNft_fn, _addNftContract, addNftContract_fn, _removeAndIgnoreIndividualNft, removeAndIgnoreIndividualNft_fn, _removeIndividualNft, removeIndividualNft_fn, _removeNftContract, removeNftContract_fn, _validateWatchNft, validateWatchNft_fn, _getCorrectChainId, getCorrectChainId_fn, _getAddressOrSelectedAddress, getAddressOrSelectedAddress_fn, _updateNftUpdateForAccount, updateNftUpdateForAccount_fn;
+var _mutex, _selectedAccountId, _chainId, _ipfsGateway, _displayNftMedia, _useIpfsSubdomains, _isIpfsGatewayEnabled, _getERC721AssetName, _getERC721AssetSymbol, _getERC721TokenURI, _getERC721OwnerOf, _getERC1155BalanceOf, _getERC1155TokenURI, _onNftAdded, _onNetworkControllerNetworkDidChange, onNetworkControllerNetworkDidChange_fn, _onPreferencesControllerStateChange, onPreferencesControllerStateChange_fn, _onSelectedAccountChange, onSelectedAccountChange_fn, _updateNestedNftState, updateNestedNftState_fn, _getNftInformationFromApi, getNftInformationFromApi_fn, _getNftInformationFromTokenURI, getNftInformationFromTokenURI_fn, _getNftURIAndStandard, getNftURIAndStandard_fn, _getNftInformation, getNftInformation_fn, _getNftContractInformationFromContract, getNftContractInformationFromContract_fn, _getNftContractInformation, getNftContractInformation_fn, _addIndividualNft, addIndividualNft_fn, _addNftContract, addNftContract_fn, _removeAndIgnoreIndividualNft, removeAndIgnoreIndividualNft_fn, _removeIndividualNft, removeIndividualNft_fn, _removeNftContract, removeNftContract_fn, _validateWatchNft, validateWatchNft_fn, _getCorrectChainId, getCorrectChainId_fn, _getAddressOrSelectedAddress, getAddressOrSelectedAddress_fn, _updateNftUpdateForAccount, updateNftUpdateForAccount_fn;
 var NftController = class extends _basecontroller.BaseController {
   /**
    * Creates an NftController instance.
@@ -52,7 +52,7 @@ var NftController = class extends _basecontroller.BaseController {
    * @param options - The controller options.
    * @param options.chainId - The chain ID of the current network.
    * @param options.ipfsGateway - The configured IPFS gateway.
-   * @param options.openSeaEnabled - Controls whether the OpenSea API is used.
+   * @param options.displayNftMedia - Controls whether the NFT API is used.
    * @param options.useIpfsSubdomains - Controls whether IPFS subdomains are used.
    * @param options.isIpfsGatewayEnabled - Controls whether IPFS is enabled or not.
    * @param options.getERC721AssetName - Gets the name of the asset at the given address.
@@ -69,7 +69,7 @@ var NftController = class extends _basecontroller.BaseController {
   constructor({
     chainId: initialChainId,
     ipfsGateway = _controllerutils.IPFS_DEFAULT_GATEWAY_URL,
-    openSeaEnabled = false,
+    displayNftMedia = false,
     useIpfsSubdomains = true,
     isIpfsGatewayEnabled = true,
     getERC721AssetName,
@@ -101,7 +101,7 @@ var NftController = class extends _basecontroller.BaseController {
      * Handles the state change of the preference controller.
      * @param preferencesState - The new state of the preference controller.
      * @param preferencesState.ipfsGateway - The configured IPFS gateway.
-     * @param preferencesState.openSeaEnabled - Controls whether the OpenSea API is used.
+     * @param preferencesState.displayNftMedia - Controls whether the NFT API is used.
      * @param preferencesState.isIpfsGatewayEnabled - Controls whether IPFS is enabled or not.
      */
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onPreferencesControllerStateChange);
@@ -237,7 +237,7 @@ var NftController = class extends _basecontroller.BaseController {
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _selectedAccountId, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _chainId, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _ipfsGateway, void 0);
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _openSeaEnabled, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _displayNftMedia, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _useIpfsSubdomains, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isIpfsGatewayEnabled, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getERC721AssetName, void 0);
@@ -252,7 +252,7 @@ var NftController = class extends _basecontroller.BaseController {
     ).id);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _chainId, initialChainId);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _ipfsGateway, ipfsGateway);
-    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _openSeaEnabled, openSeaEnabled);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _displayNftMedia, displayNftMedia);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _useIpfsSubdomains, useIpfsSubdomains);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isIpfsGatewayEnabled, isIpfsGatewayEnabled);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getERC721AssetName, getERC721AssetName);
@@ -279,6 +279,18 @@ var NftController = class extends _basecontroller.BaseController {
       _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onSelectedAccountChange, onSelectedAccountChange_fn).bind(this)
     );
   }
+
+  /**
+  * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+  * Resets to the default state
+  */
+  reset() {
+    this.update((state) => {
+      state.allNftContracts = {};
+      state.allNfts = {};
+      state.ignoredNfts = [];
+    });
+  }
   getNftApi() {
     return `${_controllerutils.NFT_API_BASE_URL}/tokens`;
   }
@@ -797,7 +809,7 @@ _mutex = new WeakMap();
 _selectedAccountId = new WeakMap();
 _chainId = new WeakMap();
 _ipfsGateway = new WeakMap();
-_openSeaEnabled = new WeakMap();
+_displayNftMedia = new WeakMap();
 _useIpfsSubdomains = new WeakMap();
 _isIpfsGatewayEnabled = new WeakMap();
 _getERC721AssetName = new WeakMap();
@@ -822,7 +834,7 @@ onNetworkControllerNetworkDidChange_fn = function({
 _onPreferencesControllerStateChange = new WeakSet();
 onPreferencesControllerStateChange_fn = async function({
   ipfsGateway,
-  openSeaEnabled,
+  displayNftMedia,
   isIpfsGatewayEnabled
 }) {
   const selectedAccount = this.messagingSystem.call(
@@ -830,9 +842,9 @@ onPreferencesControllerStateChange_fn = async function({
   );
   _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _selectedAccountId, selectedAccount.id);
   _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _ipfsGateway, ipfsGateway);
-  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _openSeaEnabled, openSeaEnabled);
+  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _displayNftMedia, displayNftMedia);
   _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isIpfsGatewayEnabled, isIpfsGatewayEnabled);
-  const needsUpdateNftMetadata = isIpfsGatewayEnabled && ipfsGateway !== "" || openSeaEnabled;
+  const needsUpdateNftMetadata = isIpfsGatewayEnabled && ipfsGateway !== "" || displayNftMedia;
   if (needsUpdateNftMetadata && selectedAccount) {
     await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateNftUpdateForAccount, updateNftUpdateForAccount_fn).call(this, selectedAccount);
   }
@@ -841,7 +853,7 @@ _onSelectedAccountChange = new WeakSet();
 onSelectedAccountChange_fn = async function(internalAccount) {
   const oldSelectedAccountId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _selectedAccountId);
   _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _selectedAccountId, internalAccount.id);
-  const needsUpdateNftMetadata = (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isIpfsGatewayEnabled) && _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _ipfsGateway) !== "" || _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _openSeaEnabled)) && oldSelectedAccountId !== internalAccount.id;
+  const needsUpdateNftMetadata = (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isIpfsGatewayEnabled) && _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _ipfsGateway) !== "" || _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _displayNftMedia)) && oldSelectedAccountId !== internalAccount.id;
   if (needsUpdateNftMetadata) {
     await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateNftUpdateForAccount, updateNftUpdateForAccount_fn).call(this, internalAccount);
   }
@@ -865,9 +877,14 @@ updateNestedNftState_fn = function(newCollection, baseStateKey, { userAddress, c
   });
 };
 _getNftInformationFromApi = new WeakSet();
-getNftInformationFromApi_fn = async function(contractAddress, tokenId) {
+getNftInformationFromApi_fn = async function(contractAddress, tokenId, networkClientId) {
+  const chainId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getCorrectChainId, getCorrectChainId_fn).call(this, {
+    networkClientId
+  });
+  // Convert hex chainId to number
+  const convertedChainId = (0, _controllerutils.convertHexToDecimal)(chainId).toString();
   const urlParams = new URLSearchParams({
-    chainIds: "1",
+    chainIds: convertedChainId,
     tokens: `${contractAddress}:${tokenId}`,
     includeTopBid: "true",
     includeAttributes: "true",
@@ -881,12 +898,26 @@ getNftInformationFromApi_fn = async function(contractAddress, tokenId) {
       }
     }
   });
+  const getCollectionParams = new URLSearchParams({
+    chainId: convertedChainId,
+    id: `${nftInformation?.tokens[0]?.token?.collection?.id}`
+  }).toString();
+
+  const collectionInformation = await _controllerutils.fetchWithErrorHandling.call(void 0, {
+    url: `${_controllerutils.NFT_API_BASE_URL}/collections?${getCollectionParams}`,
+    options: {
+      headers: {
+        Version: '1'
+      }
+    }
+  });
   if (!nftInformation?.tokens?.[0]?.token) {
     return {
       name: null,
       description: null,
       image: null,
-      standard: null
+      standard: null,
+      error: 'Opensea import error',
     };
   }
   const {
@@ -918,7 +949,16 @@ getNftInformationFromApi_fn = async function(contractAddress, tokenId) {
     },
     rarityRank && { rarityRank },
     rarity && { rarity },
-    collection && { collection }
+    (collection || collectionInformation) && {
+      collection: {
+        ...collection || {},
+        creator: collection?.creator || collectionInformation?.collections[0].creator,
+        openseaVerificationStatus: collectionInformation?.collections[0].openseaVerificationStatus,
+        contractDeployedAt: collectionInformation?.collections[0].contractDeployedAt,
+        ownerCount: collectionInformation?.collections[0].ownerCount,
+        topBid: collectionInformation?.collections[0].topBid
+      }
+    }
   );
   return nftMetadata;
 };
@@ -938,7 +978,7 @@ getNftInformationFromTokenURI_fn = async function(contractAddress, tokenId, netw
       tokenURI: tokenURI ?? null
     };
   }
-  const isDisplayNFTMediaToggleEnabled = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _openSeaEnabled);
+  const isDisplayNFTMediaToggleEnabled = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _displayNftMedia);
   if (!hasIpfsTokenURI && !isDisplayNFTMediaToggleEnabled) {
     return {
       image: null,
@@ -946,7 +986,8 @@ getNftInformationFromTokenURI_fn = async function(contractAddress, tokenId, netw
       description: null,
       standard: standard || null,
       favorite: false,
-      tokenURI: tokenURI ?? null
+      tokenURI: tokenURI ?? null,
+      error: 'URI import error',
     };
   }
   if (hasIpfsTokenURI) {
@@ -956,6 +997,16 @@ getNftInformationFromTokenURI_fn = async function(contractAddress, tokenId, netw
       _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _useIpfsSubdomains)
     );
   }
+  if (tokenURI.startsWith("data:image/")) {
+    return {
+      image: tokenURI,
+      name: null,
+      description: null,
+      standard: standard || null,
+      favorite: false,
+      tokenURI: tokenURI ?? null
+    };
+  }
   try {
     const object = await _controllerutils.handleFetch.call(void 0, tokenURI);
     const image = Object.prototype.hasOwnProperty.call(object, "image") ? "image" : (
@@ -977,7 +1028,8 @@ getNftInformationFromTokenURI_fn = async function(contractAddress, tokenId, netw
       description: null,
       standard: standard || null,
       favorite: false,
-      tokenURI: tokenURI ?? null
+      tokenURI: tokenURI ?? null,
+      error: 'URI import error',
     };
   }
 };
@@ -1008,10 +1060,22 @@ getNftInformation_fn = async function(contractAddress, tokenId, networkClientId)
     _controllerutils.safelyExecute.call(void 0, 
       () => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNftInformationFromTokenURI, getNftInformationFromTokenURI_fn).call(this, contractAddress, tokenId, networkClientId)
     ),
-    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _openSeaEnabled) && chainId === "0x1" ? _controllerutils.safelyExecute.call(void 0, 
-      () => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNftInformationFromApi, getNftInformationFromApi_fn).call(this, contractAddress, tokenId)
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _displayNftMedia) && chainId === "0x1" ? _controllerutils.safelyExecute.call(void 0, 
+      () => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNftInformationFromApi, getNftInformationFromApi_fn).call(this, contractAddress, tokenId, networkClientId)
     ) : void 0
   ]);
+
+  if (blockchainMetadata?.error && nftApiMetadata?.error) {
+    return {
+      image: null,
+      name: null,
+      description: null,
+      standard: blockchainMetadata.standard ?? null,
+      favorite: false,
+      tokenURI: blockchainMetadata.tokenURI ?? null,
+      error: 'Both import failed',
+    };
+  }
   return {
     ...nftApiMetadata,
     name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,
@@ -1095,7 +1159,8 @@ addIndividualNft_fn = async function(tokenAddress, tokenId, nftMetadata, nftCont
         nftMetadata,
         existingEntry
       );
-      if (!differentMetadata && existingEntry.isCurrentlyOwned) {
+      const hasNewFields = _chunkNEXY7SE2js.hasNewCollectionFields(nftMetadata, existingEntry);
+      if (!differentMetadata && existingEntry.isCurrentlyOwned && !hasNewFields) {
         return;
       }
       const indexToUpdate = nfts.findIndex(
@@ -1127,7 +1192,8 @@ addIndividualNft_fn = async function(tokenAddress, tokenId, nftMetadata, nftCont
         symbol: nftContract.symbol,
         tokenId: tokenId.toString(),
         standard: nftMetadata.standard,
-        source
+        source,
+        tokenURI: nftMetadata.tokenURI,
       });
     }
   } finally {
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-FGAZXVKS.js b/node_modules/@metamask/assets-controllers/dist/chunk-FGAZXVKS.js
index 4a6aa79..da5f9c1 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-FGAZXVKS.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-FGAZXVKS.js
@@ -179,6 +179,15 @@ var TokenRatesController = class extends _pollingcontroller.StaticIntervalPollin
   enable() {
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _disabled, false);
   }
+  /**
+  * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+  * Resets to the default state
+  */
+  reset() {
+    this.update((state) => {
+        state.marketData = {};
+    });
+  }
   /**
    * Blocks controller from making network calls
    */
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-NWVMFCSC.js b/node_modules/@metamask/assets-controllers/dist/chunk-NWVMFCSC.js
index cdb2710..5a7529d 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-NWVMFCSC.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-NWVMFCSC.js
@@ -19,7 +19,7 @@ function getDefaultTokenBalancesState() {
     contractBalances: {}
   };
 }
-var _handle, _getERC20BalanceOf, _interval, _tokens, _disabled;
+var _handle, _getERC20BalanceOf, _interval, _tokens, _disabled, _updateInProgress;
 var TokenBalancesController = class extends _basecontroller.BaseController {
   /**
    * Construct a Token Balances Controller.
@@ -54,9 +54,11 @@ var TokenBalancesController = class extends _basecontroller.BaseController {
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _interval, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _tokens, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _disabled, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateInProgress, void 0);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _disabled, disabled);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _interval, interval);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _tokens, tokens);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _updateInProgress, false);
     this.messagingSystem.subscribe(
       "TokensController:stateChange",
       ({ tokens: newTokens, detectedTokens }) => {
@@ -78,6 +80,15 @@ var TokenBalancesController = class extends _basecontroller.BaseController {
    */
   disable() {
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _disabled, true);
+  }
+   /**
+  * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+  * Resets to the default state
+  */
+  reset() {
+    this.update((state) => {
+        state.contractBalances = {};
+    });
   }
   /**
    * Starts a new polling interval.
@@ -107,20 +118,28 @@ var TokenBalancesController = class extends _basecontroller.BaseController {
       "PreferencesController:getState"
     );
     const newContractBalances = {};
-    for (const token of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _tokens)) {
+
+    const balancePromises = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _tokens).map((token) => {
       const { address } = token;
-      try {
-        const balance = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getERC20BalanceOf).call(this, address, selectedAddress);
-        newContractBalances[address] = _controllerutils.toHex.call(void 0, balance);
-        token.hasBalanceError = false;
-      } catch (error) {
-        newContractBalances[address] = _controllerutils.toHex.call(void 0, 0);
-        token.hasBalanceError = true;
-      }
-    }
+      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getERC20BalanceOf).call(this, address, selectedAddress).then((balance) => {
+          newContractBalances[address] = _controllerutils.toHex.call(void 0, balance);
+              token = {
+                ...token,
+                hasBalanceError: false
+              };
+      }).catch((error) => {
+          newContractBalances[address] = _controllerutils.toHex.call(void 0, 0);
+              token = {
+                ...token,
+                hasBalanceError: true
+              };
+          });
+    });
+    await Promise.all(balancePromises);
     this.update((state) => {
       state.contractBalances = newContractBalances;
     });
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _updateInProgress, false);
   }
 };
 _handle = new WeakMap();
@@ -128,6 +147,7 @@ _getERC20BalanceOf = new WeakMap();
 _interval = new WeakMap();
 _tokens = new WeakMap();
 _disabled = new WeakMap();
+_updateInProgress = new WeakMap();
 var TokenBalancesController_default = TokenBalancesController;
 
 
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-RJBYLTY5.js b/node_modules/@metamask/assets-controllers/dist/chunk-RJBYLTY5.js
index 294447b..5e522de 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-RJBYLTY5.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-RJBYLTY5.js
@@ -293,6 +293,19 @@ var TokensController = class extends _basecontroller.BaseController {
       releaseLock();
     }
   }
+
+  /**
+  * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+  * Resets to the default state
+  */
+  reset() {
+    this.update((state) => {
+      state.allTokens = {};
+      state.allIgnoredTokens = {};
+      state.ignoredTokens = [];
+      state.tokens = [];
+    });
+  }
   /**
    * Add a batch of tokens.
    *
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-T5ZX5BV7.js b/node_modules/@metamask/assets-controllers/dist/chunk-T5ZX5BV7.js
index 9c89a65..2ac17ba 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-T5ZX5BV7.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-T5ZX5BV7.js
@@ -87,6 +87,7 @@ var CurrencyRateController = class extends _pollingcontroller.StaticIntervalPoll
     const nativeCurrencyForExchangeRate = Object.values(
       _controllerutils.TESTNET_TICKER_SYMBOLS
     ).includes(nativeCurrency) ? _controllerutils.FALL_BACK_VS_CURRENCY : nativeCurrency;
+    let shouldUpdateState = true;
     try {
       if (currentCurrency && nativeCurrency && // if either currency is an empty string we can skip the comparison
       // because it will result in an error from the api and ultimately
@@ -103,23 +104,27 @@ var CurrencyRateController = class extends _pollingcontroller.StaticIntervalPoll
       }
     } catch (error) {
       if (!(error instanceof Error && error.message.includes("market does not exist for this coin pair"))) {
+        // Don't update state on transient / unexpected errors
+        shouldUpdateState = false;
         throw error;
       }
     } finally {
       try {
-        this.update(() => {
-          return {
-            currencyRates: {
-              ...currencyRates,
-              [nativeCurrency]: {
-                conversionDate,
-                conversionRate,
-                usdConversionRate
-              }
-            },
-            currentCurrency
-          };
-        });
+        if(shouldUpdateState) {
+          this.update(() => {
+            return {
+              currencyRates: {
+                ...currencyRates,
+                [nativeCurrency]: {
+                  conversionDate,
+                  conversionRate,
+                  usdConversionRate
+                }
+              },
+              currentCurrency
+            };
+          });
+        }
       } finally {
         releaseLock();
       }
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-VZF43NDM.js b/node_modules/@metamask/assets-controllers/dist/chunk-VZF43NDM.js
index 871ba96..02f5036 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-VZF43NDM.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-VZF43NDM.js
@@ -165,7 +165,9 @@ var TokenDetectionController = class extends _pollingcontroller.StaticIntervalPo
     if (!this.isActive) {
       return;
     }
-    const addressAgainstWhichToDetect = selectedAddress ?? _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _selectedAddress);
+    const currentAddress = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _selectedAddress);
+    const currentAddressChecksum = _controllerutils.toChecksumHexAddress.call(void 0, currentAddress)
+    const addressAgainstWhichToDetect = _controllerutils.toChecksumHexAddress.call(void 0, selectedAddress) ?? currentAddressChecksum;
     const { chainId, networkClientId: selectedNetworkClientId } = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getCorrectChainIdAndNetworkClientId, getCorrectChainIdAndNetworkClientId_fn).call(this, networkClientId);
     const chainIdAgainstWhichToDetect = chainId;
     const networkClientIdAgainstWhichToDetect = selectedNetworkClientId;
@@ -228,12 +230,10 @@ registerEventListeners_fn = function() {
     "PreferencesController:stateChange",
     // TODO: Either fix this lint violation or explain why it's necessary to ignore.
     // eslint-disable-next-line @typescript-eslint/no-misused-promises
-    async ({ selectedAddress: newSelectedAddress, useTokenDetection }) => {
-      const isSelectedAddressChanged = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _selectedAddress) !== newSelectedAddress;
+    async ({ useTokenDetection }) => {
       const isDetectionChangedFromPreferences = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isDetectionEnabledFromPreferences) !== useTokenDetection;
-      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _selectedAddress, newSelectedAddress);
       _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isDetectionEnabledFromPreferences, useTokenDetection);
-      if (isSelectedAddressChanged || isDetectionChangedFromPreferences) {
+      if ( isDetectionChangedFromPreferences) {
         await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _restartTokenDetection, restartTokenDetection_fn).call(this, {
           selectedAddress: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _selectedAddress)
         });
diff --git a/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts
index b663e26..09f72c6 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts
@@ -7,7 +7,7 @@ import type { PreferencesControllerStateChangeEvent } from '@metamask/preference
 import type { Hex } from '@metamask/utils';
 import type { AssetsContractController } from './AssetsContractController';
 import { Source } from './constants';
-import type { Collection, Attributes, LastSale } from './NftDetectionController';
+import type { Collection, Attributes, LastSale, TopBid } from './NftDetectionController';
 type NFTStandardType = 'ERC721' | 'ERC1155';
 type SuggestedNftMeta = {
     asset: {
@@ -108,11 +108,13 @@ export type NftMetadata = {
     creator?: string;
     transactionId?: string;
     tokenURI?: string | null;
+    error?: string;
     collection?: Collection;
     address?: string;
-    attributes?: Attributes;
+    attributes?: Attributes[];
     lastSale?: LastSale;
     rarityRank?: string;
+    topBid?: TopBid;
 };
 /**
  * @type NftControllerState
@@ -419,6 +421,11 @@ export declare class NftController extends BaseController<typeof controllerName,
      */
     resetNftTransactionStatusByTransactionId(transactionId: string, selectedAddress: string, chainId: Hex): boolean;
     _requestApproval(suggestedNftMeta: SuggestedNftMeta): Promise<unknown>;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+    */
+    reset(): void;
 }
 export default NftController;
 //# sourceMappingURL=NftController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/NftDetectionController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/NftDetectionController.d.ts
index c645b3a..2f1c945 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/NftDetectionController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/NftDetectionController.d.ts
@@ -227,7 +227,41 @@ export type Attributes = {
     topBidValue?: number | null;
     createdAt?: string;
 };
-export type Collection = {
+
+export type GetCollectionsResponse = {
+    collections: CollectionResponse[];
+};
+export type CollectionResponse = {
+    id?: string;
+    openseaVerificationStatus?: string;
+    contractDeployedAt?: string;
+    creator?: string;
+    ownerCount?: string;
+    topBid?: TopBid & {
+        sourceDomain?: string;
+    };
+};
+export type FloorAskCollection = {
+    id?: string;
+    price?: Price;
+    maker?: string;
+    kind?: string;
+    validFrom?: number;
+    validUntil?: number;
+    source?: SourceCollection;
+    rawData?: Metadata;
+    isNativeOffChainCancellable?: boolean;
+};
+  
+export type SourceCollection = {
+    id: string;
+    domain: string;
+    name: string;
+    icon: string;
+    url: string;
+};
+
+export type TokenCollection = {
     id?: string;
     name?: string;
     slug?: string;
@@ -243,7 +277,9 @@ export type Collection = {
     floorAskPrice?: Price;
     royaltiesBps?: number;
     royalties?: Royalties[];
+    floorAsk?: FloorAskCollection;
 };
+export type Collection = TokenCollection & CollectionResponse;
 export type Royalties = {
     bps?: number;
     recipient?: string;
diff --git a/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts
index 52bb3ac..d4d5c0a 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts
@@ -79,6 +79,11 @@ export declare class TokenBalancesController extends BaseController<typeof contr
      * Updates balances for all tokens.
      */
     updateBalances(): Promise<void>;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+    */
+    reset(): void;
 }
 export default TokenBalancesController;
 //# sourceMappingURL=TokenBalancesController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/TokenRatesController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/TokenRatesController.d.ts
index f29e877..24ce7d7 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/TokenRatesController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/TokenRatesController.d.ts
@@ -165,6 +165,11 @@ export declare class TokenRatesController extends StaticIntervalPollingControlle
      * @returns The controller state.
      */
     _executePoll(networkClientId: NetworkClientId): Promise<void>;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+    */
+    reset(): void;
 }
 export default TokenRatesController;
 //# sourceMappingURL=TokenRatesController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/TokensController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/TokensController.d.ts
index bc4126d..ce8016a 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/TokensController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/TokensController.d.ts
@@ -162,6 +162,11 @@ export declare class TokensController extends BaseController<typeof controllerNa
      * Removes all tokens from the ignored list.
      */
     clearIgnoredTokens(): void;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+    */
+    reset(): void;
 }
 export default TokensController;
 //# sourceMappingURL=TokensController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/index.d.ts b/node_modules/@metamask/assets-controllers/dist/types/index.d.ts
index b241174..8090f51 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/index.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/index.d.ts
@@ -5,7 +5,7 @@ export type { NftControllerState, NftControllerMessenger, NftControllerActions,
 export { getDefaultNftControllerState, NftController } from './NftController';
 export type { NftDetectionControllerMessenger, ApiNft, ApiNftContract, ApiNftLastSale, ApiNftCreator, ReservoirResponse, TokensResponse, BlockaidResultType, Blockaid, Market, TokenResponse, TopBid, LastSale, FeeBreakdown, Attributes, Collection, Royalties, Ownership, FloorAsk, Price, Metadata, } from './NftDetectionController';
 export { NftDetectionController } from './NftDetectionController';
-export type { TokenBalancesControllerMessenger, TokenBalancesControllerActions, TokenBalancesControllerGetStateAction, TokenBalancesControllerEvents, TokenBalancesControllerStateChangeEvent, } from './TokenBalancesController';
+export type { TokenBalancesControllerMessenger, TokenBalancesControllerActions, TokenBalancesControllerGetStateAction, TokenBalancesControllerEvents, TokenBalancesControllerStateChangeEvent, TokenBalancesControllerState, } from './TokenBalancesController';
 export { TokenBalancesController } from './TokenBalancesController';
 export type { TokenDetectionControllerMessenger, TokenDetectionControllerActions, TokenDetectionControllerGetStateAction, TokenDetectionControllerEvents, TokenDetectionControllerStateChangeEvent, } from './TokenDetectionController';
 export { TokenDetectionController } from './TokenDetectionController';
