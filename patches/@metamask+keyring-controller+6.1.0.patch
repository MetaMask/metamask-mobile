diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts b/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts
index dff777b..bb3aad2 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts
@@ -1,3 +1,4 @@
+import { KeyringController as EthKeyringController } from '@metamask/eth-keyring-controller';
 import { MetaMaskKeyring as QRKeyring, IKeyringState as IQRKeyringState } from '@keystonehq/metamask-airgapped-keyring';
 import { BaseControllerV2, RestrictedControllerMessenger } from '@metamask/base-controller';
 import { PreferencesController } from '@metamask/preferences-controller';
@@ -141,6 +142,10 @@ export declare class KeyringController extends BaseControllerV2<typeof name, Key
      * @param opts.state - Initial state to set on this controller.
      */
     constructor({ removeIdentity, syncIdentities, updateIdentities, setSelectedAddress, setAccountLabel, encryptor, keyringBuilders, cacheEncryptionKey, messenger, state, }: KeyringControllerOptions);
+    /**
+      * Gets the internal keyring controller.
+    */
+    getEthKeyringController(): typeof EthKeyringController;
     /**
      * Adds a new account to the default (first) HD seed phrase keyring.
      *
@@ -342,7 +347,10 @@ export declare class KeyringController extends BaseControllerV2<typeof name, Key
     }[]>;
     unlockQRHardwareWalletAccount(index: number): Promise<void>;
     getAccountKeyringType(account: string): Promise<KeyringTypes>;
-    forgetQRDevice(): Promise<void>;
+    forgetQRDevice(): Promise<{
+        removedAccounts: string[];
+        remainingAccounts: string[];
+    }>;
 }
 export default KeyringController;
 //# sourceMappingURL=KeyringController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts.map b/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts.map
index 85812da..fa2363d 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts.map
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"KeyringController.d.ts","sourceRoot":"","sources":["../src/KeyringController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"KeyringController.d.ts","sourceRoot":"","sources":["../src/KeyringController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.js b/node_modules/@metamask/keyring-controller/dist/KeyringController.js
index c905cc0..e39b76e 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.js
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.js
@@ -139,6 +139,12 @@ class KeyringController extends base_controller_1.BaseControllerV2 {
         this.setSelectedAddress = setSelectedAddress;
         this.setAccountLabel = setAccountLabel;
     }
+    /**
+      * Gets the internal keyring controller.
+    */
+    getEthKeyringController() {
+        return __classPrivateFieldGet(this, _KeyringController_keyring, "f");
+    }
     /**
      * Adds a new account to the default (first) HD seed phrase keyring.
      *
@@ -678,13 +684,21 @@ class KeyringController extends base_controller_1.BaseControllerV2 {
     }
     forgetQRDevice() {
         return __awaiter(this, void 0, void 0, function* () {
+            /**
+              * ============================== PATCH INFORMATION ==============================
+              * This patch addresses an issue regarding the forget device functionality. It
+              * improves the logic  to correctly remove the QR accounts and update the
+              * identities as needed.
+              * ===============================================================================
+            */
             const keyring = yield this.getOrAddQRKeyring();
+            const allAccounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
             keyring.forgetDevice();
-            const accounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
-            accounts.forEach((account) => {
-                this.setSelectedAddress(account);
-            });
+            const remainingAccounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
+            const removedAccounts = allAccounts.filter((address) => !remainingAccounts.includes(address));
+            this.updateIdentities(remainingAccounts);
             yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").persistAllKeyrings();
+            return { removedAccounts, remainingAccounts };
         });
     }
 }
diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.js.map b/node_modules/@metamask/keyring-controller/dist/KeyringController.js.map
index 85f57ff..257d019 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.js.map
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.js.map
@@ -1 +1 @@
-{"version":3,"file":"KeyringController.js","sourceRoot":"","sources":["../src/KeyringController.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  addHexPrefix,\n  bufferToHex,\n  isValidPrivate,\n  toBuffer,\n  stripHexPrefix,\n  getBinarySize,\n} from 'ethereumjs-util';\nimport { isValidHexAddress } from '@metamask/controller-utils';\nimport {\n  normalize as normalizeAddress,\n  signTypedData,\n} from '@metamask/eth-sig-util';\nimport Wallet, { thirdparty as importers } from 'ethereumjs-wallet';\nimport { KeyringController as EthKeyringController } from '@metamask/eth-keyring-controller';\nimport { Mutex } from 'async-mutex';\nimport {\n  MetaMaskKeyring as QRKeyring,\n  IKeyringState as IQRKeyringState,\n} from '@keystonehq/metamask-airgapped-keyring';\nimport {\n  BaseControllerV2,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { PreferencesController } from '@metamask/preferences-controller';\nimport {\n  PersonalMessageParams,\n  TypedMessageParams,\n} from '@metamask/message-manager';\nimport type { Patch } from 'immer';\n\nconst name = 'KeyringController';\n\n/**\n * Available keyring types\n */\nexport enum KeyringTypes {\n  simple = 'Simple Key Pair',\n  hd = 'HD Key Tree',\n  qr = 'QR Hardware Wallet Device',\n}\n\n/**\n * @type KeyringObject\n *\n * Keyring object\n * @property type - Keyring type\n * @property accounts - Associated accounts\n * @function getAccounts - Get associated accounts\n */\nexport interface KeyringObject {\n  type: string;\n  accounts: string[];\n  getAccounts(): string[];\n}\n\n/**\n * @type KeyringControllerState\n *\n * Keyring controller state\n * @property vault - Encrypted string representing keyring data\n * @property isUnlocked - Whether vault is unlocked\n * @property keyringTypes - Account types\n * @property keyrings - Group of accounts\n * @property encryptionKey - Keyring encryption key\n * @property encryptionSalt - Keyring encryption salt\n */\nexport type KeyringControllerState = {\n  vault?: string;\n  isUnlocked: boolean;\n  keyringTypes: string[];\n  keyrings: Keyring[];\n  encryptionKey?: string;\n  encryptionSalt?: string;\n};\n\nexport type KeyringControllerMemState = Omit<\n  KeyringControllerState,\n  'vault' | 'encryptionKey' | 'encryptionSalt'\n>;\n\nexport type KeyringControllerGetStateAction = {\n  type: `${typeof name}:getState`;\n  handler: () => KeyringControllerState;\n};\n\nexport type KeyringControllerStateChangeEvent = {\n  type: `${typeof name}:stateChange`;\n  payload: [KeyringControllerState, Patch[]];\n};\n\nexport type KeyringControllerAccountRemovedEvent = {\n  type: `${typeof name}:accountRemoved`;\n  payload: [string];\n};\n\nexport type KeyringControllerLockEvent = {\n  type: `${typeof name}:lock`;\n  payload: [];\n};\n\nexport type KeyringControllerUnlockEvent = {\n  type: `${typeof name}:unlock`;\n  payload: [];\n};\n\nexport type KeyringControllerActions = KeyringControllerGetStateAction;\n\nexport type KeyringControllerEvents =\n  | KeyringControllerStateChangeEvent\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | KeyringControllerAccountRemovedEvent;\n\nexport type KeyringControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  KeyringControllerActions,\n  KeyringControllerEvents,\n  string,\n  string\n>;\n\nexport type KeyringControllerOptions = {\n  removeIdentity: PreferencesController['removeIdentity'];\n  syncIdentities: PreferencesController['syncIdentities'];\n  updateIdentities: PreferencesController['updateIdentities'];\n  setSelectedAddress: PreferencesController['setSelectedAddress'];\n  setAccountLabel?: PreferencesController['setAccountLabel'];\n  encryptor?: any;\n  keyringBuilders?: any[];\n  cacheEncryptionKey?: boolean;\n  messenger: KeyringControllerMessenger;\n  state?: Partial<KeyringControllerState>;\n};\n\n/**\n * @type Keyring\n *\n * Keyring object to return in fullUpdate\n * @property type - Keyring type\n * @property accounts - Associated accounts\n */\nexport type Keyring = {\n  accounts: string[];\n  type: string;\n};\n\n/**\n * A strategy for importing an account\n */\nexport enum AccountImportStrategy {\n  privateKey = 'privateKey',\n  json = 'json',\n}\n\n/**\n * The `signTypedMessage` version\n *\n * @see https://docs.metamask.io/guide/signing-data.html\n */\nexport enum SignTypedDataVersion {\n  V1 = 'V1',\n  V3 = 'V3',\n  V4 = 'V4',\n}\n\nconst defaultState: KeyringControllerState = {\n  isUnlocked: false,\n  keyringTypes: [],\n  keyrings: [],\n};\n\n/**\n * Controller responsible for establishing and managing user identity.\n *\n * This class is a wrapper around the `eth-keyring-controller` package. The\n * `eth-keyring-controller` manages the \"vault\", which is an encrypted store of private keys, and\n * it manages the wallet \"lock\" state. This wrapper class has convenience methods for interacting\n * with the internal keyring controller and handling certain complex operations that involve the\n * keyrings.\n */\nexport class KeyringController extends BaseControllerV2<\n  typeof name,\n  KeyringControllerState,\n  KeyringControllerMessenger\n> {\n  private mutex = new Mutex();\n\n  private removeIdentity: PreferencesController['removeIdentity'];\n\n  private syncIdentities: PreferencesController['syncIdentities'];\n\n  private updateIdentities: PreferencesController['updateIdentities'];\n\n  private setSelectedAddress: PreferencesController['setSelectedAddress'];\n\n  private setAccountLabel?: PreferencesController['setAccountLabel'];\n\n  #keyring: typeof EthKeyringController;\n\n  /**\n   * Creates a KeyringController instance.\n   *\n   * @param opts - Initial options used to configure this controller\n   * @param opts.removeIdentity - Remove the identity with the given address.\n   * @param opts.syncIdentities - Sync identities with the given list of addresses.\n   * @param opts.updateIdentities - Generate an identity for each address given that doesn't already have an identity.\n   * @param opts.setSelectedAddress - Set the selected address.\n   * @param opts.setAccountLabel - Set a new name for account.\n   * @param opts.encryptor - An optional object for defining encryption schemes.\n   * @param opts.keyringBuilders - Set a new name for account.\n   * @param opts.cacheEncryptionKey - Whether to cache or not encryption key.\n   * @param opts.messenger - A restricted controller messenger.\n   * @param opts.state - Initial state to set on this controller.\n   */\n  constructor({\n    removeIdentity,\n    syncIdentities,\n    updateIdentities,\n    setSelectedAddress,\n    setAccountLabel,\n    encryptor,\n    keyringBuilders,\n    cacheEncryptionKey,\n    messenger,\n    state,\n  }: KeyringControllerOptions) {\n    super({\n      name,\n      metadata: {\n        vault: { persist: true, anonymous: false },\n        isUnlocked: { persist: false, anonymous: true },\n        keyringTypes: { persist: false, anonymous: false },\n        keyrings: { persist: false, anonymous: false },\n        encryptionKey: { persist: false, anonymous: false },\n        encryptionSalt: { persist: false, anonymous: false },\n      },\n      messenger,\n      state: {\n        ...defaultState,\n        ...state,\n      },\n    });\n\n    this.#keyring = new EthKeyringController(\n      Object.assign(\n        { initState: state },\n        { encryptor, keyringBuilders, cacheEncryptionKey },\n      ),\n    );\n    this.#keyring.memStore.subscribe(this.#fullUpdate.bind(this));\n    this.#keyring.store.subscribe(this.#fullUpdate.bind(this));\n    this.#keyring.on('lock', this.#handleLock.bind(this));\n    this.#keyring.on('unlock', this.#handleUnlock.bind(this));\n\n    this.removeIdentity = removeIdentity;\n    this.syncIdentities = syncIdentities;\n    this.updateIdentities = updateIdentities;\n    this.setSelectedAddress = setSelectedAddress;\n    this.setAccountLabel = setAccountLabel;\n  }\n\n  /**\n   * Adds a new account to the default (first) HD seed phrase keyring.\n   *\n   * @param accountCount - Number of accounts before adding a new one, used to\n   * make the method idempotent.\n   * @returns Promise resolving to keyring current state and added account\n   * address.\n   */\n  async addNewAccount(accountCount?: number): Promise<{\n    keyringState: KeyringControllerMemState;\n    addedAccountAddress: string;\n  }> {\n    const primaryKeyring = this.#keyring.getKeyringsByType('HD Key Tree')[0];\n    /* istanbul ignore if */\n    if (!primaryKeyring) {\n      throw new Error('No HD keyring found');\n    }\n    const oldAccounts = await this.#keyring.getAccounts();\n\n    if (accountCount && oldAccounts.length !== accountCount) {\n      if (accountCount > oldAccounts.length) {\n        throw new Error('Account out of sequence');\n      }\n      // we return the account already existing at index `accountCount`\n      const primaryKeyringAccounts = await primaryKeyring.getAccounts();\n      return {\n        keyringState: this.#getMemState(),\n        addedAccountAddress: primaryKeyringAccounts[accountCount],\n      };\n    }\n\n    await this.#keyring.addNewAccount(primaryKeyring);\n    const newAccounts = await this.#keyring.getAccounts();\n\n    await this.verifySeedPhrase();\n\n    this.updateIdentities(newAccounts);\n    const addedAccountAddress = newAccounts.find(\n      (selectedAddress: string) => !oldAccounts.includes(selectedAddress),\n    );\n    return {\n      keyringState: this.#getMemState(),\n      addedAccountAddress,\n    };\n  }\n\n  /**\n   * Adds a new account to the default (first) HD seed phrase keyring without updating identities in preferences.\n   *\n   * @returns Promise resolving to current state when the account is added.\n   */\n  async addNewAccountWithoutUpdate(): Promise<KeyringControllerMemState> {\n    const primaryKeyring = this.#keyring.getKeyringsByType('HD Key Tree')[0];\n    /* istanbul ignore if */\n    if (!primaryKeyring) {\n      throw new Error('No HD keyring found');\n    }\n    await this.#keyring.addNewAccount(primaryKeyring);\n    await this.verifySeedPhrase();\n    return this.#getMemState();\n  }\n\n  /**\n   * Effectively the same as creating a new keychain then populating it\n   * using the given seed phrase.\n   *\n   * @param password - Password to unlock keychain.\n   * @param seed - A BIP39-compliant seed phrase as Uint8Array,\n   * either as a string or an array of UTF-8 bytes that represent the string.\n   * @returns Promise resolving to the restored keychain object.\n   */\n  async createNewVaultAndRestore(\n    password: string,\n    seed: Uint8Array,\n  ): Promise<KeyringControllerMemState> {\n    const releaseLock = await this.mutex.acquire();\n    if (!password || !password.length) {\n      throw new Error('Invalid password');\n    }\n\n    try {\n      this.updateIdentities([]);\n      await this.#keyring.createNewVaultAndRestore(password, seed);\n      this.updateIdentities(await this.#keyring.getAccounts());\n      return this.#getMemState();\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Create a new primary keychain and wipe any previous keychains.\n   *\n   * @param password - Password to unlock the new vault.\n   * @returns Newly-created keychain object.\n   */\n  async createNewVaultAndKeychain(password: string) {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const accounts = await this.getAccounts();\n      if (!accounts.length) {\n        await this.#keyring.createNewVaultAndKeychain(password);\n        this.updateIdentities(await this.getAccounts());\n      }\n      return this.#getMemState();\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Method to verify a given password validity. Throws an\n   * error if the password is invalid.\n   *\n   * @param password - Password of the keyring.\n   */\n  async verifyPassword(password: string) {\n    await this.#keyring.verifyPassword(password);\n  }\n\n  /**\n   * Returns the status of the vault.\n   *\n   * @returns Boolean returning true if the vault is unlocked.\n   */\n  isUnlocked(): boolean {\n    return this.state.isUnlocked;\n  }\n\n  /**\n   * Gets the seed phrase of the HD keyring.\n   *\n   * @param password - Password of the keyring.\n   * @returns Promise resolving to the seed phrase.\n   */\n  async exportSeedPhrase(password: string) {\n    await this.verifyPassword(password);\n    return this.#keyring.keyrings[0].mnemonic;\n  }\n\n  /**\n   * Gets the private key from the keyring controlling an address.\n   *\n   * @param password - Password of the keyring.\n   * @param address - Address to export.\n   * @returns Promise resolving to the private key for an address.\n   */\n  async exportAccount(password: string, address: string): Promise<string> {\n    await this.verifyPassword(password);\n    return this.#keyring.exportAccount(address);\n  }\n\n  /**\n   * Returns the public addresses of all accounts for the current keyring.\n   *\n   * @returns A promise resolving to an array of addresses.\n   */\n  getAccounts(): Promise<string[]> {\n    return this.#keyring.getAccounts();\n  }\n\n  /**\n   * Returns the currently initialized keyring that manages\n   * the specified `address` if one exists.\n   *\n   * @deprecated Use of this method is discouraged as actions executed directly on\n   * keyrings are not being reflected in the KeyringController state and not\n   * persisted in the vault.\n   * @param account - An account address.\n   * @returns Promise resolving to keyring of the `account` if one exists.\n   */\n  async getKeyringForAccount(account: string): Promise<unknown> {\n    return this.#keyring.getKeyringForAccount(account);\n  }\n\n  /**\n   * Returns all keyrings of the given type.\n   *\n   * @deprecated Use of this method is discouraged as actions executed directly on\n   * keyrings are not being reflected in the KeyringController state and not\n   * persisted in the vault.\n   * @param type - Keyring type name.\n   * @returns An array of keyrings of the given type.\n   */\n  getKeyringsByType(type: KeyringTypes | string): unknown[] {\n    return this.#keyring.getKeyringsByType(type);\n  }\n\n  /**\n   * Imports an account with the specified import strategy.\n   *\n   * @param strategy - Import strategy name.\n   * @param args - Array of arguments to pass to the underlying stategy.\n   * @throws Will throw when passed an unrecognized strategy.\n   * @returns Promise resolving to keyring current state and imported account\n   * address.\n   */\n  async importAccountWithStrategy(\n    strategy: AccountImportStrategy,\n    args: any[],\n  ): Promise<{\n    keyringState: KeyringControllerMemState;\n    importedAccountAddress: string;\n  }> {\n    let privateKey;\n    switch (strategy) {\n      case 'privateKey':\n        const [importedKey] = args;\n        if (!importedKey) {\n          throw new Error('Cannot import an empty key.');\n        }\n        const prefixed = addHexPrefix(importedKey);\n\n        let bufferedPrivateKey;\n        try {\n          bufferedPrivateKey = toBuffer(prefixed);\n        } catch {\n          throw new Error('Cannot import invalid private key.');\n        }\n\n        /* istanbul ignore if */\n        if (\n          !isValidPrivate(bufferedPrivateKey) ||\n          // ensures that the key is 64 bytes long\n          getBinarySize(prefixed) !== 64 + '0x'.length\n        ) {\n          throw new Error('Cannot import invalid private key.');\n        }\n\n        privateKey = stripHexPrefix(prefixed);\n        break;\n      case 'json':\n        let wallet;\n        const [input, password] = args;\n        try {\n          wallet = importers.fromEtherWallet(input, password);\n        } catch (e) {\n          wallet = wallet || (await Wallet.fromV3(input, password, true));\n        }\n        privateKey = bufferToHex(wallet.getPrivateKey());\n        break;\n      default:\n        throw new Error(`Unexpected import strategy: '${strategy}'`);\n    }\n    const newKeyring = await this.#keyring.addNewKeyring(KeyringTypes.simple, [\n      privateKey,\n    ]);\n    const accounts = await newKeyring.getAccounts();\n    const allAccounts = await this.#keyring.getAccounts();\n    this.updateIdentities(allAccounts);\n    return {\n      keyringState: this.#getMemState(),\n      importedAccountAddress: accounts[0],\n    };\n  }\n\n  /**\n   * Removes an account from keyring state.\n   *\n   * @param address - Address of the account to remove.\n   * @fires KeyringController:accountRemoved\n   * @returns Promise resolving current state when this account removal completes.\n   */\n  async removeAccount(address: string): Promise<KeyringControllerMemState> {\n    this.removeIdentity(address);\n    await this.#keyring.removeAccount(address);\n    this.messagingSystem.publish(`${name}:accountRemoved`, address);\n    return this.#getMemState();\n  }\n\n  /**\n   * Deallocates all secrets and locks the wallet.\n   *\n   * @returns Promise resolving to current state.\n   */\n  setLocked(): Promise<KeyringControllerMemState> {\n    return this.#keyring.setLocked();\n  }\n\n  /**\n   * Signs message by calling down into a specific keyring.\n   *\n   * @param messageParams - PersonalMessageParams object to sign.\n   * @returns Promise resolving to a signed message string.\n   */\n  signMessage(messageParams: PersonalMessageParams) {\n    if (!messageParams.data) {\n      throw new Error(\"Can't sign an empty message\");\n    }\n    return this.#keyring.signMessage(messageParams);\n  }\n\n  /**\n   * Signs personal message by calling down into a specific keyring.\n   *\n   * @param messageParams - PersonalMessageParams object to sign.\n   * @returns Promise resolving to a signed message string.\n   */\n  signPersonalMessage(messageParams: PersonalMessageParams) {\n    return this.#keyring.signPersonalMessage(messageParams);\n  }\n\n  /**\n   * Signs typed message by calling down into a specific keyring.\n   *\n   * @param messageParams - TypedMessageParams object to sign.\n   * @param version - Compatibility version EIP712.\n   * @throws Will throw when passed an unrecognized version.\n   * @returns Promise resolving to a signed message string or an error if any.\n   */\n  async signTypedMessage(\n    messageParams: TypedMessageParams,\n    version: SignTypedDataVersion,\n  ) {\n    try {\n      const address = normalizeAddress(messageParams.from);\n      if (!address || !isValidHexAddress(address)) {\n        throw new Error(\n          `Missing or invalid address ${JSON.stringify(messageParams.from)}`,\n        );\n      }\n      const qrKeyring = await this.getOrAddQRKeyring();\n      const qrAccounts = await qrKeyring.getAccounts();\n      if (\n        qrAccounts.findIndex(\n          (qrAddress: string) =>\n            qrAddress.toLowerCase() === address.toLowerCase(),\n        ) !== -1\n      ) {\n        const messageParamsClone = { ...messageParams };\n        if (\n          version !== SignTypedDataVersion.V1 &&\n          typeof messageParamsClone.data === 'string'\n        ) {\n          messageParamsClone.data = JSON.parse(messageParamsClone.data);\n        }\n        return this.#keyring.signTypedMessage(messageParamsClone, { version });\n      }\n\n      const { password } = this.#keyring;\n      const privateKey = await this.exportAccount(password, address);\n      const privateKeyBuffer = toBuffer(addHexPrefix(privateKey));\n      switch (version) {\n        case SignTypedDataVersion.V1:\n          return signTypedData({\n            privateKey: privateKeyBuffer,\n            data: messageParams.data as any,\n            version: SignTypedDataVersion.V1,\n          });\n        case SignTypedDataVersion.V3:\n          return signTypedData({\n            privateKey: privateKeyBuffer,\n            data: JSON.parse(messageParams.data as string),\n            version: SignTypedDataVersion.V3,\n          });\n        case SignTypedDataVersion.V4:\n          return signTypedData({\n            privateKey: privateKeyBuffer,\n            data: JSON.parse(messageParams.data as string),\n            version: SignTypedDataVersion.V4,\n          });\n        default:\n          throw new Error(`Unexpected signTypedMessage version: '${version}'`);\n      }\n    } catch (error) {\n      throw new Error(`Keyring Controller signTypedMessage: ${error}`);\n    }\n  }\n\n  /**\n   * Signs a transaction by calling down into a specific keyring.\n   *\n   * @param transaction - Transaction object to sign. Must be a `ethereumjs-tx` transaction instance.\n   * @param from - Address to sign from, should be in keychain.\n   * @returns Promise resolving to a signed transaction string.\n   */\n  signTransaction(transaction: unknown, from: string) {\n    return this.#keyring.signTransaction(transaction, from);\n  }\n\n  /**\n   * Attempts to decrypt the current vault and load its keyrings,\n   * using the given encryption key and salt.\n   *\n   * @param encryptionKey - Key to unlock the keychain.\n   * @param encryptionSalt - Salt to unlock the keychain.\n   * @returns Promise resolving to the current state.\n   */\n  async submitEncryptionKey(\n    encryptionKey: string,\n    encryptionSalt: string,\n  ): Promise<KeyringControllerMemState> {\n    await this.#keyring.submitEncryptionKey(encryptionKey, encryptionSalt);\n    return this.#getMemState();\n  }\n\n  /**\n   * Attempts to decrypt the current vault and load its keyrings,\n   * using the given password.\n   *\n   * @param password - Password to unlock the keychain.\n   * @returns Promise resolving to the current state.\n   */\n  async submitPassword(password: string): Promise<KeyringControllerMemState> {\n    await this.#keyring.submitPassword(password);\n    const accounts = await this.#keyring.getAccounts();\n    await this.syncIdentities(accounts);\n    return this.#getMemState();\n  }\n\n  /**\n   * Verifies the that the seed phrase restores the current keychain's accounts.\n   *\n   * @returns Promise resolving to the seed phrase as Uint8Array.\n   */\n  async verifySeedPhrase(): Promise<Uint8Array> {\n    const primaryKeyring = this.#keyring.getKeyringsByType(KeyringTypes.hd)[0];\n    /* istanbul ignore if */\n    if (!primaryKeyring) {\n      throw new Error('No HD keyring found.');\n    }\n\n    const seedWords = primaryKeyring.mnemonic;\n    const accounts = await primaryKeyring.getAccounts();\n    /* istanbul ignore if */\n    if (accounts.length === 0) {\n      throw new Error('Cannot verify an empty keyring.');\n    }\n\n    const hdKeyringBuilder = this.#keyring.getKeyringBuilderForType(\n      KeyringTypes.hd,\n    );\n    const hdKeyring = hdKeyringBuilder();\n    hdKeyring.deserialize({\n      mnemonic: seedWords,\n      numberOfAccounts: accounts.length,\n    });\n    const testAccounts = await hdKeyring.getAccounts();\n    /* istanbul ignore if */\n    if (testAccounts.length !== accounts.length) {\n      throw new Error('Seed phrase imported incorrect number of accounts.');\n    }\n\n    testAccounts.forEach((account: string, i: number) => {\n      /* istanbul ignore if */\n      if (account.toLowerCase() !== accounts[i].toLowerCase()) {\n        throw new Error('Seed phrase imported different accounts.');\n      }\n    });\n\n    return seedWords;\n  }\n\n  // QR Hardware related methods\n\n  /**\n   * Add qr hardware keyring.\n   *\n   * @returns The added keyring\n   */\n  private async addQRKeyring(): Promise<QRKeyring> {\n    return this.#keyring.addNewKeyring(KeyringTypes.qr);\n  }\n\n  /**\n   * Get qr hardware keyring.\n   *\n   * @returns The added keyring\n   */\n  async getOrAddQRKeyring(): Promise<QRKeyring> {\n    const keyring = this.#keyring.getKeyringsByType(KeyringTypes.qr)[0];\n    return keyring || (await this.addQRKeyring());\n  }\n\n  async restoreQRKeyring(serialized: any): Promise<void> {\n    (await this.getOrAddQRKeyring()).deserialize(serialized);\n    await this.#keyring.persistAllKeyrings();\n    this.updateIdentities(await this.#keyring.getAccounts());\n  }\n\n  async resetQRKeyringState(): Promise<void> {\n    (await this.getOrAddQRKeyring()).resetStore();\n  }\n\n  async getQRKeyringState(): Promise<IQRKeyringState> {\n    return (await this.getOrAddQRKeyring()).getMemStore();\n  }\n\n  async submitQRCryptoHDKey(cryptoHDKey: string): Promise<void> {\n    (await this.getOrAddQRKeyring()).submitCryptoHDKey(cryptoHDKey);\n  }\n\n  async submitQRCryptoAccount(cryptoAccount: string): Promise<void> {\n    (await this.getOrAddQRKeyring()).submitCryptoAccount(cryptoAccount);\n  }\n\n  async submitQRSignature(\n    requestId: string,\n    ethSignature: string,\n  ): Promise<void> {\n    (await this.getOrAddQRKeyring()).submitSignature(requestId, ethSignature);\n  }\n\n  async cancelQRSignRequest(): Promise<void> {\n    (await this.getOrAddQRKeyring()).cancelSignRequest();\n  }\n\n  /**\n   * Cancels qr keyring sync.\n   */\n  async cancelQRSynchronization(): Promise<void> {\n    // eslint-disable-next-line node/no-sync\n    (await this.getOrAddQRKeyring()).cancelSync();\n  }\n\n  async connectQRHardware(\n    page: number,\n  ): Promise<{ balance: string; address: string; index: number }[]> {\n    try {\n      const keyring = await this.getOrAddQRKeyring();\n      let accounts;\n      switch (page) {\n        case -1:\n          accounts = await keyring.getPreviousPage();\n          break;\n        case 1:\n          accounts = await keyring.getNextPage();\n          break;\n        default:\n          accounts = await keyring.getFirstPage();\n      }\n      return accounts.map((account: any) => {\n        return {\n          ...account,\n          balance: '0x0',\n        };\n      });\n    } catch (e) {\n      // TODO: Add test case for when keyring throws\n      /* istanbul ignore next */\n      throw new Error(`Unspecified error when connect QR Hardware, ${e}`);\n    }\n  }\n\n  async unlockQRHardwareWalletAccount(index: number): Promise<void> {\n    const keyring = await this.getOrAddQRKeyring();\n\n    keyring.setAccountToUnlock(index);\n    const oldAccounts = await this.#keyring.getAccounts();\n    await this.#keyring.addNewAccount(keyring);\n    const newAccounts = await this.#keyring.getAccounts();\n    this.updateIdentities(newAccounts);\n    newAccounts.forEach((address: string) => {\n      if (!oldAccounts.includes(address)) {\n        if (this.setAccountLabel) {\n          this.setAccountLabel(address, `${keyring.getName()} ${index}`);\n        }\n        this.setSelectedAddress(address);\n      }\n    });\n    await this.#keyring.persistAllKeyrings();\n  }\n\n  async getAccountKeyringType(account: string): Promise<KeyringTypes> {\n    return (await this.#keyring.getKeyringForAccount(account)).type;\n  }\n\n  async forgetQRDevice(): Promise<void> {\n    const keyring = await this.getOrAddQRKeyring();\n    keyring.forgetDevice();\n    const accounts = (await this.#keyring.getAccounts()) as string[];\n    accounts.forEach((account) => {\n      this.setSelectedAddress(account);\n    });\n    await this.#keyring.persistAllKeyrings();\n  }\n\n  /**\n   * Sync controller state with current keyring store\n   * and memStore states.\n   *\n   * @fires KeyringController:stateChange\n   */\n  #fullUpdate() {\n    this.update(() => ({\n      ...this.#keyring.store.getState(),\n      ...this.#keyring.memStore.getState(),\n    }));\n  }\n\n  /**\n   * Handle keyring lock event.\n   *\n   * @fires KeyringController:lock\n   */\n  #handleLock() {\n    this.messagingSystem.publish(`${name}:lock`);\n  }\n\n  /**\n   * Handle keyring unlock event.\n   *\n   * @fires KeyringController:unlock\n   */\n  #handleUnlock() {\n    this.messagingSystem.publish(`${name}:unlock`);\n  }\n\n  #getMemState(): KeyringControllerMemState {\n    return {\n      isUnlocked: this.state.isUnlocked,\n      keyrings: this.state.keyrings,\n      keyringTypes: this.state.keyringTypes,\n    };\n  }\n}\n\nexport default KeyringController;\n"]}
\ No newline at end of file
+{"version":3,"file":"KeyringController.js","sourceRoot":"","sources":["../src/KeyringController.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  addHexPrefix,\n  bufferToHex,\n  isValidPrivate,\n  toBuffer,\n  stripHexPrefix,\n  getBinarySize,\n} from 'ethereumjs-util';\nimport { isValidHexAddress } from '@metamask/controller-utils';\nimport {\n  normalize as normalizeAddress,\n  signTypedData,\n} from '@metamask/eth-sig-util';\nimport Wallet, { thirdparty as importers } from 'ethereumjs-wallet';\nimport { KeyringController as EthKeyringController } from '@metamask/eth-keyring-controller';\nimport { Mutex } from 'async-mutex';\nimport {\n  MetaMaskKeyring as QRKeyring,\n  IKeyringState as IQRKeyringState,\n} from '@keystonehq/metamask-airgapped-keyring';\nimport {\n  BaseControllerV2,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { PreferencesController } from '@metamask/preferences-controller';\nimport {\n  PersonalMessageParams,\n  TypedMessageParams,\n} from '@metamask/message-manager';\nimport type { Patch } from 'immer';\n\nconst name = 'KeyringController';\n\n/**\n * Available keyring types\n */\nexport enum KeyringTypes {\n  simple = 'Simple Key Pair',\n  hd = 'HD Key Tree',\n  qr = 'QR Hardware Wallet Device',\n}\n\n/**\n * @type KeyringObject\n *\n * Keyring object\n * @property type - Keyring type\n * @property accounts - Associated accounts\n * @function getAccounts - Get associated accounts\n */\nexport interface KeyringObject {\n  type: string;\n  accounts: string[];\n  getAccounts(): string[];\n}\n\n/**\n * @type KeyringControllerState\n *\n * Keyring controller state\n * @property vault - Encrypted string representing keyring data\n * @property isUnlocked - Whether vault is unlocked\n * @property keyringTypes - Account types\n * @property keyrings - Group of accounts\n * @property encryptionKey - Keyring encryption key\n * @property encryptionSalt - Keyring encryption salt\n */\nexport type KeyringControllerState = {\n  vault?: string;\n  isUnlocked: boolean;\n  keyringTypes: string[];\n  keyrings: Keyring[];\n  encryptionKey?: string;\n  encryptionSalt?: string;\n};\n\nexport type KeyringControllerMemState = Omit<\n  KeyringControllerState,\n  'vault' | 'encryptionKey' | 'encryptionSalt'\n>;\n\nexport type KeyringControllerGetStateAction = {\n  type: `${typeof name}:getState`;\n  handler: () => KeyringControllerState;\n};\n\nexport type KeyringControllerStateChangeEvent = {\n  type: `${typeof name}:stateChange`;\n  payload: [KeyringControllerState, Patch[]];\n};\n\nexport type KeyringControllerAccountRemovedEvent = {\n  type: `${typeof name}:accountRemoved`;\n  payload: [string];\n};\n\nexport type KeyringControllerLockEvent = {\n  type: `${typeof name}:lock`;\n  payload: [];\n};\n\nexport type KeyringControllerUnlockEvent = {\n  type: `${typeof name}:unlock`;\n  payload: [];\n};\n\nexport type KeyringControllerActions = KeyringControllerGetStateAction;\n\nexport type KeyringControllerEvents =\n  | KeyringControllerStateChangeEvent\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | KeyringControllerAccountRemovedEvent;\n\nexport type KeyringControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  KeyringControllerActions,\n  KeyringControllerEvents,\n  string,\n  string\n>;\n\nexport type KeyringControllerOptions = {\n  removeIdentity: PreferencesController['removeIdentity'];\n  syncIdentities: PreferencesController['syncIdentities'];\n  updateIdentities: PreferencesController['updateIdentities'];\n  setSelectedAddress: PreferencesController['setSelectedAddress'];\n  setAccountLabel?: PreferencesController['setAccountLabel'];\n  encryptor?: any;\n  keyringBuilders?: any[];\n  cacheEncryptionKey?: boolean;\n  messenger: KeyringControllerMessenger;\n  state?: Partial<KeyringControllerState>;\n};\n\n/**\n * @type Keyring\n *\n * Keyring object to return in fullUpdate\n * @property type - Keyring type\n * @property accounts - Associated accounts\n */\nexport type Keyring = {\n  accounts: string[];\n  type: string;\n};\n\n/**\n * A strategy for importing an account\n */\nexport enum AccountImportStrategy {\n  privateKey = 'privateKey',\n  json = 'json',\n}\n\n/**\n * The `signTypedMessage` version\n *\n * @see https://docs.metamask.io/guide/signing-data.html\n */\nexport enum SignTypedDataVersion {\n  V1 = 'V1',\n  V3 = 'V3',\n  V4 = 'V4',\n}\n\nconst defaultState: KeyringControllerState = {\n  isUnlocked: false,\n  keyringTypes: [],\n  keyrings: [],\n};\n\n/**\n * Controller responsible for establishing and managing user identity.\n *\n * This class is a wrapper around the `eth-keyring-controller` package. The\n * `eth-keyring-controller` manages the \"vault\", which is an encrypted store of private keys, and\n * it manages the wallet \"lock\" state. This wrapper class has convenience methods for interacting\n * with the internal keyring controller and handling certain complex operations that involve the\n * keyrings.\n */\nexport class KeyringController extends BaseControllerV2<\n  typeof name,\n  KeyringControllerState,\n  KeyringControllerMessenger\n> {\n  private mutex = new Mutex();\n\n  private removeIdentity: PreferencesController['removeIdentity'];\n\n  private syncIdentities: PreferencesController['syncIdentities'];\n\n  private updateIdentities: PreferencesController['updateIdentities'];\n\n  private setSelectedAddress: PreferencesController['setSelectedAddress'];\n\n  private setAccountLabel?: PreferencesController['setAccountLabel'];\n\n  #keyring: typeof EthKeyringController;\n\n  /**\n   * Creates a KeyringController instance.\n   *\n   * @param opts - Initial options used to configure this controller\n   * @param opts.removeIdentity - Remove the identity with the given address.\n   * @param opts.syncIdentities - Sync identities with the given list of addresses.\n   * @param opts.updateIdentities - Generate an identity for each address given that doesn't already have an identity.\n   * @param opts.setSelectedAddress - Set the selected address.\n   * @param opts.setAccountLabel - Set a new name for account.\n   * @param opts.encryptor - An optional object for defining encryption schemes.\n   * @param opts.keyringBuilders - Set a new name for account.\n   * @param opts.cacheEncryptionKey - Whether to cache or not encryption key.\n   * @param opts.messenger - A restricted controller messenger.\n   * @param opts.state - Initial state to set on this controller.\n   */\n  constructor({\n    removeIdentity,\n    syncIdentities,\n    updateIdentities,\n    setSelectedAddress,\n    setAccountLabel,\n    encryptor,\n    keyringBuilders,\n    cacheEncryptionKey,\n    messenger,\n    state,\n  }: KeyringControllerOptions) {\n    super({\n      name,\n      metadata: {\n        vault: { persist: true, anonymous: false },\n        isUnlocked: { persist: false, anonymous: true },\n        keyringTypes: { persist: false, anonymous: false },\n        keyrings: { persist: false, anonymous: false },\n        encryptionKey: { persist: false, anonymous: false },\n        encryptionSalt: { persist: false, anonymous: false },\n      },\n      messenger,\n      state: {\n        ...defaultState,\n        ...state,\n      },\n    });\n\n    this.#keyring = new EthKeyringController(\n      Object.assign(\n        { initState: state },\n        { encryptor, keyringBuilders, cacheEncryptionKey },\n      ),\n    );\n    this.#keyring.memStore.subscribe(this.#fullUpdate.bind(this));\n    this.#keyring.store.subscribe(this.#fullUpdate.bind(this));\n    this.#keyring.on('lock', this.#handleLock.bind(this));\n    this.#keyring.on('unlock', this.#handleUnlock.bind(this));\n\n    this.removeIdentity = removeIdentity;\n    this.syncIdentities = syncIdentities;\n    this.updateIdentities = updateIdentities;\n    this.setSelectedAddress = setSelectedAddress;\n    this.setAccountLabel = setAccountLabel;\n  }\n\n  /**\n    * Gets the internal keyring controller.\n  */\n  getEthKeyringController(): typeof EthKeyringController {\n    return this.#keyring;\n  }\n\n  /**\n   * Adds a new account to the default (first) HD seed phrase keyring.\n   *\n   * @param accountCount - Number of accounts before adding a new one, used to\n   * make the method idempotent.\n   * @returns Promise resolving to keyring current state and added account\n   * address.\n   */\n  async addNewAccount(accountCount?: number): Promise<{\n    keyringState: KeyringControllerMemState;\n    addedAccountAddress: string;\n  }> {\n    const primaryKeyring = this.#keyring.getKeyringsByType('HD Key Tree')[0];\n    /* istanbul ignore if */\n    if (!primaryKeyring) {\n      throw new Error('No HD keyring found');\n    }\n    const oldAccounts = await this.#keyring.getAccounts();\n\n    if (accountCount && oldAccounts.length !== accountCount) {\n      if (accountCount > oldAccounts.length) {\n        throw new Error('Account out of sequence');\n      }\n      // we return the account already existing at index `accountCount`\n      const primaryKeyringAccounts = await primaryKeyring.getAccounts();\n      return {\n        keyringState: this.#getMemState(),\n        addedAccountAddress: primaryKeyringAccounts[accountCount],\n      };\n    }\n\n    await this.#keyring.addNewAccount(primaryKeyring);\n    const newAccounts = await this.#keyring.getAccounts();\n\n    await this.verifySeedPhrase();\n\n    this.updateIdentities(newAccounts);\n    const addedAccountAddress = newAccounts.find(\n      (selectedAddress: string) => !oldAccounts.includes(selectedAddress),\n    );\n    return {\n      keyringState: this.#getMemState(),\n      addedAccountAddress,\n    };\n  }\n\n  /**\n   * Adds a new account to the default (first) HD seed phrase keyring without updating identities in preferences.\n   *\n   * @returns Promise resolving to current state when the account is added.\n   */\n  async addNewAccountWithoutUpdate(): Promise<KeyringControllerMemState> {\n    const primaryKeyring = this.#keyring.getKeyringsByType('HD Key Tree')[0];\n    /* istanbul ignore if */\n    if (!primaryKeyring) {\n      throw new Error('No HD keyring found');\n    }\n    await this.#keyring.addNewAccount(primaryKeyring);\n    await this.verifySeedPhrase();\n    return this.#getMemState();\n  }\n\n  /**\n   * Effectively the same as creating a new keychain then populating it\n   * using the given seed phrase.\n   *\n   * @param password - Password to unlock keychain.\n   * @param seed - A BIP39-compliant seed phrase as Uint8Array,\n   * either as a string or an array of UTF-8 bytes that represent the string.\n   * @returns Promise resolving to the restored keychain object.\n   */\n  async createNewVaultAndRestore(\n    password: string,\n    seed: Uint8Array,\n  ): Promise<KeyringControllerMemState> {\n    const releaseLock = await this.mutex.acquire();\n    if (!password || !password.length) {\n      throw new Error('Invalid password');\n    }\n\n    try {\n      this.updateIdentities([]);\n      await this.#keyring.createNewVaultAndRestore(password, seed);\n      this.updateIdentities(await this.#keyring.getAccounts());\n      return this.#getMemState();\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Create a new primary keychain and wipe any previous keychains.\n   *\n   * @param password - Password to unlock the new vault.\n   * @returns Newly-created keychain object.\n   */\n  async createNewVaultAndKeychain(password: string) {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const accounts = await this.getAccounts();\n      if (!accounts.length) {\n        await this.#keyring.createNewVaultAndKeychain(password);\n        this.updateIdentities(await this.getAccounts());\n      }\n      return this.#getMemState();\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Method to verify a given password validity. Throws an\n   * error if the password is invalid.\n   *\n   * @param password - Password of the keyring.\n   */\n  async verifyPassword(password: string) {\n    await this.#keyring.verifyPassword(password);\n  }\n\n  /**\n   * Returns the status of the vault.\n   *\n   * @returns Boolean returning true if the vault is unlocked.\n   */\n  isUnlocked(): boolean {\n    return this.state.isUnlocked;\n  }\n\n  /**\n   * Gets the seed phrase of the HD keyring.\n   *\n   * @param password - Password of the keyring.\n   * @returns Promise resolving to the seed phrase.\n   */\n  async exportSeedPhrase(password: string) {\n    await this.verifyPassword(password);\n    return this.#keyring.keyrings[0].mnemonic;\n  }\n\n  /**\n   * Gets the private key from the keyring controlling an address.\n   *\n   * @param password - Password of the keyring.\n   * @param address - Address to export.\n   * @returns Promise resolving to the private key for an address.\n   */\n  async exportAccount(password: string, address: string): Promise<string> {\n    await this.verifyPassword(password);\n    return this.#keyring.exportAccount(address);\n  }\n\n  /**\n   * Returns the public addresses of all accounts for the current keyring.\n   *\n   * @returns A promise resolving to an array of addresses.\n   */\n  getAccounts(): Promise<string[]> {\n    return this.#keyring.getAccounts();\n  }\n\n  /**\n   * Returns the currently initialized keyring that manages\n   * the specified `address` if one exists.\n   *\n   * @deprecated Use of this method is discouraged as actions executed directly on\n   * keyrings are not being reflected in the KeyringController state and not\n   * persisted in the vault.\n   * @param account - An account address.\n   * @returns Promise resolving to keyring of the `account` if one exists.\n   */\n  async getKeyringForAccount(account: string): Promise<unknown> {\n    return this.#keyring.getKeyringForAccount(account);\n  }\n\n  /**\n   * Returns all keyrings of the given type.\n   *\n   * @deprecated Use of this method is discouraged as actions executed directly on\n   * keyrings are not being reflected in the KeyringController state and not\n   * persisted in the vault.\n   * @param type - Keyring type name.\n   * @returns An array of keyrings of the given type.\n   */\n  getKeyringsByType(type: KeyringTypes | string): unknown[] {\n    return this.#keyring.getKeyringsByType(type);\n  }\n\n  /**\n   * Imports an account with the specified import strategy.\n   *\n   * @param strategy - Import strategy name.\n   * @param args - Array of arguments to pass to the underlying stategy.\n   * @throws Will throw when passed an unrecognized strategy.\n   * @returns Promise resolving to keyring current state and imported account\n   * address.\n   */\n  async importAccountWithStrategy(\n    strategy: AccountImportStrategy,\n    args: any[],\n  ): Promise<{\n    keyringState: KeyringControllerMemState;\n    importedAccountAddress: string;\n  }> {\n    let privateKey;\n    switch (strategy) {\n      case 'privateKey':\n        const [importedKey] = args;\n        if (!importedKey) {\n          throw new Error('Cannot import an empty key.');\n        }\n        const prefixed = addHexPrefix(importedKey);\n\n        let bufferedPrivateKey;\n        try {\n          bufferedPrivateKey = toBuffer(prefixed);\n        } catch {\n          throw new Error('Cannot import invalid private key.');\n        }\n\n        /* istanbul ignore if */\n        if (\n          !isValidPrivate(bufferedPrivateKey) ||\n          // ensures that the key is 64 bytes long\n          getBinarySize(prefixed) !== 64 + '0x'.length\n        ) {\n          throw new Error('Cannot import invalid private key.');\n        }\n\n        privateKey = stripHexPrefix(prefixed);\n        break;\n      case 'json':\n        let wallet;\n        const [input, password] = args;\n        try {\n          wallet = importers.fromEtherWallet(input, password);\n        } catch (e) {\n          wallet = wallet || (await Wallet.fromV3(input, password, true));\n        }\n        privateKey = bufferToHex(wallet.getPrivateKey());\n        break;\n      default:\n        throw new Error(`Unexpected import strategy: '${strategy}'`);\n    }\n    const newKeyring = await this.#keyring.addNewKeyring(KeyringTypes.simple, [\n      privateKey,\n    ]);\n    const accounts = await newKeyring.getAccounts();\n    const allAccounts = await this.#keyring.getAccounts();\n    this.updateIdentities(allAccounts);\n    return {\n      keyringState: this.#getMemState(),\n      importedAccountAddress: accounts[0],\n    };\n  }\n\n  /**\n   * Removes an account from keyring state.\n   *\n   * @param address - Address of the account to remove.\n   * @fires KeyringController:accountRemoved\n   * @returns Promise resolving current state when this account removal completes.\n   */\n  async removeAccount(address: string): Promise<KeyringControllerMemState> {\n    this.removeIdentity(address);\n    await this.#keyring.removeAccount(address);\n    this.messagingSystem.publish(`${name}:accountRemoved`, address);\n    return this.#getMemState();\n  }\n\n  /**\n   * Deallocates all secrets and locks the wallet.\n   *\n   * @returns Promise resolving to current state.\n   */\n  setLocked(): Promise<KeyringControllerMemState> {\n    return this.#keyring.setLocked();\n  }\n\n  /**\n   * Signs message by calling down into a specific keyring.\n   *\n   * @param messageParams - PersonalMessageParams object to sign.\n   * @returns Promise resolving to a signed message string.\n   */\n  signMessage(messageParams: PersonalMessageParams) {\n    if (!messageParams.data) {\n      throw new Error(\"Can't sign an empty message\");\n    }\n    return this.#keyring.signMessage(messageParams);\n  }\n\n  /**\n   * Signs personal message by calling down into a specific keyring.\n   *\n   * @param messageParams - PersonalMessageParams object to sign.\n   * @returns Promise resolving to a signed message string.\n   */\n  signPersonalMessage(messageParams: PersonalMessageParams) {\n    return this.#keyring.signPersonalMessage(messageParams);\n  }\n\n  /**\n   * Signs typed message by calling down into a specific keyring.\n   *\n   * @param messageParams - TypedMessageParams object to sign.\n   * @param version - Compatibility version EIP712.\n   * @throws Will throw when passed an unrecognized version.\n   * @returns Promise resolving to a signed message string or an error if any.\n   */\n  async signTypedMessage(\n    messageParams: TypedMessageParams,\n    version: SignTypedDataVersion,\n  ) {\n    try {\n      const address = normalizeAddress(messageParams.from);\n      if (!address || !isValidHexAddress(address)) {\n        throw new Error(\n          `Missing or invalid address ${JSON.stringify(messageParams.from)}`,\n        );\n      }\n      const qrKeyring = await this.getOrAddQRKeyring();\n      const qrAccounts = await qrKeyring.getAccounts();\n      if (\n        qrAccounts.findIndex(\n          (qrAddress: string) =>\n            qrAddress.toLowerCase() === address.toLowerCase(),\n        ) !== -1\n      ) {\n        const messageParamsClone = { ...messageParams };\n        if (\n          version !== SignTypedDataVersion.V1 &&\n          typeof messageParamsClone.data === 'string'\n        ) {\n          messageParamsClone.data = JSON.parse(messageParamsClone.data);\n        }\n        return this.#keyring.signTypedMessage(messageParamsClone, { version });\n      }\n\n      const { password } = this.#keyring;\n      const privateKey = await this.exportAccount(password, address);\n      const privateKeyBuffer = toBuffer(addHexPrefix(privateKey));\n      switch (version) {\n        case SignTypedDataVersion.V1:\n          return signTypedData({\n            privateKey: privateKeyBuffer,\n            data: messageParams.data as any,\n            version: SignTypedDataVersion.V1,\n          });\n        case SignTypedDataVersion.V3:\n          return signTypedData({\n            privateKey: privateKeyBuffer,\n            data: JSON.parse(messageParams.data as string),\n            version: SignTypedDataVersion.V3,\n          });\n        case SignTypedDataVersion.V4:\n          return signTypedData({\n            privateKey: privateKeyBuffer,\n            data: JSON.parse(messageParams.data as string),\n            version: SignTypedDataVersion.V4,\n          });\n        default:\n          throw new Error(`Unexpected signTypedMessage version: '${version}'`);\n      }\n    } catch (error) {\n      throw new Error(`Keyring Controller signTypedMessage: ${error}`);\n    }\n  }\n\n  /**\n   * Signs a transaction by calling down into a specific keyring.\n   *\n   * @param transaction - Transaction object to sign. Must be a `ethereumjs-tx` transaction instance.\n   * @param from - Address to sign from, should be in keychain.\n   * @returns Promise resolving to a signed transaction string.\n   */\n  signTransaction(transaction: unknown, from: string) {\n    return this.#keyring.signTransaction(transaction, from);\n  }\n\n  /**\n   * Attempts to decrypt the current vault and load its keyrings,\n   * using the given encryption key and salt.\n   *\n   * @param encryptionKey - Key to unlock the keychain.\n   * @param encryptionSalt - Salt to unlock the keychain.\n   * @returns Promise resolving to the current state.\n   */\n  async submitEncryptionKey(\n    encryptionKey: string,\n    encryptionSalt: string,\n  ): Promise<KeyringControllerMemState> {\n    await this.#keyring.submitEncryptionKey(encryptionKey, encryptionSalt);\n    return this.#getMemState();\n  }\n\n  /**\n   * Attempts to decrypt the current vault and load its keyrings,\n   * using the given password.\n   *\n   * @param password - Password to unlock the keychain.\n   * @returns Promise resolving to the current state.\n   */\n  async submitPassword(password: string): Promise<KeyringControllerMemState> {\n    await this.#keyring.submitPassword(password);\n    const accounts = await this.#keyring.getAccounts();\n    await this.syncIdentities(accounts);\n    return this.#getMemState();\n  }\n\n  /**\n   * Verifies the that the seed phrase restores the current keychain's accounts.\n   *\n   * @returns Promise resolving to the seed phrase as Uint8Array.\n   */\n  async verifySeedPhrase(): Promise<Uint8Array> {\n    const primaryKeyring = this.#keyring.getKeyringsByType(KeyringTypes.hd)[0];\n    /* istanbul ignore if */\n    if (!primaryKeyring) {\n      throw new Error('No HD keyring found.');\n    }\n\n    const seedWords = primaryKeyring.mnemonic;\n    const accounts = await primaryKeyring.getAccounts();\n    /* istanbul ignore if */\n    if (accounts.length === 0) {\n      throw new Error('Cannot verify an empty keyring.');\n    }\n\n    const hdKeyringBuilder = this.#keyring.getKeyringBuilderForType(\n      KeyringTypes.hd,\n    );\n    const hdKeyring = hdKeyringBuilder();\n    hdKeyring.deserialize({\n      mnemonic: seedWords,\n      numberOfAccounts: accounts.length,\n    });\n    const testAccounts = await hdKeyring.getAccounts();\n    /* istanbul ignore if */\n    if (testAccounts.length !== accounts.length) {\n      throw new Error('Seed phrase imported incorrect number of accounts.');\n    }\n\n    testAccounts.forEach((account: string, i: number) => {\n      /* istanbul ignore if */\n      if (account.toLowerCase() !== accounts[i].toLowerCase()) {\n        throw new Error('Seed phrase imported different accounts.');\n      }\n    });\n\n    return seedWords;\n  }\n\n  // QR Hardware related methods\n\n  /**\n   * Add qr hardware keyring.\n   *\n   * @returns The added keyring\n   */\n  private async addQRKeyring(): Promise<QRKeyring> {\n    return this.#keyring.addNewKeyring(KeyringTypes.qr);\n  }\n\n  /**\n   * Get qr hardware keyring.\n   *\n   * @returns The added keyring\n   */\n  async getOrAddQRKeyring(): Promise<QRKeyring> {\n    const keyring = this.#keyring.getKeyringsByType(KeyringTypes.qr)[0];\n    return keyring || (await this.addQRKeyring());\n  }\n\n  async restoreQRKeyring(serialized: any): Promise<void> {\n    (await this.getOrAddQRKeyring()).deserialize(serialized);\n    await this.#keyring.persistAllKeyrings();\n    this.updateIdentities(await this.#keyring.getAccounts());\n  }\n\n  async resetQRKeyringState(): Promise<void> {\n    (await this.getOrAddQRKeyring()).resetStore();\n  }\n\n  async getQRKeyringState(): Promise<IQRKeyringState> {\n    return (await this.getOrAddQRKeyring()).getMemStore();\n  }\n\n  async submitQRCryptoHDKey(cryptoHDKey: string): Promise<void> {\n    (await this.getOrAddQRKeyring()).submitCryptoHDKey(cryptoHDKey);\n  }\n\n  async submitQRCryptoAccount(cryptoAccount: string): Promise<void> {\n    (await this.getOrAddQRKeyring()).submitCryptoAccount(cryptoAccount);\n  }\n\n  async submitQRSignature(\n    requestId: string,\n    ethSignature: string,\n  ): Promise<void> {\n    (await this.getOrAddQRKeyring()).submitSignature(requestId, ethSignature);\n  }\n\n  async cancelQRSignRequest(): Promise<void> {\n    (await this.getOrAddQRKeyring()).cancelSignRequest();\n  }\n\n  /**\n   * Cancels qr keyring sync.\n   */\n  async cancelQRSynchronization(): Promise<void> {\n    // eslint-disable-next-line node/no-sync\n    (await this.getOrAddQRKeyring()).cancelSync();\n  }\n\n  async connectQRHardware(\n    page: number,\n  ): Promise<{ balance: string; address: string; index: number }[]> {\n    try {\n      const keyring = await this.getOrAddQRKeyring();\n      let accounts;\n      switch (page) {\n        case -1:\n          accounts = await keyring.getPreviousPage();\n          break;\n        case 1:\n          accounts = await keyring.getNextPage();\n          break;\n        default:\n          accounts = await keyring.getFirstPage();\n      }\n      return accounts.map((account: any) => {\n        return {\n          ...account,\n          balance: '0x0',\n        };\n      });\n    } catch (e) {\n      // TODO: Add test case for when keyring throws\n      /* istanbul ignore next */\n      throw new Error(`Unspecified error when connect QR Hardware, ${e}`);\n    }\n  }\n\n  async unlockQRHardwareWalletAccount(index: number): Promise<void> {\n    const keyring = await this.getOrAddQRKeyring();\n\n    keyring.setAccountToUnlock(index);\n    const oldAccounts = await this.#keyring.getAccounts();\n    await this.#keyring.addNewAccount(keyring);\n    const newAccounts = await this.#keyring.getAccounts();\n    this.updateIdentities(newAccounts);\n    newAccounts.forEach((address: string) => {\n      if (!oldAccounts.includes(address)) {\n        if (this.setAccountLabel) {\n          this.setAccountLabel(address, `${keyring.getName()} ${index}`);\n        }\n        this.setSelectedAddress(address);\n      }\n    });\n    await this.#keyring.persistAllKeyrings();\n  }\n\n  async getAccountKeyringType(account: string): Promise<KeyringTypes> {\n    return (await this.#keyring.getKeyringForAccount(account)).type;\n  }\n\n  async forgetQRDevice(): Promise<{\n    removedAccounts: string[],\n    remainingAccounts: string[]\n  }> {\n    /**\n      * ============================== PATCH INFORMATION ==============================\n      * This patch addresses an issue regarding the forget device functionality. It\n      * improves the logic  to correctly remove the QR accounts and update the \n      * identities as needed.\n      * ===============================================================================\n    */\n    const keyring = await this.getOrAddQRKeyring();\n    const allAccounts = (await this.#keyring.getAccounts()) as string[];\n    keyring.forgetDevice();\n    const remainingAccounts = (await this.#keyring.getAccounts()) as string[];\n    const removedAccounts = allAccounts.filter((address) => !remainingAccounts.includes(address));\n    this.updateIdentities(remainingAccounts);\n    await this.#keyring.persistAllKeyrings();\n    return { removedAccounts, remainingAccounts };\n  }\n\n  /**\n   * Sync controller state with current keyring store\n   * and memStore states.\n   *\n   * @fires KeyringController:stateChange\n   */\n  #fullUpdate() {\n    this.update(() => ({\n      ...this.#keyring.store.getState(),\n      ...this.#keyring.memStore.getState(),\n    }));\n  }\n\n  /**\n   * Handle keyring lock event.\n   *\n   * @fires KeyringController:lock\n   */\n  #handleLock() {\n    this.messagingSystem.publish(`${name}:lock`);\n  }\n\n  /**\n   * Handle keyring unlock event.\n   *\n   * @fires KeyringController:unlock\n   */\n  #handleUnlock() {\n    this.messagingSystem.publish(`${name}:unlock`);\n  }\n\n  #getMemState(): KeyringControllerMemState {\n    return {\n      isUnlocked: this.state.isUnlocked,\n      keyrings: this.state.keyrings,\n      keyringTypes: this.state.keyringTypes,\n    };\n  }\n}\n\nexport default KeyringController;\n"]}
\ No newline at end of file
