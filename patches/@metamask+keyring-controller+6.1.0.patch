diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts b/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts
index dff777b..a61b5ed 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts
@@ -1,3 +1,4 @@
+import { KeyringController as EthKeyringController } from '@metamask/eth-keyring-controller';
 import { MetaMaskKeyring as QRKeyring, IKeyringState as IQRKeyringState } from '@keystonehq/metamask-airgapped-keyring';
 import { BaseControllerV2, RestrictedControllerMessenger } from '@metamask/base-controller';
 import { PreferencesController } from '@metamask/preferences-controller';
@@ -141,6 +142,18 @@ export declare class KeyringController extends BaseControllerV2<typeof name, Key
      * @param opts.state - Initial state to set on this controller.
      */
     constructor({ removeIdentity, syncIdentities, updateIdentities, setSelectedAddress, setAccountLabel, encryptor, keyringBuilders, cacheEncryptionKey, messenger, state, }: KeyringControllerOptions);
+
+    /**
+     * ============================== PATCH INFORMATION ==============================
+     * This patch was added for ledger integration. It adds a new method to the
+     * KeyringController class that allows to get the internal eth keyring controller
+     * This is needed to be able to access the keyring controller from the ledger bridge.
+     * ===============================================================================
+     */
+    /**
+      * Gets the internal keyring controller.
+    */
+    getEthKeyringController(): typeof EthKeyringController;
     /**
      * Adds a new account to the default (first) HD seed phrase keyring.
      *
@@ -342,7 +355,10 @@ export declare class KeyringController extends BaseControllerV2<typeof name, Key
     }[]>;
     unlockQRHardwareWalletAccount(index: number): Promise<void>;
     getAccountKeyringType(account: string): Promise<KeyringTypes>;
-    forgetQRDevice(): Promise<void>;
+    forgetQRDevice(): Promise<{
+        removedAccounts: string[];
+        remainingAccounts: string[];
+    }>;
 }
 export default KeyringController;
 //# sourceMappingURL=KeyringController.d.ts.map
diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.js b/node_modules/@metamask/keyring-controller/dist/KeyringController.js
index c905cc0..16f35e4 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.js
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.js
@@ -139,6 +139,19 @@ class KeyringController extends base_controller_1.BaseControllerV2 {
         this.setSelectedAddress = setSelectedAddress;
         this.setAccountLabel = setAccountLabel;
     }
+    /**
+     * ============================== PATCH INFORMATION ==============================
+     * This patch was added for ledger integration. It adds a new method to the
+     * KeyringController class that allows to get the internal eth keyring controller
+     * This is needed to be able to access the keyring controller from the ledger bridge.
+     * ===============================================================================
+     */
+    /**
+      * Gets the internal keyring controller.
+    */
+    getEthKeyringController() {
+        return __classPrivateFieldGet(this, _KeyringController_keyring, "f");
+    }
     /**
      * Adds a new account to the default (first) HD seed phrase keyring.
      *
@@ -678,13 +691,21 @@ class KeyringController extends base_controller_1.BaseControllerV2 {
     }
     forgetQRDevice() {
         return __awaiter(this, void 0, void 0, function* () {
+            /**
+              * ============================== PATCH INFORMATION ==============================
+              * This patch addresses an issue regarding the forget device functionality. It
+              * improves the logic  to correctly remove the QR accounts and update the
+              * identities as needed.
+              * ===============================================================================
+            */
             const keyring = yield this.getOrAddQRKeyring();
+            const allAccounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
             keyring.forgetDevice();
-            const accounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
-            accounts.forEach((account) => {
-                this.setSelectedAddress(account);
-            });
+            const remainingAccounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
+            const removedAccounts = allAccounts.filter((address) => !remainingAccounts.includes(address));
+            this.updateIdentities(remainingAccounts);
             yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").persistAllKeyrings();
+            return { removedAccounts, remainingAccounts };
         });
     }
 }
