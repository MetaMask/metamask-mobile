diff --git a/node_modules/@metamask/approval-controller/dist/ApprovalController.d.ts b/node_modules/@metamask/approval-controller/dist/ApprovalController.d.ts
index 4d8ddf0..637caf8 100644
--- a/node_modules/@metamask/approval-controller/dist/ApprovalController.d.ts
+++ b/node_modules/@metamask/approval-controller/dist/ApprovalController.d.ts
@@ -33,9 +33,15 @@ export declare type ApprovalRequest<RequestData extends ApprovalRequestData> = {
     requestState: ApprovalRequestState;
 };
 declare type ShowApprovalRequest = () => void | Promise<void>;
+declare type ApprovalFlow = {
+    id: string;
+    loadingText: string | null;
+};
+export declare type ApprovalFlowState = ApprovalFlow;
 export declare type ApprovalControllerState = {
     pendingApprovals: Record<string, ApprovalRequest<Record<string, Json>>>;
     pendingApprovalCount: number;
+    approvalFlows: ApprovalFlowState[];
 };
 export declare type GetApprovalsState = {
     type: `${typeof controllerName}:getState`;
@@ -76,6 +82,22 @@ export declare type UpdateRequestState = {
     type: `${typeof controllerName}:updateRequestState`;
     handler: ApprovalController['updateRequestState'];
 };
+export declare type StartFlowOptions = OptionalField<ApprovalFlow, 'id' | 'loadingText'>;
+export declare type ApprovalFlowStartResult = ApprovalFlow;
+export declare type EndFlowOptions = Pick<ApprovalFlow, 'id'>;
+export declare type SetFlowLoadingTextOptions = ApprovalFlow;
+export declare type StartFlow = {
+    type: `${typeof controllerName}:startFlow`;
+    handler: ApprovalController['startFlow'];
+};
+export declare type EndFlow = {
+    type: `${typeof controllerName}:endFlow`;
+    handler: ApprovalController['endFlow'];
+};
+export declare type SetFlowLoadingText = {
+    type: `${typeof controllerName}:setFlowLoadingText`;
+    handler: ApprovalController['setFlowLoadingText'];
+};
 export declare type ApprovalControllerActions = GetApprovalsState | ClearApprovalRequests | AddApprovalRequest | HasApprovalRequest | AcceptRequest | RejectRequest | UpdateRequestState;
 export declare type ApprovalStateChange = {
     type: `${typeof controllerName}:stateChange`;
@@ -237,6 +259,30 @@ export declare class ApprovalController extends BaseControllerV2<typeof controll
      * @param opts.requestState - Additional data associated with the request
      */
     updateRequestState(opts: UpdateRequestStateOptions): void;
+    /**
+     * Starts a new approval flow.
+     *
+     * @param opts - Options bag.
+     * @param opts.id - The id of the approval flow.
+     * @param opts.loadingText - The loading text that will be associated to the approval flow.
+     * @returns The object containing the approval flow id.
+     */
+    startFlow(opts?: StartFlowOptions): ApprovalFlowStartResult;
+    /**
+     * Ends the current approval flow.
+     *
+     * @param opts - Options bag.
+     * @param opts.id - The id of the approval flow that will be finished.
+     */
+    endFlow({ id }: EndFlowOptions): void;
+    /**
+     * Sets the loading text for the approval flow.
+     *
+     * @param opts - Options bag.
+     * @param opts.id - The approval flow loading text that will be displayed.
+     * @param opts.loadingText - The loading text that will be associated to the approval flow.
+     */
+    setFlowLoadingText({ id, loadingText }: SetFlowLoadingTextOptions): void;
     /**
      * Implementation of add operation.
      *
diff --git a/node_modules/@metamask/approval-controller/dist/ApprovalController.js b/node_modules/@metamask/approval-controller/dist/ApprovalController.js
index f6428e6..6145dd6 100644
--- a/node_modules/@metamask/approval-controller/dist/ApprovalController.js
+++ b/node_modules/@metamask/approval-controller/dist/ApprovalController.js
@@ -9,12 +9,14 @@ const controllerName = 'ApprovalController';
 const stateMetadata = {
     pendingApprovals: { persist: false, anonymous: true },
     pendingApprovalCount: { persist: false, anonymous: false },
+    approvalFlows: { persist: false, anonymous: false },
 };
 const getAlreadyPendingMessage = (origin, type) => `Request of type '${type}' already pending for origin ${origin}. Please wait.`;
 const getDefaultState = () => {
     return {
         pendingApprovals: {},
         pendingApprovalCount: 0,
+        approvalFlows: [],
     };
 };
 /**
@@ -66,6 +68,9 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
         this.messagingSystem.registerActionHandler(`${controllerName}:acceptRequest`, this.accept.bind(this));
         this.messagingSystem.registerActionHandler(`${controllerName}:rejectRequest`, this.reject.bind(this));
         this.messagingSystem.registerActionHandler(`${controllerName}:updateRequestState`, this.updateRequestState.bind(this));
+        this.messagingSystem.registerActionHandler(`${controllerName}:startFlow`, this.startFlow.bind(this));
+        this.messagingSystem.registerActionHandler(`${controllerName}:endFlow`, this.endFlow.bind(this));
+        this.messagingSystem.registerActionHandler(`${controllerName}:setFlowLoadingText`, this.setFlowLoadingText.bind(this));
     }
     /**
      * Adds an approval request per the given arguments, calls the show approval
@@ -258,6 +263,58 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
                 opts.requestState;
         });
     }
+    /**
+     * Starts a new approval flow.
+     *
+     * @param opts - Options bag.
+     * @param opts.id - The id of the approval flow.
+     * @param opts.loadingText - The loading text that will be associated to the approval flow.
+     * @returns The object containing the approval flow id.
+     */
+    startFlow(opts = {}) {
+        var _a, _b;
+        const id = (_a = opts.id) !== null && _a !== void 0 ? _a : (0, nanoid_1.nanoid)();
+        const loadingText = (_b = opts.loadingText) !== null && _b !== void 0 ? _b : null;
+        this.update((draftState) => {
+            draftState.approvalFlows.push({ id, loadingText });
+        });
+        this._showApprovalRequest();
+        return { id, loadingText };
+    }
+    /**
+     * Ends the current approval flow.
+     *
+     * @param opts - Options bag.
+     * @param opts.id - The id of the approval flow that will be finished.
+     */
+    endFlow({ id }) {
+        if (!this.state.approvalFlows.length) {
+            throw new errors_1.NoApprovalFlowsError();
+        }
+        const currentFlow = this.state.approvalFlows.slice(-1)[0];
+        if (id !== currentFlow.id) {
+            throw new errors_1.EndInvalidFlowError(id, this.state.approvalFlows.map((flow) => flow.id));
+        }
+        this.update((draftState) => {
+            draftState.approvalFlows.pop();
+        });
+    }
+    /**
+     * Sets the loading text for the approval flow.
+     *
+     * @param opts - Options bag.
+     * @param opts.id - The approval flow loading text that will be displayed.
+     * @param opts.loadingText - The loading text that will be associated to the approval flow.
+     */
+    setFlowLoadingText({ id, loadingText }) {
+        const flowIndex = this.state.approvalFlows.findIndex((flow) => flow.id === id);
+        if (flowIndex === -1) {
+            throw new errors_1.MissingApprovalFlowError(id);
+        }
+        this.update((draftState) => {
+            draftState.approvalFlows[flowIndex].loadingText = loadingText;
+        });
+    }
     /**
      * Implementation of add operation.
      *
diff --git a/node_modules/@metamask/approval-controller/dist/errors.d.ts b/node_modules/@metamask/approval-controller/dist/errors.d.ts
index f127df8..a7d475a 100644
--- a/node_modules/@metamask/approval-controller/dist/errors.d.ts
+++ b/node_modules/@metamask/approval-controller/dist/errors.d.ts
@@ -1,4 +1,13 @@
 export declare class ApprovalRequestNotFoundError extends Error {
     constructor(id: string);
 }
+export declare class NoApprovalFlowsError extends Error {
+    constructor();
+}
+export declare class EndInvalidFlowError extends Error {
+    constructor(id: string, flowIds: string[]);
+}
+export declare class MissingApprovalFlowError extends Error {
+    constructor(id: string);
+}
 //# sourceMappingURL=errors.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/errors.js b/node_modules/@metamask/approval-controller/dist/errors.js
index e9263a6..31be752 100644
--- a/node_modules/@metamask/approval-controller/dist/errors.js
+++ b/node_modules/@metamask/approval-controller/dist/errors.js
@@ -1,10 +1,28 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.ApprovalRequestNotFoundError = void 0;
+exports.MissingApprovalFlowError = exports.EndInvalidFlowError = exports.NoApprovalFlowsError = exports.ApprovalRequestNotFoundError = void 0;
 class ApprovalRequestNotFoundError extends Error {
     constructor(id) {
         super(`Approval request with id '${id}' not found.`);
     }
 }
 exports.ApprovalRequestNotFoundError = ApprovalRequestNotFoundError;
+class NoApprovalFlowsError extends Error {
+    constructor() {
+        super(`No approval flows found.`);
+    }
+}
+exports.NoApprovalFlowsError = NoApprovalFlowsError;
+class EndInvalidFlowError extends Error {
+    constructor(id, flowIds) {
+        super(`Attempted to end flow with id '${id}' which does not match current flow with id '${flowIds.slice(-1)[0]}'. All Flows: ${flowIds.join(', ')}`);
+    }
+}
+exports.EndInvalidFlowError = EndInvalidFlowError;
+class MissingApprovalFlowError extends Error {
+    constructor(id) {
+        super(`No approval flows found with id '${id}'.`);
+    }
+}
+exports.MissingApprovalFlowError = MissingApprovalFlowError;
 //# sourceMappingURL=errors.js.map
\ No newline at end of file
