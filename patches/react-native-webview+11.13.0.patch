diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/CustomCookieJar.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/CustomCookieJar.java
new file mode 100644
index 0000000..f4a6af9
--- /dev/null
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/CustomCookieJar.java
@@ -0,0 +1,78 @@
+package com.reactnativecommunity.webview;
+import android.util.Log;
+import android.webkit.CookieManager;
+import android.webkit.ValueCallback;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import okhttp3.Cookie;
+import okhttp3.CookieJar;
+import okhttp3.HttpUrl;
+
+class CustomCookieJar implements CookieJar {
+  private Worker worker;
+  private CookieManager cookieManager;
+
+  public CustomCookieJar() {
+    worker = new Worker();
+    cookieManager = this.getCookieManager();
+  }
+
+  private CookieManager getCookieManager() {
+    CookieManager cookieManager = CookieManager.getInstance();
+    cookieManager.setAcceptCookie(true);
+    return cookieManager;
+  }
+
+  @Override
+  public void saveFromResponse(HttpUrl url, List<Cookie> cookies) {
+      worker.execute(() -> {
+        try {
+
+          for (Cookie cookie : cookies) {
+            String _url = url.toString();
+            String _cookie = cookie.toString();
+            cookieManager.setCookie(_url, _cookie, new ValueCallback<Boolean>() {
+              @Override
+              public void onReceiveValue(Boolean value) {}
+            });
+            cookieManager.flush();
+          }
+        } catch (Exception e) {
+          e.printStackTrace();
+        }
+      });
+  }
+
+  @Override
+  public List<Cookie> loadForRequest(HttpUrl httpUrl) {
+    List<Cookie> cookieList = new ArrayList<Cookie>();
+    try {
+
+      if (cookieManager.hasCookies()) {
+        String response = cookieManager.getCookie(httpUrl.toString());
+
+        if (response != null) {
+          String[] browserCookies = response.split(";");
+
+          for (String cookieStr : browserCookies) {
+            Cookie cookie = Cookie.parse(httpUrl, cookieStr);
+            if (cookie == null) {
+              continue;
+            }
+            cookieList.add(cookie);
+          }
+        }
+
+      }
+      return cookieList;
+    } catch (Exception e) {
+      e.printStackTrace();
+      return cookieList;
+    }
+  }
+}
diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
index f743bbc..9865074 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
@@ -5,6 +5,7 @@ import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.DownloadManager;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
 import android.graphics.Bitmap;
@@ -24,12 +25,17 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewGroup.LayoutParams;
 import android.view.WindowManager;
+import android.view.inputmethod.InputMethodManager;
 import android.webkit.ConsoleMessage;
 import android.webkit.CookieManager;
 import android.webkit.DownloadListener;
 import android.webkit.GeolocationPermissions;
 import android.webkit.JavascriptInterface;
+import android.webkit.JsPromptResult;
+import android.webkit.JsResult;
 import android.webkit.RenderProcessGoneDetail;
+import android.webkit.ServiceWorkerClient;
+import android.webkit.ServiceWorkerController;
 import android.webkit.SslErrorHandler;
 import android.webkit.PermissionRequest;
 import android.webkit.URLUtil;
@@ -88,18 +94,45 @@ import com.reactnativecommunity.webview.events.TopRenderProcessGoneEvent;
 import org.json.JSONException;
 import org.json.JSONObject;

+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
+import java.lang.reflect.Field;
+import java.net.CookieStore;
+import java.net.HttpCookie;
+import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.URLEncoder;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+import java.nio.charset.UnsupportedCharsetException;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicReference;

+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+
+import android.view.inputmethod.BaseInputConnection;
+import android.view.inputmethod.EditorInfo;
+import android.view.inputmethod.InputConnection;
+
 /**
  * Manages instances of {@link WebView}
  * <p>
@@ -137,13 +170,19 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
   public static final int COMMAND_LOAD_URL = 7;
   public static final int COMMAND_FOCUS = 8;

+  protected static final String MIME_UNKNOWN = "application/octet-stream";
+  protected static final String HTML_ENCODING = "UTF-8";
+  protected static final long BYTES_IN_MEGABYTE = 1000000;
+
   // android commands
   public static final int COMMAND_CLEAR_FORM_DATA = 1000;
   public static final int COMMAND_CLEAR_CACHE = 1001;
   public static final int COMMAND_CLEAR_HISTORY = 1002;

   protected static final String REACT_CLASS = "RNCWebView";
-  protected static final String HTML_ENCODING = "UTF-8";
+
+  protected static final String HEADER_CONTENT_TYPE = "content-type";
+
   protected static final String HTML_MIME_TYPE = "text/html";
   protected static final String JAVASCRIPT_INTERFACE = "ReactNativeWebView";
   protected static final String HTTP_METHOD_POST = "POST";
@@ -155,13 +194,19 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {

   protected RNCWebChromeClient mWebChromeClient = null;
   protected boolean mAllowsFullscreenVideo = false;
-  protected @Nullable String mUserAgent = null;
-  protected @Nullable String mUserAgentWithApplicationName = null;
+  protected @Nullable String RNUserAgent = null;
+  protected @Nullable String RNUserAgentWithApplicationName = null;
+  protected static String deviceUserAgent;
+
+  protected static OkHttpClient httpClient;

   public RNCWebViewManager() {
-    mWebViewConfig = new WebViewConfig() {
-      public void configWebView(WebView webView) {
-      }
+    mWebViewConfig = webView -> {
+      httpClient = new OkHttpClient.Builder()
+        .cookieJar(new CustomCookieJar())
+        .followRedirects(false)
+        .followSslRedirects(false)
+        .build();
     };
   }

@@ -182,6 +227,7 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
   @TargetApi(Build.VERSION_CODES.LOLLIPOP)
   protected WebView createViewInstance(ThemedReactContext reactContext) {
     RNCWebView webView = createRNCWebViewInstance(reactContext);
+    deviceUserAgent = webView.getSettings().getUserAgentString();
     setupWebChromeClient(reactContext, webView);
     reactContext.addLifecycleEventListener(webView);
     mWebViewConfig.configWebView(webView);
@@ -247,9 +293,107 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
       }
     });

+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+        ServiceWorkerController swController = ServiceWorkerController.getInstance();
+        swController.setServiceWorkerClient(new ServiceWorkerClient() {
+            @Override
+            public WebResourceResponse shouldInterceptRequest(WebResourceRequest request) {
+              String method = request.getMethod();
+
+              if (method.equals("GET")) {
+                WebResourceResponse response = RNCWebViewManager.this.shouldInterceptRequest(request, false, webView);
+                if (response != null) {
+                  return response;
+                }
+              }
+
+              return super.shouldInterceptRequest(request);
+            }
+        });
+    }
+
     return webView;
   }

+  private Boolean urlStringLooksInvalid(String urlString) {
+    return urlString == null ||
+        urlString.trim().equals("") ||
+        !(urlString.startsWith("http") && !urlString.startsWith("www")) ||
+        urlString.contains("|");
+  }
+
+  public static Boolean responseRequiresJSInjection(Response response) {
+    if (response.isRedirect()) {
+      return false;
+    }
+    final String contentTypeAndCharset = response.header(HEADER_CONTENT_TYPE, MIME_UNKNOWN);
+    final int responseCode = response.code();
+
+    boolean contentTypeIsHtml = contentTypeAndCharset.startsWith(HTML_MIME_TYPE);
+    boolean responseCodeIsInjectible = responseCode == 200;
+    String responseBody = "";
+
+    if (contentTypeIsHtml && responseCodeIsInjectible) {
+      try {
+        assert response.body() != null;
+        responseBody = response.peekBody(BYTES_IN_MEGABYTE).string();
+      } catch (IOException e) {
+        e.printStackTrace();
+        return false;
+      }
+
+
+      boolean responseBodyContainsHTMLLikeString = responseBody.matches("[\\S\\s]*<[a-z]+[\\S\\s]*>[\\S\\s]*");
+      return responseBodyContainsHTMLLikeString;
+    } else {
+      return false;
+    }
+  }
+
+  public WebResourceResponse shouldInterceptRequest(WebResourceRequest request, Boolean onlyMainFrame, RNCWebView webView) {
+    Uri url = request.getUrl();
+    String urlStr = url.toString();
+
+    if (onlyMainFrame && !request.isForMainFrame() ||
+      urlStringLooksInvalid(urlStr)) {
+        return null;
+    }
+
+    String _userAgent;
+
+    if (RNUserAgent != null) {
+      _userAgent = RNUserAgent;
+    } else {
+      _userAgent = deviceUserAgent;
+    }
+
+    try {
+      Request req = new Request.Builder()
+      .url(urlStr)
+      .header("User-Agent", _userAgent)
+      .build();
+
+      Response response = httpClient.newCall(req).execute();
+
+      if (!responseRequiresJSInjection(response)) {
+        return null;
+      }
+
+      InputStream is = response.body().byteStream();
+      MediaType contentType = response.body().contentType();
+      Charset charset = contentType != null ? contentType.charset(StandardCharsets.UTF_8) : StandardCharsets.UTF_8;
+
+      RNCWebView reactWebView = (RNCWebView) webView;
+      if (response.code() == HttpURLConnection.HTTP_OK) {
+      is = new InputStreamWithInjectedJS(is, reactWebView.injectedJSBeforeContentLoaded, charset);
+      }
+
+      return new WebResourceResponse("text/html", charset.name(), is);
+    } catch (IOException e) {
+      return null;
+    }
+  }
+
   @ReactProp(name = "javaScriptEnabled")
   public void setJavaScriptEnabled(WebView view, boolean enabled) {
     view.getSettings().setJavaScriptEnabled(enabled);
@@ -387,9 +531,9 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
   @ReactProp(name = "userAgent")
   public void setUserAgent(WebView view, @Nullable String userAgent) {
     if (userAgent != null) {
-      mUserAgent = userAgent;
+      RNUserAgent = userAgent;
     } else {
-      mUserAgent = null;
+      RNUserAgent = null;
     }
     this.setUserAgentString(view);
   }
@@ -399,19 +543,19 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     if(applicationName != null) {
       if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
         String defaultUserAgent = WebSettings.getDefaultUserAgent(view.getContext());
-        mUserAgentWithApplicationName = defaultUserAgent + " " + applicationName;
+        RNUserAgentWithApplicationName = defaultUserAgent + " " + applicationName;
       }
     } else {
-      mUserAgentWithApplicationName = null;
+      RNUserAgentWithApplicationName = null;
     }
     this.setUserAgentString(view);
   }

   protected void setUserAgentString(WebView view) {
-    if(mUserAgent != null) {
-      view.getSettings().setUserAgentString(mUserAgent);
-    } else if(mUserAgentWithApplicationName != null) {
-      view.getSettings().setUserAgentString(mUserAgentWithApplicationName);
+    if(RNUserAgent != null) {
+      view.getSettings().setUserAgentString(RNUserAgent);
+    } else if(RNUserAgentWithApplicationName != null) {
+      view.getSettings().setUserAgentString(RNUserAgentWithApplicationName);
     } else if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
       // handle unsets of `userAgent` prop as long as device is >= API 17
       view.getSettings().setUserAgentString(WebSettings.getDefaultUserAgent(view.getContext()));
@@ -842,13 +986,116 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     }
   }

-  protected static class RNCWebViewClient extends WebViewClient {
+  public static class InputStreamWithInjectedJS extends InputStream {
+    private InputStream pageIS;
+    private InputStream scriptIS;
+    private Charset charset;
+    private static final String REACT_CLASS = "InputStreamWithInjectedJS";
+    private static Map<Charset, String> script = new HashMap<>();
+
+    private boolean hasJS = false;
+    private boolean headWasFound = false;
+    private boolean scriptWasInjected = false;
+
+    private int lowercaseD = 100;
+    private int closingTag = 62;
+    private boolean hasClosingHead = false;
+
+    private StringBuffer contentBuffer = new StringBuffer();
+
+    @SuppressLint("LongLogTag")
+    private static Charset getCharset(String charsetName) {
+        Charset cs = StandardCharsets.UTF_8;
+        try {
+            if (charsetName != null) {
+                cs = Charset.forName(charsetName);
+            }
+        } catch (UnsupportedCharsetException e) {
+            Log.d(REACT_CLASS, "wrong charset: " + charsetName);
+        }
+
+        return cs;
+    }
+
+    private static InputStream getScript(Charset charset) {
+        String js = script.get(charset);
+        if (js == null) {
+            String defaultJs = script.get(StandardCharsets.UTF_8);
+            js = new String(defaultJs.getBytes(StandardCharsets.UTF_8), charset);
+            script.put(charset, js);
+        }
+
+        return new ByteArrayInputStream(js.getBytes(charset));
+    }
+
+    InputStreamWithInjectedJS(InputStream is, String js, Charset charset) {
+        if (js == null) {
+            this.pageIS = is;
+        } else {
+            this.hasJS = true;
+            this.charset = charset;
+            Charset cs = StandardCharsets.UTF_8;
+            String jsScript = "<script>" + js + "</script>";
+            script.put(cs, jsScript);
+            this.pageIS = is;
+        }
+    }
+
+    @Override
+    public int read() throws IOException {
+        if (scriptWasInjected || !hasJS) {
+            return pageIS.read();
+        }
+
+        if (!scriptWasInjected && headWasFound) {
+            int nextByte;
+            if (!hasClosingHead) {
+              nextByte = pageIS.read();
+              if (nextByte != closingTag) {
+                return nextByte;
+              }
+              hasClosingHead = true;
+              return nextByte;
+            }
+            nextByte = scriptIS.read();
+            if (nextByte == -1) {
+                scriptIS.close();
+                scriptWasInjected = true;
+                return pageIS.read();
+            } else {
+                return nextByte;
+            }
+        }
+
+        if (!headWasFound) {
+            int nextByte = pageIS.read();
+            contentBuffer.append((char) nextByte);
+            int bufferLength = contentBuffer.length();
+            if (nextByte == lowercaseD && bufferLength >= 5) {
+                if (contentBuffer.substring(bufferLength - 5).equals("<head")) {
+                    this.scriptIS = getScript(this.charset);
+                    headWasFound = true;
+                }
+            }
+
+            return nextByte;
+        }
+
+        return pageIS.read();
+    }
+
+  }
+
+  protected class RNCWebViewClient extends WebViewClient {

+    protected static final String REACT_CLASS = "RNCWebViewClient";
     protected boolean mLastLoadFailed = false;
     protected @Nullable
     ReadableArray mUrlPrefixesForDefaultIntent;
     protected RNCWebView.ProgressChangedFilter progressChangedFilter = null;
     protected @Nullable String ignoreErrFailedForThisURL = null;
+    //Allow list is used to support specific deeplinks in the webview.
+    private final String[] DEEPLINK_ALLOW_LIST = new String[] {"https://twitter.com/i/wallet/verify"};

     public void setIgnoreErrFailedForThisURL(@Nullable String url) {
       ignoreErrFailedForThisURL = url;
@@ -865,16 +1112,17 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {

         emitFinishEvent(webView, url);
       }
+      if(Objects.nonNull(mWebChromeClient)) mWebChromeClient.blockJsDuringLoading = false;
     }

+
+
     @Override
     public void onPageStarted(WebView webView, String url, Bitmap favicon) {
       super.onPageStarted(webView, url, favicon);
+      if(Objects.nonNull(mWebChromeClient)) mWebChromeClient.blockJsDuringLoading = true;
       mLastLoadFailed = false;

-      RNCWebView reactWebView = (RNCWebView) webView;
-      reactWebView.callInjectedJavaScriptBeforeContentLoaded();
-
       ((RNCWebView) webView).dispatchEvent(
         webView,
         new TopLoadingStartEvent(
@@ -882,6 +1130,20 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
           createWebViewEvent(webView, url)));
     }

+    @Override
+    public WebResourceResponse shouldInterceptRequest(WebView webView, WebResourceRequest request) {
+        String method = request.getMethod();
+
+      if (method.equals("GET")) {
+        WebResourceResponse response = RNCWebViewManager.this.shouldInterceptRequest(request, true, (RNCWebView)webView);
+        if (response != null) {
+          return response;
+        }
+      }
+
+        return super.shouldInterceptRequest(webView, request);
+    }
+
     @Override
     public boolean shouldOverrideUrlLoading(WebView view, String url) {
       final RNCWebView rncWebView = (RNCWebView) view;
@@ -891,7 +1153,6 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
         final Pair<Integer, AtomicReference<ShouldOverrideCallbackState>> lock = RNCWebViewModule.shouldOverrideUrlLoadingLock.getNewLock();
         final int lockIdentifier = lock.first;
         final AtomicReference<ShouldOverrideCallbackState> lockObject = lock.second;
-
         final WritableMap event = createWebViewEvent(view, url);
         event.putInt("lockIdentifier", lockIdentifier);
         rncWebView.sendDirectMessage("onShouldStartLoadWithRequest", event);
@@ -919,6 +1180,17 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
         RNCWebViewModule.shouldOverrideUrlLoadingLock.removeLock(lockIdentifier);

         return shouldOverride;
+      } else if (url != null && Arrays.asList(DEEPLINK_ALLOW_LIST).contains(url)) {
+        // This case is used to support deeplinking within the webview. We are limiting this but
+        // if more links are to be supported we should consider a more scaleable solution. That is
+        // secure and scaleable.
+        Intent intent = new Intent(Intent.ACTION_VIEW);
+        intent.setData(Uri.parse(url));
+        if(intent.resolveActivity(view.getContext().getPackageManager()) != null) {
+          view.getContext().startActivity(intent);
+          return true;
+        } else
+          return false;
       } else {
         FLog.w(TAG, "Couldn't use blocking synchronous call for onShouldStartLoadWithRequest due to debugging or missing Catalyst instance, falling back to old event-and-load.");
         progressChangedFilter.setWaitingForCommandLoadUrl(true);
@@ -934,10 +1206,29 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     @TargetApi(Build.VERSION_CODES.N)
     @Override
     public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
+      if(Objects.nonNull(mWebChromeClient)) mWebChromeClient.blockJsDuringLoading = true;
+
+      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+
+             /*
+              * In order to follow redirects properly, we return null in interceptRequest().
+              * Doing this breaks the web3 injection on the resulting page, so we have to reload to
+              * make sure web3 is available.
+              * */
+
+          if (request.isForMainFrame() && request.isRedirect()) {
+              view.loadUrl(request.getUrl().toString());
+              return true;
+          }
+      }
+
       final String url = request.getUrl().toString();
+
       return this.shouldOverrideUrlLoading(view, url);
     }

+
+
     @Override
     public void onReceivedSslError(final WebView webView, final SslErrorHandler handler, final SslError error) {
         // onReceivedSslError is called for most requests, per Android docs: https://developer.android.com/reference/android/webkit/WebViewClient#onReceivedSslError(android.webkit.WebView,%2520android.webkit.SslErrorHandler,%2520android.net.http.SslError)
@@ -1138,6 +1429,7 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {

     protected View mVideoView;
     protected WebChromeClient.CustomViewCallback mCustomViewCallback;
+    protected boolean blockJsDuringLoading = true; //This boolean block JS prompts and alerts from displaying during loading

     /*
      * - Permissions -
@@ -1402,6 +1694,15 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
       }
     }

+    @Override
+    public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {
+      if(blockJsDuringLoading) {
+        result.cancel();
+        return true;
+      } else
+        return super.onJsPrompt(view, url, message, defaultValue, result);
+    }
+
     @Override
     public void onHostPause() { }

@@ -1447,6 +1748,13 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     protected boolean nestedScrollEnabled = false;
     protected ProgressChangedFilter progressChangedFilter;

+    /**
+     * Taken from EditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING We can't use that
+     * value directly as it was only added on Oreo, but we can apply the value
+     * anyway.
+     */
+    private static final int IME_FLAG_NO_PERSONALIZED_LEARNING = 0x1000000;
+
     /**
      * WebView must be created with an context of the current activity
      * <p>
@@ -1475,6 +1783,42 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
       this.nestedScrollEnabled = nestedScrollEnabled;
     }

+    @Override
+    public InputConnection onCreateInputConnection(EditorInfo outAttrs) {
+      InputConnection inputConnection;
+      if (!usingGoogleKeyboard()) {
+        inputConnection = super.onCreateInputConnection(outAttrs);
+      } else {
+        inputConnection = new BaseInputConnection(this, false);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+          outAttrs.imeOptions = EditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING;
+        } else {
+          // Cover OS versions below Oreo
+          outAttrs.imeOptions = IME_FLAG_NO_PERSONALIZED_LEARNING;
+        }
+      }
+
+      return inputConnection;
+    }
+
+    public boolean usingGoogleKeyboard() {
+      final InputMethodManager richImm =
+        (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+
+      boolean isKeyboard = false;
+
+      final Field field;
+      try {
+        field = richImm.getClass().getDeclaredField("mCurId");
+        field.setAccessible(true);
+        Object value = field.get(richImm);
+        isKeyboard = Objects.equals(value, "com.google.android.inputmethod.latin/com.android.inputmethod.latin.LatinIME");
+      } catch (IllegalAccessException | NoSuchFieldException e) {
+        return false;
+      }
+      return isKeyboard;
+    }
+
     @Override
     public void onHostResume() {
       // do nothing
@@ -1533,6 +1877,8 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
       }
     }

+
+
     public @Nullable
     RNCWebViewClient getRNCWebViewClient() {
       return mRNCWebViewClient;
diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/Worker.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/Worker.java
new file mode 100644
index 0000000..b9581ac
--- /dev/null
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/Worker.java
@@ -0,0 +1,21 @@
+package com.reactnativecommunity.webview;
+
+import android.os.Handler;
+import android.os.HandlerThread;
+
+class Worker extends HandlerThread {
+  private Handler handler;
+
+  private static final String TAG = "WORKER";
+
+  public Worker() {
+    super(TAG);
+    start();
+    handler = new Handler(getLooper());
+  }
+
+  public Worker execute(Runnable task) {
+    handler.post(task);
+    return this;
+  }
+}
\ No newline at end of file
diff --git a/node_modules/react-native-webview/apple/RNCWebView.m b/node_modules/react-native-webview/apple/RNCWebView.m
index 28c078a..4c8a7fc 100644
--- a/node_modules/react-native-webview/apple/RNCWebView.m
+++ b/node_modules/react-native-webview/apple/RNCWebView.m
@@ -851,11 +851,13 @@ - (void)                    webView:(WKWebView *)webView
 - (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler
 {
 #if !TARGET_OS_OSX
-  UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:message preferredStyle:UIAlertControllerStyleAlert];
-  [alert addAction:[UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
-    completionHandler();
-  }]];
-  [[self topViewController] presentViewController:alert animated:YES completion:NULL];
+  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.7 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
+    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:message preferredStyle:UIAlertControllerStyleAlert];
+    [alert addAction:[UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
+      completionHandler();
+    }]];
+    [[self topViewController] presentViewController:alert animated:YES completion:NULL];
+  });
 #else
   NSAlert *alert = [[NSAlert alloc] init];
   [alert setMessageText:message];
