diff --git a/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.cjs b/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.cjs
index 0e8feeb..5eae8f9 100644
--- a/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.cjs
+++ b/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.cjs
@@ -39,9 +39,18 @@ class CronjobController extends base_controller_1.BaseController {
         this.messagingSystem.subscribe('SnapController:snapEnabled', this.#handleSnapEnabledEvent);
         this.messagingSystem.subscribe('SnapController:snapDisabled', this.#handleSnapDisabledEvent);
         this.messagingSystem.subscribe('SnapController:snapUpdated', this.#handleSnapUpdatedEvent);
+        this.messagingSystem.registerActionHandler(`${controllerName}:init`, (...args) => this.init(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:schedule`, (...args) => this.schedule(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:cancel`, (...args) => this.cancel(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:get`, (...args) => this.get(...args));
+    }
+    /**
+     * Initialize the CronjobController.
+     *
+     * This starts the daily timer, clears out expired events
+     * and reschedules any remaining events.
+     */
+    init() {
         this.#start();
         this.#clear();
         this.#reschedule();
@@ -182,6 +191,12 @@ class CronjobController extends base_controller_1.BaseController {
         if (ms > exports.DAILY_TIMEOUT) {
             return;
         }
+        // When an event is supposed to be scheduled close to the current time
+        // we may end up needing to execute immediately instead.
+        if (ms <= 0) {
+            this.#execute(event);
+            return;
+        }
         const timer = new Timer_1.Timer(ms);
         timer.start(() => {
             this.#execute(event);
@@ -262,6 +277,8 @@ class CronjobController extends base_controller_1.BaseController {
      * @param snap - Basic Snap information.
      */
     #handleSnapInstalledEvent = (snap) => {
+        // In case of local Snaps, they may already have cronjobs that should be cleared.
+        this.unregister(snap.id);
         this.register(snap.id);
     };
     /**
diff --git a/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.d.cts b/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.d.cts
index 99f72dd..bac97d5 100644
--- a/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.d.cts
+++ b/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.d.cts
@@ -5,6 +5,14 @@ import type { BackgroundEvent, SnapId } from "@metamask/snaps-sdk";
 import type { HandleSnapRequest, SnapDisabled, SnapEnabled, SnapInstalled, SnapUninstalled, SnapUpdated } from "../index.cjs";
 export type CronjobControllerGetStateAction = ControllerGetStateAction<typeof controllerName, CronjobControllerState>;
 export type CronjobControllerStateChangeEvent = ControllerStateChangeEvent<typeof controllerName, CronjobControllerState>;
+/**
+ * Initialise the CronjobController. This should be called after all controllers
+ * are created.
+ */
+export type CronjobControllerInitAction = {
+    type: `${typeof controllerName}:init`;
+    handler: CronjobController['init'];
+};
 export type Schedule = {
     type: `${typeof controllerName}:schedule`;
     handler: CronjobController['schedule'];
@@ -17,7 +25,7 @@ export type Get = {
     type: `${typeof controllerName}:get`;
     handler: CronjobController['get'];
 };
-export type CronjobControllerActions = CronjobControllerGetStateAction | HandleSnapRequest | GetPermissions | Schedule | Cancel | Get;
+export type CronjobControllerActions = CronjobControllerGetStateAction | HandleSnapRequest | GetPermissions | Schedule | Cancel | Get | CronjobControllerInitAction;
 export type CronjobControllerEvents = CronjobControllerStateChangeEvent | SnapInstalled | SnapUninstalled | SnapUpdated | SnapEnabled | SnapDisabled;
 export type CronjobControllerMessenger = RestrictedMessenger<typeof controllerName, CronjobControllerActions, CronjobControllerEvents, CronjobControllerActions['type'], CronjobControllerEvents['type']>;
 export declare const DAILY_TIMEOUT: number;
@@ -71,6 +79,13 @@ declare const controllerName = "CronjobController";
 export declare class CronjobController extends BaseController<typeof controllerName, CronjobControllerState, CronjobControllerMessenger> {
     #private;
     constructor({ messenger, state }: CronjobControllerArgs);
+    /**
+     * Initialize the CronjobController.
+     *
+     * This starts the daily timer, clears out expired events
+     * and reschedules any remaining events.
+     */
+    init(): void;
     /**
      * Schedule a non-recurring background event.
      *
diff --git a/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.d.mts b/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.d.mts
index 40ba2e1..ae0fb31 100644
--- a/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.d.mts
+++ b/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.d.mts
@@ -5,6 +5,14 @@ import type { BackgroundEvent, SnapId } from "@metamask/snaps-sdk";
 import type { HandleSnapRequest, SnapDisabled, SnapEnabled, SnapInstalled, SnapUninstalled, SnapUpdated } from "../index.mjs";
 export type CronjobControllerGetStateAction = ControllerGetStateAction<typeof controllerName, CronjobControllerState>;
 export type CronjobControllerStateChangeEvent = ControllerStateChangeEvent<typeof controllerName, CronjobControllerState>;
+/**
+ * Initialise the CronjobController. This should be called after all controllers
+ * are created.
+ */
+export type CronjobControllerInitAction = {
+    type: `${typeof controllerName}:init`;
+    handler: CronjobController['init'];
+};
 export type Schedule = {
     type: `${typeof controllerName}:schedule`;
     handler: CronjobController['schedule'];
@@ -17,7 +25,7 @@ export type Get = {
     type: `${typeof controllerName}:get`;
     handler: CronjobController['get'];
 };
-export type CronjobControllerActions = CronjobControllerGetStateAction | HandleSnapRequest | GetPermissions | Schedule | Cancel | Get;
+export type CronjobControllerActions = CronjobControllerGetStateAction | HandleSnapRequest | GetPermissions | Schedule | Cancel | Get | CronjobControllerInitAction;
 export type CronjobControllerEvents = CronjobControllerStateChangeEvent | SnapInstalled | SnapUninstalled | SnapUpdated | SnapEnabled | SnapDisabled;
 export type CronjobControllerMessenger = RestrictedMessenger<typeof controllerName, CronjobControllerActions, CronjobControllerEvents, CronjobControllerActions['type'], CronjobControllerEvents['type']>;
 export declare const DAILY_TIMEOUT: number;
@@ -71,6 +79,13 @@ declare const controllerName = "CronjobController";
 export declare class CronjobController extends BaseController<typeof controllerName, CronjobControllerState, CronjobControllerMessenger> {
     #private;
     constructor({ messenger, state }: CronjobControllerArgs);
+    /**
+     * Initialize the CronjobController.
+     *
+     * This starts the daily timer, clears out expired events
+     * and reschedules any remaining events.
+     */
+    init(): void;
     /**
      * Schedule a non-recurring background event.
      *
diff --git a/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.mjs b/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.mjs
index e3f025c..421ecb8 100644
--- a/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.mjs
+++ b/node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.mjs
@@ -36,9 +36,18 @@ export class CronjobController extends BaseController {
         this.messagingSystem.subscribe('SnapController:snapEnabled', this.#handleSnapEnabledEvent);
         this.messagingSystem.subscribe('SnapController:snapDisabled', this.#handleSnapDisabledEvent);
         this.messagingSystem.subscribe('SnapController:snapUpdated', this.#handleSnapUpdatedEvent);
+        this.messagingSystem.registerActionHandler(`${controllerName}:init`, (...args) => this.init(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:schedule`, (...args) => this.schedule(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:cancel`, (...args) => this.cancel(...args));
         this.messagingSystem.registerActionHandler(`${controllerName}:get`, (...args) => this.get(...args));
+    }
+    /**
+     * Initialize the CronjobController.
+     *
+     * This starts the daily timer, clears out expired events
+     * and reschedules any remaining events.
+     */
+    init() {
         this.#start();
         this.#clear();
         this.#reschedule();
@@ -179,6 +188,12 @@ export class CronjobController extends BaseController {
         if (ms > DAILY_TIMEOUT) {
             return;
         }
+        // When an event is supposed to be scheduled close to the current time
+        // we may end up needing to execute immediately instead.
+        if (ms <= 0) {
+            this.#execute(event);
+            return;
+        }
         const timer = new Timer(ms);
         timer.start(() => {
             this.#execute(event);
@@ -259,6 +274,8 @@ export class CronjobController extends BaseController {
      * @param snap - Basic Snap information.
      */
     #handleSnapInstalledEvent = (snap) => {
+        // In case of local Snaps, they may already have cronjobs that should be cleared.
+        this.unregister(snap.id);
         this.register(snap.id);
     };
     /**
