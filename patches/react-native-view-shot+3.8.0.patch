diff --git a/node_modules/react-native-view-shot/android/src/main/java/fr/greweb/reactnativeviewshot/RNViewShotModule.java b/node_modules/react-native-view-shot/android/src/main/java/fr/greweb/reactnativeviewshot/RNViewShotModule.java
index 9faf7da..d5eac90 100644
--- a/node_modules/react-native-view-shot/android/src/main/java/fr/greweb/reactnativeviewshot/RNViewShotModule.java
+++ b/node_modules/react-native-view-shot/android/src/main/java/fr/greweb/reactnativeviewshot/RNViewShotModule.java
@@ -1,11 +1,15 @@
 
 package fr.greweb.reactnativeviewshot;
 
+import static com.facebook.react.uimanager.common.UIManagerType.FABRIC;
+
 import android.app.Activity;
 import android.content.Context;
 import android.net.Uri;
 import android.os.AsyncTask;
 import androidx.annotation.NonNull;
+import androidx.annotation.OptIn;
+
 import android.util.DisplayMetrics;
 import android.util.Log;
 
@@ -16,7 +20,9 @@ import com.facebook.react.bridge.ReactContext;
 import com.facebook.react.bridge.ReactContextBaseJavaModule;
 import com.facebook.react.bridge.ReactMethod;
 import com.facebook.react.bridge.ReadableMap;
-import com.facebook.react.uimanager.UIManagerModule;
+import com.facebook.react.common.annotations.UnstableReactNativeAPI;
+import com.facebook.react.fabric.FabricUIManager;
+import com.facebook.react.uimanager.UIManagerHelper;
 
 import java.io.File;
 import java.io.FilenameFilter;
@@ -71,6 +77,7 @@ public class RNViewShotModule extends ReactContextBaseJavaModule {
     }
 
     @ReactMethod
+    @OptIn(markerClass = UnstableReactNativeAPI.class)
     public void captureRef(int tag, ReadableMap options, Promise promise) {
         final ReactApplicationContext context = getReactApplicationContext();
         final DisplayMetrics dm = context.getResources().getDisplayMetrics();
@@ -99,7 +106,11 @@ public class RNViewShotModule extends ReactContextBaseJavaModule {
             }
 
             final Activity activity = getCurrentActivity();
-            final UIManagerModule uiManager = this.reactContext.getNativeModule(UIManagerModule.class);
+            final FabricUIManager uiManager = (FabricUIManager) UIManagerHelper.getUIManager(this.reactContext, FABRIC);
+
+            if (uiManager == null) {
+                throw new Exception("Doesn't find valid ui manager");
+            }
 
             uiManager.addUIBlock(new ViewShot(
                     tag, extension, imageFormat, quality,
diff --git a/node_modules/react-native-view-shot/android/src/main/java/fr/greweb/reactnativeviewshot/ViewShot.java b/node_modules/react-native-view-shot/android/src/main/java/fr/greweb/reactnativeviewshot/ViewShot.java
index 20e29e2..2832856 100644
--- a/node_modules/react-native-view-shot/android/src/main/java/fr/greweb/reactnativeviewshot/ViewShot.java
+++ b/node_modules/react-native-view-shot/android/src/main/java/fr/greweb/reactnativeviewshot/ViewShot.java
@@ -26,8 +26,9 @@ import android.widget.ScrollView;
 
 import com.facebook.react.bridge.Promise;
 import com.facebook.react.bridge.ReactApplicationContext;
-import com.facebook.react.uimanager.NativeViewHierarchyManager;
-import com.facebook.react.uimanager.UIBlock;
+import com.facebook.react.common.annotations.UnstableReactNativeAPI;
+import com.facebook.react.fabric.interop.UIBlock;
+import com.facebook.react.fabric.interop.UIBlockViewResolver;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -46,7 +47,6 @@ import java.util.Set;
 import java.util.WeakHashMap;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 import java.util.zip.Deflater;
 
@@ -54,7 +54,7 @@ import javax.annotation.Nullable;
 
 import static android.view.View.VISIBLE;
 
-/**
+@UnstableReactNativeAPI /**
  * Snapshot utility class allow to screenshot a view.
  */
 public class ViewShot implements UIBlock {
@@ -80,6 +80,47 @@ public class ViewShot implements UIBlock {
      */
     private static final int SURFACE_VIEW_READ_PIXELS_TIMEOUT = 5;
 
+    @Override
+    public void execute(@NonNull UIBlockViewResolver uiBlockViewResolver) {
+        executor.execute(new Runnable () {
+            @Override
+            public void run() {
+                try {
+                    final View view;
+
+                    if (tag == -1) {
+                        view = currentActivity.getWindow().getDecorView().findViewById(android.R.id.content);
+                    } else {
+                        view = uiBlockViewResolver.resolveView(tag);
+                    }
+
+                    if (view == null) {
+                        Log.e(TAG, "No view found with reactTag: " + tag, new AssertionError());
+                        promise.reject(ERROR_UNABLE_TO_SNAPSHOT, "No view found with reactTag: " + tag);
+                        return;
+                    }
+
+                    final ReusableByteArrayOutputStream stream = new ReusableByteArrayOutputStream(outputBuffer);
+                    stream.setSize(proposeSize(view));
+                    outputBuffer = stream.innerBuffer();
+
+                    if (Results.TEMP_FILE.equals(result) && Formats.RAW == format) {
+                        saveToRawFileOnDevice(view);
+                    } else if (Results.TEMP_FILE.equals(result) && Formats.RAW != format) {
+                        saveToTempFileOnDevice(view);
+                    } else if (Results.BASE_64.equals(result) || Results.ZIP_BASE_64.equals(result)) {
+                        saveToBase64String(view);
+                    } else if (Results.DATA_URI.equals(result)) {
+                        saveToDataUriString(view);
+                    }
+                } catch (final Throwable ex) {
+                    Log.e(TAG, "Failed to capture view snapshot", ex);
+                    promise.reject(ERROR_UNABLE_TO_SNAPSHOT, "Failed to capture view snapshot");
+                }
+            }
+        });
+    }
+
     @SuppressWarnings("WeakerAccess")
     @IntDef({Formats.JPEG, Formats.PNG, Formats.WEBP, Formats.RAW})
     public @interface Formats {
@@ -180,47 +221,6 @@ public class ViewShot implements UIBlock {
     }
     //endregion
 
-    //region Overrides
-    @Override
-    public void execute(final NativeViewHierarchyManager nativeViewHierarchyManager) {
-        executor.execute(new Runnable () {
-            @Override
-            public void run() {
-                try {
-                    final View view;
-
-                    if (tag == -1) {
-                        view = currentActivity.getWindow().getDecorView().findViewById(android.R.id.content);
-                    } else {
-                        view = nativeViewHierarchyManager.resolveView(tag);
-                    }
-
-                    if (view == null) {
-                        Log.e(TAG, "No view found with reactTag: " + tag, new AssertionError());
-                        promise.reject(ERROR_UNABLE_TO_SNAPSHOT, "No view found with reactTag: " + tag);
-                        return;
-                    }
-
-                    final ReusableByteArrayOutputStream stream = new ReusableByteArrayOutputStream(outputBuffer);
-                    stream.setSize(proposeSize(view));
-                    outputBuffer = stream.innerBuffer();
-
-                    if (Results.TEMP_FILE.equals(result) && Formats.RAW == format) {
-                        saveToRawFileOnDevice(view);
-                    } else if (Results.TEMP_FILE.equals(result) && Formats.RAW != format) {
-                        saveToTempFileOnDevice(view);
-                    } else if (Results.BASE_64.equals(result) || Results.ZIP_BASE_64.equals(result)) {
-                        saveToBase64String(view);
-                    } else if (Results.DATA_URI.equals(result)) {
-                        saveToDataUriString(view);
-                    }
-                } catch (final Throwable ex) {
-                    Log.e(TAG, "Failed to capture view snapshot", ex);
-                    promise.reject(ERROR_UNABLE_TO_SNAPSHOT, "Failed to capture view snapshot");
-                }
-            }
-        });
-    }
     //endregion
 
     //region Implementation
