diff --git a/node_modules/@metamask/rpc-methods/dist/restricted/getBip32Entropy.js b/node_modules/@metamask/rpc-methods/dist/restricted/getBip32Entropy.js
index 876db63..7545a2e 100644
--- a/node_modules/@metamask/rpc-methods/dist/restricted/getBip32Entropy.js
+++ b/node_modules/@metamask/rpc-methods/dist/restricted/getBip32Entropy.js
@@ -19,6 +19,7 @@ const targetKey = 'snap_getBip32Entropy';
  * @throws If the value is invalid.
  */
 function validatePath(value) {
+    console.log('Snaps/ getBip32Entropy validatePath called with caveat: ', value);
     (0, utils_1.assertStruct)(value, snaps_utils_1.Bip32EntropyStruct, 'Invalid BIP-32 entropy path definition', eth_rpc_errors_1.ethErrors.rpc.invalidParams);
 }
 /**
@@ -29,6 +30,7 @@ function validatePath(value) {
  * @throws If the value is invalid.
  */
 function validateCaveatPaths(caveat) {
+    console.log('Snaps/ getBip32Entropy validateCaveatPaths called with caveat: ', caveat);
     (0, utils_1.assertStruct)(caveat, (0, superstruct_1.type)({ value: (0, superstruct_1.size)((0, superstruct_1.array)(snaps_utils_1.Bip32EntropyStruct), 1, Infinity) }), 'Invalid BIP-32 entropy caveat', eth_rpc_errors_1.ethErrors.rpc.internal);
 }
 exports.validateCaveatPaths = validateCaveatPaths;
@@ -114,11 +116,13 @@ exports.getBip32EntropyCaveatSpecifications = {
  * @throws If the params are invalid.
  */
 function getBip32EntropyImplementation({ getMnemonic, getUnlockPromise, }) {
+    console.log('Snaps/ getBip32Entropy getBip32EntropyImplementation called');
     return async function getBip32Entropy(args) {
         await getUnlockPromise(true);
         // `args.params` is validated by the decorator, so it's safe to assert here.
         // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
         const params = args.params;
+        console.log('Snaps/ getBip32Entropy getBip32EntropyImplementation creating node with params: ', params);
         const node = await key_tree_1.SLIP10Node.fromDerivationPath({
             curve: params.curve,
             derivationPath: [
@@ -128,6 +132,7 @@ function getBip32EntropyImplementation({ getMnemonic, getUnlockPromise, }) {
                     .map((index) => `bip32:${index}`),
             ],
         });
+        console.log('Snaps/ getBip32Entropy getBip32EntropyImplementation finished with node: ', node);
         return node.toJSON();
     };
 }
diff --git a/node_modules/@metamask/rpc-methods/dist/restricted/getBip32PublicKey.js b/node_modules/@metamask/rpc-methods/dist/restricted/getBip32PublicKey.js
index 6f8ab7b..d0379f1 100644
--- a/node_modules/@metamask/rpc-methods/dist/restricted/getBip32PublicKey.js
+++ b/node_modules/@metamask/rpc-methods/dist/restricted/getBip32PublicKey.js
@@ -21,6 +21,7 @@ exports.Bip32PublicKeyArgsStruct = (0, snaps_utils_1.bip32entropy)((0, superstru
  * @throws If the value is invalid.
  */
 function validateCaveatPaths(caveat) {
+    console.log('Snaps/ getBip32PublicKey validateCaveatPaths called with caveat: ', caveat);
     (0, utils_1.assertStruct)(caveat, (0, superstruct_1.type)({ value: snaps_utils_1.SnapGetBip32EntropyPermissionsStruct }), 'Invalid BIP-32 public key caveat', eth_rpc_errors_1.ethErrors.rpc.internal);
 }
 exports.validateCaveatPaths = validateCaveatPaths;
@@ -68,10 +69,12 @@ exports.getBip32PublicKeyBuilder = Object.freeze({
  * @throws If the params are invalid.
  */
 function getBip32PublicKeyImplementation({ getMnemonic, getUnlockPromise, }) {
+    console.log('Snaps/ getBip32PublicKey getBip32PublicKeyImplementation called');
     return async function getBip32PublicKey(args) {
         await getUnlockPromise(true);
         (0, utils_1.assertStruct)(args.params, exports.Bip32PublicKeyArgsStruct, 'Invalid BIP-32 public key params', eth_rpc_errors_1.ethErrors.rpc.invalidParams);
         const { params } = args;
+        console.log('Snaps/ getBip32PublicKey getBip32PublicKeyImplementation creating node with', params);
         const node = await key_tree_1.SLIP10Node.fromDerivationPath({
             curve: params.curve,
             derivationPath: [
@@ -81,9 +84,12 @@ function getBip32PublicKeyImplementation({ getMnemonic, getUnlockPromise, }) {
                     .map((index) => `bip32:${index}`),
             ],
         });
+        console.log('Snaps/ getBip32PublicKey getBip32PublicKeyImplementation finished with node', node);
         if (params.compressed) {
+            console.log('Snaps/ getBip32PublicKey getBip32PublicKeyImplementation returning compressed node', node.compressedPublicKey);
             return node.compressedPublicKey;
         }
+        console.log('Snaps/ getBip32PublicKey getBip32PublicKeyImplementation returning publicKey', node.publicKey);
         return node.publicKey;
     };
 }
