diff --git a/node_modules/@metamask/bridge-status-controller/dist/bridge-status-controller.cjs b/node_modules/@metamask/bridge-status-controller/dist/bridge-status-controller.cjs
index 1e16c96..e015c2b 100644
--- a/node_modules/@metamask/bridge-status-controller/dist/bridge-status-controller.cjs
+++ b/node_modules/@metamask/bridge-status-controller/dist/bridge-status-controller.cjs
@@ -408,7 +408,7 @@ class BridgeStatusController extends (0, polling_controller_1.StaticIntervalPoll
             }
             return finalTransactionMeta;
         });
-        _BridgeStatusController_handleApprovalTx.set(this, async (isBridgeTx, quoteResponse) => {
+        _BridgeStatusController_handleApprovalTx.set(this, async (isBridgeTx, quoteResponse, requireApproval) => {
             const { approval } = quoteResponse;
             if (approval) {
                 const approveTx = async () => {
@@ -418,6 +418,7 @@ class BridgeStatusController extends (0, polling_controller_1.StaticIntervalPoll
                             ? transaction_controller_1.TransactionType.bridgeApproval
                             : transaction_controller_1.TransactionType.swapApproval,
                         trade: approval,
+                        requireApproval,
                     });
                     await (0, transaction_1.handleLineaDelay)(quoteResponse);
                     return approvalTxMeta;
@@ -612,8 +613,12 @@ class BridgeStatusController extends (0, polling_controller_1.StaticIntervalPoll
                         return tradeMeta;
                     }
                     // Set approval time and id if an approval tx is needed
-                    const approvalTxMeta = await __classPrivateFieldGet(this, _BridgeStatusController_handleApprovalTx, "f").call(this, isBridgeTx, quoteResponse);
+                    const approvalTxMeta = await __classPrivateFieldGet(this, _BridgeStatusController_handleApprovalTx, "f").call(this, isBridgeTx, quoteResponse, requireApproval);
                     approvalTxId = approvalTxMeta?.id;
+                    if (requireApproval) {
+                        const mobileHardwareWalletDelay = new Promise((resolve) => setTimeout(resolve, 1000));
+                        await mobileHardwareWalletDelay;
+                    }
                     return await __classPrivateFieldGet(this, _BridgeStatusController_handleEvmTransaction, "f").call(this, {
                         transactionType: isBridgeTx
                             ? transaction_controller_1.TransactionType.bridge
