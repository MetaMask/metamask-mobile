diff --git a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.js b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.js
index d97bab3..8072d64 100644
--- a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.js
+++ b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.js
@@ -1,10 +1,10 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
 
-var _chunkV4ZO3F2Sjs = require('./chunk-V4ZO3F2S.js');
+var _chunkT4WDZHE7js = require('./chunk-T4WDZHE7.js');
 require('./chunk-Z4BLTVTB.js');
 
 
 
-exports.AccountTrackerController = _chunkV4ZO3F2Sjs.AccountTrackerController; exports.default = _chunkV4ZO3F2Sjs.AccountTrackerController_default;
+exports.AccountTrackerController = _chunkT4WDZHE7js.AccountTrackerController; exports.default = _chunkT4WDZHE7js.AccountTrackerController_default;
 //# sourceMappingURL=AccountTrackerController.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.mjs b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.mjs
index b3b8ea6..3cf30ff 100644
--- a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.mjs
@@ -1,7 +1,7 @@
 import {
   AccountTrackerController,
   AccountTrackerController_default
-} from "./chunk-PAJTKWEC.mjs";
+} from "./chunk-ZUICS5OS.mjs";
 import "./chunk-XUI43LEZ.mjs";
 export {
   AccountTrackerController,
diff --git a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.js b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.js
index 5808fc4..f7fd4a1 100644
--- a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.js
+++ b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.js
@@ -3,10 +3,10 @@
 
 
 
-var _chunk4ODKGWYQjs = require('./chunk-4ODKGWYQ.js');
+var _chunkEXQ3O54Ljs = require('./chunk-EXQ3O54L.js');
 require('./chunk-U3DJJN4X.js');
-require('./chunk-B5YY22QQ.js');
 require('./chunk-BOTVAG4A.js');
+require('./chunk-B5YY22QQ.js');
 require('./chunk-NEXY7SE2.js');
 require('./chunk-Z4BLTVTB.js');
 
@@ -14,5 +14,5 @@ require('./chunk-Z4BLTVTB.js');
 
 
 
-exports.AssetsContractController = _chunk4ODKGWYQjs.AssetsContractController; exports.MISSING_PROVIDER_ERROR = _chunk4ODKGWYQjs.MISSING_PROVIDER_ERROR; exports.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = _chunk4ODKGWYQjs.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID; exports.default = _chunk4ODKGWYQjs.AssetsContractController_default;
+exports.AssetsContractController = _chunkEXQ3O54Ljs.AssetsContractController; exports.MISSING_PROVIDER_ERROR = _chunkEXQ3O54Ljs.MISSING_PROVIDER_ERROR; exports.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = _chunkEXQ3O54Ljs.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID; exports.default = _chunkEXQ3O54Ljs.AssetsContractController_default;
 //# sourceMappingURL=AssetsContractController.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.mjs b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.mjs
index 80b9876..ec2c789 100644
--- a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.mjs
@@ -3,10 +3,10 @@ import {
   AssetsContractController_default,
   MISSING_PROVIDER_ERROR,
   SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID
-} from "./chunk-MHN7CJCZ.mjs";
+} from "./chunk-HFJC7WCX.mjs";
 import "./chunk-ASA5RLBY.mjs";
-import "./chunk-D3K5MPMW.mjs";
 import "./chunk-LZ5ZGQEX.mjs";
+import "./chunk-D3K5MPMW.mjs";
 import "./chunk-Q5JRBGWO.mjs";
 import "./chunk-XUI43LEZ.mjs";
 export {
diff --git a/node_modules/@metamask/assets-controllers/dist/NftController.js b/node_modules/@metamask/assets-controllers/dist/NftController.js
index 3f550b0..2eb9c0b 100644
--- a/node_modules/@metamask/assets-controllers/dist/NftController.js
+++ b/node_modules/@metamask/assets-controllers/dist/NftController.js
@@ -2,7 +2,7 @@
 
 
 
-var _chunkLAU6ZDZRjs = require('./chunk-LAU6ZDZR.js');
+var _chunkPTBS4GL6js = require('./chunk-PTBS4GL6.js');
 require('./chunk-RGHTNZQ6.js');
 require('./chunk-NEXY7SE2.js');
 require('./chunk-Z4BLTVTB.js');
@@ -10,5 +10,5 @@ require('./chunk-Z4BLTVTB.js');
 
 
 
-exports.NftController = _chunkLAU6ZDZRjs.NftController; exports.default = _chunkLAU6ZDZRjs.NftController_default; exports.getDefaultNftState = _chunkLAU6ZDZRjs.getDefaultNftState;
+exports.NftController = _chunkPTBS4GL6js.NftController; exports.default = _chunkPTBS4GL6js.NftController_default; exports.getDefaultNftState = _chunkPTBS4GL6js.getDefaultNftState;
 //# sourceMappingURL=NftController.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/NftController.mjs b/node_modules/@metamask/assets-controllers/dist/NftController.mjs
index 663c75f..5c0c209 100644
--- a/node_modules/@metamask/assets-controllers/dist/NftController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/NftController.mjs
@@ -2,7 +2,7 @@ import {
   NftController,
   NftController_default,
   getDefaultNftState
-} from "./chunk-46UZDIXW.mjs";
+} from "./chunk-I44BWCJJ.mjs";
 import "./chunk-CP3HC7AQ.mjs";
 import "./chunk-Q5JRBGWO.mjs";
 import "./chunk-XUI43LEZ.mjs";
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.js b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.js
index accbd67..da7a78f 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.js
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.js
@@ -2,11 +2,11 @@
 
 
 
-var _chunkLD4GC7ORjs = require('./chunk-LD4GC7OR.js');
+var _chunkZNKU4YJ7js = require('./chunk-ZNKU4YJ7.js');
 require('./chunk-Z4BLTVTB.js');
 
 
 
 
-exports.TokenBalancesController = _chunkLD4GC7ORjs.TokenBalancesController; exports.default = _chunkLD4GC7ORjs.TokenBalancesController_default; exports.getDefaultTokenBalancesState = _chunkLD4GC7ORjs.getDefaultTokenBalancesState;
+exports.TokenBalancesController = _chunkZNKU4YJ7js.TokenBalancesController; exports.default = _chunkZNKU4YJ7js.TokenBalancesController_default; exports.getDefaultTokenBalancesState = _chunkZNKU4YJ7js.getDefaultTokenBalancesState;
 //# sourceMappingURL=TokenBalancesController.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs
index 76fa250..f278d78 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs
@@ -2,7 +2,7 @@ import {
   TokenBalancesController,
   TokenBalancesController_default,
   getDefaultTokenBalancesState
-} from "./chunk-4LY47RPI.mjs";
+} from "./chunk-ASBEJZFL.mjs";
 import "./chunk-XUI43LEZ.mjs";
 export {
   TokenBalancesController,
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.js b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.js
index fd595fc..90e3dd0 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.js
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.js
@@ -4,7 +4,7 @@
 
 
 
-var _chunkHDI4L2DDjs = require('./chunk-HDI4L2DD.js');
+var _chunkZHDWNR3Ljs = require('./chunk-ZHDWNR3L.js');
 require('./chunk-NEXY7SE2.js');
 require('./chunk-Z4BLTVTB.js');
 
@@ -13,5 +13,5 @@ require('./chunk-Z4BLTVTB.js');
 
 
 
-exports.STATIC_MAINNET_TOKEN_LIST = _chunkHDI4L2DDjs.STATIC_MAINNET_TOKEN_LIST; exports.TokenDetectionController = _chunkHDI4L2DDjs.TokenDetectionController; exports.controllerName = _chunkHDI4L2DDjs.controllerName; exports.default = _chunkHDI4L2DDjs.TokenDetectionController_default; exports.isEqualCaseInsensitive = _chunkHDI4L2DDjs.isEqualCaseInsensitive;
+exports.STATIC_MAINNET_TOKEN_LIST = _chunkZHDWNR3Ljs.STATIC_MAINNET_TOKEN_LIST; exports.TokenDetectionController = _chunkZHDWNR3Ljs.TokenDetectionController; exports.controllerName = _chunkZHDWNR3Ljs.controllerName; exports.default = _chunkZHDWNR3Ljs.TokenDetectionController_default; exports.isEqualCaseInsensitive = _chunkZHDWNR3Ljs.isEqualCaseInsensitive;
 //# sourceMappingURL=TokenDetectionController.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs
index 1f6fb40..5b44b2a 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs
@@ -4,7 +4,7 @@ import {
   TokenDetectionController_default,
   controllerName,
   isEqualCaseInsensitive
-} from "./chunk-MR6EF4B7.mjs";
+} from "./chunk-VGIPTYXN.mjs";
 import "./chunk-Q5JRBGWO.mjs";
 import "./chunk-XUI43LEZ.mjs";
 export {
diff --git a/node_modules/@metamask/assets-controllers/dist/TokensController.js b/node_modules/@metamask/assets-controllers/dist/TokensController.js
index 32dc7df..ab86942 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokensController.js
+++ b/node_modules/@metamask/assets-controllers/dist/TokensController.js
@@ -2,9 +2,9 @@
 
 
 
-var _chunkMBCN3MNXjs = require('./chunk-MBCN3MNX.js');
-require('./chunk-B5YY22QQ.js');
+var _chunk4X5RKBLGjs = require('./chunk-4X5RKBLG.js');
 require('./chunk-BOTVAG4A.js');
+require('./chunk-B5YY22QQ.js');
 require('./chunk-3R43XIIX.js');
 require('./chunk-NEXY7SE2.js');
 require('./chunk-Z4BLTVTB.js');
@@ -12,5 +12,5 @@ require('./chunk-Z4BLTVTB.js');
 
 
 
-exports.TokensController = _chunkMBCN3MNXjs.TokensController; exports.default = _chunkMBCN3MNXjs.TokensController_default; exports.getDefaultTokensState = _chunkMBCN3MNXjs.getDefaultTokensState;
+exports.TokensController = _chunk4X5RKBLGjs.TokensController; exports.default = _chunk4X5RKBLGjs.TokensController_default; exports.getDefaultTokensState = _chunk4X5RKBLGjs.getDefaultTokensState;
 //# sourceMappingURL=TokensController.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokensController.mjs b/node_modules/@metamask/assets-controllers/dist/TokensController.mjs
index 7e8b54a..e4ff54f 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokensController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokensController.mjs
@@ -2,9 +2,9 @@ import {
   TokensController,
   TokensController_default,
   getDefaultTokensState
-} from "./chunk-7MMEHAKG.mjs";
-import "./chunk-D3K5MPMW.mjs";
+} from "./chunk-3I3OJS23.mjs";
 import "./chunk-LZ5ZGQEX.mjs";
+import "./chunk-D3K5MPMW.mjs";
 import "./chunk-Z3OQU4XW.mjs";
 import "./chunk-Q5JRBGWO.mjs";
 import "./chunk-XUI43LEZ.mjs";
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-7MMEHAKG.mjs b/node_modules/@metamask/assets-controllers/dist/chunk-3I3OJS23.mjs
similarity index 99%
rename from node_modules/@metamask/assets-controllers/dist/chunk-7MMEHAKG.mjs
rename to node_modules/@metamask/assets-controllers/dist/chunk-3I3OJS23.mjs
index 47b7bdd..7bd0842 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-7MMEHAKG.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-3I3OJS23.mjs
@@ -1,9 +1,9 @@
-import {
-  ERC20Standard
-} from "./chunk-D3K5MPMW.mjs";
 import {
   ERC1155Standard
 } from "./chunk-LZ5ZGQEX.mjs";
+import {
+  ERC20Standard
+} from "./chunk-D3K5MPMW.mjs";
 import {
   TOKEN_METADATA_NO_SUPPORT_ERROR,
   fetchTokenMetadata
@@ -701,4 +701,4 @@ export {
   TokensController,
   TokensController_default
 };
-//# sourceMappingURL=chunk-7MMEHAKG.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-3I3OJS23.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-7MMEHAKG.mjs.map b/node_modules/@metamask/assets-controllers/dist/chunk-3I3OJS23.mjs.map
similarity index 100%
rename from node_modules/@metamask/assets-controllers/dist/chunk-7MMEHAKG.mjs.map
rename to node_modules/@metamask/assets-controllers/dist/chunk-3I3OJS23.mjs.map
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-46UZDIXW.mjs.map b/node_modules/@metamask/assets-controllers/dist/chunk-46UZDIXW.mjs.map
deleted file mode 100644
index f4a5d35..0000000
--- a/node_modules/@metamask/assets-controllers/dist/chunk-46UZDIXW.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/NftController.ts"],"sourcesContent":["import { isAddress } from '@ethersproject/address';\nimport type { AddApprovalRequest } from '@metamask/approval-controller';\nimport type {\n  BaseConfig,\n  BaseState,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseControllerV1 } from '@metamask/base-controller';\nimport {\n  safelyExecute,\n  handleFetch,\n  toChecksumHexAddress,\n  BNToHex,\n  fetchWithErrorHandling,\n  IPFS_DEFAULT_GATEWAY_URL,\n  ERC721,\n  ERC1155,\n  ApprovalType,\n  NFT_API_BASE_URL,\n} from '@metamask/controller-utils';\nimport type {\n  NetworkClientId,\n  NetworkController,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkState,\n} from '@metamask/network-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { remove0x } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport BN from 'bn.js';\nimport { EventEmitter } from 'events';\nimport { v4 as random } from 'uuid';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { compareNftMetadata, getFormattedIpfsUrl } from './assetsUtil';\nimport { Source } from './constants';\nimport type {\n  ApiNftContract,\n  ReservoirResponse,\n  Collection,\n  Attributes,\n  LastSale,\n} from './NftDetectionController';\n\ntype NFTStandardType = 'ERC721' | 'ERC1155';\n\ntype SuggestedNftMeta = {\n  asset: { address: string; tokenId: string } & NftMetadata;\n  id: string;\n  time: number;\n  type: NFTStandardType;\n  interactingAddress: string;\n  origin: string;\n};\n\n/**\n * @type Nft\n *\n * NFT representation\n * @property address - Hex address of a ERC721 contract\n * @property description - The NFT description\n * @property image - URI of custom NFT image associated with this tokenId\n * @property name - Name associated with this tokenId and contract address\n * @property tokenId - The NFT identifier\n * @property numberOfSales - Number of sales\n * @property backgroundColor - The background color to be displayed with the item\n * @property imagePreview - URI of a smaller image associated with this NFT\n * @property imageThumbnail - URI of a thumbnail image associated with this NFT\n * @property imageOriginal - URI of the original image associated with this NFT\n * @property animation - URI of a animation associated with this NFT\n * @property animationOriginal - URI of the original animation associated with this NFT\n * @property externalLink - External link containing additional information\n * @property creator - The NFT owner information object\n * @property isCurrentlyOwned - Boolean indicating whether the address/chainId combination where it's currently stored currently owns this NFT\n * @property transactionId - Transaction Id associated with the NFT\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Nft extends NftMetadata {\n  tokenId: string;\n  address: string;\n  isCurrentlyOwned?: boolean;\n}\n\ntype NftUpdate = {\n  nft: Nft;\n  newMetadata: NftMetadata;\n};\n\n/**\n * @type NftContract\n *\n * NFT contract information representation\n * @property name - Contract name\n * @property logo - Contract logo\n * @property address - Contract address\n * @property symbol - Contract symbol\n * @property description - Contract description\n * @property totalSupply - Total supply of NFTs\n * @property assetContractType - The NFT type, it could be `semi-fungible` or `non-fungible`\n * @property createdDate - Creation date\n * @property schemaName - The schema followed by the contract, it could be `ERC721` or `ERC1155`\n * @property externalLink - External link containing additional information\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftContract {\n  name?: string;\n  logo?: string;\n  address: string;\n  symbol?: string;\n  description?: string;\n  totalSupply?: string;\n  assetContractType?: string;\n  createdDate?: string;\n  schemaName?: string;\n  externalLink?: string;\n}\n\n/**\n * @type NftMetadata\n *\n * NFT custom information\n * @property name - NFT custom name\n * @property description - The NFT description\n * @property numberOfSales - Number of sales\n * @property backgroundColor - The background color to be displayed with the item\n * @property image - Image custom image URI\n * @property imagePreview - URI of a smaller image associated with this NFT\n * @property imageThumbnail - URI of a thumbnail image associated with this NFT\n * @property imageOriginal - URI of the original image associated with this NFT\n * @property animation - URI of a animation associated with this NFT\n * @property animationOriginal - URI of the original animation associated with this NFT\n * @property externalLink - External link containing additional information\n * @property creator - The NFT owner information object\n * @property standard - NFT standard name for the NFT, e.g., ERC-721 or ERC-1155\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftMetadata {\n  name: string | null;\n  description: string | null;\n  image: string | null;\n  standard: string | null;\n  favorite?: boolean;\n  numberOfSales?: number;\n  backgroundColor?: string;\n  imagePreview?: string;\n  imageThumbnail?: string;\n  imageOriginal?: string;\n  animation?: string;\n  animationOriginal?: string;\n  externalLink?: string;\n  creator?: string;\n  transactionId?: string;\n  tokenURI?: string | null;\n  collection?: Collection;\n  address?: string;\n  attributes?: Attributes;\n  lastSale?: LastSale;\n  rarityRank?: string;\n}\n\n/**\n * @type NftConfig\n *\n * NFT controller configuration\n * @property selectedAddress - Vault selected address\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftConfig extends BaseConfig {\n  selectedAddress: string;\n  chainId: Hex;\n  ipfsGateway: string;\n  openSeaEnabled: boolean;\n  useIPFSSubdomains: boolean;\n  isIpfsGatewayEnabled: boolean;\n}\n\n/**\n * @type NftState\n *\n * NFT controller state\n * @property allNftContracts - Object containing NFT contract information\n * @property allNfts - Object containing NFTs per account and network\n * @property ignoredNfts - List of NFTs that should be ignored\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftState extends BaseState {\n  allNftContracts: {\n    [key: string]: { [chainId: Hex]: NftContract[] };\n  };\n  allNfts: { [key: string]: { [chainId: Hex]: Nft[] } };\n  ignoredNfts: Nft[];\n}\n\nconst ALL_NFTS_STATE_KEY = 'allNfts';\nconst ALL_NFTS_CONTRACTS_STATE_KEY = 'allNftContracts';\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface NftAsset {\n  address: string;\n  tokenId: string;\n}\n\n/**\n * The name of the {@link NftController}.\n */\nconst controllerName = 'NftController';\n\n/**\n * The external actions available to the {@link NftController}.\n */\ntype AllowedActions =\n  | AddApprovalRequest\n  | NetworkControllerGetNetworkClientByIdAction;\n\n/**\n * The messenger of the {@link NftController}.\n */\nexport type NftControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\nexport const getDefaultNftState = (): NftState => {\n  return {\n    allNftContracts: {},\n    allNfts: {},\n    ignoredNfts: [],\n  };\n};\n\n/**\n * Controller that stores assets and exposes convenience methods\n */\nexport class NftController extends BaseControllerV1<NftConfig, NftState> {\n  private readonly mutex = new Mutex();\n\n  private readonly messagingSystem: NftControllerMessenger;\n\n  getNftApi() {\n    return `${NFT_API_BASE_URL}/tokens`;\n  }\n\n  /**\n   * Helper method to update nested state for allNfts and allNftContracts.\n   *\n   * @param newCollection - the modified piece of state to update in the controller's store\n   * @param baseStateKey - The root key in the store to update.\n   * @param passedConfig - An object containing the selectedAddress and chainId that are passed through the auto-detection flow.\n   * @param passedConfig.userAddress - the address passed through the NFT detection flow to ensure assets are stored to the correct account\n   * @param passedConfig.chainId - the chainId passed through the NFT detection flow to ensure assets are stored to the correct account\n   */\n  private updateNestedNftState(\n    newCollection: Nft[] | NftContract[],\n    baseStateKey: 'allNfts' | 'allNftContracts',\n    { userAddress, chainId }: { userAddress: string; chainId: Hex },\n  ) {\n    const { [baseStateKey]: oldState } = this.state;\n\n    const addressState = oldState[userAddress];\n    const newAddressState = {\n      ...addressState,\n      ...{ [chainId]: newCollection },\n    };\n    const newState = {\n      ...oldState,\n      ...{ [userAddress]: newAddressState },\n    };\n    this.update({\n      [baseStateKey]: newState,\n    });\n  }\n\n  /**\n   * Request individual NFT information from NFT API.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformationFromApi(\n    contractAddress: string,\n    tokenId: string,\n  ): Promise<NftMetadata> {\n    // TODO Parameterize this by chainId for non-mainnet token detection\n    // Attempt to fetch the data with the nft-api\n    const urlParams = new URLSearchParams({\n      chainIds: '1',\n      tokens: `${contractAddress}:${tokenId}`,\n      includeTopBid: 'true',\n      includeAttributes: 'true',\n      includeLastSale: 'true',\n    }).toString();\n    const nftInformation: ReservoirResponse | undefined =\n      await fetchWithErrorHandling({\n        url: `${this.getNftApi()}?${urlParams}`,\n        options: {\n          headers: {\n            Version: '1',\n          },\n        },\n      });\n    // if we were still unable to fetch the data we return out the default/null of `NftMetadata`\n    if (!nftInformation?.tokens?.[0]?.token) {\n      return {\n        name: null,\n        description: null,\n        image: null,\n        standard: null,\n      };\n    }\n\n    // if we've reached this point, we have successfully fetched some data for nftInformation\n    // now we reconfigure the data to conform to the `NftMetadata` type for storage.\n\n    const {\n      image,\n      metadata: { imageOriginal } = {},\n      name,\n      description,\n      collection,\n      kind,\n      rarityRank,\n      rarity,\n      attributes,\n      lastSale,\n      imageSmall,\n    } = nftInformation.tokens[0].token;\n\n    /* istanbul ignore next */\n    const nftMetadata: NftMetadata = Object.assign(\n      {},\n      { name: name || null },\n      { description: description || null },\n      { image: image || null },\n      collection?.creator && { creator: collection.creator },\n      imageOriginal && { imageOriginal },\n      imageSmall && { imageThumbnail: imageSmall },\n      kind && { standard: kind.toUpperCase() },\n      lastSale && { lastSale },\n      attributes && { attributes },\n      nftInformation.tokens[0].market?.topBid && {\n        topBid: nftInformation.tokens[0].market?.topBid,\n      },\n      rarityRank && { rarityRank },\n      rarity && { rarity },\n      collection && { collection },\n    );\n\n    return nftMetadata;\n  }\n\n  /**\n   * Request individual NFT information from contracts that follows Metadata Interface.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformationFromTokenURI(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<NftMetadata> {\n    const { ipfsGateway, useIPFSSubdomains, isIpfsGatewayEnabled } =\n      this.config;\n    const result = await this.getNftURIAndStandard(\n      contractAddress,\n      tokenId,\n      networkClientId,\n    );\n    let tokenURI = result[0];\n    const standard = result[1];\n\n    const hasIpfsTokenURI = tokenURI.startsWith('ipfs://');\n\n    if (hasIpfsTokenURI && !isIpfsGatewayEnabled) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    }\n\n    const isDisplayNFTMediaToggleEnabled = this.config.openSeaEnabled;\n    if (!hasIpfsTokenURI && !isDisplayNFTMediaToggleEnabled) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    }\n\n    if (hasIpfsTokenURI) {\n      tokenURI = getFormattedIpfsUrl(ipfsGateway, tokenURI, useIPFSSubdomains);\n    }\n\n    try {\n      const object = await handleFetch(tokenURI);\n      // TODO: Check image_url existence. This is not part of EIP721 nor EIP1155\n      const image = Object.prototype.hasOwnProperty.call(object, 'image')\n        ? 'image'\n        : /* istanbul ignore next */ 'image_url';\n\n      return {\n        image: object[image],\n        name: object.name,\n        description: object.description,\n        standard,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    } catch {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    }\n  }\n\n  /**\n   * Retrieve NFT uri with  metadata. TODO Update method to use IPFS.\n   *\n   * @param contractAddress - NFT contract address.\n   * @param tokenId - NFT token id.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving NFT uri and token standard.\n   */\n  private async getNftURIAndStandard(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<[string, string]> {\n    // try ERC721 uri\n    try {\n      const uri = await this.getERC721TokenURI(\n        contractAddress,\n        tokenId,\n        networkClientId,\n      );\n      return [uri, ERC721];\n    } catch {\n      // Ignore error\n    }\n\n    // try ERC1155 uri\n    try {\n      const tokenURI = await this.getERC1155TokenURI(\n        contractAddress,\n        tokenId,\n        networkClientId,\n      );\n\n      /**\n       * According to EIP1155 the URI value allows for ID substitution\n       * in case the string `{id}` exists.\n       * https://eips.ethereum.org/EIPS/eip-1155#metadata\n       */\n\n      if (!tokenURI.includes('{id}')) {\n        return [tokenURI, ERC1155];\n      }\n\n      const hexTokenId = remove0x(BNToHex(new BN(tokenId)))\n        .padStart(64, '0')\n        .toLowerCase();\n      return [tokenURI.replace('{id}', hexTokenId), ERC1155];\n    } catch {\n      // Ignore error\n    }\n\n    return ['', ''];\n  }\n\n  /**\n   * Request individual NFT information (name, image url and description).\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformation(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<NftMetadata> {\n    const chainId = this.getCorrectChainId({\n      networkClientId,\n    });\n    const [blockchainMetadata, nftApiMetadata] = await Promise.all([\n      safelyExecute(() =>\n        this.getNftInformationFromTokenURI(\n          contractAddress,\n          tokenId,\n          networkClientId,\n        ),\n      ),\n      this.config.openSeaEnabled && chainId === '0x1'\n        ? safelyExecute(() =>\n            this.getNftInformationFromApi(contractAddress, tokenId),\n          )\n        : undefined,\n    ]);\n    return {\n      ...nftApiMetadata,\n      name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,\n      description:\n        blockchainMetadata?.description ?? nftApiMetadata?.description ?? null,\n      image: blockchainMetadata?.image ?? nftApiMetadata?.image ?? null,\n      standard:\n        blockchainMetadata?.standard ?? nftApiMetadata?.standard ?? null,\n      tokenURI: blockchainMetadata?.tokenURI ?? null,\n    };\n  }\n\n  /**\n   * Request NFT contract information from the contract itself.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftContractInformationFromContract(\n    contractAddress: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<\n    Partial<ApiNftContract> &\n      Pick<ApiNftContract, 'address'> &\n      Pick<ApiNftContract, 'collection'>\n  > {\n    const [name, symbol] = await Promise.all([\n      this.getERC721AssetName(contractAddress, networkClientId),\n      this.getERC721AssetSymbol(contractAddress, networkClientId),\n    ]);\n\n    return {\n      collection: { name },\n      symbol,\n      address: contractAddress,\n    };\n  }\n\n  /**\n   * Request NFT contract information from Blockchain and aggregate with received data from NFTMetadata.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param nftMetadataFromApi - Received NFT information to be aggregated with blockchain contract information.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the NFT contract name, image and description.\n   */\n  private async getNftContractInformation(\n    contractAddress: string,\n    nftMetadataFromApi: NftMetadata,\n    networkClientId?: NetworkClientId,\n  ): Promise<\n    Partial<ApiNftContract> &\n      Pick<ApiNftContract, 'address'> &\n      Pick<ApiNftContract, 'collection'>\n  > {\n    const blockchainContractData = await safelyExecute(() =>\n      this.getNftContractInformationFromContract(\n        contractAddress,\n        networkClientId,\n      ),\n    );\n\n    if (\n      blockchainContractData ||\n      !Object.values(nftMetadataFromApi).every((value) => value === null)\n    ) {\n      return {\n        address: contractAddress,\n        ...blockchainContractData,\n        schema_name: nftMetadataFromApi?.standard ?? null,\n        collection: {\n          name: null,\n          image_url:\n            nftMetadataFromApi?.collection?.image ??\n            nftMetadataFromApi?.collection?.imageUrl ??\n            null,\n          tokenCount: nftMetadataFromApi?.collection?.tokenCount ?? null,\n          ...nftMetadataFromApi?.collection,\n          ...blockchainContractData?.collection,\n        },\n      };\n    }\n\n    /* istanbul ignore next */\n    return {\n      address: contractAddress,\n      asset_contract_type: null,\n      created_date: null,\n      schema_name: null,\n      symbol: null,\n      total_supply: null,\n      description: null,\n      external_link: null,\n      collection: { name: null, image_url: null },\n    };\n  }\n\n  /**\n   * Adds an individual NFT to the stored NFT list.\n   *\n   * @param tokenAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param nftMetadata - NFT optional information (name, image and description).\n   * @param nftContract - An object containing contract data of the NFT being added.\n   * @param chainId - The chainId of the network where the NFT is being added.\n   * @param userAddress - The address of the account where the NFT is being added.\n   * @param source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @returns Promise resolving to the current NFT list.\n   */\n  private async addIndividualNft(\n    tokenAddress: string,\n    tokenId: string,\n    nftMetadata: NftMetadata,\n    nftContract: NftContract,\n    chainId: Hex,\n    userAddress: string,\n    source: Source,\n  ): Promise<Nft[]> {\n    // TODO: Remove unused return\n    const releaseLock = await this.mutex.acquire();\n    try {\n      tokenAddress = toChecksumHexAddress(tokenAddress);\n      const { allNfts } = this.state;\n\n      const nfts = allNfts[userAddress]?.[chainId] || [];\n\n      const existingEntry: Nft | undefined = nfts.find(\n        (nft) =>\n          nft.address.toLowerCase() === tokenAddress.toLowerCase() &&\n          nft.tokenId === tokenId,\n      );\n\n      if (existingEntry) {\n        const differentMetadata = compareNftMetadata(\n          nftMetadata,\n          existingEntry,\n        );\n        if (differentMetadata || !existingEntry.isCurrentlyOwned) {\n          // TODO: Switch to indexToUpdate\n          const indexToRemove = nfts.findIndex(\n            (nft) =>\n              nft.address.toLowerCase() === tokenAddress.toLowerCase() &&\n              nft.tokenId === tokenId,\n          );\n          /* istanbul ignore next */\n          if (indexToRemove !== -1) {\n            nfts.splice(indexToRemove, 1);\n          }\n        } else {\n          return nfts;\n        }\n      }\n\n      const newEntry: Nft = {\n        address: tokenAddress,\n        tokenId,\n        favorite: existingEntry?.favorite || false,\n        isCurrentlyOwned: true,\n        ...nftMetadata,\n      };\n\n      const newNfts = [...nfts, newEntry];\n      this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n        chainId,\n        userAddress,\n      });\n\n      if (this.onNftAdded) {\n        this.onNftAdded({\n          address: tokenAddress,\n          symbol: nftContract.symbol,\n          tokenId: tokenId.toString(),\n          standard: nftMetadata.standard,\n          source,\n        });\n      }\n      return newNfts;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Adds an NFT contract to the stored NFT contracts list.\n   *\n   * @param options - options.\n   * @param options.tokenAddress - Hex address of the NFT contract.\n   * @param options.userAddress - The address of the account where the NFT is being added.\n   * @param options.nftMetadata - The retrieved NFTMetadata from API.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @returns Promise resolving to the current NFT contracts list.\n   */\n  private async addNftContract({\n    tokenAddress,\n    userAddress,\n    networkClientId,\n    source,\n    nftMetadata,\n  }: {\n    tokenAddress: string;\n    userAddress: string;\n    nftMetadata: NftMetadata;\n    networkClientId?: NetworkClientId;\n    source?: Source;\n  }): Promise<NftContract[]> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      tokenAddress = toChecksumHexAddress(tokenAddress);\n      const { allNftContracts } = this.state;\n      const chainId = this.getCorrectChainId({\n        networkClientId,\n      });\n\n      const nftContracts = allNftContracts[userAddress]?.[chainId] || [];\n\n      const existingEntry = nftContracts.find(\n        (nftContract) =>\n          nftContract.address.toLowerCase() === tokenAddress.toLowerCase(),\n      );\n      if (existingEntry) {\n        return nftContracts;\n      }\n\n      // this doesn't work currently for detection if the user switches networks while the detection is processing\n      // will be fixed once detection uses networkClientIds\n      // get name and symbol if ERC721 then put together the metadata\n      const contractInformation = await this.getNftContractInformation(\n        tokenAddress,\n        nftMetadata,\n        networkClientId,\n      );\n      const {\n        asset_contract_type,\n        created_date,\n        symbol,\n        description,\n        external_link,\n        schema_name,\n        collection: { name, image_url, tokenCount },\n      } = contractInformation;\n\n      // If the nft is auto-detected we want some valid metadata to be present\n      if (\n        source === Source.Detected &&\n        'address' in contractInformation &&\n        typeof contractInformation.address === 'string' &&\n        'collection' in contractInformation &&\n        contractInformation.collection.name === null &&\n        'image_url' in contractInformation.collection &&\n        contractInformation.collection.image_url === null &&\n        Object.entries(contractInformation).every(([key, value]) => {\n          return key === 'address' || key === 'collection' || !value;\n        })\n      ) {\n        return nftContracts;\n      }\n\n      /* istanbul ignore next */\n      const newEntry: NftContract = Object.assign(\n        {},\n        { address: tokenAddress },\n        description && { description },\n        name && { name },\n        image_url && { logo: image_url },\n        symbol && { symbol },\n        tokenCount !== null &&\n          typeof tokenCount !== 'undefined' && { totalSupply: tokenCount },\n        asset_contract_type && { assetContractType: asset_contract_type },\n        created_date && { createdDate: created_date },\n        schema_name && { schemaName: schema_name },\n        external_link && { externalLink: external_link },\n      );\n      const newNftContracts = [...nftContracts, newEntry];\n      this.updateNestedNftState(newNftContracts, ALL_NFTS_CONTRACTS_STATE_KEY, {\n        chainId,\n        userAddress,\n      });\n\n      return newNftContracts;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Removes an individual NFT from the stored token list and saves it in ignored NFTs list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  private removeAndIgnoreIndividualNft(\n    address: string,\n    tokenId: string,\n    {\n      chainId,\n      userAddress,\n    }: {\n      chainId: Hex;\n      userAddress: string;\n    },\n  ) {\n    address = toChecksumHexAddress(address);\n    const { allNfts, ignoredNfts } = this.state;\n    const newIgnoredNfts = [...ignoredNfts];\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const newNfts = nfts.filter((nft) => {\n      if (\n        nft.address.toLowerCase() === address.toLowerCase() &&\n        nft.tokenId === tokenId\n      ) {\n        const alreadyIgnored = newIgnoredNfts.find(\n          (c) => c.address === address && c.tokenId === tokenId,\n        );\n        !alreadyIgnored && newIgnoredNfts.push(nft);\n        return false;\n      }\n      return true;\n    });\n\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n\n    this.update({\n      ignoredNfts: newIgnoredNfts,\n    });\n  }\n\n  /**\n   * Removes an individual NFT from the stored token list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  private removeIndividualNft(\n    address: string,\n    tokenId: string,\n    { chainId, userAddress }: { chainId: Hex; userAddress: string },\n  ) {\n    address = toChecksumHexAddress(address);\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const newNfts = nfts.filter(\n      (nft) =>\n        !(\n          nft.address.toLowerCase() === address.toLowerCase() &&\n          nft.tokenId === tokenId\n        ),\n    );\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n  }\n\n  /**\n   * Removes an NFT contract to the stored NFT contracts list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   * @returns Promise resolving to the current NFT contracts list.\n   */\n  private removeNftContract(\n    address: string,\n    { chainId, userAddress }: { chainId: Hex; userAddress: string },\n  ): NftContract[] {\n    address = toChecksumHexAddress(address);\n    const { allNftContracts } = this.state;\n    const nftContracts = allNftContracts[userAddress]?.[chainId] || [];\n\n    const newNftContracts = nftContracts.filter(\n      (nftContract) =>\n        !(nftContract.address.toLowerCase() === address.toLowerCase()),\n    );\n    this.updateNestedNftState(newNftContracts, ALL_NFTS_CONTRACTS_STATE_KEY, {\n      chainId,\n      userAddress,\n    });\n\n    return newNftContracts;\n  }\n\n  /**\n   * EventEmitter instance used to listen to specific EIP747 events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Optional API key to use with opensea\n   */\n  openSeaApiKey?: string;\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'NftController';\n\n  private readonly getERC721AssetName: AssetsContractController['getERC721AssetName'];\n\n  private readonly getERC721AssetSymbol: AssetsContractController['getERC721AssetSymbol'];\n\n  private readonly getERC721TokenURI: AssetsContractController['getERC721TokenURI'];\n\n  private readonly getERC721OwnerOf: AssetsContractController['getERC721OwnerOf'];\n\n  private readonly getERC1155BalanceOf: AssetsContractController['getERC1155BalanceOf'];\n\n  private readonly getERC1155TokenURI: AssetsContractController['getERC1155TokenURI'];\n\n  private readonly getNetworkClientById: NetworkController['getNetworkClientById'];\n\n  private readonly onNftAdded?: (data: {\n    address: string;\n    symbol: string | undefined;\n    tokenId: string;\n    standard: string | null;\n    source: Source;\n  }) => void;\n\n  /**\n   * Creates an NftController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.getERC721AssetName - Gets the name of the asset at the given address.\n   * @param options.getERC721AssetSymbol - Gets the symbol of the asset at the given address.\n   * @param options.getERC721TokenURI - Gets the URI of the ERC721 token at the given address, with the given ID.\n   * @param options.getERC721OwnerOf - Get the owner of a ERC-721 NFT.\n   * @param options.getERC1155BalanceOf - Gets balance of a ERC-1155 NFT.\n   * @param options.getERC1155TokenURI - Gets the URI of the ERC1155 token at the given address, with the given ID.\n   * @param options.getNetworkClientById - Gets the network client for the given networkClientId.\n   * @param options.onNftAdded - Callback that is called when an NFT is added. Currently used pass data\n   * for tracking the NFT added event.\n   * @param options.messenger - The controller messenger.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      chainId: initialChainId,\n      onPreferencesStateChange,\n      onNetworkStateChange,\n      getERC721AssetName,\n      getERC721AssetSymbol,\n      getERC721TokenURI,\n      getERC721OwnerOf,\n      getERC1155BalanceOf,\n      getERC1155TokenURI,\n      getNetworkClientById,\n      onNftAdded,\n      messenger,\n    }: {\n      chainId: Hex;\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n      getERC721AssetName: AssetsContractController['getERC721AssetName'];\n      getERC721AssetSymbol: AssetsContractController['getERC721AssetSymbol'];\n      getERC721TokenURI: AssetsContractController['getERC721TokenURI'];\n      getERC721OwnerOf: AssetsContractController['getERC721OwnerOf'];\n      getERC1155BalanceOf: AssetsContractController['getERC1155BalanceOf'];\n      getERC1155TokenURI: AssetsContractController['getERC1155TokenURI'];\n      getNetworkClientById: NetworkController['getNetworkClientById'];\n      onNftAdded?: (data: {\n        address: string;\n        symbol: string | undefined;\n        tokenId: string;\n        standard: string | null;\n        source: string;\n      }) => void;\n      messenger: NftControllerMessenger;\n    },\n    config?: Partial<BaseConfig>,\n    state?: Partial<NftState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      selectedAddress: '',\n      chainId: initialChainId,\n      ipfsGateway: IPFS_DEFAULT_GATEWAY_URL,\n      openSeaEnabled: false,\n      useIPFSSubdomains: true,\n      isIpfsGatewayEnabled: true,\n    };\n\n    this.defaultState = getDefaultNftState();\n    this.initialize();\n    this.getERC721AssetName = getERC721AssetName;\n    this.getERC721AssetSymbol = getERC721AssetSymbol;\n    this.getERC721TokenURI = getERC721TokenURI;\n    this.getERC721OwnerOf = getERC721OwnerOf;\n    this.getERC1155BalanceOf = getERC1155BalanceOf;\n    this.getERC1155TokenURI = getERC1155TokenURI;\n    this.getNetworkClientById = getNetworkClientById;\n    this.onNftAdded = onNftAdded;\n    this.messagingSystem = messenger;\n\n    onPreferencesStateChange(\n      async ({\n        selectedAddress,\n        ipfsGateway,\n        openSeaEnabled,\n        isIpfsGatewayEnabled,\n      }) => {\n        this.configure({\n          selectedAddress,\n          ipfsGateway,\n          openSeaEnabled,\n          isIpfsGatewayEnabled,\n        });\n\n        const needsUpdateNftMetadata =\n          (isIpfsGatewayEnabled && ipfsGateway !== '') || openSeaEnabled;\n\n        if (needsUpdateNftMetadata) {\n          const { chainId } = this.config;\n          const nfts: Nft[] =\n            this.state.allNfts[selectedAddress]?.[chainId] ?? [];\n          // filter only nfts\n          const nftsToUpdate = nfts.filter(\n            (singleNft) =>\n              !singleNft.name && !singleNft.description && !singleNft.image,\n          );\n          if (nftsToUpdate.length !== 0) {\n            await this.updateNftMetadata({\n              nfts: nftsToUpdate,\n              userAddress: selectedAddress,\n            });\n          }\n        }\n      },\n    );\n\n    onNetworkStateChange(({ selectedNetworkClientId }) => {\n      const selectedNetworkClient = getNetworkClientById(\n        selectedNetworkClientId,\n      );\n      const { chainId } = selectedNetworkClient.configuration;\n\n      this.configure({ chainId });\n    });\n  }\n\n  private async validateWatchNft(\n    asset: NftAsset,\n    type: NFTStandardType,\n    userAddress: string,\n    { networkClientId }: { networkClientId?: NetworkClientId } = {},\n  ) {\n    const { address: contractAddress, tokenId } = asset;\n\n    // Validate parameters\n    if (!type) {\n      throw rpcErrors.invalidParams('Asset type is required');\n    }\n\n    if (type !== ERC721 && type !== ERC1155) {\n      throw rpcErrors.invalidParams(\n        `Non NFT asset type ${type} not supported by watchNft`,\n      );\n    }\n\n    if (!contractAddress || !tokenId) {\n      throw rpcErrors.invalidParams('Both address and tokenId are required');\n    }\n\n    if (!isAddress(contractAddress)) {\n      throw rpcErrors.invalidParams('Invalid address');\n    }\n\n    if (!/^\\d+$/u.test(tokenId)) {\n      throw rpcErrors.invalidParams('Invalid tokenId');\n    }\n\n    // Check if the user owns the suggested NFT\n    try {\n      const isOwner = await this.isNftOwner(\n        userAddress,\n        contractAddress,\n        tokenId,\n        { networkClientId },\n      );\n      if (!isOwner) {\n        throw rpcErrors.invalidInput(\n          'Suggested NFT is not owned by the selected account',\n        );\n      }\n    } catch (error) {\n      // error thrown here: \"Unable to verify ownership. Possibly because the standard is not supported or the user's currently selected network does not match the chain of the asset in question.\"\n      if (error instanceof Error) {\n        throw rpcErrors.resourceUnavailable(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // temporary method to get the correct chainId until we remove chainId from the config & the chainId arg from the detection logic\n  // Just a helper method to prefer the networkClient chainId first then the chainId argument and then finally the config chainId\n  private getCorrectChainId({\n    networkClientId,\n  }: {\n    networkClientId?: NetworkClientId;\n  }) {\n    if (networkClientId) {\n      return this.getNetworkClientById(networkClientId).configuration.chainId;\n    }\n    return this.config.chainId;\n  }\n\n  /**\n   * Adds a new suggestedAsset to state. Parameters will be validated according to\n   * asset type being watched. A `<suggestedNftMeta.id>:pending` hub event will be emitted once added.\n   *\n   * @param asset - The asset to be watched. For now ERC721 and ERC1155 tokens are accepted.\n   * @param asset.address - The address of the asset contract.\n   * @param asset.tokenId - The ID of the asset.\n   * @param type - The asset type.\n   * @param origin - Domain origin to register the asset from.\n   * @param options - Options bag.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being added.\n   * @returns Object containing a Promise resolving to the suggestedAsset address if accepted.\n   */\n  async watchNft(\n    asset: NftAsset,\n    type: NFTStandardType,\n    origin: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: {\n      networkClientId?: NetworkClientId;\n      userAddress?: string;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    await this.validateWatchNft(asset, type, userAddress);\n\n    const nftMetadata = await this.getNftInformation(\n      asset.address,\n      asset.tokenId,\n      networkClientId,\n    );\n\n    if (nftMetadata.standard && nftMetadata.standard !== type) {\n      throw rpcErrors.invalidInput(\n        `Suggested NFT of type ${nftMetadata.standard} does not match received type ${type}`,\n      );\n    }\n\n    const suggestedNftMeta: SuggestedNftMeta = {\n      asset: { ...asset, ...nftMetadata },\n      type,\n      id: random(),\n      time: Date.now(),\n      interactingAddress: userAddress,\n      origin,\n    };\n    await this._requestApproval(suggestedNftMeta);\n    const { address, tokenId } = asset;\n    const { name, standard, description, image } = nftMetadata;\n\n    await this.addNft(address, tokenId, {\n      nftMetadata: {\n        name: name ?? null,\n        description: description ?? null,\n        image: image ?? null,\n        standard: standard ?? null,\n      },\n      userAddress,\n      source: Source.Dapp,\n      networkClientId,\n    });\n  }\n\n  /**\n   * Sets an OpenSea API key to retrieve NFT information.\n   *\n   * @param openSeaApiKey - OpenSea API key.\n   */\n  setApiKey(openSeaApiKey: string) {\n    this.openSeaApiKey = openSeaApiKey;\n  }\n\n  /**\n   * Checks the ownership of a ERC-721 or ERC-1155 NFT for a given address.\n   *\n   * @param ownerAddress - User public address.\n   * @param nftAddress - NFT contract address.\n   * @param tokenId - NFT token ID.\n   * @param options - Options bag.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving the NFT ownership.\n   */\n  async isNftOwner(\n    ownerAddress: string,\n    nftAddress: string,\n    tokenId: string,\n    {\n      networkClientId,\n    }: {\n      networkClientId?: NetworkClientId;\n    } = {},\n  ): Promise<boolean> {\n    // Checks the ownership for ERC-721.\n    try {\n      const owner = await this.getERC721OwnerOf(\n        nftAddress,\n        tokenId,\n        networkClientId,\n      );\n      return ownerAddress.toLowerCase() === owner.toLowerCase();\n      // eslint-disable-next-line no-empty\n    } catch {\n      // Ignore ERC-721 contract error\n    }\n\n    // Checks the ownership for ERC-1155.\n    try {\n      const balance = await this.getERC1155BalanceOf(\n        ownerAddress,\n        nftAddress,\n        tokenId,\n        networkClientId,\n      );\n      return !balance.isZero();\n      // eslint-disable-next-line no-empty\n    } catch {\n      // Ignore ERC-1155 contract error\n    }\n\n    throw new Error(\n      `Unable to verify ownership. Possibly because the standard is not supported or the user's currently selected network does not match the chain of the asset in question.`,\n    );\n  }\n\n  /**\n   * Verifies currently selected address owns entered NFT address/tokenId combo and\n   * adds the NFT and respective NFT contract to the stored NFT and NFT contracts lists.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param options - an object of arguments\n   * @param options.userAddress - The address of the current user.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   */\n  async addNftVerifyOwnership(\n    address: string,\n    tokenId: string,\n    {\n      userAddress = this.config.selectedAddress,\n      networkClientId,\n      source,\n    }: {\n      userAddress?: string;\n      networkClientId?: NetworkClientId;\n      source?: Source;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    if (\n      !(await this.isNftOwner(userAddress, address, tokenId, {\n        networkClientId,\n      }))\n    ) {\n      throw new Error('This NFT is not owned by the user');\n    }\n    await this.addNft(address, tokenId, {\n      networkClientId,\n      userAddress,\n      source,\n    });\n  }\n\n  /**\n   * Adds an NFT and respective NFT contract to the stored NFT and NFT contracts lists.\n   *\n   * @param tokenAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param options - an object of arguments\n   * @param options.nftMetadata - NFT optional metadata.\n   * @param options.userAddress - The address of the current user.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT list.\n   */\n  async addNft(\n    tokenAddress: string,\n    tokenId: string,\n    {\n      nftMetadata,\n      userAddress = this.config.selectedAddress,\n      source = Source.Custom,\n      networkClientId,\n    }: {\n      nftMetadata?: NftMetadata;\n      userAddress?: string;\n      source?: Source;\n      networkClientId?: NetworkClientId;\n    } = { userAddress: this.config.selectedAddress },\n  ) {\n    tokenAddress = toChecksumHexAddress(tokenAddress);\n\n    const chainId = this.getCorrectChainId({ networkClientId });\n\n    nftMetadata =\n      nftMetadata ||\n      (await this.getNftInformation(tokenAddress, tokenId, networkClientId));\n\n    const newNftContracts = await this.addNftContract({\n      tokenAddress,\n      userAddress,\n      networkClientId,\n      source,\n      nftMetadata,\n    });\n\n    // If NFT contract was not added, do not add individual NFT\n    const nftContract = newNftContracts.find(\n      (contract) =>\n        contract.address.toLowerCase() === tokenAddress.toLowerCase(),\n    );\n\n    // If NFT contract information, add individual NFT\n    if (nftContract) {\n      await this.addIndividualNft(\n        tokenAddress,\n        tokenId,\n        nftMetadata,\n        nftContract,\n        chainId,\n        userAddress,\n        source,\n      );\n    }\n  }\n\n  /**\n   * Refetches NFT metadata and updates the state\n   *\n   * @param options - Options for refetching NFT metadata\n   * @param options.nfts - nfts to update metadata for.\n   * @param options.userAddress - The current user address\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   */\n  async updateNftMetadata({\n    nfts,\n    userAddress = this.config.selectedAddress,\n    networkClientId,\n  }: {\n    nfts: Nft[];\n    userAddress?: string;\n    networkClientId?: NetworkClientId;\n  }) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n\n    const nftsWithChecksumAdr = nfts.map((nft) => {\n      return {\n        ...nft,\n        address: toChecksumHexAddress(nft.address),\n      };\n    });\n    const nftMetadataResults = await Promise.allSettled(\n      nftsWithChecksumAdr.map(async (nft) => {\n        const resMetadata = await this.getNftInformation(\n          nft.address,\n          nft.tokenId,\n          networkClientId,\n        );\n        return {\n          nft,\n          newMetadata: resMetadata,\n        };\n      }),\n    );\n    const successfulNewFetchedNfts = nftMetadataResults.filter(\n      (result): result is PromiseFulfilledResult<NftUpdate> =>\n        result.status === 'fulfilled',\n    );\n    // We want to avoid updating the state if the state and fetched nft info are the same\n    const nftsWithDifferentMetadata: PromiseFulfilledResult<NftUpdate>[] = [];\n    const { allNfts } = this.state;\n    const stateNfts = allNfts[userAddress]?.[chainId] || [];\n\n    successfulNewFetchedNfts.forEach((singleNft) => {\n      const existingEntry: Nft | undefined = stateNfts.find(\n        (nft) =>\n          nft.address.toLowerCase() ===\n            singleNft.value.nft.address.toLowerCase() &&\n          nft.tokenId === singleNft.value.nft.tokenId,\n      );\n\n      if (existingEntry) {\n        const differentMetadata = compareNftMetadata(\n          singleNft.value.newMetadata,\n          existingEntry,\n        );\n\n        if (differentMetadata) {\n          nftsWithDifferentMetadata.push(singleNft);\n        }\n      }\n    });\n\n    if (nftsWithDifferentMetadata.length !== 0) {\n      nftsWithDifferentMetadata.forEach((elm) =>\n        this.updateNft(\n          elm.value.nft,\n          elm.value.newMetadata,\n          userAddress,\n          chainId,\n        ),\n      );\n    }\n  }\n\n  /**\n   * Removes an NFT from the stored token list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  removeNft(\n    address: string,\n    tokenId: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    address = toChecksumHexAddress(address);\n    this.removeIndividualNft(address, tokenId, { chainId, userAddress });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const remainingNft = nfts.find(\n      (nft) => nft.address.toLowerCase() === address.toLowerCase(),\n    );\n\n    if (!remainingNft) {\n      this.removeNftContract(address, { chainId, userAddress });\n    }\n  }\n\n  /**\n   * Removes an NFT from the stored token list and saves it in ignored NFTs list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  removeAndIgnoreNft(\n    address: string,\n    tokenId: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    address = toChecksumHexAddress(address);\n    this.removeAndIgnoreIndividualNft(address, tokenId, {\n      chainId,\n      userAddress,\n    });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const remainingNft = nfts.find(\n      (nft) => nft.address.toLowerCase() === address.toLowerCase(),\n    );\n    if (!remainingNft) {\n      this.removeNftContract(address, { chainId, userAddress });\n    }\n  }\n\n  /**\n   * Removes all NFTs from the ignored list.\n   */\n  clearIgnoredNfts() {\n    this.update({ ignoredNfts: [] });\n  }\n\n  /**\n   * Checks whether input NFT is still owned by the user\n   * And updates the isCurrentlyOwned value on the NFT object accordingly.\n   *\n   * @param nft - The NFT object to check and update.\n   * @param batch - A boolean indicating whether this method is being called as part of a batch or single update.\n   * @param accountParams - The userAddress and chainId to check ownership against\n   * @param accountParams.userAddress - the address passed through the confirmed transaction flow to ensure assets are stored to the correct account\n   * @param accountParams.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns the NFT with the updated isCurrentlyOwned value\n   */\n  async checkAndUpdateSingleNftOwnershipStatus(\n    nft: Nft,\n    batch: boolean,\n    {\n      userAddress = this.config.selectedAddress,\n      networkClientId,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { address, tokenId } = nft;\n    let isOwned = nft.isCurrentlyOwned;\n    try {\n      isOwned = await this.isNftOwner(userAddress, address, tokenId, {\n        networkClientId,\n      });\n    } catch {\n      // ignore error\n      // this will only throw an error 'Unable to verify ownership' in which case\n      // we want to keep the current value of isCurrentlyOwned for this flow.\n    }\n\n    nft.isCurrentlyOwned = isOwned;\n\n    if (batch) {\n      return nft;\n    }\n\n    // if this is not part of a batched update we update this one NFT in state\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const nftToUpdate = nfts.find(\n      (item) =>\n        item.tokenId === tokenId &&\n        item.address.toLowerCase() === address.toLowerCase(),\n    );\n    if (nftToUpdate) {\n      nftToUpdate.isCurrentlyOwned = isOwned;\n      this.updateNestedNftState(nfts, ALL_NFTS_STATE_KEY, {\n        userAddress,\n        chainId,\n      });\n    }\n    return nft;\n  }\n\n  /**\n   * Checks whether NFTs associated with current selectedAddress/chainId combination are still owned by the user\n   * And updates the isCurrentlyOwned value on each accordingly.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT ownership status is checked/updated.\n   */\n  async checkAndUpdateAllNftsOwnershipStatus(\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const updatedNfts = await Promise.all(\n      nfts.map(async (nft) => {\n        return (\n          (await this.checkAndUpdateSingleNftOwnershipStatus(nft, true, {\n            networkClientId,\n            userAddress,\n          })) ?? nft\n        );\n      }),\n    );\n\n    this.updateNestedNftState(updatedNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n  }\n\n  /**\n   * Update NFT favorite status.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Hex address of the NFT contract.\n   * @param favorite - NFT new favorite status.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  updateNftFavoriteStatus(\n    address: string,\n    tokenId: string,\n    favorite: boolean,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: {\n      networkClientId?: NetworkClientId;\n      userAddress?: string;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) => nft.address === address && nft.tokenId === tokenId,\n    );\n\n    if (index === -1) {\n      return;\n    }\n\n    const updatedNft: Nft = {\n      ...nfts[index],\n      favorite,\n    };\n\n    // Update Nfts array\n    nfts[index] = updatedNft;\n\n    this.updateNestedNftState(nfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress,\n    });\n  }\n\n  /**\n   * Returns an NFT by the address and token id.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Number that represents the id of the token.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   * @returns Object containing the NFT and its position in the array\n   */\n  findNftByAddressAndTokenId(\n    address: string,\n    tokenId: string,\n    selectedAddress: string,\n    chainId: Hex,\n  ): { nft: Nft; index: number } | null {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) =>\n        nft.address.toLowerCase() === address.toLowerCase() &&\n        nft.tokenId === tokenId,\n    );\n\n    if (index === -1) {\n      return null;\n    }\n\n    return { nft: nfts[index], index };\n  }\n\n  /**\n   * Update NFT data.\n   *\n   * @param nft - NFT object to find the right NFT to updates.\n   * @param updates - NFT partial object to update properties of the NFT.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   */\n  updateNft(\n    nft: Nft,\n    updates: Partial<Nft>,\n    selectedAddress: string,\n    chainId: Hex,\n  ) {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const nftInfo = this.findNftByAddressAndTokenId(\n      nft.address,\n      nft.tokenId,\n      selectedAddress,\n      chainId,\n    );\n\n    if (!nftInfo) {\n      return;\n    }\n\n    const updatedNft: Nft = {\n      ...nft,\n      ...updates,\n    };\n\n    const newNfts = [\n      ...nfts.slice(0, nftInfo.index),\n      updatedNft,\n      ...nfts.slice(nftInfo.index + 1),\n    ];\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress: selectedAddress,\n    });\n  }\n\n  /**\n   * Resets the transaction status of an NFT.\n   *\n   * @param transactionId - NFT transaction id.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   * @returns a boolean indicating if the reset was well succeeded or not\n   */\n  resetNftTransactionStatusByTransactionId(\n    transactionId: string,\n    selectedAddress: string,\n    chainId: Hex,\n  ): boolean {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) => nft.transactionId === transactionId,\n    );\n\n    if (index === -1) {\n      return false;\n    }\n    const updatedNft: Nft = {\n      ...nfts[index],\n      transactionId: undefined,\n    };\n\n    const newNfts = [\n      ...nfts.slice(0, index),\n      updatedNft,\n      ...nfts.slice(index + 1),\n    ];\n\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress: selectedAddress,\n    });\n\n    return true;\n  }\n\n  async _requestApproval(suggestedNftMeta: SuggestedNftMeta) {\n    return this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id: suggestedNftMeta.id,\n        origin: suggestedNftMeta.origin,\n        type: ApprovalType.WatchAsset,\n        requestData: {\n          id: suggestedNftMeta.id,\n          interactingAddress: suggestedNftMeta.interactingAddress,\n          asset: {\n            address: suggestedNftMeta.asset.address,\n            tokenId: suggestedNftMeta.asset.tokenId,\n            name: suggestedNftMeta.asset.name,\n            description: suggestedNftMeta.asset.description,\n            image: suggestedNftMeta.asset.image,\n            standard: suggestedNftMeta.asset.standard,\n          },\n        },\n      },\n      true,\n    );\n  }\n}\n\nexport default NftController;\n"],"mappings":"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","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-4LY47RPI.mjs.map b/node_modules/@metamask/assets-controllers/dist/chunk-4LY47RPI.mjs.map
deleted file mode 100644
index 8d32251..0000000
--- a/node_modules/@metamask/assets-controllers/dist/chunk-4LY47RPI.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/TokenBalancesController.ts"],"sourcesContent":["import {\n  type RestrictedControllerMessenger,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  BaseController,\n} from '@metamask/base-controller';\nimport { safelyExecute, toHex } from '@metamask/controller-utils';\nimport type { PreferencesControllerGetStateAction } from '@metamask/preferences-controller';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport type { Token } from './TokenRatesController';\nimport type { TokensControllerStateChangeEvent } from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  contractBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property tokens - List of tokens to track balances for.\n * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.\n * @property getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  tokens?: Token[];\n  disabled?: boolean;\n  getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * Represents a mapping of hash token contract addresses to their balances.\n */\ntype ContractBalances = Record<string, string>;\n\n/**\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport type TokenBalancesControllerState = {\n  contractBalances: ContractBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions = PreferencesControllerGetStateAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    contractBalances: {},\n  };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n\n  #interval: number;\n\n  #tokens: Token[];\n\n  #disabled: boolean;\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.tokens - List of tokens to track balances for.\n   * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.\n   * @param options.getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    tokens = [],\n    disabled = false,\n    getERC20BalanceOf,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.#disabled = disabled;\n    this.#interval = interval;\n    this.#tokens = tokens;\n\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      ({ tokens: newTokens, detectedTokens }) => {\n        this.#tokens = [...newTokens, ...detectedTokens];\n        this.updateBalances();\n      },\n    );\n\n    this.#getERC20BalanceOf = getERC20BalanceOf;\n\n    this.poll();\n  }\n\n  /**\n   * Allows controller to update tracked tokens contract balances.\n   */\n  enable() {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from updating tracked tokens contract balances.\n   */\n  disable() {\n    this.#disabled = true;\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.#interval = interval;\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await safelyExecute(() => this.updateBalances());\n\n    this.#handle = setTimeout(() => {\n      this.poll(this.#interval);\n    }, this.#interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.#disabled) {\n      return;\n    }\n\n    const newContractBalances: ContractBalances = {};\n    for (const token of this.#tokens) {\n      const { address } = token;\n      const { selectedAddress } = this.messagingSystem.call(\n        'PreferencesController:getState',\n      );\n      try {\n        newContractBalances[address] = toHex(\n          await this.#getERC20BalanceOf(address, selectedAddress),\n        );\n        token.balanceError = null;\n      } catch (error) {\n        newContractBalances[address] = toHex(0);\n        token.balanceError = error;\n      }\n    }\n\n    this.update((state) => {\n      state.contractBalances = newContractBalances;\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"],"mappings":";;;;;;;AAAA;AAAA,EAIE;AAAA,OACK;AACP,SAAS,eAAe,aAAa;AAOrC,IAAM,mBAAmB;AAEzB,IAAM,iBAAiB;AAEvB,IAAM,WAAW;AAAA,EACf,kBAAkB,EAAE,SAAS,MAAM,WAAW,MAAM;AACtD;AAiEO,SAAS,+BAA6D;AAC3E,SAAO;AAAA,IACL,kBAAkB,CAAC;AAAA,EACrB;AACF;AAxFA;AA8FO,IAAM,0BAAN,cAAsC,eAI3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,YAAY;AAAA,IACV,WAAW;AAAA,IACX,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA,QAAQ,CAAC;AAAA,EACX,GAAmC;AACjC,UAAM;AAAA,MACJ,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,OAAO;AAAA,QACL,GAAG,6BAA6B;AAAA,QAChC,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AArCH;AAEA;AAEA;AAEA;AAEA;AA+BE,uBAAK,WAAY;AACjB,uBAAK,WAAY;AACjB,uBAAK,SAAU;AAEf,SAAK,gBAAgB;AAAA,MACnB;AAAA,MACA,CAAC,EAAE,QAAQ,WAAW,eAAe,MAAM;AACzC,2BAAK,SAAU,CAAC,GAAG,WAAW,GAAG,cAAc;AAC/C,aAAK,eAAe;AAAA,MACtB;AAAA,IACF;AAEA,uBAAK,oBAAqB;AAE1B,SAAK,KAAK;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACR,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,UAAkC;AAC3C,QAAI,UAAU;AACZ,yBAAK,WAAY;AAAA,IACnB;AAEA,QAAI,mBAAK,UAAS;AAChB,mBAAa,mBAAK,QAAO;AAAA,IAC3B;AAEA,UAAM,cAAc,MAAM,KAAK,eAAe,CAAC;AAE/C,uBAAK,SAAU,WAAW,MAAM;AAC9B,WAAK,KAAK,mBAAK,UAAS;AAAA,IAC1B,GAAG,mBAAK,UAAS;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB;AACrB,QAAI,mBAAK,YAAW;AAClB;AAAA,IACF;AAEA,UAAM,sBAAwC,CAAC;AAC/C,eAAW,SAAS,mBAAK,UAAS;AAChC,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,EAAE,gBAAgB,IAAI,KAAK,gBAAgB;AAAA,QAC/C;AAAA,MACF;AACA,UAAI;AACF,4BAAoB,OAAO,IAAI;AAAA,UAC7B,MAAM,mBAAK,oBAAL,WAAwB,SAAS;AAAA,QACzC;AACA,cAAM,eAAe;AAAA,MACvB,SAAS,OAAO;AACd,4BAAoB,OAAO,IAAI,MAAM,CAAC;AACtC,cAAM,eAAe;AAAA,MACvB;AAAA,IACF;AAEA,SAAK,OAAO,CAAC,UAAU;AACrB,YAAM,mBAAmB;AAAA,IAC3B,CAAC;AAAA,EACH;AACF;AAxHE;AAEA;AAEA;AAEA;AAEA;AAkHF,IAAO,kCAAQ;","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-MBCN3MNX.js b/node_modules/@metamask/assets-controllers/dist/chunk-4X5RKBLG.js
similarity index 99%
rename from node_modules/@metamask/assets-controllers/dist/chunk-MBCN3MNX.js
rename to node_modules/@metamask/assets-controllers/dist/chunk-4X5RKBLG.js
index b8722af..ca8384e 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-MBCN3MNX.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-4X5RKBLG.js
@@ -1,9 +1,9 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 
-var _chunkB5YY22QQjs = require('./chunk-B5YY22QQ.js');
+var _chunkBOTVAG4Ajs = require('./chunk-BOTVAG4A.js');
 
 
-var _chunkBOTVAG4Ajs = require('./chunk-BOTVAG4A.js');
+var _chunkB5YY22QQjs = require('./chunk-B5YY22QQ.js');
 
 
 
@@ -701,4 +701,4 @@ var TokensController_default = TokensController;
 
 
 exports.getDefaultTokensState = getDefaultTokensState; exports.TokensController = TokensController; exports.TokensController_default = TokensController_default;
-//# sourceMappingURL=chunk-MBCN3MNX.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-4X5RKBLG.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-MBCN3MNX.js.map b/node_modules/@metamask/assets-controllers/dist/chunk-4X5RKBLG.js.map
similarity index 100%
rename from node_modules/@metamask/assets-controllers/dist/chunk-MBCN3MNX.js.map
rename to node_modules/@metamask/assets-controllers/dist/chunk-4X5RKBLG.js.map
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-4LY47RPI.mjs b/node_modules/@metamask/assets-controllers/dist/chunk-ASBEJZFL.mjs
similarity index 73%
rename from node_modules/@metamask/assets-controllers/dist/chunk-4LY47RPI.mjs
rename to node_modules/@metamask/assets-controllers/dist/chunk-ASBEJZFL.mjs
index b4fa939..b305ee8 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-4LY47RPI.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-ASBEJZFL.mjs
@@ -19,7 +19,7 @@ function getDefaultTokenBalancesState() {
     contractBalances: {}
   };
 }
-var _handle, _getERC20BalanceOf, _interval, _tokens, _disabled;
+var _handle, _getERC20BalanceOf, _interval, _tokens, _disabled, _updateInProgress;
 var TokenBalancesController = class extends BaseController {
   /**
    * Construct a Token Balances Controller.
@@ -28,6 +28,7 @@ var TokenBalancesController = class extends BaseController {
    * @param options.interval - Polling interval used to fetch new token balances.
    * @param options.tokens - List of tokens to track balances for.
    * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
+   * @param options.onTokensStateChange - Allows subscribing to token controller state changes.
    * @param options.getERC20BalanceOf - Gets the balance of the given account at the given contract address.
    * @param options.state - Initial state to set on this controller.
    * @param options.messenger - The controller restricted messenger.
@@ -36,6 +37,7 @@ var TokenBalancesController = class extends BaseController {
     interval = DEFAULT_INTERVAL,
     tokens = [],
     disabled = false,
+    onTokensStateChange,
     getERC20BalanceOf,
     messenger,
     state = {}
@@ -54,16 +56,14 @@ var TokenBalancesController = class extends BaseController {
     __privateAdd(this, _interval, void 0);
     __privateAdd(this, _tokens, void 0);
     __privateAdd(this, _disabled, void 0);
+    __privateAdd(this, _updateInProgress, false);
     __privateSet(this, _disabled, disabled);
     __privateSet(this, _interval, interval);
     __privateSet(this, _tokens, tokens);
-    this.messagingSystem.subscribe(
-      "TokensController:stateChange",
-      ({ tokens: newTokens, detectedTokens }) => {
-        __privateSet(this, _tokens, [...newTokens, ...detectedTokens]);
-        this.updateBalances();
-      }
-    );
+    onTokensStateChange(async ({ tokens: newTokens, detectedTokens }) => {
+      __privateSet(this, _tokens, [...newTokens, ...detectedTokens]);
+      await this.updateBalances();
+    });
     __privateSet(this, _getERC20BalanceOf, getERC20BalanceOf);
     this.poll();
   }
@@ -100,28 +100,38 @@ var TokenBalancesController = class extends BaseController {
    * Updates balances for all tokens.
    */
   async updateBalances() {
-    if (__privateGet(this, _disabled)) {
+    if (__privateGet(this, _disabled) || __privateGet(this, _updateInProgress)) {
       return;
     }
+    __privateSet(this, _updateInProgress, true);
     const newContractBalances = {};
-    for (const token of __privateGet(this, _tokens)) {
+    const balancePromises = __privateGet(this, _tokens).map((token) => {
       const { address } = token;
       const { selectedAddress } = this.messagingSystem.call(
         "PreferencesController:getState"
       );
-      try {
-        newContractBalances[address] = toHex(
-          await __privateGet(this, _getERC20BalanceOf).call(this, address, selectedAddress)
-        );
+      return __privateGet(this, _getERC20BalanceOf).call(this, address, selectedAddress).then((balance) => {
+        newContractBalances[address] = toHex(balance);
         token.balanceError = null;
-      } catch (error) {
+      }).catch((error) => {
         newContractBalances[address] = toHex(0);
         token.balanceError = error;
-      }
-    }
+      });
+    });
+    await Promise.all(balancePromises);
     this.update((state) => {
       state.contractBalances = newContractBalances;
     });
+    __privateSet(this, _updateInProgress, false);
+  }
+  /**
+   * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+   * Resets to the default state
+   */
+  reset() {
+    this.update((state) => {
+      state.contractBalances = {};
+    });
   }
 };
 _handle = new WeakMap();
@@ -129,6 +139,7 @@ _getERC20BalanceOf = new WeakMap();
 _interval = new WeakMap();
 _tokens = new WeakMap();
 _disabled = new WeakMap();
+_updateInProgress = new WeakMap();
 var TokenBalancesController_default = TokenBalancesController;
 
 export {
@@ -136,4 +147,4 @@ export {
   TokenBalancesController,
   TokenBalancesController_default
 };
-//# sourceMappingURL=chunk-4LY47RPI.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-ASBEJZFL.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-ASBEJZFL.mjs.map b/node_modules/@metamask/assets-controllers/dist/chunk-ASBEJZFL.mjs.map
new file mode 100644
index 0000000..4f423ad
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-ASBEJZFL.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/TokenBalancesController.ts"],"sourcesContent":["import {\n  type RestrictedControllerMessenger,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  BaseController,\n} from '@metamask/base-controller';\nimport { safelyExecute, toHex } from '@metamask/controller-utils';\nimport type { PreferencesControllerGetStateAction } from '@metamask/preferences-controller';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerStateChangeEvent,\n  TokensState,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  contractBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property tokens - List of tokens to track balances for.\n * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.\n * @property getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  tokens?: Token[];\n  disabled?: boolean;\n  onTokensStateChange: (listener: (tokensState: TokensState) => void) => void;\n  getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * Represents a mapping of hash token contract addresses to their balances.\n */\ntype ContractBalances = Record<string, string>;\n\n/**\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport type TokenBalancesControllerState = {\n  contractBalances: ContractBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions = PreferencesControllerGetStateAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    contractBalances: {},\n  };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n\n  #interval: number;\n\n  #tokens: Token[];\n\n  #disabled: boolean;\n\n  #updateInProgress = false;\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.tokens - List of tokens to track balances for.\n   * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.\n   * @param options.onTokensStateChange - Allows subscribing to token controller state changes.\n   * @param options.getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    tokens = [],\n    disabled = false,\n    onTokensStateChange,\n    getERC20BalanceOf,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.#disabled = disabled;\n    this.#interval = interval;\n    this.#tokens = tokens;\n\n    onTokensStateChange(async ({ tokens: newTokens, detectedTokens }) => {\n      this.#tokens = [...newTokens, ...detectedTokens];\n      await this.updateBalances();\n    });\n\n    this.#getERC20BalanceOf = getERC20BalanceOf;\n\n    this.poll();\n  }\n\n  /**\n   * Allows controller to update tracked tokens contract balances.\n   */\n  enable() {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from updating tracked tokens contract balances.\n   */\n  disable() {\n    this.#disabled = true;\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.#interval = interval;\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await safelyExecute(() => this.updateBalances());\n\n    this.#handle = setTimeout(() => {\n      this.poll(this.#interval);\n    }, this.#interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.#disabled || this.#updateInProgress) {\n      return;\n    }\n    this.#updateInProgress = true;\n    const newContractBalances: ContractBalances = {};\n    const balancePromises = this.#tokens.map((token) => {\n      const { address } = token;\n      const { selectedAddress } = this.messagingSystem.call(\n        'PreferencesController:getState',\n      );\n\n      return this.#getERC20BalanceOf(address, selectedAddress)\n        .then((balance) => {\n          newContractBalances[address] = toHex(balance);\n          token.balanceError = null;\n        })\n        .catch((error) => {\n          newContractBalances[address] = toHex(0);\n          token.balanceError = error;\n        });\n    });\n\n    await Promise.all(balancePromises);\n\n    this.update((state) => {\n      state.contractBalances = newContractBalances;\n    });\n    this.#updateInProgress = false;\n  }\n\n  /**\n   * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO\n   * Resets to the default state\n   */\n  reset() {\n    this.update((state) => {\n      state.contractBalances = {};\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"],"mappings":";;;;;;;AAAA;AAAA,EAIE;AAAA,OACK;AACP,SAAS,eAAe,aAAa;AAUrC,IAAM,mBAAmB;AAEzB,IAAM,iBAAiB;AAEvB,IAAM,WAAW;AAAA,EACf,kBAAkB,EAAE,SAAS,MAAM,WAAW,MAAM;AACtD;AAkEO,SAAS,+BAA6D;AAC3E,SAAO;AAAA,IACL,kBAAkB,CAAC;AAAA,EACrB;AACF;AA5FA;AAkGO,IAAM,0BAAN,cAAsC,eAI3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBA,YAAY;AAAA,IACV,WAAW;AAAA,IACX,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ,CAAC;AAAA,EACX,GAAmC;AACjC,UAAM;AAAA,MACJ,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,OAAO;AAAA,QACL,GAAG,6BAA6B;AAAA,QAChC,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AAzCH;AAEA;AAEA;AAEA;AAEA;AAEA,0CAAoB;AAiClB,uBAAK,WAAY;AACjB,uBAAK,WAAY;AACjB,uBAAK,SAAU;AAEf,wBAAoB,OAAO,EAAE,QAAQ,WAAW,eAAe,MAAM;AACnE,yBAAK,SAAU,CAAC,GAAG,WAAW,GAAG,cAAc;AAC/C,YAAM,KAAK,eAAe;AAAA,IAC5B,CAAC;AAED,uBAAK,oBAAqB;AAE1B,SAAK,KAAK;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACR,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,UAAkC;AAC3C,QAAI,UAAU;AACZ,yBAAK,WAAY;AAAA,IACnB;AAEA,QAAI,mBAAK,UAAS;AAChB,mBAAa,mBAAK,QAAO;AAAA,IAC3B;AAEA,UAAM,cAAc,MAAM,KAAK,eAAe,CAAC;AAE/C,uBAAK,SAAU,WAAW,MAAM;AAC9B,WAAK,KAAK,mBAAK,UAAS;AAAA,IAC1B,GAAG,mBAAK,UAAS;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB;AACrB,QAAI,mBAAK,cAAa,mBAAK,oBAAmB;AAC5C;AAAA,IACF;AACA,uBAAK,mBAAoB;AACzB,UAAM,sBAAwC,CAAC;AAC/C,UAAM,kBAAkB,mBAAK,SAAQ,IAAI,CAAC,UAAU;AAClD,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,EAAE,gBAAgB,IAAI,KAAK,gBAAgB;AAAA,QAC/C;AAAA,MACF;AAEA,aAAO,mBAAK,oBAAL,WAAwB,SAAS,iBACrC,KAAK,CAAC,YAAY;AACjB,4BAAoB,OAAO,IAAI,MAAM,OAAO;AAC5C,cAAM,eAAe;AAAA,MACvB,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,4BAAoB,OAAO,IAAI,MAAM,CAAC;AACtC,cAAM,eAAe;AAAA,MACvB,CAAC;AAAA,IACL,CAAC;AAED,UAAM,QAAQ,IAAI,eAAe;AAEjC,SAAK,OAAO,CAAC,UAAU;AACrB,YAAM,mBAAmB;AAAA,IAC3B,CAAC;AACD,uBAAK,mBAAoB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ;AACN,SAAK,OAAO,CAAC,UAAU;AACrB,YAAM,mBAAmB,CAAC;AAAA,IAC5B,CAAC;AAAA,EACH;AACF;AAvIE;AAEA;AAEA;AAEA;AAEA;AAEA;AA+HF,IAAO,kCAAQ;","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-4ODKGWYQ.js b/node_modules/@metamask/assets-controllers/dist/chunk-EXQ3O54L.js
similarity index 99%
rename from node_modules/@metamask/assets-controllers/dist/chunk-4ODKGWYQ.js
rename to node_modules/@metamask/assets-controllers/dist/chunk-EXQ3O54L.js
index 542e3f6..6972b5c 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-4ODKGWYQ.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-EXQ3O54L.js
@@ -3,10 +3,10 @@
 var _chunkU3DJJN4Xjs = require('./chunk-U3DJJN4X.js');
 
 
-var _chunkB5YY22QQjs = require('./chunk-B5YY22QQ.js');
+var _chunkBOTVAG4Ajs = require('./chunk-BOTVAG4A.js');
 
 
-var _chunkBOTVAG4Ajs = require('./chunk-BOTVAG4A.js');
+var _chunkB5YY22QQjs = require('./chunk-B5YY22QQ.js');
 
 // src/AssetsContractController.ts
 var _contracts = require('@ethersproject/contracts');
@@ -365,4 +365,4 @@ var AssetsContractController_default = AssetsContractController;
 
 
 exports.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID; exports.MISSING_PROVIDER_ERROR = MISSING_PROVIDER_ERROR; exports.AssetsContractController = AssetsContractController; exports.AssetsContractController_default = AssetsContractController_default;
-//# sourceMappingURL=chunk-4ODKGWYQ.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-EXQ3O54L.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-4ODKGWYQ.js.map b/node_modules/@metamask/assets-controllers/dist/chunk-EXQ3O54L.js.map
similarity index 100%
rename from node_modules/@metamask/assets-controllers/dist/chunk-4ODKGWYQ.js.map
rename to node_modules/@metamask/assets-controllers/dist/chunk-EXQ3O54L.js.map
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-HDI4L2DD.js.map b/node_modules/@metamask/assets-controllers/dist/chunk-HDI4L2DD.js.map
deleted file mode 100644
index 82f1e6a..0000000
--- a/node_modules/@metamask/assets-controllers/dist/chunk-HDI4L2DD.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/TokenDetectionController.ts"],"names":[],"mappings":";;;;;;;;;;;AASA,OAAO,iBAAiB;AACxB,SAAS,SAAS,qBAAqB;AAavC,SAAS,uCAAuC;AAoBhD,IAAM,mBAAmB;AAYlB,SAAS,uBACd,QACA,QACS;AACT,MAAI,OAAO,WAAW,YAAY,OAAO,WAAW,UAAU;AAC5D,WAAO;AAAA,EACT;AACA,SAAO,OAAO,YAAY,MAAM,OAAO,YAAY;AACrD;AAeO,IAAM,4BAA4B,OAAO;AAAA,EAC9C;AACF,EAAE,OAA0B,CAAC,KAAK,CAAC,MAAM,QAAQ,MAAM;AACrD,QAAM,EAAE,MAAM,OAAO,QAAQ,GAAG,cAAc,IAAI;AAClD,SAAO;AAAA,IACL,GAAG;AAAA,IACH,CAAC,KAAK,YAAY,CAAC,GAAG;AAAA,MACpB,GAAG;AAAA,MACH,SAAS,KAAK,YAAY;AAAA,MAC1B,SAAS,mBAAmB,IAAI;AAAA,MAChC,aAAa,CAAC;AAAA,IAChB;AAAA,EACF;AACF,GAAG,CAAC,CAAC;AAEE,IAAM,iBAAiB;AA7F9B;AAoJO,IAAM,2BAAN,cAAuC,gCAI5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwCA,YAAY;AAAA,IACV;AAAA,IACA,WAAW;AAAA,IACX,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAeG;AACD,UAAM;AAAA,MACJ,MAAM;AAAA,MACN;AAAA,MACA,OAAO,CAAC;AAAA,MACR,UAAU,CAAC;AAAA,IACb,CAAC;AAmCH;AAAA;AAAA;AAAA;AAkHA;AASA;AAAA;AAAA;AAAA,uBAAM;AAWN;AAoDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAM;AAwEN;AA6CA,uBAAM;AArZN;AAEA;AAEA;AAEA,mCAAgC,CAAC;AAEjC;AAEA;AAEA;AAEA;AAEA,uBAAS,0BAAT;AAEA,uBAAS,wBAAT;AAmDE,uBAAK,WAAY;AACjB,SAAK,kBAAkB,QAAQ;AAE/B,uBAAK,kBACH,mBACA,KAAK,gBAAgB,KAAK,uCAAuC,EAC9D;AAEL,UAAM,EAAE,SAAS,gBAAgB,IAC/B,sBAAK,8EAAL;AACF,uBAAK,kBAAmB;AAExB,UAAM,EAAE,mBAAmB,yBAAyB,IAClD,KAAK,gBAAgB,KAAK,gCAAgC;AAC5D,uBAAK,oCAAqC;AAC1C,uBAAK,+BACH,oCAAoC,OAAO;AAE7C,uBAAK,0BAA2B;AAEhC,uBAAK,wBAAyB;AAE9B,UAAM,EAAE,WAAW,IAAI,KAAK,gBAAgB;AAAA,MAC1C;AAAA,IACF;AACA,uBAAK,aAAc;AAEnB,0BAAK,oDAAL;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAoFA,SAAe;AACb,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,UAAgB;AACd,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,WAAoB;AACtB,WAAO,CAAC,mBAAK,cAAa,mBAAK;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAuB;AAC3B,SAAK,OAAO;AACZ,UAAM,sBAAK,gCAAL;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKA,OAAa;AACX,SAAK,QAAQ;AACb,0BAAK,8BAAL;AAAA,EACF;AAAA,EAqDA,MAAM,aACJ,iBACA,SACe;AACf,QAAI,CAAC,KAAK,UAAU;AAClB;AAAA,IACF;AACA,UAAM,KAAK,aAAa;AAAA,MACtB;AAAA,MACA,iBAAiB,QAAQ;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,MAAM,aAAa;AAAA,IACjB;AAAA,IACA;AAAA,EACF,IAGI,CAAC,GAAkB;AACrB,QAAI,CAAC,KAAK,UAAU;AAClB;AAAA,IACF;AAEA,UAAM,8BACJ,mBAAmB,mBAAK;AAC1B,UAAM,EAAE,SAAS,iBAAiB,wBAAwB,IACxD,sBAAK,8EAAL,WAA0C;AAC5C,UAAM,8BAA8B;AACpC,UAAM,sCAAsC;AAE5C,QAAI,CAAC,oCAAoC,2BAA2B,GAAG;AACrE;AAAA,IACF;AACA,QACE,CAAC,mBAAK,uCACN,gCAAgC,QAAQ,SACxC;AACA;AAAA,IACF;AACA,UAAM,oCACJ,CAAC,mBAAK,uCACN,gCAAgC,QAAQ;AAC1C,UAAM,EAAE,kBAAkB,IAAI,KAAK,gBAAgB;AAAA,MACjD;AAAA,IACF;AACA,uBAAK,YAAa,oCACd,4BACA,kBAAkB,2BAA2B,GAAG,QAAQ,CAAC;AAE7D,eAAW,eAAe,sBAAK,0DAAL,WAAgC;AAAA,MACxD,SAAS;AAAA,MACT,iBAAiB;AAAA,IACnB,IAAI;AACF,YAAM,sBAAK,0CAAL,WAAwB;AAAA,QAC5B;AAAA,QACA,iBAAiB;AAAA,QACjB,iBAAiB;AAAA,QACjB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAwGF;AA9cE;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAES;AAEA;AAoFT;AAAA,4BAAuB,WAAG;AACxB,OAAK,gBAAgB,UAAU,4BAA4B,YAAY;AACrE,uBAAK,aAAc;AACnB,UAAM,sBAAK,kDAAL;AAAA,EACR,CAAC;AAED,OAAK,gBAAgB,UAAU,0BAA0B,MAAM;AAC7D,uBAAK,aAAc;AACnB,0BAAK,8BAAL;AAAA,EACF,CAAC;AAED,OAAK,gBAAgB;AAAA,IACnB;AAAA,IACA,OAAO,EAAE,UAAU,MAAM;AACvB,YAAM,YAAY,OAAO,KAAK,SAAS,EAAE;AAEzC,UAAI,WAAW;AACb,cAAM,sBAAK,kDAAL;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,OAAK,gBAAgB;AAAA,IACnB;AAAA,IACA,OAAO,EAAE,iBAAiB,oBAAoB,kBAAkB,MAAM;AACpE,YAAM,2BACJ,mBAAK,sBAAqB;AAC5B,YAAM,oCACJ,mBAAK,wCAAuC;AAE9C,yBAAK,kBAAmB;AACxB,yBAAK,oCAAqC;AAE1C,UAAI,4BAA4B,mCAAmC;AACjE,cAAM,sBAAK,kDAAL,WAA4B;AAAA,UAChC,iBAAiB,mBAAK;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,OAAK,gBAAgB;AAAA,IACnB;AAAA,IACA,OAAO,EAAE,SAAS,mBAAmB,MAAM;AACzC,YAAM,2BACJ,mBAAK,sBAAqB;AAC5B,UAAI,0BAA0B;AAC5B,2BAAK,kBAAmB;AACxB,cAAM,sBAAK,kDAAL,WAA4B;AAAA,UAChC,iBAAiB,mBAAK;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,OAAK,gBAAgB;AAAA,IACnB;AAAA,IACA,OAAO,EAAE,wBAAwB,MAAM;AACrC,YAAM,2BACJ,mBAAK,sBAAqB;AAE5B,YAAM,EAAE,SAAS,WAAW,IAC1B,sBAAK,8EAAL,WAA0C;AAC5C,yBAAK,+BACH,oCAAoC,UAAU;AAEhD,UAAI,4BAA4B,mBAAK,gCAA+B;AAClE,2BAAK,kBAAmB;AACxB,cAAM,sBAAK,kDAAL,WAA4B;AAAA,UAChC,iBAAiB,mBAAK;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAwCA;AAAA,iBAAY,WAAS;AACnB,MAAI,mBAAK,cAAa;AACpB,kBAAc,mBAAK,YAAW;AAAA,EAChC;AACF;AAKM;AAAA,kBAAa,iBAAkB;AACnC,MAAI,CAAC,KAAK,UAAU;AAClB;AAAA,EACF;AACA,wBAAK,8BAAL;AACA,QAAM,KAAK,aAAa;AACxB,qBAAK,aAAc,YAAY,YAAY;AACzC,UAAM,KAAK,aAAa;AAAA,EAC1B,GAAG,KAAK,kBAAkB,CAAC;AAC7B;AAEA;AAAA,yCAAoC,SAAC,iBAGnC;AACA,MAAI,iBAAiB;AACnB,UAAM,uBAAuB,KAAK,gBAAgB;AAAA,MAChD;AAAA,MACA;AAAA,IACF;AACA,QAAI,sBAAsB;AACxB,aAAO;AAAA,QACL,SAAS,qBAAqB;AAAA,QAC9B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,QAAM,EAAE,wBAAwB,IAAI,KAAK,gBAAgB;AAAA,IACvD;AAAA,EACF;AACA,QAAM;AAAA,IACJ,eAAe,EAAE,QAAQ;AAAA,EAC3B,IAAI,KAAK,gBAAgB;AAAA,IACvB;AAAA,IACA;AAAA,EACF;AACA,SAAO;AAAA,IACL;AAAA,IACA,iBAAiB;AAAA,EACnB;AACF;AAuBM;AAAA,2BAAsB,eAAC;AAAA,EAC3B;AAAA,EACA;AACF,IAGI,CAAC,GAAkB;AACrB,QAAM,KAAK,aAAa;AAAA,IACtB;AAAA,IACA;AAAA,EACF,CAAC;AACD,OAAK,kBAAkB,gBAAgB;AACzC;AA4DA;AAAA,+BAA0B,SAAC;AAAA,EACzB;AAAA,EACA;AACF,GAGe;AACb,QAAM,EAAE,WAAW,mBAAmB,iBAAiB,IACrD,KAAK,gBAAgB,KAAK,2BAA2B;AACvD,QAAM,CAAC,iBAAiB,yBAAyB,sBAAsB,IAAI;AAAA,IACzE;AAAA,IACA;AAAA,IACA;AAAA,EACF,EAAE;AAAA,IAAI,CAAC,YACJ,OAAO,OAAO,IAAI,eAAe,KAAK,CAAC,GAAG;AAAA,MAAI,CAAC,UAC9C,OAAO,UAAU,WAAW,QAAQ,MAAM;AAAA,IAC5C;AAAA,EACF;AAEA,QAAM,iBAA2B,CAAC;AAClC,aAAW,gBAAgB,OAAO,KAAK,mBAAK,WAAU,GAAG;AACvD,QACE;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAE;AAAA,MACA,CAAC,cACC,CAAC,UAAU;AAAA,QAAK,CAAC,YACf,uBAAuB,SAAS,YAAY;AAAA,MAC9C;AAAA,IACJ,GACA;AACA,qBAAe,KAAK,YAAY;AAAA,IAClC;AAAA,EACF;AAEA,QAAM,yBAAyB,CAAC;AAChC,WAAS,IAAI,GAAG,OAAO,KAAM,IAAI,eAAe,QAAQ,KAAK,MAAM;AACjE,2BAAuB,KAAK,eAAe,MAAM,GAAG,IAAI,IAAI,CAAC;AAAA,EAC/D;AAEA,SAAO;AACT;AAEM;AAAA,uBAAkB,eAAC;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAKkB;AAChB,QAAM,cAAc,YAAY;AAC9B,UAAM,WAAW,MAAM,mBAAK,0BAAL,WACrB,iBACA,aACA;AAGF,UAAM,oBAA6B,CAAC;AACpC,UAAM,qBAA+B,CAAC;AACtC,eAAW,uBAAuB,OAAO,KAAK,QAAQ,GAAG;AACvD,YAAM,EAAE,UAAU,QAAQ,aAAa,SAAS,KAAK,IACnD,mBAAK,YAAW,mBAAmB;AACrC,yBAAmB,KAAK,GAAG,MAAM,MAAM,mBAAmB,EAAE;AAC5D,wBAAkB,KAAK;AAAA,QACrB,SAAS;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO;AAAA,QACP,UAAU;AAAA,QACV;AAAA,MACF,CAAC;AAAA,IACH;AAEA,QAAI,kBAAkB,QAAQ;AAC5B,yBAAK,wBAAL,WAA4B;AAAA,QAC1B,OAAO;AAAA,QACP,UAAU;AAAA,QACV,YAAY;AAAA,UACV,QAAQ;AAAA,UACR,gBAAgB;AAAA,UAChB,YAAY;AAAA,QACd;AAAA,MACF;AAEA,YAAM,KAAK,gBAAgB;AAAA,QACzB;AAAA,QACA;AAAA,QACA;AAAA,UACE;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAGF,IAAO,mCAAQ","sourcesContent":["import type {\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerSelectedAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport contractMap from '@metamask/contract-metadata';\nimport { ChainId, safelyExecute } from '@metamask/controller-utils';\nimport type {\n  KeyringControllerGetStateAction,\n  KeyringControllerLockEvent,\n  KeyringControllerUnlockEvent,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetNetworkConfigurationByNetworkClientId,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n} from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { isTokenDetectionSupportedForNetwork } from './assetsUtil';\nimport type {\n  GetTokenListState,\n  TokenListMap,\n  TokenListStateChange,\n} from './TokenListController';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerGetStateAction,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\n/**\n * Compare 2 given strings and return boolean\n * eg: \"foo\" and \"FOO\" => true\n * eg: \"foo\" and \"bar\" => false\n * eg: \"foo\" and 123 => false\n *\n * @param value1 - first string to compare\n * @param value2 - first string to compare\n * @returns true if 2 strings are identical when they are lowercase\n */\nexport function isEqualCaseInsensitive(\n  value1: string,\n  value2: string,\n): boolean {\n  if (typeof value1 !== 'string' || typeof value2 !== 'string') {\n    return false;\n  }\n  return value1.toLowerCase() === value2.toLowerCase();\n}\n\ntype LegacyToken = {\n  name: string;\n  logo: `${string}.svg`;\n  symbol: string;\n  decimals: number;\n  erc20?: boolean;\n  erc721?: boolean;\n};\n\ntype TokenDetectionMap = {\n  [P in keyof TokenListMap]: Omit<TokenListMap[P], 'occurrences'>;\n};\n\nexport const STATIC_MAINNET_TOKEN_LIST = Object.entries<LegacyToken>(\n  contractMap,\n).reduce<TokenDetectionMap>((acc, [base, contract]) => {\n  const { logo, erc20, erc721, ...tokenMetadata } = contract;\n  return {\n    ...acc,\n    [base.toLowerCase()]: {\n      ...tokenMetadata,\n      address: base.toLowerCase(),\n      iconUrl: `images/contract/${logo}`,\n      aggregators: [],\n    },\n  };\n}, {});\n\nexport const controllerName = 'TokenDetectionController';\n\nexport type TokenDetectionState = Record<never, never>;\n\nexport type TokenDetectionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenDetectionState\n>;\n\nexport type TokenDetectionControllerActions =\n  TokenDetectionControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetNetworkConfigurationByNetworkClientId\n  | NetworkControllerGetStateAction\n  | GetTokenListState\n  | KeyringControllerGetStateAction\n  | PreferencesControllerGetStateAction\n  | TokensControllerGetStateAction\n  | TokensControllerAddDetectedTokensAction;\n\nexport type TokenDetectionControllerStateChangeEvent =\n  ControllerStateChangeEvent<typeof controllerName, TokenDetectionState>;\n\nexport type TokenDetectionControllerEvents =\n  TokenDetectionControllerStateChangeEvent;\n\nexport type AllowedEvents =\n  | AccountsControllerSelectedAccountChangeEvent\n  | NetworkControllerNetworkDidChangeEvent\n  | TokenListStateChange\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | PreferencesControllerStateChangeEvent;\n\nexport type TokenDetectionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenDetectionControllerActions | AllowedActions,\n  TokenDetectionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Controller that passively polls on a set interval for Tokens auto detection\n * @property intervalId - Polling interval used to fetch new token rates\n * @property selectedAddress - Vault selected address\n * @property networkClientId - The network client ID of the current selected network\n * @property disabled - Boolean to track if network requests are blocked\n * @property isUnlocked - Boolean to track if the keyring state is unlocked\n * @property isDetectionEnabledFromPreferences - Boolean to track if detection is enabled from PreferencesController\n * @property isDetectionEnabledForNetwork - Boolean to track if detected is enabled for current network\n */\nexport class TokenDetectionController extends StaticIntervalPollingController<\n  typeof controllerName,\n  TokenDetectionState,\n  TokenDetectionControllerMessenger\n> {\n  #intervalId?: ReturnType<typeof setTimeout>;\n\n  #selectedAddress: string;\n\n  #networkClientId: NetworkClientId;\n\n  #tokenList: TokenDetectionMap = {};\n\n  #disabled: boolean;\n\n  #isUnlocked: boolean;\n\n  #isDetectionEnabledFromPreferences: boolean;\n\n  #isDetectionEnabledForNetwork: boolean;\n\n  readonly #getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n\n  readonly #trackMetaMetricsEvent: (options: {\n    event: string;\n    category: string;\n    properties: {\n      tokens: string[];\n      token_standard: string;\n      asset_type: string;\n    };\n  }) => void;\n\n  /**\n   * Creates a TokenDetectionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The controller messaging system.\n   * @param options.disabled - If set to true, all network requests are blocked.\n   * @param options.interval - Polling interval used to fetch new token rates\n   * @param options.selectedAddress - Vault selected address\n   * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.\n   * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.\n   */\n  constructor({\n    selectedAddress,\n    interval = DEFAULT_INTERVAL,\n    disabled = true,\n    getBalancesInSingleCall,\n    trackMetaMetricsEvent,\n    messenger,\n  }: {\n    selectedAddress?: string;\n    interval?: number;\n    disabled?: boolean;\n    getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n    trackMetaMetricsEvent: (options: {\n      event: string;\n      category: string;\n      properties: {\n        tokens: string[];\n        token_standard: string;\n        asset_type: string;\n      };\n    }) => void;\n    messenger: TokenDetectionControllerMessenger;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: {},\n      metadata: {},\n    });\n\n    this.#disabled = disabled;\n    this.setIntervalLength(interval);\n\n    this.#selectedAddress =\n      selectedAddress ??\n      this.messagingSystem.call('AccountsController:getSelectedAccount')\n        .address;\n\n    const { chainId, networkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId();\n    this.#networkClientId = networkClientId;\n\n    const { useTokenDetection: defaultUseTokenDetection } =\n      this.messagingSystem.call('PreferencesController:getState');\n    this.#isDetectionEnabledFromPreferences = defaultUseTokenDetection;\n    this.#isDetectionEnabledForNetwork =\n      isTokenDetectionSupportedForNetwork(chainId);\n\n    this.#getBalancesInSingleCall = getBalancesInSingleCall;\n\n    this.#trackMetaMetricsEvent = trackMetaMetricsEvent;\n\n    const { isUnlocked } = this.messagingSystem.call(\n      'KeyringController:getState',\n    );\n    this.#isUnlocked = isUnlocked;\n\n    this.#registerEventListeners();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system subscriptions to controller events.\n   */\n  #registerEventListeners() {\n    this.messagingSystem.subscribe('KeyringController:unlock', async () => {\n      this.#isUnlocked = true;\n      await this.#restartTokenDetection();\n    });\n\n    this.messagingSystem.subscribe('KeyringController:lock', () => {\n      this.#isUnlocked = false;\n      this.#stopPolling();\n    });\n\n    this.messagingSystem.subscribe(\n      'TokenListController:stateChange',\n      async ({ tokenList }) => {\n        const hasTokens = Object.keys(tokenList).length;\n\n        if (hasTokens) {\n          await this.#restartTokenDetection();\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      async ({ selectedAddress: newSelectedAddress, useTokenDetection }) => {\n        const isSelectedAddressChanged =\n          this.#selectedAddress !== newSelectedAddress;\n        const isDetectionChangedFromPreferences =\n          this.#isDetectionEnabledFromPreferences !== useTokenDetection;\n\n        this.#selectedAddress = newSelectedAddress;\n        this.#isDetectionEnabledFromPreferences = useTokenDetection;\n\n        if (isSelectedAddressChanged || isDetectionChangedFromPreferences) {\n          await this.#restartTokenDetection({\n            selectedAddress: this.#selectedAddress,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'AccountsController:selectedAccountChange',\n      async ({ address: newSelectedAddress }) => {\n        const isSelectedAddressChanged =\n          this.#selectedAddress !== newSelectedAddress;\n        if (isSelectedAddressChanged) {\n          this.#selectedAddress = newSelectedAddress;\n          await this.#restartTokenDetection({\n            selectedAddress: this.#selectedAddress,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'NetworkController:networkDidChange',\n      async ({ selectedNetworkClientId }) => {\n        const isNetworkClientIdChanged =\n          this.#networkClientId !== selectedNetworkClientId;\n\n        const { chainId: newChainId } =\n          this.#getCorrectChainIdAndNetworkClientId(selectedNetworkClientId);\n        this.#isDetectionEnabledForNetwork =\n          isTokenDetectionSupportedForNetwork(newChainId);\n\n        if (isNetworkClientIdChanged && this.#isDetectionEnabledForNetwork) {\n          this.#networkClientId = selectedNetworkClientId;\n          await this.#restartTokenDetection({\n            networkClientId: this.#networkClientId,\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Internal isActive state\n   * @type {boolean}\n   */\n  get isActive(): boolean {\n    return !this.#disabled && this.#isUnlocked;\n  }\n\n  /**\n   * Start polling for detected tokens.\n   */\n  async start(): Promise<void> {\n    this.enable();\n    await this.#startPolling();\n  }\n\n  /**\n   * Stop polling for detected tokens.\n   */\n  stop(): void {\n    this.disable();\n    this.#stopPolling();\n  }\n\n  #stopPolling(): void {\n    if (this.#intervalId) {\n      clearInterval(this.#intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   */\n  async #startPolling(): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    this.#stopPolling();\n    await this.detectTokens();\n    this.#intervalId = setInterval(async () => {\n      await this.detectTokens();\n    }, this.getIntervalLength());\n  }\n\n  #getCorrectChainIdAndNetworkClientId(networkClientId?: NetworkClientId): {\n    chainId: Hex;\n    networkClientId: NetworkClientId;\n  } {\n    if (networkClientId) {\n      const networkConfiguration = this.messagingSystem.call(\n        'NetworkController:getNetworkConfigurationByNetworkClientId',\n        networkClientId,\n      );\n      if (networkConfiguration) {\n        return {\n          chainId: networkConfiguration.chainId,\n          networkClientId,\n        };\n      }\n    }\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId,\n      networkClientId: selectedNetworkClientId,\n    };\n  }\n\n  async _executePoll(\n    networkClientId: NetworkClientId,\n    options: { address: string },\n  ): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress: options.address,\n    });\n  }\n\n  /**\n   * Restart token detection polling period and call detectNewTokens\n   * in case of address change or user session initialization.\n   *\n   * @param options - Options for restart token detection.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances\n   * @param options.networkClientId - The ID of the network client to use.\n   */\n  async #restartTokenDetection({\n    selectedAddress,\n    networkClientId,\n  }: {\n    selectedAddress?: string;\n    networkClientId?: NetworkClientId;\n  } = {}): Promise<void> {\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress,\n    });\n    this.setIntervalLength(DEFAULT_INTERVAL);\n  }\n\n  /**\n   * For each token in the token list provided by the TokenListController, checks the token's balance for the selected account address on the active network.\n   * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.\n   *\n   * @param options - Options for token detection.\n   * @param options.networkClientId - The ID of the network client to use.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances.\n   */\n  async detectTokens({\n    networkClientId,\n    selectedAddress,\n  }: {\n    networkClientId?: NetworkClientId;\n    selectedAddress?: string;\n  } = {}): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n\n    const addressAgainstWhichToDetect =\n      selectedAddress ?? this.#selectedAddress;\n    const { chainId, networkClientId: selectedNetworkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId(networkClientId);\n    const chainIdAgainstWhichToDetect = chainId;\n    const networkClientIdAgainstWhichToDetect = selectedNetworkClientId;\n\n    if (!isTokenDetectionSupportedForNetwork(chainIdAgainstWhichToDetect)) {\n      return;\n    }\n    if (\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect !== ChainId.mainnet\n    ) {\n      return;\n    }\n    const isTokenDetectionInactiveInMainnet =\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect === ChainId.mainnet;\n    const { tokensChainsCache } = this.messagingSystem.call(\n      'TokenListController:getState',\n    );\n    this.#tokenList = isTokenDetectionInactiveInMainnet\n      ? STATIC_MAINNET_TOKEN_LIST\n      : tokensChainsCache[chainIdAgainstWhichToDetect]?.data ?? {};\n\n    for (const tokensSlice of this.#getSlicesOfTokensToDetect({\n      chainId: chainIdAgainstWhichToDetect,\n      selectedAddress: addressAgainstWhichToDetect,\n    })) {\n      await this.#addDetectedTokens({\n        tokensSlice,\n        selectedAddress: addressAgainstWhichToDetect,\n        networkClientId: networkClientIdAgainstWhichToDetect,\n        chainId: chainIdAgainstWhichToDetect,\n      });\n    }\n  }\n\n  #getSlicesOfTokensToDetect({\n    chainId,\n    selectedAddress,\n  }: {\n    chainId: Hex;\n    selectedAddress: string;\n  }): string[][] {\n    const { allTokens, allDetectedTokens, allIgnoredTokens } =\n      this.messagingSystem.call('TokensController:getState');\n    const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [\n      allTokens,\n      allDetectedTokens,\n      allIgnoredTokens,\n    ].map((tokens) =>\n      (tokens[chainId]?.[selectedAddress] ?? []).map((value) =>\n        typeof value === 'string' ? value : value.address,\n      ),\n    );\n\n    const tokensToDetect: string[] = [];\n    for (const tokenAddress of Object.keys(this.#tokenList)) {\n      if (\n        [\n          tokensAddresses,\n          detectedTokensAddresses,\n          ignoredTokensAddresses,\n        ].every(\n          (addresses) =>\n            !addresses.find((address) =>\n              isEqualCaseInsensitive(address, tokenAddress),\n            ),\n        )\n      ) {\n        tokensToDetect.push(tokenAddress);\n      }\n    }\n\n    const slicesOfTokensToDetect = [];\n    for (let i = 0, size = 1000; i < tokensToDetect.length; i += size) {\n      slicesOfTokensToDetect.push(tokensToDetect.slice(i, i + size));\n    }\n\n    return slicesOfTokensToDetect;\n  }\n\n  async #addDetectedTokens({\n    tokensSlice,\n    selectedAddress,\n    networkClientId,\n    chainId,\n  }: {\n    tokensSlice: string[];\n    selectedAddress: string;\n    networkClientId: NetworkClientId;\n    chainId: Hex;\n  }): Promise<void> {\n    await safelyExecute(async () => {\n      const balances = await this.#getBalancesInSingleCall(\n        selectedAddress,\n        tokensSlice,\n        networkClientId,\n      );\n\n      const tokensWithBalance: Token[] = [];\n      const eventTokensDetails: string[] = [];\n      for (const nonZeroTokenAddress of Object.keys(balances)) {\n        const { decimals, symbol, aggregators, iconUrl, name } =\n          this.#tokenList[nonZeroTokenAddress];\n        eventTokensDetails.push(`${symbol} - ${nonZeroTokenAddress}`);\n        tokensWithBalance.push({\n          address: nonZeroTokenAddress,\n          decimals,\n          symbol,\n          aggregators,\n          image: iconUrl,\n          isERC721: false,\n          name,\n        });\n      }\n\n      if (tokensWithBalance.length) {\n        this.#trackMetaMetricsEvent({\n          event: 'Token Detected',\n          category: 'Wallet',\n          properties: {\n            tokens: eventTokensDetails,\n            token_standard: 'ERC20',\n            asset_type: 'TOKEN',\n          },\n        });\n\n        await this.messagingSystem.call(\n          'TokensController:addDetectedTokens',\n          tokensWithBalance,\n          {\n            selectedAddress,\n            chainId,\n          },\n        );\n      }\n    });\n  }\n}\n\nexport default TokenDetectionController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-MHN7CJCZ.mjs b/node_modules/@metamask/assets-controllers/dist/chunk-HFJC7WCX.mjs
similarity index 99%
rename from node_modules/@metamask/assets-controllers/dist/chunk-MHN7CJCZ.mjs
rename to node_modules/@metamask/assets-controllers/dist/chunk-HFJC7WCX.mjs
index e7d659d..2ab507a 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-MHN7CJCZ.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-HFJC7WCX.mjs
@@ -1,12 +1,12 @@
 import {
   ERC721Standard
 } from "./chunk-ASA5RLBY.mjs";
-import {
-  ERC20Standard
-} from "./chunk-D3K5MPMW.mjs";
 import {
   ERC1155Standard
 } from "./chunk-LZ5ZGQEX.mjs";
+import {
+  ERC20Standard
+} from "./chunk-D3K5MPMW.mjs";
 
 // src/AssetsContractController.ts
 import { Contract } from "@ethersproject/contracts";
@@ -365,4 +365,4 @@ export {
   AssetsContractController,
   AssetsContractController_default
 };
-//# sourceMappingURL=chunk-MHN7CJCZ.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-HFJC7WCX.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-MHN7CJCZ.mjs.map b/node_modules/@metamask/assets-controllers/dist/chunk-HFJC7WCX.mjs.map
similarity index 100%
rename from node_modules/@metamask/assets-controllers/dist/chunk-MHN7CJCZ.mjs.map
rename to node_modules/@metamask/assets-controllers/dist/chunk-HFJC7WCX.mjs.map
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-46UZDIXW.mjs b/node_modules/@metamask/assets-controllers/dist/chunk-I44BWCJJ.mjs
similarity index 93%
rename from node_modules/@metamask/assets-controllers/dist/chunk-46UZDIXW.mjs
rename to node_modules/@metamask/assets-controllers/dist/chunk-I44BWCJJ.mjs
index ef9295d..4feabce 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-46UZDIXW.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-I44BWCJJ.mjs
@@ -82,7 +82,7 @@ var NftController = class extends BaseControllerV1 {
       selectedAddress: "",
       chainId: initialChainId,
       ipfsGateway: IPFS_DEFAULT_GATEWAY_URL,
-      openSeaEnabled: false,
+      displayNftMedia: false,
       useIPFSSubdomains: true,
       isIpfsGatewayEnabled: true
     };
@@ -101,16 +101,16 @@ var NftController = class extends BaseControllerV1 {
       async ({
         selectedAddress,
         ipfsGateway,
-        openSeaEnabled,
+        displayNftMedia,
         isIpfsGatewayEnabled
       }) => {
         this.configure({
           selectedAddress,
           ipfsGateway,
-          openSeaEnabled,
+          displayNftMedia,
           isIpfsGatewayEnabled
         });
-        const needsUpdateNftMetadata = isIpfsGatewayEnabled && ipfsGateway !== "" || openSeaEnabled;
+        const needsUpdateNftMetadata = isIpfsGatewayEnabled && ipfsGateway !== "" || displayNftMedia;
         if (needsUpdateNftMetadata) {
           const { chainId } = this.config;
           const nfts = this.state.allNfts[selectedAddress]?.[chainId] ?? [];
@@ -189,7 +189,8 @@ var NftController = class extends BaseControllerV1 {
         name: null,
         description: null,
         image: null,
-        standard: null
+        standard: null,
+        error: "Opensea import error"
       };
     }
     const {
@@ -234,7 +235,12 @@ var NftController = class extends BaseControllerV1 {
    * @returns Promise resolving to the current NFT name and image.
    */
   async getNftInformationFromTokenURI(contractAddress, tokenId, networkClientId) {
-    const { ipfsGateway, useIPFSSubdomains, isIpfsGatewayEnabled } = this.config;
+    const {
+      ipfsGateway,
+      useIPFSSubdomains,
+      isIpfsGatewayEnabled,
+      displayNftMedia
+    } = this.config;
     const result = await this.getNftURIAndStandard(
       contractAddress,
       tokenId,
@@ -242,6 +248,16 @@ var NftController = class extends BaseControllerV1 {
     );
     let tokenURI = result[0];
     const standard = result[1];
+    if (!displayNftMedia && !isIpfsGatewayEnabled) {
+      return {
+        image: null,
+        name: null,
+        description: null,
+        standard: standard || null,
+        favorite: false,
+        tokenURI
+      };
+    }
     const hasIpfsTokenURI = tokenURI.startsWith("ipfs://");
     if (hasIpfsTokenURI && !isIpfsGatewayEnabled) {
       return {
@@ -253,8 +269,7 @@ var NftController = class extends BaseControllerV1 {
         tokenURI: tokenURI ?? null
       };
     }
-    const isDisplayNFTMediaToggleEnabled = this.config.openSeaEnabled;
-    if (!hasIpfsTokenURI && !isDisplayNFTMediaToggleEnabled) {
+    if (!hasIpfsTokenURI && !displayNftMedia) {
       return {
         image: null,
         name: null,
@@ -288,7 +303,8 @@ var NftController = class extends BaseControllerV1 {
         description: null,
         standard: standard || null,
         favorite: false,
-        tokenURI: tokenURI ?? null
+        tokenURI: tokenURI ?? null,
+        error: "URI import error"
       };
     }
   }
@@ -345,15 +361,26 @@ var NftController = class extends BaseControllerV1 {
           networkClientId
         )
       ),
-      this.config.openSeaEnabled && chainId === "0x1" ? safelyExecute(
+      this.config.displayNftMedia && chainId === "0x1" ? safelyExecute(
         () => this.getNftInformationFromApi(contractAddress, tokenId)
       ) : void 0
     ]);
+    if (blockchainMetadata?.error && nftApiMetadata?.error) {
+      return {
+        image: null,
+        name: null,
+        description: null,
+        standard: blockchainMetadata.standard ?? null,
+        favorite: false,
+        tokenURI: blockchainMetadata.tokenURI ?? null,
+        error: "Both import failed"
+      };
+    }
     return {
       ...nftApiMetadata,
       name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,
       description: blockchainMetadata?.description ?? nftApiMetadata?.description ?? null,
-      image: blockchainMetadata?.image ?? nftApiMetadata?.image ?? null,
+      image: nftApiMetadata?.image ?? blockchainMetadata?.image ?? null,
       standard: blockchainMetadata?.standard ?? nftApiMetadata?.standard ?? null,
       tokenURI: blockchainMetadata?.tokenURI ?? null
     };
@@ -472,7 +499,8 @@ var NftController = class extends BaseControllerV1 {
           symbol: nftContract.symbol,
           tokenId: tokenId.toString(),
           standard: nftMetadata.standard,
-          source
+          source,
+          tokenURI: nftMetadata.tokenURI
         });
       }
       return newNfts;
@@ -863,55 +891,52 @@ var NftController = class extends BaseControllerV1 {
     userAddress = this.config.selectedAddress,
     networkClientId
   }) {
-    const chainId = this.getCorrectChainId({ networkClientId });
-    const nftsWithChecksumAdr = nfts.map((nft) => {
-      return {
-        ...nft,
-        address: toChecksumHexAddress(nft.address)
-      };
-    });
-    const nftMetadataResults = await Promise.allSettled(
-      nftsWithChecksumAdr.map(async (nft) => {
-        const resMetadata = await this.getNftInformation(
-          nft.address,
-          nft.tokenId,
-          networkClientId
-        );
+    const releaseLock = await this.mutex.acquire();
+    try {
+      const chainId = this.getCorrectChainId({ networkClientId });
+      const nftsWithChecksumAdr = nfts.map((nft) => {
         return {
-          nft,
-          newMetadata: resMetadata
+          ...nft,
+          address: toChecksumHexAddress(nft.address)
         };
-      })
-    );
-    const successfulNewFetchedNfts = nftMetadataResults.filter(
-      (result) => result.status === "fulfilled"
-    );
-    const nftsWithDifferentMetadata = [];
-    const { allNfts } = this.state;
-    const stateNfts = allNfts[userAddress]?.[chainId] || [];
-    successfulNewFetchedNfts.forEach((singleNft) => {
-      const existingEntry = stateNfts.find(
-        (nft) => nft.address.toLowerCase() === singleNft.value.nft.address.toLowerCase() && nft.tokenId === singleNft.value.nft.tokenId
+      });
+      const nftMetadataResults = await Promise.all(
+        nftsWithChecksumAdr.map(async (nft) => {
+          const resMetadata = await this.getNftInformation(
+            nft.address,
+            nft.tokenId,
+            networkClientId
+          );
+          return {
+            nft,
+            newMetadata: resMetadata
+          };
+        })
       );
-      if (existingEntry) {
-        const differentMetadata = compareNftMetadata(
-          singleNft.value.newMetadata,
-          existingEntry
+      const nftsWithDifferentMetadata = [];
+      const { allNfts } = this.state;
+      const stateNfts = allNfts[userAddress]?.[chainId] || [];
+      nftMetadataResults.forEach((singleNft) => {
+        const existingEntry = stateNfts.find(
+          (nft) => nft.address.toLowerCase() === singleNft.nft.address.toLowerCase() && nft.tokenId === singleNft.nft.tokenId
         );
-        if (differentMetadata) {
-          nftsWithDifferentMetadata.push(singleNft);
+        if (existingEntry) {
+          const differentMetadata = compareNftMetadata(
+            singleNft.newMetadata,
+            existingEntry
+          );
+          if (differentMetadata) {
+            nftsWithDifferentMetadata.push(singleNft);
+          }
         }
+      });
+      if (nftsWithDifferentMetadata.length !== 0) {
+        nftsWithDifferentMetadata.forEach(
+          (elm) => this.updateNft(elm.nft, elm.newMetadata, userAddress, chainId)
+        );
       }
-    });
-    if (nftsWithDifferentMetadata.length !== 0) {
-      nftsWithDifferentMetadata.forEach(
-        (elm) => this.updateNft(
-          elm.value.nft,
-          elm.value.newMetadata,
-          userAddress,
-          chainId
-        )
-      );
+    } finally {
+      releaseLock();
     }
   }
   /**
@@ -1202,4 +1227,4 @@ export {
   NftController,
   NftController_default
 };
-//# sourceMappingURL=chunk-46UZDIXW.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-7VBVHUBP.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-I44BWCJJ.mjs.map b/node_modules/@metamask/assets-controllers/dist/chunk-I44BWCJJ.mjs.map
new file mode 100644
index 0000000..4e1f19e
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-I44BWCJJ.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/NftController.ts"],"sourcesContent":["import { isAddress } from '@ethersproject/address';\nimport type { AddApprovalRequest } from '@metamask/approval-controller';\nimport type {\n  BaseConfig,\n  BaseState,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseControllerV1 } from '@metamask/base-controller';\nimport {\n  safelyExecute,\n  handleFetch,\n  toChecksumHexAddress,\n  BNToHex,\n  fetchWithErrorHandling,\n  IPFS_DEFAULT_GATEWAY_URL,\n  ERC721,\n  ERC1155,\n  ApprovalType,\n  NFT_API_BASE_URL,\n} from '@metamask/controller-utils';\nimport type {\n  NetworkClientId,\n  NetworkController,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkState,\n} from '@metamask/network-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { remove0x } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport BN from 'bn.js';\nimport { EventEmitter } from 'events';\nimport { v4 as random } from 'uuid';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { compareNftMetadata, getFormattedIpfsUrl } from './assetsUtil';\nimport { Source } from './constants';\nimport type {\n  ApiNftContract,\n  ReservoirResponse,\n  Collection,\n  Attributes,\n  LastSale,\n} from './NftDetectionController';\n\ntype NFTStandardType = 'ERC721' | 'ERC1155';\n\ntype SuggestedNftMeta = {\n  asset: { address: string; tokenId: string } & NftMetadata;\n  id: string;\n  time: number;\n  type: NFTStandardType;\n  interactingAddress: string;\n  origin: string;\n};\n\n/**\n * @type Nft\n *\n * NFT representation\n * @property address - Hex address of a ERC721 contract\n * @property description - The NFT description\n * @property image - URI of custom NFT image associated with this tokenId\n * @property name - Name associated with this tokenId and contract address\n * @property tokenId - The NFT identifier\n * @property numberOfSales - Number of sales\n * @property backgroundColor - The background color to be displayed with the item\n * @property imagePreview - URI of a smaller image associated with this NFT\n * @property imageThumbnail - URI of a thumbnail image associated with this NFT\n * @property imageOriginal - URI of the original image associated with this NFT\n * @property animation - URI of a animation associated with this NFT\n * @property animationOriginal - URI of the original animation associated with this NFT\n * @property externalLink - External link containing additional information\n * @property creator - The NFT owner information object\n * @property isCurrentlyOwned - Boolean indicating whether the address/chainId combination where it's currently stored currently owns this NFT\n * @property transactionId - Transaction Id associated with the NFT\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Nft extends NftMetadata {\n  tokenId: string;\n  address: string;\n  isCurrentlyOwned?: boolean;\n}\n\ntype NftUpdate = {\n  nft: Nft;\n  newMetadata: NftMetadata;\n};\n\n/**\n * @type NftContract\n *\n * NFT contract information representation\n * @property name - Contract name\n * @property logo - Contract logo\n * @property address - Contract address\n * @property symbol - Contract symbol\n * @property description - Contract description\n * @property totalSupply - Total supply of NFTs\n * @property assetContractType - The NFT type, it could be `semi-fungible` or `non-fungible`\n * @property createdDate - Creation date\n * @property schemaName - The schema followed by the contract, it could be `ERC721` or `ERC1155`\n * @property externalLink - External link containing additional information\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftContract {\n  name?: string;\n  logo?: string;\n  address: string;\n  symbol?: string;\n  description?: string;\n  totalSupply?: string;\n  assetContractType?: string;\n  createdDate?: string;\n  schemaName?: string;\n  externalLink?: string;\n}\n\n/**\n * @type NftMetadata\n *\n * NFT custom information\n * @property name - NFT custom name\n * @property description - The NFT description\n * @property numberOfSales - Number of sales\n * @property backgroundColor - The background color to be displayed with the item\n * @property image - Image custom image URI\n * @property imagePreview - URI of a smaller image associated with this NFT\n * @property imageThumbnail - URI of a thumbnail image associated with this NFT\n * @property imageOriginal - URI of the original image associated with this NFT\n * @property animation - URI of a animation associated with this NFT\n * @property animationOriginal - URI of the original animation associated with this NFT\n * @property externalLink - External link containing additional information\n * @property creator - The NFT owner information object\n * @property standard - NFT standard name for the NFT, e.g., ERC-721 or ERC-1155\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftMetadata {\n  name: string | null;\n  description: string | null;\n  image: string | null;\n  standard: string | null;\n  favorite?: boolean;\n  numberOfSales?: number;\n  backgroundColor?: string;\n  imagePreview?: string;\n  imageThumbnail?: string;\n  imageOriginal?: string;\n  animation?: string;\n  animationOriginal?: string;\n  externalLink?: string;\n  creator?: string;\n  transactionId?: string;\n  tokenURI?: string | null;\n  error?: string;\n  collection?: Collection;\n  address?: string;\n  attributes?: Attributes;\n  lastSale?: LastSale;\n  rarityRank?: string;\n}\n\n/**\n * @type NftConfig\n *\n * NFT controller configuration\n * @property selectedAddress - Vault selected address\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftConfig extends BaseConfig {\n  selectedAddress: string;\n  chainId: Hex;\n  ipfsGateway: string;\n  displayNftMedia: boolean;\n  useIPFSSubdomains: boolean;\n  isIpfsGatewayEnabled: boolean;\n}\n\n/**\n * @type NftState\n *\n * NFT controller state\n * @property allNftContracts - Object containing NFT contract information\n * @property allNfts - Object containing NFTs per account and network\n * @property ignoredNfts - List of NFTs that should be ignored\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftState extends BaseState {\n  allNftContracts: {\n    [key: string]: { [chainId: Hex]: NftContract[] };\n  };\n  allNfts: { [key: string]: { [chainId: Hex]: Nft[] } };\n  ignoredNfts: Nft[];\n}\n\nconst ALL_NFTS_STATE_KEY = 'allNfts';\nconst ALL_NFTS_CONTRACTS_STATE_KEY = 'allNftContracts';\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface NftAsset {\n  address: string;\n  tokenId: string;\n}\n\n/**\n * The name of the {@link NftController}.\n */\nconst controllerName = 'NftController';\n\n/**\n * The external actions available to the {@link NftController}.\n */\ntype AllowedActions =\n  | AddApprovalRequest\n  | NetworkControllerGetNetworkClientByIdAction;\n\n/**\n * The messenger of the {@link NftController}.\n */\nexport type NftControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\nexport const getDefaultNftState = (): NftState => {\n  return {\n    allNftContracts: {},\n    allNfts: {},\n    ignoredNfts: [],\n  };\n};\n\n/**\n * Changes regarding displayNftMedia, TokenURI and error nft metadata property are not on the core repo and needed to be refactor to be removed from the patch\n * updateNftMetadata changes will be introduced on latest versions of changes of assets controllers, v^30 or next\n */\n\n/**\n * Controller that stores assets and exposes convenience methods\n */\nexport class NftController extends BaseControllerV1<NftConfig, NftState> {\n  private readonly mutex = new Mutex();\n\n  private readonly messagingSystem: NftControllerMessenger;\n\n  getNftApi() {\n    return `${NFT_API_BASE_URL}/tokens`;\n  }\n\n  /**\n   * Helper method to update nested state for allNfts and allNftContracts.\n   *\n   * @param newCollection - the modified piece of state to update in the controller's store\n   * @param baseStateKey - The root key in the store to update.\n   * @param passedConfig - An object containing the selectedAddress and chainId that are passed through the auto-detection flow.\n   * @param passedConfig.userAddress - the address passed through the NFT detection flow to ensure assets are stored to the correct account\n   * @param passedConfig.chainId - the chainId passed through the NFT detection flow to ensure assets are stored to the correct account\n   */\n  private updateNestedNftState(\n    newCollection: Nft[] | NftContract[],\n    baseStateKey: 'allNfts' | 'allNftContracts',\n    { userAddress, chainId }: { userAddress: string; chainId: Hex },\n  ) {\n    const { [baseStateKey]: oldState } = this.state;\n\n    const addressState = oldState[userAddress];\n    const newAddressState = {\n      ...addressState,\n      ...{ [chainId]: newCollection },\n    };\n    const newState = {\n      ...oldState,\n      ...{ [userAddress]: newAddressState },\n    };\n    this.update({\n      [baseStateKey]: newState,\n    });\n  }\n\n  /**\n   * Request individual NFT information from NFT API.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformationFromApi(\n    contractAddress: string,\n    tokenId: string,\n  ): Promise<NftMetadata> {\n    // TODO Parameterize this by chainId for non-mainnet token detection\n    // Attempt to fetch the data with the nft-api\n    const urlParams = new URLSearchParams({\n      chainIds: '1',\n      tokens: `${contractAddress}:${tokenId}`,\n      includeTopBid: 'true',\n      includeAttributes: 'true',\n      includeLastSale: 'true',\n    }).toString();\n    const nftInformation: ReservoirResponse | undefined =\n      await fetchWithErrorHandling({\n        url: `${this.getNftApi()}?${urlParams}`,\n        options: {\n          headers: {\n            Version: '1',\n          },\n        },\n      });\n    // if we were still unable to fetch the data we return out the default/null of `NftMetadata`\n    if (!nftInformation?.tokens?.[0]?.token) {\n      return {\n        name: null,\n        description: null,\n        image: null,\n        standard: null,\n        error: 'Opensea import error',\n      };\n    }\n\n    // if we've reached this point, we have successfully fetched some data for nftInformation\n    // now we reconfigure the data to conform to the `NftMetadata` type for storage.\n\n    const {\n      image,\n      metadata: { imageOriginal } = {},\n      name,\n      description,\n      collection,\n      kind,\n      rarityRank,\n      rarity,\n      attributes,\n      lastSale,\n      imageSmall,\n    } = nftInformation.tokens[0].token;\n\n    /* istanbul ignore next */\n    const nftMetadata: NftMetadata = Object.assign(\n      {},\n      { name: name || null },\n      { description: description || null },\n      { image: image || null },\n      collection?.creator && { creator: collection.creator },\n      imageOriginal && { imageOriginal },\n      imageSmall && { imageThumbnail: imageSmall },\n      kind && { standard: kind.toUpperCase() },\n      lastSale && { lastSale },\n      attributes && { attributes },\n      nftInformation.tokens[0].market?.topBid && {\n        topBid: nftInformation.tokens[0].market?.topBid,\n      },\n      rarityRank && { rarityRank },\n      rarity && { rarity },\n      collection && { collection },\n    );\n\n    return nftMetadata;\n  }\n\n  /**\n   * Request individual NFT information from contracts that follows Metadata Interface.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformationFromTokenURI(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<NftMetadata> {\n    const {\n      ipfsGateway,\n      useIPFSSubdomains,\n      isIpfsGatewayEnabled,\n      displayNftMedia,\n    } = this.config;\n    const result = await this.getNftURIAndStandard(\n      contractAddress,\n      tokenId,\n      networkClientId,\n    );\n    let tokenURI = result[0];\n    const standard = result[1];\n\n    if (!displayNftMedia && !isIpfsGatewayEnabled) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI,\n      };\n    }\n\n    const hasIpfsTokenURI = tokenURI.startsWith('ipfs://');\n\n    if (hasIpfsTokenURI && !isIpfsGatewayEnabled) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    }\n\n    if (!hasIpfsTokenURI && !displayNftMedia) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    }\n\n    if (hasIpfsTokenURI) {\n      tokenURI = getFormattedIpfsUrl(ipfsGateway, tokenURI, useIPFSSubdomains);\n    }\n\n    try {\n      const object = await handleFetch(tokenURI);\n      // TODO: Check image_url existence. This is not part of EIP721 nor EIP1155\n      const image = Object.prototype.hasOwnProperty.call(object, 'image')\n        ? 'image'\n        : /* istanbul ignore next */ 'image_url';\n\n      return {\n        image: object[image],\n        name: object.name,\n        description: object.description,\n        standard,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    } catch {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n        error: 'URI import error',\n      };\n    }\n  }\n\n  /**\n   * Retrieve NFT uri with  metadata. TODO Update method to use IPFS.\n   *\n   * @param contractAddress - NFT contract address.\n   * @param tokenId - NFT token id.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving NFT uri and token standard.\n   */\n  private async getNftURIAndStandard(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<[string, string]> {\n    // try ERC721 uri\n    try {\n      const uri = await this.getERC721TokenURI(\n        contractAddress,\n        tokenId,\n        networkClientId,\n      );\n      return [uri, ERC721];\n    } catch {\n      // Ignore error\n    }\n\n    // try ERC1155 uri\n    try {\n      const tokenURI = await this.getERC1155TokenURI(\n        contractAddress,\n        tokenId,\n        networkClientId,\n      );\n\n      /**\n       * According to EIP1155 the URI value allows for ID substitution\n       * in case the string `{id}` exists.\n       * https://eips.ethereum.org/EIPS/eip-1155#metadata\n       */\n\n      if (!tokenURI.includes('{id}')) {\n        return [tokenURI, ERC1155];\n      }\n\n      const hexTokenId = remove0x(BNToHex(new BN(tokenId)))\n        .padStart(64, '0')\n        .toLowerCase();\n      return [tokenURI.replace('{id}', hexTokenId), ERC1155];\n    } catch {\n      // Ignore error\n    }\n\n    return ['', ''];\n  }\n\n  /**\n   * Request individual NFT information (name, image url and description).\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformation(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<NftMetadata> {\n    const chainId = this.getCorrectChainId({\n      networkClientId,\n    });\n    const [blockchainMetadata, nftApiMetadata] = await Promise.all([\n      safelyExecute(() =>\n        this.getNftInformationFromTokenURI(\n          contractAddress,\n          tokenId,\n          networkClientId,\n        ),\n      ),\n      this.config.displayNftMedia && chainId === '0x1'\n        ? safelyExecute(() =>\n            this.getNftInformationFromApi(contractAddress, tokenId),\n          )\n        : undefined,\n    ]);\n\n    if (blockchainMetadata?.error && nftApiMetadata?.error) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: blockchainMetadata.standard ?? null,\n        favorite: false,\n        tokenURI: blockchainMetadata.tokenURI ?? null,\n        error: 'Both import failed',\n      };\n    }\n\n    return {\n      ...nftApiMetadata,\n      name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,\n      description:\n        blockchainMetadata?.description ?? nftApiMetadata?.description ?? null,\n      image: blockchainMetadata?.image ?? nftApiMetadata?.image ?? null,\n      standard:\n        blockchainMetadata?.standard ?? nftApiMetadata?.standard ?? null,\n      tokenURI: blockchainMetadata?.tokenURI ?? null,\n    };\n  }\n\n  /**\n   * Request NFT contract information from the contract itself.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftContractInformationFromContract(\n    contractAddress: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<\n    Partial<ApiNftContract> &\n      Pick<ApiNftContract, 'address'> &\n      Pick<ApiNftContract, 'collection'>\n  > {\n    const [name, symbol] = await Promise.all([\n      this.getERC721AssetName(contractAddress, networkClientId),\n      this.getERC721AssetSymbol(contractAddress, networkClientId),\n    ]);\n\n    return {\n      collection: { name },\n      symbol,\n      address: contractAddress,\n    };\n  }\n\n  /**\n   * Request NFT contract information from Blockchain and aggregate with received data from NFTMetadata.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param nftMetadataFromApi - Received NFT information to be aggregated with blockchain contract information.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the NFT contract name, image and description.\n   */\n  private async getNftContractInformation(\n    contractAddress: string,\n    nftMetadataFromApi: NftMetadata,\n    networkClientId?: NetworkClientId,\n  ): Promise<\n    Partial<ApiNftContract> &\n      Pick<ApiNftContract, 'address'> &\n      Pick<ApiNftContract, 'collection'>\n  > {\n    const blockchainContractData = await safelyExecute(() =>\n      this.getNftContractInformationFromContract(\n        contractAddress,\n        networkClientId,\n      ),\n    );\n\n    if (\n      blockchainContractData ||\n      !Object.values(nftMetadataFromApi).every((value) => value === null)\n    ) {\n      return {\n        address: contractAddress,\n        ...blockchainContractData,\n        schema_name: nftMetadataFromApi?.standard ?? null,\n        collection: {\n          name: null,\n          image_url:\n            nftMetadataFromApi?.collection?.image ??\n            nftMetadataFromApi?.collection?.imageUrl ??\n            null,\n          tokenCount: nftMetadataFromApi?.collection?.tokenCount ?? null,\n          ...nftMetadataFromApi?.collection,\n          ...blockchainContractData?.collection,\n        },\n      };\n    }\n\n    /* istanbul ignore next */\n    return {\n      address: contractAddress,\n      asset_contract_type: null,\n      created_date: null,\n      schema_name: null,\n      symbol: null,\n      total_supply: null,\n      description: null,\n      external_link: null,\n      collection: { name: null, image_url: null },\n    };\n  }\n\n  /**\n   * Adds an individual NFT to the stored NFT list.\n   *\n   * @param tokenAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param nftMetadata - NFT optional information (name, image and description).\n   * @param nftContract - An object containing contract data of the NFT being added.\n   * @param chainId - The chainId of the network where the NFT is being added.\n   * @param userAddress - The address of the account where the NFT is being added.\n   * @param source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @returns Promise resolving to the current NFT list.\n   */\n  private async addIndividualNft(\n    tokenAddress: string,\n    tokenId: string,\n    nftMetadata: NftMetadata,\n    nftContract: NftContract,\n    chainId: Hex,\n    userAddress: string,\n    source: Source,\n  ): Promise<Nft[]> {\n    // TODO: Remove unused return\n    const releaseLock = await this.mutex.acquire();\n    try {\n      tokenAddress = toChecksumHexAddress(tokenAddress);\n      const { allNfts } = this.state;\n\n      const nfts = allNfts[userAddress]?.[chainId] || [];\n\n      const existingEntry: Nft | undefined = nfts.find(\n        (nft) =>\n          nft.address.toLowerCase() === tokenAddress.toLowerCase() &&\n          nft.tokenId === tokenId,\n      );\n\n      if (existingEntry) {\n        const differentMetadata = compareNftMetadata(\n          nftMetadata,\n          existingEntry,\n        );\n        if (differentMetadata || !existingEntry.isCurrentlyOwned) {\n          // TODO: Switch to indexToUpdate\n          const indexToRemove = nfts.findIndex(\n            (nft) =>\n              nft.address.toLowerCase() === tokenAddress.toLowerCase() &&\n              nft.tokenId === tokenId,\n          );\n          /* istanbul ignore next */\n          if (indexToRemove !== -1) {\n            nfts.splice(indexToRemove, 1);\n          }\n        } else {\n          return nfts;\n        }\n      }\n\n      const newEntry: Nft = {\n        address: tokenAddress,\n        tokenId,\n        favorite: existingEntry?.favorite || false,\n        isCurrentlyOwned: true,\n        ...nftMetadata,\n      };\n\n      const newNfts = [...nfts, newEntry];\n      this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n        chainId,\n        userAddress,\n      });\n\n      if (this.onNftAdded) {\n        this.onNftAdded({\n          address: tokenAddress,\n          symbol: nftContract.symbol,\n          tokenId: tokenId.toString(),\n          standard: nftMetadata.standard,\n          source,\n          tokenURI: nftMetadata.tokenURI,\n        });\n      }\n      return newNfts;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Adds an NFT contract to the stored NFT contracts list.\n   *\n   * @param options - options.\n   * @param options.tokenAddress - Hex address of the NFT contract.\n   * @param options.userAddress - The address of the account where the NFT is being added.\n   * @param options.nftMetadata - The retrieved NFTMetadata from API.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @returns Promise resolving to the current NFT contracts list.\n   */\n  private async addNftContract({\n    tokenAddress,\n    userAddress,\n    networkClientId,\n    source,\n    nftMetadata,\n  }: {\n    tokenAddress: string;\n    userAddress: string;\n    nftMetadata: NftMetadata;\n    networkClientId?: NetworkClientId;\n    source?: Source;\n  }): Promise<NftContract[]> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      tokenAddress = toChecksumHexAddress(tokenAddress);\n      const { allNftContracts } = this.state;\n      const chainId = this.getCorrectChainId({\n        networkClientId,\n      });\n\n      const nftContracts = allNftContracts[userAddress]?.[chainId] || [];\n\n      const existingEntry = nftContracts.find(\n        (nftContract) =>\n          nftContract.address.toLowerCase() === tokenAddress.toLowerCase(),\n      );\n      if (existingEntry) {\n        return nftContracts;\n      }\n\n      // this doesn't work currently for detection if the user switches networks while the detection is processing\n      // will be fixed once detection uses networkClientIds\n      // get name and symbol if ERC721 then put together the metadata\n      const contractInformation = await this.getNftContractInformation(\n        tokenAddress,\n        nftMetadata,\n        networkClientId,\n      );\n      const {\n        asset_contract_type,\n        created_date,\n        symbol,\n        description,\n        external_link,\n        schema_name,\n        collection: { name, image_url, tokenCount },\n      } = contractInformation;\n\n      // If the nft is auto-detected we want some valid metadata to be present\n      if (\n        source === Source.Detected &&\n        'address' in contractInformation &&\n        typeof contractInformation.address === 'string' &&\n        'collection' in contractInformation &&\n        contractInformation.collection.name === null &&\n        'image_url' in contractInformation.collection &&\n        contractInformation.collection.image_url === null &&\n        Object.entries(contractInformation).every(([key, value]) => {\n          return key === 'address' || key === 'collection' || !value;\n        })\n      ) {\n        return nftContracts;\n      }\n\n      /* istanbul ignore next */\n      const newEntry: NftContract = Object.assign(\n        {},\n        { address: tokenAddress },\n        description && { description },\n        name && { name },\n        image_url && { logo: image_url },\n        symbol && { symbol },\n        tokenCount !== null &&\n          typeof tokenCount !== 'undefined' && { totalSupply: tokenCount },\n        asset_contract_type && { assetContractType: asset_contract_type },\n        created_date && { createdDate: created_date },\n        schema_name && { schemaName: schema_name },\n        external_link && { externalLink: external_link },\n      );\n      const newNftContracts = [...nftContracts, newEntry];\n      this.updateNestedNftState(newNftContracts, ALL_NFTS_CONTRACTS_STATE_KEY, {\n        chainId,\n        userAddress,\n      });\n\n      return newNftContracts;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Removes an individual NFT from the stored token list and saves it in ignored NFTs list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  private removeAndIgnoreIndividualNft(\n    address: string,\n    tokenId: string,\n    {\n      chainId,\n      userAddress,\n    }: {\n      chainId: Hex;\n      userAddress: string;\n    },\n  ) {\n    address = toChecksumHexAddress(address);\n    const { allNfts, ignoredNfts } = this.state;\n    const newIgnoredNfts = [...ignoredNfts];\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const newNfts = nfts.filter((nft) => {\n      if (\n        nft.address.toLowerCase() === address.toLowerCase() &&\n        nft.tokenId === tokenId\n      ) {\n        const alreadyIgnored = newIgnoredNfts.find(\n          (c) => c.address === address && c.tokenId === tokenId,\n        );\n        !alreadyIgnored && newIgnoredNfts.push(nft);\n        return false;\n      }\n      return true;\n    });\n\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n\n    this.update({\n      ignoredNfts: newIgnoredNfts,\n    });\n  }\n\n  /**\n   * Removes an individual NFT from the stored token list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  private removeIndividualNft(\n    address: string,\n    tokenId: string,\n    { chainId, userAddress }: { chainId: Hex; userAddress: string },\n  ) {\n    address = toChecksumHexAddress(address);\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const newNfts = nfts.filter(\n      (nft) =>\n        !(\n          nft.address.toLowerCase() === address.toLowerCase() &&\n          nft.tokenId === tokenId\n        ),\n    );\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n  }\n\n  /**\n   * Removes an NFT contract to the stored NFT contracts list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   * @returns Promise resolving to the current NFT contracts list.\n   */\n  private removeNftContract(\n    address: string,\n    { chainId, userAddress }: { chainId: Hex; userAddress: string },\n  ): NftContract[] {\n    address = toChecksumHexAddress(address);\n    const { allNftContracts } = this.state;\n    const nftContracts = allNftContracts[userAddress]?.[chainId] || [];\n\n    const newNftContracts = nftContracts.filter(\n      (nftContract) =>\n        !(nftContract.address.toLowerCase() === address.toLowerCase()),\n    );\n    this.updateNestedNftState(newNftContracts, ALL_NFTS_CONTRACTS_STATE_KEY, {\n      chainId,\n      userAddress,\n    });\n\n    return newNftContracts;\n  }\n\n  /**\n   * EventEmitter instance used to listen to specific EIP747 events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Optional API key to use with opensea\n   */\n  openSeaApiKey?: string;\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'NftController';\n\n  private readonly getERC721AssetName: AssetsContractController['getERC721AssetName'];\n\n  private readonly getERC721AssetSymbol: AssetsContractController['getERC721AssetSymbol'];\n\n  private readonly getERC721TokenURI: AssetsContractController['getERC721TokenURI'];\n\n  private readonly getERC721OwnerOf: AssetsContractController['getERC721OwnerOf'];\n\n  private readonly getERC1155BalanceOf: AssetsContractController['getERC1155BalanceOf'];\n\n  private readonly getERC1155TokenURI: AssetsContractController['getERC1155TokenURI'];\n\n  private readonly getNetworkClientById: NetworkController['getNetworkClientById'];\n\n  private readonly onNftAdded?: (data: {\n    address: string;\n    symbol: string | undefined;\n    tokenId: string;\n    standard: string | null;\n    source: Source;\n    tokenURI?: string | null;\n  }) => void;\n\n  /**\n   * Creates an NftController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.getERC721AssetName - Gets the name of the asset at the given address.\n   * @param options.getERC721AssetSymbol - Gets the symbol of the asset at the given address.\n   * @param options.getERC721TokenURI - Gets the URI of the ERC721 token at the given address, with the given ID.\n   * @param options.getERC721OwnerOf - Get the owner of a ERC-721 NFT.\n   * @param options.getERC1155BalanceOf - Gets balance of a ERC-1155 NFT.\n   * @param options.getERC1155TokenURI - Gets the URI of the ERC1155 token at the given address, with the given ID.\n   * @param options.getNetworkClientById - Gets the network client for the given networkClientId.\n   * @param options.onNftAdded - Callback that is called when an NFT is added. Currently used pass data\n   * for tracking the NFT added event.\n   * @param options.messenger - The controller messenger.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      chainId: initialChainId,\n      onPreferencesStateChange,\n      onNetworkStateChange,\n      getERC721AssetName,\n      getERC721AssetSymbol,\n      getERC721TokenURI,\n      getERC721OwnerOf,\n      getERC1155BalanceOf,\n      getERC1155TokenURI,\n      getNetworkClientById,\n      onNftAdded,\n      messenger,\n    }: {\n      chainId: Hex;\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n      getERC721AssetName: AssetsContractController['getERC721AssetName'];\n      getERC721AssetSymbol: AssetsContractController['getERC721AssetSymbol'];\n      getERC721TokenURI: AssetsContractController['getERC721TokenURI'];\n      getERC721OwnerOf: AssetsContractController['getERC721OwnerOf'];\n      getERC1155BalanceOf: AssetsContractController['getERC1155BalanceOf'];\n      getERC1155TokenURI: AssetsContractController['getERC1155TokenURI'];\n      getNetworkClientById: NetworkController['getNetworkClientById'];\n      onNftAdded?: (data: {\n        address: string;\n        symbol: string | undefined;\n        tokenId: string;\n        standard: string | null;\n        source: string;\n        tokenURI?: string | null;\n      }) => void;\n      messenger: NftControllerMessenger;\n    },\n    config?: Partial<NftConfig>,\n    state?: Partial<NftState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      selectedAddress: '',\n      chainId: initialChainId,\n      ipfsGateway: IPFS_DEFAULT_GATEWAY_URL,\n      displayNftMedia: false,\n      useIPFSSubdomains: true,\n      isIpfsGatewayEnabled: true,\n    };\n\n    this.defaultState = getDefaultNftState();\n    this.initialize();\n    this.getERC721AssetName = getERC721AssetName;\n    this.getERC721AssetSymbol = getERC721AssetSymbol;\n    this.getERC721TokenURI = getERC721TokenURI;\n    this.getERC721OwnerOf = getERC721OwnerOf;\n    this.getERC1155BalanceOf = getERC1155BalanceOf;\n    this.getERC1155TokenURI = getERC1155TokenURI;\n    this.getNetworkClientById = getNetworkClientById;\n    this.onNftAdded = onNftAdded;\n    this.messagingSystem = messenger;\n\n    onPreferencesStateChange(\n      async ({\n        selectedAddress,\n        ipfsGateway,\n        displayNftMedia,\n        isIpfsGatewayEnabled,\n      }) => {\n        this.configure({\n          selectedAddress,\n          ipfsGateway,\n          displayNftMedia,\n          isIpfsGatewayEnabled,\n        });\n\n        const needsUpdateNftMetadata =\n          (isIpfsGatewayEnabled && ipfsGateway !== '') || displayNftMedia;\n\n        if (needsUpdateNftMetadata) {\n          const { chainId } = this.config;\n          const nfts: Nft[] =\n            this.state.allNfts[selectedAddress]?.[chainId] ?? [];\n          // filter only nfts\n          const nftsToUpdate = nfts.filter(\n            (singleNft) =>\n              !singleNft.name && !singleNft.description && !singleNft.image,\n          );\n          if (nftsToUpdate.length !== 0) {\n            await this.updateNftMetadata({\n              nfts: nftsToUpdate,\n              userAddress: selectedAddress,\n            });\n          }\n        }\n      },\n    );\n\n    onNetworkStateChange(({ selectedNetworkClientId }) => {\n      const selectedNetworkClient = getNetworkClientById(\n        selectedNetworkClientId,\n      );\n      const { chainId } = selectedNetworkClient.configuration;\n\n      this.configure({ chainId });\n    });\n  }\n\n  private async validateWatchNft(\n    asset: NftAsset,\n    type: NFTStandardType,\n    userAddress: string,\n    { networkClientId }: { networkClientId?: NetworkClientId } = {},\n  ) {\n    const { address: contractAddress, tokenId } = asset;\n\n    // Validate parameters\n    if (!type) {\n      throw rpcErrors.invalidParams('Asset type is required');\n    }\n\n    if (type !== ERC721 && type !== ERC1155) {\n      throw rpcErrors.invalidParams(\n        `Non NFT asset type ${type} not supported by watchNft`,\n      );\n    }\n\n    if (!contractAddress || !tokenId) {\n      throw rpcErrors.invalidParams('Both address and tokenId are required');\n    }\n\n    if (!isAddress(contractAddress)) {\n      throw rpcErrors.invalidParams('Invalid address');\n    }\n\n    if (!/^\\d+$/u.test(tokenId)) {\n      throw rpcErrors.invalidParams('Invalid tokenId');\n    }\n\n    // Check if the user owns the suggested NFT\n    try {\n      const isOwner = await this.isNftOwner(\n        userAddress,\n        contractAddress,\n        tokenId,\n        { networkClientId },\n      );\n      if (!isOwner) {\n        throw rpcErrors.invalidInput(\n          'Suggested NFT is not owned by the selected account',\n        );\n      }\n    } catch (error) {\n      // error thrown here: \"Unable to verify ownership. Possibly because the standard is not supported or the user's currently selected network does not match the chain of the asset in question.\"\n      if (error instanceof Error) {\n        throw rpcErrors.resourceUnavailable(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // temporary method to get the correct chainId until we remove chainId from the config & the chainId arg from the detection logic\n  // Just a helper method to prefer the networkClient chainId first then the chainId argument and then finally the config chainId\n  private getCorrectChainId({\n    networkClientId,\n  }: {\n    networkClientId?: NetworkClientId;\n  }) {\n    if (networkClientId) {\n      return this.getNetworkClientById(networkClientId).configuration.chainId;\n    }\n    return this.config.chainId;\n  }\n\n  /**\n   * Adds a new suggestedAsset to state. Parameters will be validated according to\n   * asset type being watched. A `<suggestedNftMeta.id>:pending` hub event will be emitted once added.\n   *\n   * @param asset - The asset to be watched. For now ERC721 and ERC1155 tokens are accepted.\n   * @param asset.address - The address of the asset contract.\n   * @param asset.tokenId - The ID of the asset.\n   * @param type - The asset type.\n   * @param origin - Domain origin to register the asset from.\n   * @param options - Options bag.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being added.\n   * @returns Object containing a Promise resolving to the suggestedAsset address if accepted.\n   */\n  async watchNft(\n    asset: NftAsset,\n    type: NFTStandardType,\n    origin: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: {\n      networkClientId?: NetworkClientId;\n      userAddress?: string;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    await this.validateWatchNft(asset, type, userAddress);\n\n    const nftMetadata = await this.getNftInformation(\n      asset.address,\n      asset.tokenId,\n      networkClientId,\n    );\n\n    if (nftMetadata.standard && nftMetadata.standard !== type) {\n      throw rpcErrors.invalidInput(\n        `Suggested NFT of type ${nftMetadata.standard} does not match received type ${type}`,\n      );\n    }\n\n    const suggestedNftMeta: SuggestedNftMeta = {\n      asset: { ...asset, ...nftMetadata },\n      type,\n      id: random(),\n      time: Date.now(),\n      interactingAddress: userAddress,\n      origin,\n    };\n    await this._requestApproval(suggestedNftMeta);\n    const { address, tokenId } = asset;\n    const { name, standard, description, image } = nftMetadata;\n\n    await this.addNft(address, tokenId, {\n      nftMetadata: {\n        name: name ?? null,\n        description: description ?? null,\n        image: image ?? null,\n        standard: standard ?? null,\n      },\n      userAddress,\n      source: Source.Dapp,\n      networkClientId,\n    });\n  }\n\n  /**\n   * Sets an OpenSea API key to retrieve NFT information.\n   *\n   * @param openSeaApiKey - OpenSea API key.\n   */\n  setApiKey(openSeaApiKey: string) {\n    this.openSeaApiKey = openSeaApiKey;\n  }\n\n  /**\n   * Checks the ownership of a ERC-721 or ERC-1155 NFT for a given address.\n   *\n   * @param ownerAddress - User public address.\n   * @param nftAddress - NFT contract address.\n   * @param tokenId - NFT token ID.\n   * @param options - Options bag.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving the NFT ownership.\n   */\n  async isNftOwner(\n    ownerAddress: string,\n    nftAddress: string,\n    tokenId: string,\n    {\n      networkClientId,\n    }: {\n      networkClientId?: NetworkClientId;\n    } = {},\n  ): Promise<boolean> {\n    // Checks the ownership for ERC-721.\n    try {\n      const owner = await this.getERC721OwnerOf(\n        nftAddress,\n        tokenId,\n        networkClientId,\n      );\n      return ownerAddress.toLowerCase() === owner.toLowerCase();\n      // eslint-disable-next-line no-empty\n    } catch {\n      // Ignore ERC-721 contract error\n    }\n\n    // Checks the ownership for ERC-1155.\n    try {\n      const balance = await this.getERC1155BalanceOf(\n        ownerAddress,\n        nftAddress,\n        tokenId,\n        networkClientId,\n      );\n      return !balance.isZero();\n      // eslint-disable-next-line no-empty\n    } catch {\n      // Ignore ERC-1155 contract error\n    }\n\n    throw new Error(\n      `Unable to verify ownership. Possibly because the standard is not supported or the user's currently selected network does not match the chain of the asset in question.`,\n    );\n  }\n\n  /**\n   * Verifies currently selected address owns entered NFT address/tokenId combo and\n   * adds the NFT and respective NFT contract to the stored NFT and NFT contracts lists.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param options - an object of arguments\n   * @param options.userAddress - The address of the current user.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   */\n  async addNftVerifyOwnership(\n    address: string,\n    tokenId: string,\n    {\n      userAddress = this.config.selectedAddress,\n      networkClientId,\n      source,\n    }: {\n      userAddress?: string;\n      networkClientId?: NetworkClientId;\n      source?: Source;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    if (\n      !(await this.isNftOwner(userAddress, address, tokenId, {\n        networkClientId,\n      }))\n    ) {\n      throw new Error('This NFT is not owned by the user');\n    }\n    await this.addNft(address, tokenId, {\n      networkClientId,\n      userAddress,\n      source,\n    });\n  }\n\n  /**\n   * Adds an NFT and respective NFT contract to the stored NFT and NFT contracts lists.\n   *\n   * @param tokenAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param options - an object of arguments\n   * @param options.nftMetadata - NFT optional metadata.\n   * @param options.userAddress - The address of the current user.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT list.\n   */\n  async addNft(\n    tokenAddress: string,\n    tokenId: string,\n    {\n      nftMetadata,\n      userAddress = this.config.selectedAddress,\n      source = Source.Custom,\n      networkClientId,\n    }: {\n      nftMetadata?: NftMetadata;\n      userAddress?: string;\n      source?: Source;\n      networkClientId?: NetworkClientId;\n    } = { userAddress: this.config.selectedAddress },\n  ) {\n    tokenAddress = toChecksumHexAddress(tokenAddress);\n\n    const chainId = this.getCorrectChainId({ networkClientId });\n\n    nftMetadata =\n      nftMetadata ||\n      (await this.getNftInformation(tokenAddress, tokenId, networkClientId));\n\n    const newNftContracts = await this.addNftContract({\n      tokenAddress,\n      userAddress,\n      networkClientId,\n      source,\n      nftMetadata,\n    });\n\n    // If NFT contract was not added, do not add individual NFT\n    const nftContract = newNftContracts.find(\n      (contract) =>\n        contract.address.toLowerCase() === tokenAddress.toLowerCase(),\n    );\n\n    // If NFT contract information, add individual NFT\n    if (nftContract) {\n      await this.addIndividualNft(\n        tokenAddress,\n        tokenId,\n        nftMetadata,\n        nftContract,\n        chainId,\n        userAddress,\n        source,\n      );\n    }\n  }\n\n  /**\n   * Refetches NFT metadata and updates the state\n   *\n   * @param options - Options for refetching NFT metadata\n   * @param options.nfts - nfts to update metadata for.\n   * @param options.userAddress - The current user address\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   */\n  async updateNftMetadata({\n    nfts,\n    userAddress = this.config.selectedAddress,\n    networkClientId,\n  }: {\n    nfts: Nft[];\n    userAddress?: string;\n    networkClientId?: NetworkClientId;\n  }) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n\n    const nftsWithChecksumAdr = nfts.map((nft) => {\n      return {\n        ...nft,\n        address: toChecksumHexAddress(nft.address),\n      };\n    });\n    const nftMetadataResults = await Promise.allSettled(\n      nftsWithChecksumAdr.map(async (nft) => {\n        const resMetadata = await this.getNftInformation(\n          nft.address,\n          nft.tokenId,\n          networkClientId,\n        );\n        return {\n          nft,\n          newMetadata: resMetadata,\n        };\n      }),\n    );\n    const successfulNewFetchedNfts = nftMetadataResults.filter(\n      (result): result is PromiseFulfilledResult<NftUpdate> =>\n        result.status === 'fulfilled',\n    );\n    // We want to avoid updating the state if the state and fetched nft info are the same\n    const nftsWithDifferentMetadata: PromiseFulfilledResult<NftUpdate>[] = [];\n    const { allNfts } = this.state;\n    const stateNfts = allNfts[userAddress]?.[chainId] || [];\n\n    successfulNewFetchedNfts.forEach((singleNft) => {\n      const existingEntry: Nft | undefined = stateNfts.find(\n        (nft) =>\n          nft.address.toLowerCase() ===\n            singleNft.value.nft.address.toLowerCase() &&\n          nft.tokenId === singleNft.value.nft.tokenId,\n      );\n\n      if (existingEntry) {\n        const differentMetadata = compareNftMetadata(\n          singleNft.value.newMetadata,\n          existingEntry,\n        );\n\n        if (differentMetadata) {\n          nftsWithDifferentMetadata.push(singleNft);\n        }\n      }\n    });\n\n    if (nftsWithDifferentMetadata.length !== 0) {\n      nftsWithDifferentMetadata.forEach((elm) =>\n        this.updateNft(\n          elm.value.nft,\n          elm.value.newMetadata,\n          userAddress,\n          chainId,\n        ),\n      );\n    }\n  }\n\n  /**\n   * Removes an NFT from the stored token list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  removeNft(\n    address: string,\n    tokenId: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    address = toChecksumHexAddress(address);\n    this.removeIndividualNft(address, tokenId, { chainId, userAddress });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const remainingNft = nfts.find(\n      (nft) => nft.address.toLowerCase() === address.toLowerCase(),\n    );\n\n    if (!remainingNft) {\n      this.removeNftContract(address, { chainId, userAddress });\n    }\n  }\n\n  /**\n   * Removes an NFT from the stored token list and saves it in ignored NFTs list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  removeAndIgnoreNft(\n    address: string,\n    tokenId: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    address = toChecksumHexAddress(address);\n    this.removeAndIgnoreIndividualNft(address, tokenId, {\n      chainId,\n      userAddress,\n    });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const remainingNft = nfts.find(\n      (nft) => nft.address.toLowerCase() === address.toLowerCase(),\n    );\n    if (!remainingNft) {\n      this.removeNftContract(address, { chainId, userAddress });\n    }\n  }\n\n  /**\n   * Removes all NFTs from the ignored list.\n   */\n  clearIgnoredNfts() {\n    this.update({ ignoredNfts: [] });\n  }\n\n  /**\n   * Checks whether input NFT is still owned by the user\n   * And updates the isCurrentlyOwned value on the NFT object accordingly.\n   *\n   * @param nft - The NFT object to check and update.\n   * @param batch - A boolean indicating whether this method is being called as part of a batch or single update.\n   * @param accountParams - The userAddress and chainId to check ownership against\n   * @param accountParams.userAddress - the address passed through the confirmed transaction flow to ensure assets are stored to the correct account\n   * @param accountParams.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns the NFT with the updated isCurrentlyOwned value\n   */\n  async checkAndUpdateSingleNftOwnershipStatus(\n    nft: Nft,\n    batch: boolean,\n    {\n      userAddress = this.config.selectedAddress,\n      networkClientId,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { address, tokenId } = nft;\n    let isOwned = nft.isCurrentlyOwned;\n    try {\n      isOwned = await this.isNftOwner(userAddress, address, tokenId, {\n        networkClientId,\n      });\n    } catch {\n      // ignore error\n      // this will only throw an error 'Unable to verify ownership' in which case\n      // we want to keep the current value of isCurrentlyOwned for this flow.\n    }\n\n    nft.isCurrentlyOwned = isOwned;\n\n    if (batch) {\n      return nft;\n    }\n\n    // if this is not part of a batched update we update this one NFT in state\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const nftToUpdate = nfts.find(\n      (item) =>\n        item.tokenId === tokenId &&\n        item.address.toLowerCase() === address.toLowerCase(),\n    );\n    if (nftToUpdate) {\n      nftToUpdate.isCurrentlyOwned = isOwned;\n      this.updateNestedNftState(nfts, ALL_NFTS_STATE_KEY, {\n        userAddress,\n        chainId,\n      });\n    }\n    return nft;\n  }\n\n  /**\n   * Checks whether NFTs associated with current selectedAddress/chainId combination are still owned by the user\n   * And updates the isCurrentlyOwned value on each accordingly.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT ownership status is checked/updated.\n   */\n  async checkAndUpdateAllNftsOwnershipStatus(\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const updatedNfts = await Promise.all(\n      nfts.map(async (nft) => {\n        return (\n          (await this.checkAndUpdateSingleNftOwnershipStatus(nft, true, {\n            networkClientId,\n            userAddress,\n          })) ?? nft\n        );\n      }),\n    );\n\n    this.updateNestedNftState(updatedNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n  }\n\n  /**\n   * Update NFT favorite status.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Hex address of the NFT contract.\n   * @param favorite - NFT new favorite status.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  updateNftFavoriteStatus(\n    address: string,\n    tokenId: string,\n    favorite: boolean,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: {\n      networkClientId?: NetworkClientId;\n      userAddress?: string;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) => nft.address === address && nft.tokenId === tokenId,\n    );\n\n    if (index === -1) {\n      return;\n    }\n\n    const updatedNft: Nft = {\n      ...nfts[index],\n      favorite,\n    };\n\n    // Update Nfts array\n    nfts[index] = updatedNft;\n\n    this.updateNestedNftState(nfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress,\n    });\n  }\n\n  /**\n   * Returns an NFT by the address and token id.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Number that represents the id of the token.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   * @returns Object containing the NFT and its position in the array\n   */\n  findNftByAddressAndTokenId(\n    address: string,\n    tokenId: string,\n    selectedAddress: string,\n    chainId: Hex,\n  ): { nft: Nft; index: number } | null {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) =>\n        nft.address.toLowerCase() === address.toLowerCase() &&\n        nft.tokenId === tokenId,\n    );\n\n    if (index === -1) {\n      return null;\n    }\n\n    return { nft: nfts[index], index };\n  }\n\n  /**\n   * Update NFT data.\n   *\n   * @param nft - NFT object to find the right NFT to updates.\n   * @param updates - NFT partial object to update properties of the NFT.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   */\n  updateNft(\n    nft: Nft,\n    updates: Partial<Nft>,\n    selectedAddress: string,\n    chainId: Hex,\n  ) {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const nftInfo = this.findNftByAddressAndTokenId(\n      nft.address,\n      nft.tokenId,\n      selectedAddress,\n      chainId,\n    );\n\n    if (!nftInfo) {\n      return;\n    }\n\n    const updatedNft: Nft = {\n      ...nft,\n      ...updates,\n    };\n\n    const newNfts = [\n      ...nfts.slice(0, nftInfo.index),\n      updatedNft,\n      ...nfts.slice(nftInfo.index + 1),\n    ];\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress: selectedAddress,\n    });\n  }\n\n  /**\n   * Resets the transaction status of an NFT.\n   *\n   * @param transactionId - NFT transaction id.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   * @returns a boolean indicating if the reset was well succeeded or not\n   */\n  resetNftTransactionStatusByTransactionId(\n    transactionId: string,\n    selectedAddress: string,\n    chainId: Hex,\n  ): boolean {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) => nft.transactionId === transactionId,\n    );\n\n    if (index === -1) {\n      return false;\n    }\n    const updatedNft: Nft = {\n      ...nfts[index],\n      transactionId: undefined,\n    };\n\n    const newNfts = [\n      ...nfts.slice(0, index),\n      updatedNft,\n      ...nfts.slice(index + 1),\n    ];\n\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress: selectedAddress,\n    });\n\n    return true;\n  }\n\n  async _requestApproval(suggestedNftMeta: SuggestedNftMeta) {\n    return this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id: suggestedNftMeta.id,\n        origin: suggestedNftMeta.origin,\n        type: ApprovalType.WatchAsset,\n        requestData: {\n          id: suggestedNftMeta.id,\n          interactingAddress: suggestedNftMeta.interactingAddress,\n          asset: {\n            address: suggestedNftMeta.asset.address,\n            tokenId: suggestedNftMeta.asset.tokenId,\n            name: suggestedNftMeta.asset.name,\n            description: suggestedNftMeta.asset.description,\n            image: suggestedNftMeta.asset.image,\n            standard: suggestedNftMeta.asset.standard,\n          },\n        },\n      },\n      true,\n    );\n  }\n}\n\nexport default NftController;\n"],"mappings":"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","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-LAU6ZDZR.js.map b/node_modules/@metamask/assets-controllers/dist/chunk-LAU6ZDZR.js.map
deleted file mode 100644
index c9853d6..0000000
--- a/node_modules/@metamask/assets-controllers/dist/chunk-LAU6ZDZR.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/NftController.ts"],"names":[],"mappings":"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","sourcesContent":["import { isAddress } from '@ethersproject/address';\nimport type { AddApprovalRequest } from '@metamask/approval-controller';\nimport type {\n  BaseConfig,\n  BaseState,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseControllerV1 } from '@metamask/base-controller';\nimport {\n  safelyExecute,\n  handleFetch,\n  toChecksumHexAddress,\n  BNToHex,\n  fetchWithErrorHandling,\n  IPFS_DEFAULT_GATEWAY_URL,\n  ERC721,\n  ERC1155,\n  ApprovalType,\n  NFT_API_BASE_URL,\n} from '@metamask/controller-utils';\nimport type {\n  NetworkClientId,\n  NetworkController,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkState,\n} from '@metamask/network-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { remove0x } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport BN from 'bn.js';\nimport { EventEmitter } from 'events';\nimport { v4 as random } from 'uuid';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { compareNftMetadata, getFormattedIpfsUrl } from './assetsUtil';\nimport { Source } from './constants';\nimport type {\n  ApiNftContract,\n  ReservoirResponse,\n  Collection,\n  Attributes,\n  LastSale,\n} from './NftDetectionController';\n\ntype NFTStandardType = 'ERC721' | 'ERC1155';\n\ntype SuggestedNftMeta = {\n  asset: { address: string; tokenId: string } & NftMetadata;\n  id: string;\n  time: number;\n  type: NFTStandardType;\n  interactingAddress: string;\n  origin: string;\n};\n\n/**\n * @type Nft\n *\n * NFT representation\n * @property address - Hex address of a ERC721 contract\n * @property description - The NFT description\n * @property image - URI of custom NFT image associated with this tokenId\n * @property name - Name associated with this tokenId and contract address\n * @property tokenId - The NFT identifier\n * @property numberOfSales - Number of sales\n * @property backgroundColor - The background color to be displayed with the item\n * @property imagePreview - URI of a smaller image associated with this NFT\n * @property imageThumbnail - URI of a thumbnail image associated with this NFT\n * @property imageOriginal - URI of the original image associated with this NFT\n * @property animation - URI of a animation associated with this NFT\n * @property animationOriginal - URI of the original animation associated with this NFT\n * @property externalLink - External link containing additional information\n * @property creator - The NFT owner information object\n * @property isCurrentlyOwned - Boolean indicating whether the address/chainId combination where it's currently stored currently owns this NFT\n * @property transactionId - Transaction Id associated with the NFT\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Nft extends NftMetadata {\n  tokenId: string;\n  address: string;\n  isCurrentlyOwned?: boolean;\n}\n\ntype NftUpdate = {\n  nft: Nft;\n  newMetadata: NftMetadata;\n};\n\n/**\n * @type NftContract\n *\n * NFT contract information representation\n * @property name - Contract name\n * @property logo - Contract logo\n * @property address - Contract address\n * @property symbol - Contract symbol\n * @property description - Contract description\n * @property totalSupply - Total supply of NFTs\n * @property assetContractType - The NFT type, it could be `semi-fungible` or `non-fungible`\n * @property createdDate - Creation date\n * @property schemaName - The schema followed by the contract, it could be `ERC721` or `ERC1155`\n * @property externalLink - External link containing additional information\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftContract {\n  name?: string;\n  logo?: string;\n  address: string;\n  symbol?: string;\n  description?: string;\n  totalSupply?: string;\n  assetContractType?: string;\n  createdDate?: string;\n  schemaName?: string;\n  externalLink?: string;\n}\n\n/**\n * @type NftMetadata\n *\n * NFT custom information\n * @property name - NFT custom name\n * @property description - The NFT description\n * @property numberOfSales - Number of sales\n * @property backgroundColor - The background color to be displayed with the item\n * @property image - Image custom image URI\n * @property imagePreview - URI of a smaller image associated with this NFT\n * @property imageThumbnail - URI of a thumbnail image associated with this NFT\n * @property imageOriginal - URI of the original image associated with this NFT\n * @property animation - URI of a animation associated with this NFT\n * @property animationOriginal - URI of the original animation associated with this NFT\n * @property externalLink - External link containing additional information\n * @property creator - The NFT owner information object\n * @property standard - NFT standard name for the NFT, e.g., ERC-721 or ERC-1155\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftMetadata {\n  name: string | null;\n  description: string | null;\n  image: string | null;\n  standard: string | null;\n  favorite?: boolean;\n  numberOfSales?: number;\n  backgroundColor?: string;\n  imagePreview?: string;\n  imageThumbnail?: string;\n  imageOriginal?: string;\n  animation?: string;\n  animationOriginal?: string;\n  externalLink?: string;\n  creator?: string;\n  transactionId?: string;\n  tokenURI?: string | null;\n  collection?: Collection;\n  address?: string;\n  attributes?: Attributes;\n  lastSale?: LastSale;\n  rarityRank?: string;\n}\n\n/**\n * @type NftConfig\n *\n * NFT controller configuration\n * @property selectedAddress - Vault selected address\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftConfig extends BaseConfig {\n  selectedAddress: string;\n  chainId: Hex;\n  ipfsGateway: string;\n  openSeaEnabled: boolean;\n  useIPFSSubdomains: boolean;\n  isIpfsGatewayEnabled: boolean;\n}\n\n/**\n * @type NftState\n *\n * NFT controller state\n * @property allNftContracts - Object containing NFT contract information\n * @property allNfts - Object containing NFTs per account and network\n * @property ignoredNfts - List of NFTs that should be ignored\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftState extends BaseState {\n  allNftContracts: {\n    [key: string]: { [chainId: Hex]: NftContract[] };\n  };\n  allNfts: { [key: string]: { [chainId: Hex]: Nft[] } };\n  ignoredNfts: Nft[];\n}\n\nconst ALL_NFTS_STATE_KEY = 'allNfts';\nconst ALL_NFTS_CONTRACTS_STATE_KEY = 'allNftContracts';\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface NftAsset {\n  address: string;\n  tokenId: string;\n}\n\n/**\n * The name of the {@link NftController}.\n */\nconst controllerName = 'NftController';\n\n/**\n * The external actions available to the {@link NftController}.\n */\ntype AllowedActions =\n  | AddApprovalRequest\n  | NetworkControllerGetNetworkClientByIdAction;\n\n/**\n * The messenger of the {@link NftController}.\n */\nexport type NftControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\nexport const getDefaultNftState = (): NftState => {\n  return {\n    allNftContracts: {},\n    allNfts: {},\n    ignoredNfts: [],\n  };\n};\n\n/**\n * Controller that stores assets and exposes convenience methods\n */\nexport class NftController extends BaseControllerV1<NftConfig, NftState> {\n  private readonly mutex = new Mutex();\n\n  private readonly messagingSystem: NftControllerMessenger;\n\n  getNftApi() {\n    return `${NFT_API_BASE_URL}/tokens`;\n  }\n\n  /**\n   * Helper method to update nested state for allNfts and allNftContracts.\n   *\n   * @param newCollection - the modified piece of state to update in the controller's store\n   * @param baseStateKey - The root key in the store to update.\n   * @param passedConfig - An object containing the selectedAddress and chainId that are passed through the auto-detection flow.\n   * @param passedConfig.userAddress - the address passed through the NFT detection flow to ensure assets are stored to the correct account\n   * @param passedConfig.chainId - the chainId passed through the NFT detection flow to ensure assets are stored to the correct account\n   */\n  private updateNestedNftState(\n    newCollection: Nft[] | NftContract[],\n    baseStateKey: 'allNfts' | 'allNftContracts',\n    { userAddress, chainId }: { userAddress: string; chainId: Hex },\n  ) {\n    const { [baseStateKey]: oldState } = this.state;\n\n    const addressState = oldState[userAddress];\n    const newAddressState = {\n      ...addressState,\n      ...{ [chainId]: newCollection },\n    };\n    const newState = {\n      ...oldState,\n      ...{ [userAddress]: newAddressState },\n    };\n    this.update({\n      [baseStateKey]: newState,\n    });\n  }\n\n  /**\n   * Request individual NFT information from NFT API.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformationFromApi(\n    contractAddress: string,\n    tokenId: string,\n  ): Promise<NftMetadata> {\n    // TODO Parameterize this by chainId for non-mainnet token detection\n    // Attempt to fetch the data with the nft-api\n    const urlParams = new URLSearchParams({\n      chainIds: '1',\n      tokens: `${contractAddress}:${tokenId}`,\n      includeTopBid: 'true',\n      includeAttributes: 'true',\n      includeLastSale: 'true',\n    }).toString();\n    const nftInformation: ReservoirResponse | undefined =\n      await fetchWithErrorHandling({\n        url: `${this.getNftApi()}?${urlParams}`,\n        options: {\n          headers: {\n            Version: '1',\n          },\n        },\n      });\n    // if we were still unable to fetch the data we return out the default/null of `NftMetadata`\n    if (!nftInformation?.tokens?.[0]?.token) {\n      return {\n        name: null,\n        description: null,\n        image: null,\n        standard: null,\n      };\n    }\n\n    // if we've reached this point, we have successfully fetched some data for nftInformation\n    // now we reconfigure the data to conform to the `NftMetadata` type for storage.\n\n    const {\n      image,\n      metadata: { imageOriginal } = {},\n      name,\n      description,\n      collection,\n      kind,\n      rarityRank,\n      rarity,\n      attributes,\n      lastSale,\n      imageSmall,\n    } = nftInformation.tokens[0].token;\n\n    /* istanbul ignore next */\n    const nftMetadata: NftMetadata = Object.assign(\n      {},\n      { name: name || null },\n      { description: description || null },\n      { image: image || null },\n      collection?.creator && { creator: collection.creator },\n      imageOriginal && { imageOriginal },\n      imageSmall && { imageThumbnail: imageSmall },\n      kind && { standard: kind.toUpperCase() },\n      lastSale && { lastSale },\n      attributes && { attributes },\n      nftInformation.tokens[0].market?.topBid && {\n        topBid: nftInformation.tokens[0].market?.topBid,\n      },\n      rarityRank && { rarityRank },\n      rarity && { rarity },\n      collection && { collection },\n    );\n\n    return nftMetadata;\n  }\n\n  /**\n   * Request individual NFT information from contracts that follows Metadata Interface.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformationFromTokenURI(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<NftMetadata> {\n    const { ipfsGateway, useIPFSSubdomains, isIpfsGatewayEnabled } =\n      this.config;\n    const result = await this.getNftURIAndStandard(\n      contractAddress,\n      tokenId,\n      networkClientId,\n    );\n    let tokenURI = result[0];\n    const standard = result[1];\n\n    const hasIpfsTokenURI = tokenURI.startsWith('ipfs://');\n\n    if (hasIpfsTokenURI && !isIpfsGatewayEnabled) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    }\n\n    const isDisplayNFTMediaToggleEnabled = this.config.openSeaEnabled;\n    if (!hasIpfsTokenURI && !isDisplayNFTMediaToggleEnabled) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    }\n\n    if (hasIpfsTokenURI) {\n      tokenURI = getFormattedIpfsUrl(ipfsGateway, tokenURI, useIPFSSubdomains);\n    }\n\n    try {\n      const object = await handleFetch(tokenURI);\n      // TODO: Check image_url existence. This is not part of EIP721 nor EIP1155\n      const image = Object.prototype.hasOwnProperty.call(object, 'image')\n        ? 'image'\n        : /* istanbul ignore next */ 'image_url';\n\n      return {\n        image: object[image],\n        name: object.name,\n        description: object.description,\n        standard,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    } catch {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    }\n  }\n\n  /**\n   * Retrieve NFT uri with  metadata. TODO Update method to use IPFS.\n   *\n   * @param contractAddress - NFT contract address.\n   * @param tokenId - NFT token id.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving NFT uri and token standard.\n   */\n  private async getNftURIAndStandard(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<[string, string]> {\n    // try ERC721 uri\n    try {\n      const uri = await this.getERC721TokenURI(\n        contractAddress,\n        tokenId,\n        networkClientId,\n      );\n      return [uri, ERC721];\n    } catch {\n      // Ignore error\n    }\n\n    // try ERC1155 uri\n    try {\n      const tokenURI = await this.getERC1155TokenURI(\n        contractAddress,\n        tokenId,\n        networkClientId,\n      );\n\n      /**\n       * According to EIP1155 the URI value allows for ID substitution\n       * in case the string `{id}` exists.\n       * https://eips.ethereum.org/EIPS/eip-1155#metadata\n       */\n\n      if (!tokenURI.includes('{id}')) {\n        return [tokenURI, ERC1155];\n      }\n\n      const hexTokenId = remove0x(BNToHex(new BN(tokenId)))\n        .padStart(64, '0')\n        .toLowerCase();\n      return [tokenURI.replace('{id}', hexTokenId), ERC1155];\n    } catch {\n      // Ignore error\n    }\n\n    return ['', ''];\n  }\n\n  /**\n   * Request individual NFT information (name, image url and description).\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformation(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<NftMetadata> {\n    const chainId = this.getCorrectChainId({\n      networkClientId,\n    });\n    const [blockchainMetadata, nftApiMetadata] = await Promise.all([\n      safelyExecute(() =>\n        this.getNftInformationFromTokenURI(\n          contractAddress,\n          tokenId,\n          networkClientId,\n        ),\n      ),\n      this.config.openSeaEnabled && chainId === '0x1'\n        ? safelyExecute(() =>\n            this.getNftInformationFromApi(contractAddress, tokenId),\n          )\n        : undefined,\n    ]);\n    return {\n      ...nftApiMetadata,\n      name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,\n      description:\n        blockchainMetadata?.description ?? nftApiMetadata?.description ?? null,\n      image: blockchainMetadata?.image ?? nftApiMetadata?.image ?? null,\n      standard:\n        blockchainMetadata?.standard ?? nftApiMetadata?.standard ?? null,\n      tokenURI: blockchainMetadata?.tokenURI ?? null,\n    };\n  }\n\n  /**\n   * Request NFT contract information from the contract itself.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftContractInformationFromContract(\n    contractAddress: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<\n    Partial<ApiNftContract> &\n      Pick<ApiNftContract, 'address'> &\n      Pick<ApiNftContract, 'collection'>\n  > {\n    const [name, symbol] = await Promise.all([\n      this.getERC721AssetName(contractAddress, networkClientId),\n      this.getERC721AssetSymbol(contractAddress, networkClientId),\n    ]);\n\n    return {\n      collection: { name },\n      symbol,\n      address: contractAddress,\n    };\n  }\n\n  /**\n   * Request NFT contract information from Blockchain and aggregate with received data from NFTMetadata.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param nftMetadataFromApi - Received NFT information to be aggregated with blockchain contract information.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the NFT contract name, image and description.\n   */\n  private async getNftContractInformation(\n    contractAddress: string,\n    nftMetadataFromApi: NftMetadata,\n    networkClientId?: NetworkClientId,\n  ): Promise<\n    Partial<ApiNftContract> &\n      Pick<ApiNftContract, 'address'> &\n      Pick<ApiNftContract, 'collection'>\n  > {\n    const blockchainContractData = await safelyExecute(() =>\n      this.getNftContractInformationFromContract(\n        contractAddress,\n        networkClientId,\n      ),\n    );\n\n    if (\n      blockchainContractData ||\n      !Object.values(nftMetadataFromApi).every((value) => value === null)\n    ) {\n      return {\n        address: contractAddress,\n        ...blockchainContractData,\n        schema_name: nftMetadataFromApi?.standard ?? null,\n        collection: {\n          name: null,\n          image_url:\n            nftMetadataFromApi?.collection?.image ??\n            nftMetadataFromApi?.collection?.imageUrl ??\n            null,\n          tokenCount: nftMetadataFromApi?.collection?.tokenCount ?? null,\n          ...nftMetadataFromApi?.collection,\n          ...blockchainContractData?.collection,\n        },\n      };\n    }\n\n    /* istanbul ignore next */\n    return {\n      address: contractAddress,\n      asset_contract_type: null,\n      created_date: null,\n      schema_name: null,\n      symbol: null,\n      total_supply: null,\n      description: null,\n      external_link: null,\n      collection: { name: null, image_url: null },\n    };\n  }\n\n  /**\n   * Adds an individual NFT to the stored NFT list.\n   *\n   * @param tokenAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param nftMetadata - NFT optional information (name, image and description).\n   * @param nftContract - An object containing contract data of the NFT being added.\n   * @param chainId - The chainId of the network where the NFT is being added.\n   * @param userAddress - The address of the account where the NFT is being added.\n   * @param source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @returns Promise resolving to the current NFT list.\n   */\n  private async addIndividualNft(\n    tokenAddress: string,\n    tokenId: string,\n    nftMetadata: NftMetadata,\n    nftContract: NftContract,\n    chainId: Hex,\n    userAddress: string,\n    source: Source,\n  ): Promise<Nft[]> {\n    // TODO: Remove unused return\n    const releaseLock = await this.mutex.acquire();\n    try {\n      tokenAddress = toChecksumHexAddress(tokenAddress);\n      const { allNfts } = this.state;\n\n      const nfts = allNfts[userAddress]?.[chainId] || [];\n\n      const existingEntry: Nft | undefined = nfts.find(\n        (nft) =>\n          nft.address.toLowerCase() === tokenAddress.toLowerCase() &&\n          nft.tokenId === tokenId,\n      );\n\n      if (existingEntry) {\n        const differentMetadata = compareNftMetadata(\n          nftMetadata,\n          existingEntry,\n        );\n        if (differentMetadata || !existingEntry.isCurrentlyOwned) {\n          // TODO: Switch to indexToUpdate\n          const indexToRemove = nfts.findIndex(\n            (nft) =>\n              nft.address.toLowerCase() === tokenAddress.toLowerCase() &&\n              nft.tokenId === tokenId,\n          );\n          /* istanbul ignore next */\n          if (indexToRemove !== -1) {\n            nfts.splice(indexToRemove, 1);\n          }\n        } else {\n          return nfts;\n        }\n      }\n\n      const newEntry: Nft = {\n        address: tokenAddress,\n        tokenId,\n        favorite: existingEntry?.favorite || false,\n        isCurrentlyOwned: true,\n        ...nftMetadata,\n      };\n\n      const newNfts = [...nfts, newEntry];\n      this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n        chainId,\n        userAddress,\n      });\n\n      if (this.onNftAdded) {\n        this.onNftAdded({\n          address: tokenAddress,\n          symbol: nftContract.symbol,\n          tokenId: tokenId.toString(),\n          standard: nftMetadata.standard,\n          source,\n        });\n      }\n      return newNfts;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Adds an NFT contract to the stored NFT contracts list.\n   *\n   * @param options - options.\n   * @param options.tokenAddress - Hex address of the NFT contract.\n   * @param options.userAddress - The address of the account where the NFT is being added.\n   * @param options.nftMetadata - The retrieved NFTMetadata from API.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @returns Promise resolving to the current NFT contracts list.\n   */\n  private async addNftContract({\n    tokenAddress,\n    userAddress,\n    networkClientId,\n    source,\n    nftMetadata,\n  }: {\n    tokenAddress: string;\n    userAddress: string;\n    nftMetadata: NftMetadata;\n    networkClientId?: NetworkClientId;\n    source?: Source;\n  }): Promise<NftContract[]> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      tokenAddress = toChecksumHexAddress(tokenAddress);\n      const { allNftContracts } = this.state;\n      const chainId = this.getCorrectChainId({\n        networkClientId,\n      });\n\n      const nftContracts = allNftContracts[userAddress]?.[chainId] || [];\n\n      const existingEntry = nftContracts.find(\n        (nftContract) =>\n          nftContract.address.toLowerCase() === tokenAddress.toLowerCase(),\n      );\n      if (existingEntry) {\n        return nftContracts;\n      }\n\n      // this doesn't work currently for detection if the user switches networks while the detection is processing\n      // will be fixed once detection uses networkClientIds\n      // get name and symbol if ERC721 then put together the metadata\n      const contractInformation = await this.getNftContractInformation(\n        tokenAddress,\n        nftMetadata,\n        networkClientId,\n      );\n      const {\n        asset_contract_type,\n        created_date,\n        symbol,\n        description,\n        external_link,\n        schema_name,\n        collection: { name, image_url, tokenCount },\n      } = contractInformation;\n\n      // If the nft is auto-detected we want some valid metadata to be present\n      if (\n        source === Source.Detected &&\n        'address' in contractInformation &&\n        typeof contractInformation.address === 'string' &&\n        'collection' in contractInformation &&\n        contractInformation.collection.name === null &&\n        'image_url' in contractInformation.collection &&\n        contractInformation.collection.image_url === null &&\n        Object.entries(contractInformation).every(([key, value]) => {\n          return key === 'address' || key === 'collection' || !value;\n        })\n      ) {\n        return nftContracts;\n      }\n\n      /* istanbul ignore next */\n      const newEntry: NftContract = Object.assign(\n        {},\n        { address: tokenAddress },\n        description && { description },\n        name && { name },\n        image_url && { logo: image_url },\n        symbol && { symbol },\n        tokenCount !== null &&\n          typeof tokenCount !== 'undefined' && { totalSupply: tokenCount },\n        asset_contract_type && { assetContractType: asset_contract_type },\n        created_date && { createdDate: created_date },\n        schema_name && { schemaName: schema_name },\n        external_link && { externalLink: external_link },\n      );\n      const newNftContracts = [...nftContracts, newEntry];\n      this.updateNestedNftState(newNftContracts, ALL_NFTS_CONTRACTS_STATE_KEY, {\n        chainId,\n        userAddress,\n      });\n\n      return newNftContracts;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Removes an individual NFT from the stored token list and saves it in ignored NFTs list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  private removeAndIgnoreIndividualNft(\n    address: string,\n    tokenId: string,\n    {\n      chainId,\n      userAddress,\n    }: {\n      chainId: Hex;\n      userAddress: string;\n    },\n  ) {\n    address = toChecksumHexAddress(address);\n    const { allNfts, ignoredNfts } = this.state;\n    const newIgnoredNfts = [...ignoredNfts];\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const newNfts = nfts.filter((nft) => {\n      if (\n        nft.address.toLowerCase() === address.toLowerCase() &&\n        nft.tokenId === tokenId\n      ) {\n        const alreadyIgnored = newIgnoredNfts.find(\n          (c) => c.address === address && c.tokenId === tokenId,\n        );\n        !alreadyIgnored && newIgnoredNfts.push(nft);\n        return false;\n      }\n      return true;\n    });\n\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n\n    this.update({\n      ignoredNfts: newIgnoredNfts,\n    });\n  }\n\n  /**\n   * Removes an individual NFT from the stored token list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  private removeIndividualNft(\n    address: string,\n    tokenId: string,\n    { chainId, userAddress }: { chainId: Hex; userAddress: string },\n  ) {\n    address = toChecksumHexAddress(address);\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const newNfts = nfts.filter(\n      (nft) =>\n        !(\n          nft.address.toLowerCase() === address.toLowerCase() &&\n          nft.tokenId === tokenId\n        ),\n    );\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n  }\n\n  /**\n   * Removes an NFT contract to the stored NFT contracts list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   * @returns Promise resolving to the current NFT contracts list.\n   */\n  private removeNftContract(\n    address: string,\n    { chainId, userAddress }: { chainId: Hex; userAddress: string },\n  ): NftContract[] {\n    address = toChecksumHexAddress(address);\n    const { allNftContracts } = this.state;\n    const nftContracts = allNftContracts[userAddress]?.[chainId] || [];\n\n    const newNftContracts = nftContracts.filter(\n      (nftContract) =>\n        !(nftContract.address.toLowerCase() === address.toLowerCase()),\n    );\n    this.updateNestedNftState(newNftContracts, ALL_NFTS_CONTRACTS_STATE_KEY, {\n      chainId,\n      userAddress,\n    });\n\n    return newNftContracts;\n  }\n\n  /**\n   * EventEmitter instance used to listen to specific EIP747 events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Optional API key to use with opensea\n   */\n  openSeaApiKey?: string;\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'NftController';\n\n  private readonly getERC721AssetName: AssetsContractController['getERC721AssetName'];\n\n  private readonly getERC721AssetSymbol: AssetsContractController['getERC721AssetSymbol'];\n\n  private readonly getERC721TokenURI: AssetsContractController['getERC721TokenURI'];\n\n  private readonly getERC721OwnerOf: AssetsContractController['getERC721OwnerOf'];\n\n  private readonly getERC1155BalanceOf: AssetsContractController['getERC1155BalanceOf'];\n\n  private readonly getERC1155TokenURI: AssetsContractController['getERC1155TokenURI'];\n\n  private readonly getNetworkClientById: NetworkController['getNetworkClientById'];\n\n  private readonly onNftAdded?: (data: {\n    address: string;\n    symbol: string | undefined;\n    tokenId: string;\n    standard: string | null;\n    source: Source;\n  }) => void;\n\n  /**\n   * Creates an NftController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.getERC721AssetName - Gets the name of the asset at the given address.\n   * @param options.getERC721AssetSymbol - Gets the symbol of the asset at the given address.\n   * @param options.getERC721TokenURI - Gets the URI of the ERC721 token at the given address, with the given ID.\n   * @param options.getERC721OwnerOf - Get the owner of a ERC-721 NFT.\n   * @param options.getERC1155BalanceOf - Gets balance of a ERC-1155 NFT.\n   * @param options.getERC1155TokenURI - Gets the URI of the ERC1155 token at the given address, with the given ID.\n   * @param options.getNetworkClientById - Gets the network client for the given networkClientId.\n   * @param options.onNftAdded - Callback that is called when an NFT is added. Currently used pass data\n   * for tracking the NFT added event.\n   * @param options.messenger - The controller messenger.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      chainId: initialChainId,\n      onPreferencesStateChange,\n      onNetworkStateChange,\n      getERC721AssetName,\n      getERC721AssetSymbol,\n      getERC721TokenURI,\n      getERC721OwnerOf,\n      getERC1155BalanceOf,\n      getERC1155TokenURI,\n      getNetworkClientById,\n      onNftAdded,\n      messenger,\n    }: {\n      chainId: Hex;\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n      getERC721AssetName: AssetsContractController['getERC721AssetName'];\n      getERC721AssetSymbol: AssetsContractController['getERC721AssetSymbol'];\n      getERC721TokenURI: AssetsContractController['getERC721TokenURI'];\n      getERC721OwnerOf: AssetsContractController['getERC721OwnerOf'];\n      getERC1155BalanceOf: AssetsContractController['getERC1155BalanceOf'];\n      getERC1155TokenURI: AssetsContractController['getERC1155TokenURI'];\n      getNetworkClientById: NetworkController['getNetworkClientById'];\n      onNftAdded?: (data: {\n        address: string;\n        symbol: string | undefined;\n        tokenId: string;\n        standard: string | null;\n        source: string;\n      }) => void;\n      messenger: NftControllerMessenger;\n    },\n    config?: Partial<BaseConfig>,\n    state?: Partial<NftState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      selectedAddress: '',\n      chainId: initialChainId,\n      ipfsGateway: IPFS_DEFAULT_GATEWAY_URL,\n      openSeaEnabled: false,\n      useIPFSSubdomains: true,\n      isIpfsGatewayEnabled: true,\n    };\n\n    this.defaultState = getDefaultNftState();\n    this.initialize();\n    this.getERC721AssetName = getERC721AssetName;\n    this.getERC721AssetSymbol = getERC721AssetSymbol;\n    this.getERC721TokenURI = getERC721TokenURI;\n    this.getERC721OwnerOf = getERC721OwnerOf;\n    this.getERC1155BalanceOf = getERC1155BalanceOf;\n    this.getERC1155TokenURI = getERC1155TokenURI;\n    this.getNetworkClientById = getNetworkClientById;\n    this.onNftAdded = onNftAdded;\n    this.messagingSystem = messenger;\n\n    onPreferencesStateChange(\n      async ({\n        selectedAddress,\n        ipfsGateway,\n        openSeaEnabled,\n        isIpfsGatewayEnabled,\n      }) => {\n        this.configure({\n          selectedAddress,\n          ipfsGateway,\n          openSeaEnabled,\n          isIpfsGatewayEnabled,\n        });\n\n        const needsUpdateNftMetadata =\n          (isIpfsGatewayEnabled && ipfsGateway !== '') || openSeaEnabled;\n\n        if (needsUpdateNftMetadata) {\n          const { chainId } = this.config;\n          const nfts: Nft[] =\n            this.state.allNfts[selectedAddress]?.[chainId] ?? [];\n          // filter only nfts\n          const nftsToUpdate = nfts.filter(\n            (singleNft) =>\n              !singleNft.name && !singleNft.description && !singleNft.image,\n          );\n          if (nftsToUpdate.length !== 0) {\n            await this.updateNftMetadata({\n              nfts: nftsToUpdate,\n              userAddress: selectedAddress,\n            });\n          }\n        }\n      },\n    );\n\n    onNetworkStateChange(({ selectedNetworkClientId }) => {\n      const selectedNetworkClient = getNetworkClientById(\n        selectedNetworkClientId,\n      );\n      const { chainId } = selectedNetworkClient.configuration;\n\n      this.configure({ chainId });\n    });\n  }\n\n  private async validateWatchNft(\n    asset: NftAsset,\n    type: NFTStandardType,\n    userAddress: string,\n    { networkClientId }: { networkClientId?: NetworkClientId } = {},\n  ) {\n    const { address: contractAddress, tokenId } = asset;\n\n    // Validate parameters\n    if (!type) {\n      throw rpcErrors.invalidParams('Asset type is required');\n    }\n\n    if (type !== ERC721 && type !== ERC1155) {\n      throw rpcErrors.invalidParams(\n        `Non NFT asset type ${type} not supported by watchNft`,\n      );\n    }\n\n    if (!contractAddress || !tokenId) {\n      throw rpcErrors.invalidParams('Both address and tokenId are required');\n    }\n\n    if (!isAddress(contractAddress)) {\n      throw rpcErrors.invalidParams('Invalid address');\n    }\n\n    if (!/^\\d+$/u.test(tokenId)) {\n      throw rpcErrors.invalidParams('Invalid tokenId');\n    }\n\n    // Check if the user owns the suggested NFT\n    try {\n      const isOwner = await this.isNftOwner(\n        userAddress,\n        contractAddress,\n        tokenId,\n        { networkClientId },\n      );\n      if (!isOwner) {\n        throw rpcErrors.invalidInput(\n          'Suggested NFT is not owned by the selected account',\n        );\n      }\n    } catch (error) {\n      // error thrown here: \"Unable to verify ownership. Possibly because the standard is not supported or the user's currently selected network does not match the chain of the asset in question.\"\n      if (error instanceof Error) {\n        throw rpcErrors.resourceUnavailable(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // temporary method to get the correct chainId until we remove chainId from the config & the chainId arg from the detection logic\n  // Just a helper method to prefer the networkClient chainId first then the chainId argument and then finally the config chainId\n  private getCorrectChainId({\n    networkClientId,\n  }: {\n    networkClientId?: NetworkClientId;\n  }) {\n    if (networkClientId) {\n      return this.getNetworkClientById(networkClientId).configuration.chainId;\n    }\n    return this.config.chainId;\n  }\n\n  /**\n   * Adds a new suggestedAsset to state. Parameters will be validated according to\n   * asset type being watched. A `<suggestedNftMeta.id>:pending` hub event will be emitted once added.\n   *\n   * @param asset - The asset to be watched. For now ERC721 and ERC1155 tokens are accepted.\n   * @param asset.address - The address of the asset contract.\n   * @param asset.tokenId - The ID of the asset.\n   * @param type - The asset type.\n   * @param origin - Domain origin to register the asset from.\n   * @param options - Options bag.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being added.\n   * @returns Object containing a Promise resolving to the suggestedAsset address if accepted.\n   */\n  async watchNft(\n    asset: NftAsset,\n    type: NFTStandardType,\n    origin: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: {\n      networkClientId?: NetworkClientId;\n      userAddress?: string;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    await this.validateWatchNft(asset, type, userAddress);\n\n    const nftMetadata = await this.getNftInformation(\n      asset.address,\n      asset.tokenId,\n      networkClientId,\n    );\n\n    if (nftMetadata.standard && nftMetadata.standard !== type) {\n      throw rpcErrors.invalidInput(\n        `Suggested NFT of type ${nftMetadata.standard} does not match received type ${type}`,\n      );\n    }\n\n    const suggestedNftMeta: SuggestedNftMeta = {\n      asset: { ...asset, ...nftMetadata },\n      type,\n      id: random(),\n      time: Date.now(),\n      interactingAddress: userAddress,\n      origin,\n    };\n    await this._requestApproval(suggestedNftMeta);\n    const { address, tokenId } = asset;\n    const { name, standard, description, image } = nftMetadata;\n\n    await this.addNft(address, tokenId, {\n      nftMetadata: {\n        name: name ?? null,\n        description: description ?? null,\n        image: image ?? null,\n        standard: standard ?? null,\n      },\n      userAddress,\n      source: Source.Dapp,\n      networkClientId,\n    });\n  }\n\n  /**\n   * Sets an OpenSea API key to retrieve NFT information.\n   *\n   * @param openSeaApiKey - OpenSea API key.\n   */\n  setApiKey(openSeaApiKey: string) {\n    this.openSeaApiKey = openSeaApiKey;\n  }\n\n  /**\n   * Checks the ownership of a ERC-721 or ERC-1155 NFT for a given address.\n   *\n   * @param ownerAddress - User public address.\n   * @param nftAddress - NFT contract address.\n   * @param tokenId - NFT token ID.\n   * @param options - Options bag.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving the NFT ownership.\n   */\n  async isNftOwner(\n    ownerAddress: string,\n    nftAddress: string,\n    tokenId: string,\n    {\n      networkClientId,\n    }: {\n      networkClientId?: NetworkClientId;\n    } = {},\n  ): Promise<boolean> {\n    // Checks the ownership for ERC-721.\n    try {\n      const owner = await this.getERC721OwnerOf(\n        nftAddress,\n        tokenId,\n        networkClientId,\n      );\n      return ownerAddress.toLowerCase() === owner.toLowerCase();\n      // eslint-disable-next-line no-empty\n    } catch {\n      // Ignore ERC-721 contract error\n    }\n\n    // Checks the ownership for ERC-1155.\n    try {\n      const balance = await this.getERC1155BalanceOf(\n        ownerAddress,\n        nftAddress,\n        tokenId,\n        networkClientId,\n      );\n      return !balance.isZero();\n      // eslint-disable-next-line no-empty\n    } catch {\n      // Ignore ERC-1155 contract error\n    }\n\n    throw new Error(\n      `Unable to verify ownership. Possibly because the standard is not supported or the user's currently selected network does not match the chain of the asset in question.`,\n    );\n  }\n\n  /**\n   * Verifies currently selected address owns entered NFT address/tokenId combo and\n   * adds the NFT and respective NFT contract to the stored NFT and NFT contracts lists.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param options - an object of arguments\n   * @param options.userAddress - The address of the current user.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   */\n  async addNftVerifyOwnership(\n    address: string,\n    tokenId: string,\n    {\n      userAddress = this.config.selectedAddress,\n      networkClientId,\n      source,\n    }: {\n      userAddress?: string;\n      networkClientId?: NetworkClientId;\n      source?: Source;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    if (\n      !(await this.isNftOwner(userAddress, address, tokenId, {\n        networkClientId,\n      }))\n    ) {\n      throw new Error('This NFT is not owned by the user');\n    }\n    await this.addNft(address, tokenId, {\n      networkClientId,\n      userAddress,\n      source,\n    });\n  }\n\n  /**\n   * Adds an NFT and respective NFT contract to the stored NFT and NFT contracts lists.\n   *\n   * @param tokenAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param options - an object of arguments\n   * @param options.nftMetadata - NFT optional metadata.\n   * @param options.userAddress - The address of the current user.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT list.\n   */\n  async addNft(\n    tokenAddress: string,\n    tokenId: string,\n    {\n      nftMetadata,\n      userAddress = this.config.selectedAddress,\n      source = Source.Custom,\n      networkClientId,\n    }: {\n      nftMetadata?: NftMetadata;\n      userAddress?: string;\n      source?: Source;\n      networkClientId?: NetworkClientId;\n    } = { userAddress: this.config.selectedAddress },\n  ) {\n    tokenAddress = toChecksumHexAddress(tokenAddress);\n\n    const chainId = this.getCorrectChainId({ networkClientId });\n\n    nftMetadata =\n      nftMetadata ||\n      (await this.getNftInformation(tokenAddress, tokenId, networkClientId));\n\n    const newNftContracts = await this.addNftContract({\n      tokenAddress,\n      userAddress,\n      networkClientId,\n      source,\n      nftMetadata,\n    });\n\n    // If NFT contract was not added, do not add individual NFT\n    const nftContract = newNftContracts.find(\n      (contract) =>\n        contract.address.toLowerCase() === tokenAddress.toLowerCase(),\n    );\n\n    // If NFT contract information, add individual NFT\n    if (nftContract) {\n      await this.addIndividualNft(\n        tokenAddress,\n        tokenId,\n        nftMetadata,\n        nftContract,\n        chainId,\n        userAddress,\n        source,\n      );\n    }\n  }\n\n  /**\n   * Refetches NFT metadata and updates the state\n   *\n   * @param options - Options for refetching NFT metadata\n   * @param options.nfts - nfts to update metadata for.\n   * @param options.userAddress - The current user address\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   */\n  async updateNftMetadata({\n    nfts,\n    userAddress = this.config.selectedAddress,\n    networkClientId,\n  }: {\n    nfts: Nft[];\n    userAddress?: string;\n    networkClientId?: NetworkClientId;\n  }) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n\n    const nftsWithChecksumAdr = nfts.map((nft) => {\n      return {\n        ...nft,\n        address: toChecksumHexAddress(nft.address),\n      };\n    });\n    const nftMetadataResults = await Promise.allSettled(\n      nftsWithChecksumAdr.map(async (nft) => {\n        const resMetadata = await this.getNftInformation(\n          nft.address,\n          nft.tokenId,\n          networkClientId,\n        );\n        return {\n          nft,\n          newMetadata: resMetadata,\n        };\n      }),\n    );\n    const successfulNewFetchedNfts = nftMetadataResults.filter(\n      (result): result is PromiseFulfilledResult<NftUpdate> =>\n        result.status === 'fulfilled',\n    );\n    // We want to avoid updating the state if the state and fetched nft info are the same\n    const nftsWithDifferentMetadata: PromiseFulfilledResult<NftUpdate>[] = [];\n    const { allNfts } = this.state;\n    const stateNfts = allNfts[userAddress]?.[chainId] || [];\n\n    successfulNewFetchedNfts.forEach((singleNft) => {\n      const existingEntry: Nft | undefined = stateNfts.find(\n        (nft) =>\n          nft.address.toLowerCase() ===\n            singleNft.value.nft.address.toLowerCase() &&\n          nft.tokenId === singleNft.value.nft.tokenId,\n      );\n\n      if (existingEntry) {\n        const differentMetadata = compareNftMetadata(\n          singleNft.value.newMetadata,\n          existingEntry,\n        );\n\n        if (differentMetadata) {\n          nftsWithDifferentMetadata.push(singleNft);\n        }\n      }\n    });\n\n    if (nftsWithDifferentMetadata.length !== 0) {\n      nftsWithDifferentMetadata.forEach((elm) =>\n        this.updateNft(\n          elm.value.nft,\n          elm.value.newMetadata,\n          userAddress,\n          chainId,\n        ),\n      );\n    }\n  }\n\n  /**\n   * Removes an NFT from the stored token list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  removeNft(\n    address: string,\n    tokenId: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    address = toChecksumHexAddress(address);\n    this.removeIndividualNft(address, tokenId, { chainId, userAddress });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const remainingNft = nfts.find(\n      (nft) => nft.address.toLowerCase() === address.toLowerCase(),\n    );\n\n    if (!remainingNft) {\n      this.removeNftContract(address, { chainId, userAddress });\n    }\n  }\n\n  /**\n   * Removes an NFT from the stored token list and saves it in ignored NFTs list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  removeAndIgnoreNft(\n    address: string,\n    tokenId: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    address = toChecksumHexAddress(address);\n    this.removeAndIgnoreIndividualNft(address, tokenId, {\n      chainId,\n      userAddress,\n    });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const remainingNft = nfts.find(\n      (nft) => nft.address.toLowerCase() === address.toLowerCase(),\n    );\n    if (!remainingNft) {\n      this.removeNftContract(address, { chainId, userAddress });\n    }\n  }\n\n  /**\n   * Removes all NFTs from the ignored list.\n   */\n  clearIgnoredNfts() {\n    this.update({ ignoredNfts: [] });\n  }\n\n  /**\n   * Checks whether input NFT is still owned by the user\n   * And updates the isCurrentlyOwned value on the NFT object accordingly.\n   *\n   * @param nft - The NFT object to check and update.\n   * @param batch - A boolean indicating whether this method is being called as part of a batch or single update.\n   * @param accountParams - The userAddress and chainId to check ownership against\n   * @param accountParams.userAddress - the address passed through the confirmed transaction flow to ensure assets are stored to the correct account\n   * @param accountParams.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns the NFT with the updated isCurrentlyOwned value\n   */\n  async checkAndUpdateSingleNftOwnershipStatus(\n    nft: Nft,\n    batch: boolean,\n    {\n      userAddress = this.config.selectedAddress,\n      networkClientId,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { address, tokenId } = nft;\n    let isOwned = nft.isCurrentlyOwned;\n    try {\n      isOwned = await this.isNftOwner(userAddress, address, tokenId, {\n        networkClientId,\n      });\n    } catch {\n      // ignore error\n      // this will only throw an error 'Unable to verify ownership' in which case\n      // we want to keep the current value of isCurrentlyOwned for this flow.\n    }\n\n    nft.isCurrentlyOwned = isOwned;\n\n    if (batch) {\n      return nft;\n    }\n\n    // if this is not part of a batched update we update this one NFT in state\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const nftToUpdate = nfts.find(\n      (item) =>\n        item.tokenId === tokenId &&\n        item.address.toLowerCase() === address.toLowerCase(),\n    );\n    if (nftToUpdate) {\n      nftToUpdate.isCurrentlyOwned = isOwned;\n      this.updateNestedNftState(nfts, ALL_NFTS_STATE_KEY, {\n        userAddress,\n        chainId,\n      });\n    }\n    return nft;\n  }\n\n  /**\n   * Checks whether NFTs associated with current selectedAddress/chainId combination are still owned by the user\n   * And updates the isCurrentlyOwned value on each accordingly.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT ownership status is checked/updated.\n   */\n  async checkAndUpdateAllNftsOwnershipStatus(\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const updatedNfts = await Promise.all(\n      nfts.map(async (nft) => {\n        return (\n          (await this.checkAndUpdateSingleNftOwnershipStatus(nft, true, {\n            networkClientId,\n            userAddress,\n          })) ?? nft\n        );\n      }),\n    );\n\n    this.updateNestedNftState(updatedNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n  }\n\n  /**\n   * Update NFT favorite status.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Hex address of the NFT contract.\n   * @param favorite - NFT new favorite status.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  updateNftFavoriteStatus(\n    address: string,\n    tokenId: string,\n    favorite: boolean,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: {\n      networkClientId?: NetworkClientId;\n      userAddress?: string;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) => nft.address === address && nft.tokenId === tokenId,\n    );\n\n    if (index === -1) {\n      return;\n    }\n\n    const updatedNft: Nft = {\n      ...nfts[index],\n      favorite,\n    };\n\n    // Update Nfts array\n    nfts[index] = updatedNft;\n\n    this.updateNestedNftState(nfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress,\n    });\n  }\n\n  /**\n   * Returns an NFT by the address and token id.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Number that represents the id of the token.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   * @returns Object containing the NFT and its position in the array\n   */\n  findNftByAddressAndTokenId(\n    address: string,\n    tokenId: string,\n    selectedAddress: string,\n    chainId: Hex,\n  ): { nft: Nft; index: number } | null {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) =>\n        nft.address.toLowerCase() === address.toLowerCase() &&\n        nft.tokenId === tokenId,\n    );\n\n    if (index === -1) {\n      return null;\n    }\n\n    return { nft: nfts[index], index };\n  }\n\n  /**\n   * Update NFT data.\n   *\n   * @param nft - NFT object to find the right NFT to updates.\n   * @param updates - NFT partial object to update properties of the NFT.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   */\n  updateNft(\n    nft: Nft,\n    updates: Partial<Nft>,\n    selectedAddress: string,\n    chainId: Hex,\n  ) {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const nftInfo = this.findNftByAddressAndTokenId(\n      nft.address,\n      nft.tokenId,\n      selectedAddress,\n      chainId,\n    );\n\n    if (!nftInfo) {\n      return;\n    }\n\n    const updatedNft: Nft = {\n      ...nft,\n      ...updates,\n    };\n\n    const newNfts = [\n      ...nfts.slice(0, nftInfo.index),\n      updatedNft,\n      ...nfts.slice(nftInfo.index + 1),\n    ];\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress: selectedAddress,\n    });\n  }\n\n  /**\n   * Resets the transaction status of an NFT.\n   *\n   * @param transactionId - NFT transaction id.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   * @returns a boolean indicating if the reset was well succeeded or not\n   */\n  resetNftTransactionStatusByTransactionId(\n    transactionId: string,\n    selectedAddress: string,\n    chainId: Hex,\n  ): boolean {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) => nft.transactionId === transactionId,\n    );\n\n    if (index === -1) {\n      return false;\n    }\n    const updatedNft: Nft = {\n      ...nfts[index],\n      transactionId: undefined,\n    };\n\n    const newNfts = [\n      ...nfts.slice(0, index),\n      updatedNft,\n      ...nfts.slice(index + 1),\n    ];\n\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress: selectedAddress,\n    });\n\n    return true;\n  }\n\n  async _requestApproval(suggestedNftMeta: SuggestedNftMeta) {\n    return this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id: suggestedNftMeta.id,\n        origin: suggestedNftMeta.origin,\n        type: ApprovalType.WatchAsset,\n        requestData: {\n          id: suggestedNftMeta.id,\n          interactingAddress: suggestedNftMeta.interactingAddress,\n          asset: {\n            address: suggestedNftMeta.asset.address,\n            tokenId: suggestedNftMeta.asset.tokenId,\n            name: suggestedNftMeta.asset.name,\n            description: suggestedNftMeta.asset.description,\n            image: suggestedNftMeta.asset.image,\n            standard: suggestedNftMeta.asset.standard,\n          },\n        },\n      },\n      true,\n    );\n  }\n}\n\nexport default NftController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-LD4GC7OR.js.map b/node_modules/@metamask/assets-controllers/dist/chunk-LD4GC7OR.js.map
deleted file mode 100644
index d8e6599..0000000
--- a/node_modules/@metamask/assets-controllers/dist/chunk-LD4GC7OR.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA,EAIE;AAAA,OACK;AACP,SAAS,eAAe,aAAa;AAOrC,IAAM,mBAAmB;AAEzB,IAAM,iBAAiB;AAEvB,IAAM,WAAW;AAAA,EACf,kBAAkB,EAAE,SAAS,MAAM,WAAW,MAAM;AACtD;AAiEO,SAAS,+BAA6D;AAC3E,SAAO;AAAA,IACL,kBAAkB,CAAC;AAAA,EACrB;AACF;AAxFA;AA8FO,IAAM,0BAAN,cAAsC,eAI3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,YAAY;AAAA,IACV,WAAW;AAAA,IACX,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA,QAAQ,CAAC;AAAA,EACX,GAAmC;AACjC,UAAM;AAAA,MACJ,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,OAAO;AAAA,QACL,GAAG,6BAA6B;AAAA,QAChC,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AArCH;AAEA;AAEA;AAEA;AAEA;AA+BE,uBAAK,WAAY;AACjB,uBAAK,WAAY;AACjB,uBAAK,SAAU;AAEf,SAAK,gBAAgB;AAAA,MACnB;AAAA,MACA,CAAC,EAAE,QAAQ,WAAW,eAAe,MAAM;AACzC,2BAAK,SAAU,CAAC,GAAG,WAAW,GAAG,cAAc;AAC/C,aAAK,eAAe;AAAA,MACtB;AAAA,IACF;AAEA,uBAAK,oBAAqB;AAE1B,SAAK,KAAK;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACR,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,UAAkC;AAC3C,QAAI,UAAU;AACZ,yBAAK,WAAY;AAAA,IACnB;AAEA,QAAI,mBAAK,UAAS;AAChB,mBAAa,mBAAK,QAAO;AAAA,IAC3B;AAEA,UAAM,cAAc,MAAM,KAAK,eAAe,CAAC;AAE/C,uBAAK,SAAU,WAAW,MAAM;AAC9B,WAAK,KAAK,mBAAK,UAAS;AAAA,IAC1B,GAAG,mBAAK,UAAS;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB;AACrB,QAAI,mBAAK,YAAW;AAClB;AAAA,IACF;AAEA,UAAM,sBAAwC,CAAC;AAC/C,eAAW,SAAS,mBAAK,UAAS;AAChC,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,EAAE,gBAAgB,IAAI,KAAK,gBAAgB;AAAA,QAC/C;AAAA,MACF;AACA,UAAI;AACF,4BAAoB,OAAO,IAAI;AAAA,UAC7B,MAAM,mBAAK,oBAAL,WAAwB,SAAS;AAAA,QACzC;AACA,cAAM,eAAe;AAAA,MACvB,SAAS,OAAO;AACd,4BAAoB,OAAO,IAAI,MAAM,CAAC;AACtC,cAAM,eAAe;AAAA,MACvB;AAAA,IACF;AAEA,SAAK,OAAO,CAAC,UAAU;AACrB,YAAM,mBAAmB;AAAA,IAC3B,CAAC;AAAA,EACH;AACF;AAxHE;AAEA;AAEA;AAEA;AAEA;AAkHF,IAAO,kCAAQ","sourcesContent":["import {\n  type RestrictedControllerMessenger,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  BaseController,\n} from '@metamask/base-controller';\nimport { safelyExecute, toHex } from '@metamask/controller-utils';\nimport type { PreferencesControllerGetStateAction } from '@metamask/preferences-controller';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport type { Token } from './TokenRatesController';\nimport type { TokensControllerStateChangeEvent } from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  contractBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property tokens - List of tokens to track balances for.\n * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.\n * @property getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  tokens?: Token[];\n  disabled?: boolean;\n  getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * Represents a mapping of hash token contract addresses to their balances.\n */\ntype ContractBalances = Record<string, string>;\n\n/**\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport type TokenBalancesControllerState = {\n  contractBalances: ContractBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions = PreferencesControllerGetStateAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    contractBalances: {},\n  };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n\n  #interval: number;\n\n  #tokens: Token[];\n\n  #disabled: boolean;\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.tokens - List of tokens to track balances for.\n   * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.\n   * @param options.getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    tokens = [],\n    disabled = false,\n    getERC20BalanceOf,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.#disabled = disabled;\n    this.#interval = interval;\n    this.#tokens = tokens;\n\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      ({ tokens: newTokens, detectedTokens }) => {\n        this.#tokens = [...newTokens, ...detectedTokens];\n        this.updateBalances();\n      },\n    );\n\n    this.#getERC20BalanceOf = getERC20BalanceOf;\n\n    this.poll();\n  }\n\n  /**\n   * Allows controller to update tracked tokens contract balances.\n   */\n  enable() {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from updating tracked tokens contract balances.\n   */\n  disable() {\n    this.#disabled = true;\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.#interval = interval;\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await safelyExecute(() => this.updateBalances());\n\n    this.#handle = setTimeout(() => {\n      this.poll(this.#interval);\n    }, this.#interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.#disabled) {\n      return;\n    }\n\n    const newContractBalances: ContractBalances = {};\n    for (const token of this.#tokens) {\n      const { address } = token;\n      const { selectedAddress } = this.messagingSystem.call(\n        'PreferencesController:getState',\n      );\n      try {\n        newContractBalances[address] = toHex(\n          await this.#getERC20BalanceOf(address, selectedAddress),\n        );\n        token.balanceError = null;\n      } catch (error) {\n        newContractBalances[address] = toHex(0);\n        token.balanceError = error;\n      }\n    }\n\n    this.update((state) => {\n      state.contractBalances = newContractBalances;\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-MR6EF4B7.mjs.map b/node_modules/@metamask/assets-controllers/dist/chunk-MR6EF4B7.mjs.map
deleted file mode 100644
index 1c39dec..0000000
--- a/node_modules/@metamask/assets-controllers/dist/chunk-MR6EF4B7.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/TokenDetectionController.ts"],"sourcesContent":["import type {\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerSelectedAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport contractMap from '@metamask/contract-metadata';\nimport { ChainId, safelyExecute } from '@metamask/controller-utils';\nimport type {\n  KeyringControllerGetStateAction,\n  KeyringControllerLockEvent,\n  KeyringControllerUnlockEvent,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetNetworkConfigurationByNetworkClientId,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n} from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { isTokenDetectionSupportedForNetwork } from './assetsUtil';\nimport type {\n  GetTokenListState,\n  TokenListMap,\n  TokenListStateChange,\n} from './TokenListController';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerGetStateAction,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\n/**\n * Compare 2 given strings and return boolean\n * eg: \"foo\" and \"FOO\" => true\n * eg: \"foo\" and \"bar\" => false\n * eg: \"foo\" and 123 => false\n *\n * @param value1 - first string to compare\n * @param value2 - first string to compare\n * @returns true if 2 strings are identical when they are lowercase\n */\nexport function isEqualCaseInsensitive(\n  value1: string,\n  value2: string,\n): boolean {\n  if (typeof value1 !== 'string' || typeof value2 !== 'string') {\n    return false;\n  }\n  return value1.toLowerCase() === value2.toLowerCase();\n}\n\ntype LegacyToken = {\n  name: string;\n  logo: `${string}.svg`;\n  symbol: string;\n  decimals: number;\n  erc20?: boolean;\n  erc721?: boolean;\n};\n\ntype TokenDetectionMap = {\n  [P in keyof TokenListMap]: Omit<TokenListMap[P], 'occurrences'>;\n};\n\nexport const STATIC_MAINNET_TOKEN_LIST = Object.entries<LegacyToken>(\n  contractMap,\n).reduce<TokenDetectionMap>((acc, [base, contract]) => {\n  const { logo, erc20, erc721, ...tokenMetadata } = contract;\n  return {\n    ...acc,\n    [base.toLowerCase()]: {\n      ...tokenMetadata,\n      address: base.toLowerCase(),\n      iconUrl: `images/contract/${logo}`,\n      aggregators: [],\n    },\n  };\n}, {});\n\nexport const controllerName = 'TokenDetectionController';\n\nexport type TokenDetectionState = Record<never, never>;\n\nexport type TokenDetectionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenDetectionState\n>;\n\nexport type TokenDetectionControllerActions =\n  TokenDetectionControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetNetworkConfigurationByNetworkClientId\n  | NetworkControllerGetStateAction\n  | GetTokenListState\n  | KeyringControllerGetStateAction\n  | PreferencesControllerGetStateAction\n  | TokensControllerGetStateAction\n  | TokensControllerAddDetectedTokensAction;\n\nexport type TokenDetectionControllerStateChangeEvent =\n  ControllerStateChangeEvent<typeof controllerName, TokenDetectionState>;\n\nexport type TokenDetectionControllerEvents =\n  TokenDetectionControllerStateChangeEvent;\n\nexport type AllowedEvents =\n  | AccountsControllerSelectedAccountChangeEvent\n  | NetworkControllerNetworkDidChangeEvent\n  | TokenListStateChange\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | PreferencesControllerStateChangeEvent;\n\nexport type TokenDetectionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenDetectionControllerActions | AllowedActions,\n  TokenDetectionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Controller that passively polls on a set interval for Tokens auto detection\n * @property intervalId - Polling interval used to fetch new token rates\n * @property selectedAddress - Vault selected address\n * @property networkClientId - The network client ID of the current selected network\n * @property disabled - Boolean to track if network requests are blocked\n * @property isUnlocked - Boolean to track if the keyring state is unlocked\n * @property isDetectionEnabledFromPreferences - Boolean to track if detection is enabled from PreferencesController\n * @property isDetectionEnabledForNetwork - Boolean to track if detected is enabled for current network\n */\nexport class TokenDetectionController extends StaticIntervalPollingController<\n  typeof controllerName,\n  TokenDetectionState,\n  TokenDetectionControllerMessenger\n> {\n  #intervalId?: ReturnType<typeof setTimeout>;\n\n  #selectedAddress: string;\n\n  #networkClientId: NetworkClientId;\n\n  #tokenList: TokenDetectionMap = {};\n\n  #disabled: boolean;\n\n  #isUnlocked: boolean;\n\n  #isDetectionEnabledFromPreferences: boolean;\n\n  #isDetectionEnabledForNetwork: boolean;\n\n  readonly #getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n\n  readonly #trackMetaMetricsEvent: (options: {\n    event: string;\n    category: string;\n    properties: {\n      tokens: string[];\n      token_standard: string;\n      asset_type: string;\n    };\n  }) => void;\n\n  /**\n   * Creates a TokenDetectionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The controller messaging system.\n   * @param options.disabled - If set to true, all network requests are blocked.\n   * @param options.interval - Polling interval used to fetch new token rates\n   * @param options.selectedAddress - Vault selected address\n   * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.\n   * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.\n   */\n  constructor({\n    selectedAddress,\n    interval = DEFAULT_INTERVAL,\n    disabled = true,\n    getBalancesInSingleCall,\n    trackMetaMetricsEvent,\n    messenger,\n  }: {\n    selectedAddress?: string;\n    interval?: number;\n    disabled?: boolean;\n    getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n    trackMetaMetricsEvent: (options: {\n      event: string;\n      category: string;\n      properties: {\n        tokens: string[];\n        token_standard: string;\n        asset_type: string;\n      };\n    }) => void;\n    messenger: TokenDetectionControllerMessenger;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: {},\n      metadata: {},\n    });\n\n    this.#disabled = disabled;\n    this.setIntervalLength(interval);\n\n    this.#selectedAddress =\n      selectedAddress ??\n      this.messagingSystem.call('AccountsController:getSelectedAccount')\n        .address;\n\n    const { chainId, networkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId();\n    this.#networkClientId = networkClientId;\n\n    const { useTokenDetection: defaultUseTokenDetection } =\n      this.messagingSystem.call('PreferencesController:getState');\n    this.#isDetectionEnabledFromPreferences = defaultUseTokenDetection;\n    this.#isDetectionEnabledForNetwork =\n      isTokenDetectionSupportedForNetwork(chainId);\n\n    this.#getBalancesInSingleCall = getBalancesInSingleCall;\n\n    this.#trackMetaMetricsEvent = trackMetaMetricsEvent;\n\n    const { isUnlocked } = this.messagingSystem.call(\n      'KeyringController:getState',\n    );\n    this.#isUnlocked = isUnlocked;\n\n    this.#registerEventListeners();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system subscriptions to controller events.\n   */\n  #registerEventListeners() {\n    this.messagingSystem.subscribe('KeyringController:unlock', async () => {\n      this.#isUnlocked = true;\n      await this.#restartTokenDetection();\n    });\n\n    this.messagingSystem.subscribe('KeyringController:lock', () => {\n      this.#isUnlocked = false;\n      this.#stopPolling();\n    });\n\n    this.messagingSystem.subscribe(\n      'TokenListController:stateChange',\n      async ({ tokenList }) => {\n        const hasTokens = Object.keys(tokenList).length;\n\n        if (hasTokens) {\n          await this.#restartTokenDetection();\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      async ({ selectedAddress: newSelectedAddress, useTokenDetection }) => {\n        const isSelectedAddressChanged =\n          this.#selectedAddress !== newSelectedAddress;\n        const isDetectionChangedFromPreferences =\n          this.#isDetectionEnabledFromPreferences !== useTokenDetection;\n\n        this.#selectedAddress = newSelectedAddress;\n        this.#isDetectionEnabledFromPreferences = useTokenDetection;\n\n        if (isSelectedAddressChanged || isDetectionChangedFromPreferences) {\n          await this.#restartTokenDetection({\n            selectedAddress: this.#selectedAddress,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'AccountsController:selectedAccountChange',\n      async ({ address: newSelectedAddress }) => {\n        const isSelectedAddressChanged =\n          this.#selectedAddress !== newSelectedAddress;\n        if (isSelectedAddressChanged) {\n          this.#selectedAddress = newSelectedAddress;\n          await this.#restartTokenDetection({\n            selectedAddress: this.#selectedAddress,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'NetworkController:networkDidChange',\n      async ({ selectedNetworkClientId }) => {\n        const isNetworkClientIdChanged =\n          this.#networkClientId !== selectedNetworkClientId;\n\n        const { chainId: newChainId } =\n          this.#getCorrectChainIdAndNetworkClientId(selectedNetworkClientId);\n        this.#isDetectionEnabledForNetwork =\n          isTokenDetectionSupportedForNetwork(newChainId);\n\n        if (isNetworkClientIdChanged && this.#isDetectionEnabledForNetwork) {\n          this.#networkClientId = selectedNetworkClientId;\n          await this.#restartTokenDetection({\n            networkClientId: this.#networkClientId,\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Internal isActive state\n   * @type {boolean}\n   */\n  get isActive(): boolean {\n    return !this.#disabled && this.#isUnlocked;\n  }\n\n  /**\n   * Start polling for detected tokens.\n   */\n  async start(): Promise<void> {\n    this.enable();\n    await this.#startPolling();\n  }\n\n  /**\n   * Stop polling for detected tokens.\n   */\n  stop(): void {\n    this.disable();\n    this.#stopPolling();\n  }\n\n  #stopPolling(): void {\n    if (this.#intervalId) {\n      clearInterval(this.#intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   */\n  async #startPolling(): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    this.#stopPolling();\n    await this.detectTokens();\n    this.#intervalId = setInterval(async () => {\n      await this.detectTokens();\n    }, this.getIntervalLength());\n  }\n\n  #getCorrectChainIdAndNetworkClientId(networkClientId?: NetworkClientId): {\n    chainId: Hex;\n    networkClientId: NetworkClientId;\n  } {\n    if (networkClientId) {\n      const networkConfiguration = this.messagingSystem.call(\n        'NetworkController:getNetworkConfigurationByNetworkClientId',\n        networkClientId,\n      );\n      if (networkConfiguration) {\n        return {\n          chainId: networkConfiguration.chainId,\n          networkClientId,\n        };\n      }\n    }\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId,\n      networkClientId: selectedNetworkClientId,\n    };\n  }\n\n  async _executePoll(\n    networkClientId: NetworkClientId,\n    options: { address: string },\n  ): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress: options.address,\n    });\n  }\n\n  /**\n   * Restart token detection polling period and call detectNewTokens\n   * in case of address change or user session initialization.\n   *\n   * @param options - Options for restart token detection.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances\n   * @param options.networkClientId - The ID of the network client to use.\n   */\n  async #restartTokenDetection({\n    selectedAddress,\n    networkClientId,\n  }: {\n    selectedAddress?: string;\n    networkClientId?: NetworkClientId;\n  } = {}): Promise<void> {\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress,\n    });\n    this.setIntervalLength(DEFAULT_INTERVAL);\n  }\n\n  /**\n   * For each token in the token list provided by the TokenListController, checks the token's balance for the selected account address on the active network.\n   * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.\n   *\n   * @param options - Options for token detection.\n   * @param options.networkClientId - The ID of the network client to use.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances.\n   */\n  async detectTokens({\n    networkClientId,\n    selectedAddress,\n  }: {\n    networkClientId?: NetworkClientId;\n    selectedAddress?: string;\n  } = {}): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n\n    const addressAgainstWhichToDetect =\n      selectedAddress ?? this.#selectedAddress;\n    const { chainId, networkClientId: selectedNetworkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId(networkClientId);\n    const chainIdAgainstWhichToDetect = chainId;\n    const networkClientIdAgainstWhichToDetect = selectedNetworkClientId;\n\n    if (!isTokenDetectionSupportedForNetwork(chainIdAgainstWhichToDetect)) {\n      return;\n    }\n    if (\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect !== ChainId.mainnet\n    ) {\n      return;\n    }\n    const isTokenDetectionInactiveInMainnet =\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect === ChainId.mainnet;\n    const { tokensChainsCache } = this.messagingSystem.call(\n      'TokenListController:getState',\n    );\n    this.#tokenList = isTokenDetectionInactiveInMainnet\n      ? STATIC_MAINNET_TOKEN_LIST\n      : tokensChainsCache[chainIdAgainstWhichToDetect]?.data ?? {};\n\n    for (const tokensSlice of this.#getSlicesOfTokensToDetect({\n      chainId: chainIdAgainstWhichToDetect,\n      selectedAddress: addressAgainstWhichToDetect,\n    })) {\n      await this.#addDetectedTokens({\n        tokensSlice,\n        selectedAddress: addressAgainstWhichToDetect,\n        networkClientId: networkClientIdAgainstWhichToDetect,\n        chainId: chainIdAgainstWhichToDetect,\n      });\n    }\n  }\n\n  #getSlicesOfTokensToDetect({\n    chainId,\n    selectedAddress,\n  }: {\n    chainId: Hex;\n    selectedAddress: string;\n  }): string[][] {\n    const { allTokens, allDetectedTokens, allIgnoredTokens } =\n      this.messagingSystem.call('TokensController:getState');\n    const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [\n      allTokens,\n      allDetectedTokens,\n      allIgnoredTokens,\n    ].map((tokens) =>\n      (tokens[chainId]?.[selectedAddress] ?? []).map((value) =>\n        typeof value === 'string' ? value : value.address,\n      ),\n    );\n\n    const tokensToDetect: string[] = [];\n    for (const tokenAddress of Object.keys(this.#tokenList)) {\n      if (\n        [\n          tokensAddresses,\n          detectedTokensAddresses,\n          ignoredTokensAddresses,\n        ].every(\n          (addresses) =>\n            !addresses.find((address) =>\n              isEqualCaseInsensitive(address, tokenAddress),\n            ),\n        )\n      ) {\n        tokensToDetect.push(tokenAddress);\n      }\n    }\n\n    const slicesOfTokensToDetect = [];\n    for (let i = 0, size = 1000; i < tokensToDetect.length; i += size) {\n      slicesOfTokensToDetect.push(tokensToDetect.slice(i, i + size));\n    }\n\n    return slicesOfTokensToDetect;\n  }\n\n  async #addDetectedTokens({\n    tokensSlice,\n    selectedAddress,\n    networkClientId,\n    chainId,\n  }: {\n    tokensSlice: string[];\n    selectedAddress: string;\n    networkClientId: NetworkClientId;\n    chainId: Hex;\n  }): Promise<void> {\n    await safelyExecute(async () => {\n      const balances = await this.#getBalancesInSingleCall(\n        selectedAddress,\n        tokensSlice,\n        networkClientId,\n      );\n\n      const tokensWithBalance: Token[] = [];\n      const eventTokensDetails: string[] = [];\n      for (const nonZeroTokenAddress of Object.keys(balances)) {\n        const { decimals, symbol, aggregators, iconUrl, name } =\n          this.#tokenList[nonZeroTokenAddress];\n        eventTokensDetails.push(`${symbol} - ${nonZeroTokenAddress}`);\n        tokensWithBalance.push({\n          address: nonZeroTokenAddress,\n          decimals,\n          symbol,\n          aggregators,\n          image: iconUrl,\n          isERC721: false,\n          name,\n        });\n      }\n\n      if (tokensWithBalance.length) {\n        this.#trackMetaMetricsEvent({\n          event: 'Token Detected',\n          category: 'Wallet',\n          properties: {\n            tokens: eventTokensDetails,\n            token_standard: 'ERC20',\n            asset_type: 'TOKEN',\n          },\n        });\n\n        await this.messagingSystem.call(\n          'TokensController:addDetectedTokens',\n          tokensWithBalance,\n          {\n            selectedAddress,\n            chainId,\n          },\n        );\n      }\n    });\n  }\n}\n\nexport default TokenDetectionController;\n"],"mappings":"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","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-PAJTKWEC.mjs.map b/node_modules/@metamask/assets-controllers/dist/chunk-PAJTKWEC.mjs.map
deleted file mode 100644
index 3365aa4..0000000
--- a/node_modules/@metamask/assets-controllers/dist/chunk-PAJTKWEC.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/AccountTrackerController.ts"],"sourcesContent":["import type { BaseConfig, BaseState } from '@metamask/base-controller';\nimport { query, safelyExecuteWithTimeout } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { Provider } from '@metamask/eth-query';\nimport type {\n  NetworkClientId,\n  NetworkController,\n  NetworkState,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingControllerV1 } from '@metamask/polling-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport { assert } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport { cloneDeep } from 'lodash';\n\n/**\n * @type AccountInformation\n *\n * Account information object\n * @property balance - Hex string of an account balancec in wei\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountInformation {\n  balance: string;\n}\n\n/**\n * @type AccountTrackerConfig\n *\n * Account tracker controller configuration\n * @property provider - Provider used to create a new underlying EthQuery instance\n */\n// This interface was created before this ESLint rule was added.\n// Remove in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountTrackerConfig extends BaseConfig {\n  interval: number;\n  provider?: Provider;\n}\n\n/**\n * @type AccountTrackerState\n *\n * Account tracker controller state\n * @property accounts - Map of addresses to account information\n */\n// This interface was created before this ESLint rule was added.\n// Remove in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountTrackerState extends BaseState {\n  accounts: { [address: string]: AccountInformation };\n  accountsByChainId: Record<string, { [address: string]: AccountInformation }>;\n}\n\n/**\n * Controller that tracks the network balances for all user accounts.\n */\nexport class AccountTrackerController extends StaticIntervalPollingControllerV1<\n  AccountTrackerConfig,\n  AccountTrackerState\n> {\n  private _provider?: Provider;\n\n  private readonly refreshMutex = new Mutex();\n\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private syncAccounts(newChainId: string) {\n    const accounts = { ...this.state.accounts };\n    const accountsByChainId = cloneDeep(this.state.accountsByChainId);\n\n    const existing = Object.keys(accounts);\n    if (!accountsByChainId[newChainId]) {\n      accountsByChainId[newChainId] = {};\n      existing.forEach((address) => {\n        accountsByChainId[newChainId][address] = { balance: '0x0' };\n      });\n    }\n\n    const addresses = Object.keys(this.getIdentities());\n    const newAddresses = addresses.filter(\n      (address) => !existing.includes(address),\n    );\n    const oldAddresses = existing.filter(\n      (address) => !addresses.includes(address),\n    );\n    newAddresses.forEach((address) => {\n      accounts[address] = { balance: '0x0' };\n    });\n    Object.keys(accountsByChainId).forEach((chainId) => {\n      newAddresses.forEach((address) => {\n        accountsByChainId[chainId][address] = {\n          balance: '0x0',\n        };\n      });\n    });\n\n    oldAddresses.forEach((address) => {\n      delete accounts[address];\n    });\n    Object.keys(accountsByChainId).forEach((chainId) => {\n      oldAddresses.forEach((address) => {\n        delete accountsByChainId[chainId][address];\n      });\n    });\n\n    this.update({ accounts, accountsByChainId });\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'AccountTrackerController';\n\n  private readonly getIdentities: () => PreferencesState['identities'];\n\n  private readonly getSelectedAddress: () => PreferencesState['selectedAddress'];\n\n  private readonly getMultiAccountBalancesEnabled: () => PreferencesState['isMultiAccountBalancesEnabled'];\n\n  private readonly getCurrentChainId: () => NetworkState['providerConfig']['chainId'];\n\n  private readonly getNetworkClientById: NetworkController['getNetworkClientById'];\n\n  /**\n   * Creates an AccountTracker instance.\n   *\n   * @param options - The controller options.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.getIdentities - Gets the identities from the Preferences store.\n   * @param options.getSelectedAddress - Gets the selected address from the Preferences store.\n   * @param options.getMultiAccountBalancesEnabled - Gets the multi account balances enabled flag from the Preferences store.\n   * @param options.getCurrentChainId - Gets the chain ID for the current network from the Network store.\n   * @param options.getNetworkClientById - Gets the network client with the given id from the NetworkController.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      onPreferencesStateChange,\n      getIdentities,\n      getSelectedAddress,\n      getMultiAccountBalancesEnabled,\n      getCurrentChainId,\n      getNetworkClientById,\n    }: {\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      getIdentities: () => PreferencesState['identities'];\n      getSelectedAddress: () => PreferencesState['selectedAddress'];\n      getMultiAccountBalancesEnabled: () => PreferencesState['isMultiAccountBalancesEnabled'];\n      getCurrentChainId: () => NetworkState['providerConfig']['chainId'];\n      getNetworkClientById: NetworkController['getNetworkClientById'];\n    },\n    config?: Partial<AccountTrackerConfig>,\n    state?: Partial<AccountTrackerState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 10000,\n    };\n    this.defaultState = {\n      accounts: {},\n      accountsByChainId: {\n        [getCurrentChainId()]: {},\n      },\n    };\n    this.initialize();\n    this.setIntervalLength(this.config.interval);\n    this.getIdentities = getIdentities;\n    this.getSelectedAddress = getSelectedAddress;\n    this.getMultiAccountBalancesEnabled = getMultiAccountBalancesEnabled;\n    this.getCurrentChainId = getCurrentChainId;\n    this.getNetworkClientById = getNetworkClientById;\n    onPreferencesStateChange(() => {\n      this.refresh();\n    });\n    this.poll();\n  }\n\n  /**\n   * Sets a new provider.\n   *\n   * TODO: Replace this wth a method.\n   *\n   * @param provider - Provider used to create a new underlying EthQuery instance.\n   */\n  set provider(provider: Provider) {\n    this._provider = provider;\n  }\n\n  get provider() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Resolves a networkClientId to a network client config\n   * or globally selected network config if not provided\n   *\n   * @param networkClientId - Optional networkClientId to fetch a network client with\n   * @returns network client config\n   */\n  #getCorrectNetworkClient(networkClientId?: NetworkClientId): {\n    chainId: string;\n    ethQuery?: EthQuery;\n  } {\n    if (networkClientId) {\n      const networkClient = this.getNetworkClientById(networkClientId);\n\n      return {\n        chainId: networkClient.configuration.chainId,\n        ethQuery: new EthQuery(networkClient.provider),\n      };\n    }\n\n    return {\n      chainId: this.getCurrentChainId(),\n      ethQuery: this._provider ? new EthQuery(this._provider) : undefined,\n    };\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval trigger a 'refresh'.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await this.refresh();\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Refreshes the balances of the accounts using the networkClientId\n   *\n   * @param networkClientId - The network client ID used to get balances.\n   */\n  async _executePoll(networkClientId: string): Promise<void> {\n    this.refresh(networkClientId);\n  }\n\n  /**\n   * Refreshes the balances of the accounts depending on the multi-account setting.\n   * If multi-account is disabled, only updates the selected account balance.\n   * If multi-account is enabled, updates balances for all accounts.\n   *\n   * @param networkClientId - Optional networkClientId to fetch a network client with\n   */\n  refresh = async (networkClientId?: NetworkClientId) => {\n    const releaseLock = await this.refreshMutex.acquire();\n    try {\n      const { chainId, ethQuery } =\n        this.#getCorrectNetworkClient(networkClientId);\n      this.syncAccounts(chainId);\n      const { accounts, accountsByChainId } = this.state;\n      const isMultiAccountBalancesEnabled =\n        this.getMultiAccountBalancesEnabled();\n\n      const accountsToUpdate = isMultiAccountBalancesEnabled\n        ? Object.keys(accounts)\n        : [this.getSelectedAddress()];\n\n      const accountsForChain = { ...accountsByChainId[chainId] };\n      for (const address of accountsToUpdate) {\n        const balance = await this.getBalanceFromChain(address, ethQuery);\n        if (balance) {\n          accountsForChain[address] = {\n            balance,\n          };\n        }\n      }\n\n      this.update({\n        ...(chainId === this.getCurrentChainId() && {\n          accounts: accountsForChain,\n        }),\n        accountsByChainId: {\n          ...this.state.accountsByChainId,\n          [chainId]: accountsForChain,\n        },\n      });\n    } catch (err) {\n      releaseLock();\n      throw err;\n    }\n  };\n\n  /**\n   * Fetches the balance of a given address from the blockchain.\n   *\n   * @param address - The account address to fetch the balance for.\n   * @param ethQuery - The EthQuery instance to query getBalnce with.\n   * @returns A promise that resolves to the balance in a hex string format.\n   */\n  private async getBalanceFromChain(\n    address: string,\n    ethQuery?: EthQuery,\n  ): Promise<string | undefined> {\n    return await safelyExecuteWithTimeout(async () => {\n      assert(ethQuery, 'Provider not set.');\n      return await query(ethQuery, 'getBalance', [address]);\n    });\n  }\n\n  /**\n   * Sync accounts balances with some additional addresses.\n   *\n   * @param addresses - the additional addresses, may be hardware wallet addresses.\n   * @param networkClientId - Optional networkClientId to fetch a network client with.\n   * @returns accounts - addresses with synced balance\n   */\n  async syncBalanceWithAddresses(\n    addresses: string[],\n    networkClientId?: NetworkClientId,\n  ): Promise<Record<string, { balance: string }>> {\n    const { ethQuery } = this.#getCorrectNetworkClient(networkClientId);\n\n    return await Promise.all(\n      addresses.map((address): Promise<[string, string] | undefined> => {\n        return safelyExecuteWithTimeout(async () => {\n          assert(ethQuery, 'Provider not set.');\n          const balance = await query(ethQuery, 'getBalance', [address]);\n          return [address, balance];\n        });\n      }),\n    ).then((value) => {\n      return value.reduce((obj, item) => {\n        if (!item) {\n          return obj;\n        }\n\n        const [address, balance] = item;\n        return {\n          ...obj,\n          [address]: {\n            balance,\n          },\n        };\n      }, {});\n    });\n  }\n}\n\nexport default AccountTrackerController;\n"],"mappings":"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","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-LAU6ZDZR.js b/node_modules/@metamask/assets-controllers/dist/chunk-PTBS4GL6.js
similarity index 97%
rename from node_modules/@metamask/assets-controllers/dist/chunk-LAU6ZDZR.js
rename to node_modules/@metamask/assets-controllers/dist/chunk-PTBS4GL6.js
index d429be1..49c4230 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-LAU6ZDZR.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-PTBS4GL6.js
@@ -82,7 +82,7 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
       selectedAddress: "",
       chainId: initialChainId,
       ipfsGateway: _controllerutils.IPFS_DEFAULT_GATEWAY_URL,
-      openSeaEnabled: false,
+      displayNftMedia: false,
       useIPFSSubdomains: true,
       isIpfsGatewayEnabled: true
     };
@@ -101,16 +101,16 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
       async ({
         selectedAddress,
         ipfsGateway,
-        openSeaEnabled,
+        displayNftMedia,
         isIpfsGatewayEnabled
       }) => {
         this.configure({
           selectedAddress,
           ipfsGateway,
-          openSeaEnabled,
+          displayNftMedia,
           isIpfsGatewayEnabled
         });
-        const needsUpdateNftMetadata = isIpfsGatewayEnabled && ipfsGateway !== "" || openSeaEnabled;
+        const needsUpdateNftMetadata = isIpfsGatewayEnabled && ipfsGateway !== "" || displayNftMedia;
         if (needsUpdateNftMetadata) {
           const { chainId } = this.config;
           const nfts = this.state.allNfts[selectedAddress]?.[chainId] ?? [];
@@ -189,7 +189,8 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
         name: null,
         description: null,
         image: null,
-        standard: null
+        standard: null,
+        error: "Opensea import error"
       };
     }
     const {
@@ -234,7 +235,12 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
    * @returns Promise resolving to the current NFT name and image.
    */
   async getNftInformationFromTokenURI(contractAddress, tokenId, networkClientId) {
-    const { ipfsGateway, useIPFSSubdomains, isIpfsGatewayEnabled } = this.config;
+    const {
+      ipfsGateway,
+      useIPFSSubdomains,
+      isIpfsGatewayEnabled,
+      displayNftMedia
+    } = this.config;
     const result = await this.getNftURIAndStandard(
       contractAddress,
       tokenId,
@@ -242,6 +248,16 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
     );
     let tokenURI = result[0];
     const standard = result[1];
+    if (!displayNftMedia && !isIpfsGatewayEnabled) {
+      return {
+        image: null,
+        name: null,
+        description: null,
+        standard: standard || null,
+        favorite: false,
+        tokenURI
+      };
+    }
     const hasIpfsTokenURI = tokenURI.startsWith("ipfs://");
     if (hasIpfsTokenURI && !isIpfsGatewayEnabled) {
       return {
@@ -253,8 +269,7 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
         tokenURI: tokenURI ?? null
       };
     }
-    const isDisplayNFTMediaToggleEnabled = this.config.openSeaEnabled;
-    if (!hasIpfsTokenURI && !isDisplayNFTMediaToggleEnabled) {
+    if (!hasIpfsTokenURI && !displayNftMedia) {
       return {
         image: null,
         name: null,
@@ -288,7 +303,8 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
         description: null,
         standard: standard || null,
         favorite: false,
-        tokenURI: tokenURI ?? null
+        tokenURI: tokenURI ?? null,
+        error: "URI import error"
       };
     }
   }
@@ -345,10 +361,21 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
           networkClientId
         )
       ),
-      this.config.openSeaEnabled && chainId === "0x1" ? _controllerutils.safelyExecute.call(void 0, 
+      this.config.displayNftMedia && chainId === "0x1" ? _controllerutils.safelyExecute.call(void 0, 
         () => this.getNftInformationFromApi(contractAddress, tokenId)
       ) : void 0
     ]);
+    if (blockchainMetadata?.error && nftApiMetadata?.error) {
+      return {
+        image: null,
+        name: null,
+        description: null,
+        standard: blockchainMetadata.standard ?? null,
+        favorite: false,
+        tokenURI: blockchainMetadata.tokenURI ?? null,
+        error: "Both import failed"
+      };
+    }
     return {
       ...nftApiMetadata,
       name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,
@@ -472,7 +499,8 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
           symbol: nftContract.symbol,
           tokenId: tokenId.toString(),
           standard: nftMetadata.standard,
-          source
+          source,
+          tokenURI: nftMetadata.tokenURI
         });
       }
       return newNfts;
@@ -1202,4 +1230,4 @@ var NftController_default = NftController;
 
 
 exports.getDefaultNftState = getDefaultNftState; exports.NftController = NftController; exports.NftController_default = NftController_default;
-//# sourceMappingURL=chunk-LAU6ZDZR.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-PTBS4GL6.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-PTBS4GL6.js.map b/node_modules/@metamask/assets-controllers/dist/chunk-PTBS4GL6.js.map
new file mode 100644
index 0000000..652471d
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-PTBS4GL6.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/NftController.ts"],"names":[],"mappings":"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","sourcesContent":["import { isAddress } from '@ethersproject/address';\nimport type { AddApprovalRequest } from '@metamask/approval-controller';\nimport type {\n  BaseConfig,\n  BaseState,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseControllerV1 } from '@metamask/base-controller';\nimport {\n  safelyExecute,\n  handleFetch,\n  toChecksumHexAddress,\n  BNToHex,\n  fetchWithErrorHandling,\n  IPFS_DEFAULT_GATEWAY_URL,\n  ERC721,\n  ERC1155,\n  ApprovalType,\n  NFT_API_BASE_URL,\n} from '@metamask/controller-utils';\nimport type {\n  NetworkClientId,\n  NetworkController,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkState,\n} from '@metamask/network-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { remove0x } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport BN from 'bn.js';\nimport { EventEmitter } from 'events';\nimport { v4 as random } from 'uuid';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { compareNftMetadata, getFormattedIpfsUrl } from './assetsUtil';\nimport { Source } from './constants';\nimport type {\n  ApiNftContract,\n  ReservoirResponse,\n  Collection,\n  Attributes,\n  LastSale,\n} from './NftDetectionController';\n\ntype NFTStandardType = 'ERC721' | 'ERC1155';\n\ntype SuggestedNftMeta = {\n  asset: { address: string; tokenId: string } & NftMetadata;\n  id: string;\n  time: number;\n  type: NFTStandardType;\n  interactingAddress: string;\n  origin: string;\n};\n\n/**\n * @type Nft\n *\n * NFT representation\n * @property address - Hex address of a ERC721 contract\n * @property description - The NFT description\n * @property image - URI of custom NFT image associated with this tokenId\n * @property name - Name associated with this tokenId and contract address\n * @property tokenId - The NFT identifier\n * @property numberOfSales - Number of sales\n * @property backgroundColor - The background color to be displayed with the item\n * @property imagePreview - URI of a smaller image associated with this NFT\n * @property imageThumbnail - URI of a thumbnail image associated with this NFT\n * @property imageOriginal - URI of the original image associated with this NFT\n * @property animation - URI of a animation associated with this NFT\n * @property animationOriginal - URI of the original animation associated with this NFT\n * @property externalLink - External link containing additional information\n * @property creator - The NFT owner information object\n * @property isCurrentlyOwned - Boolean indicating whether the address/chainId combination where it's currently stored currently owns this NFT\n * @property transactionId - Transaction Id associated with the NFT\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Nft extends NftMetadata {\n  tokenId: string;\n  address: string;\n  isCurrentlyOwned?: boolean;\n}\n\ntype NftUpdate = {\n  nft: Nft;\n  newMetadata: NftMetadata;\n};\n\n/**\n * @type NftContract\n *\n * NFT contract information representation\n * @property name - Contract name\n * @property logo - Contract logo\n * @property address - Contract address\n * @property symbol - Contract symbol\n * @property description - Contract description\n * @property totalSupply - Total supply of NFTs\n * @property assetContractType - The NFT type, it could be `semi-fungible` or `non-fungible`\n * @property createdDate - Creation date\n * @property schemaName - The schema followed by the contract, it could be `ERC721` or `ERC1155`\n * @property externalLink - External link containing additional information\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftContract {\n  name?: string;\n  logo?: string;\n  address: string;\n  symbol?: string;\n  description?: string;\n  totalSupply?: string;\n  assetContractType?: string;\n  createdDate?: string;\n  schemaName?: string;\n  externalLink?: string;\n}\n\n/**\n * @type NftMetadata\n *\n * NFT custom information\n * @property name - NFT custom name\n * @property description - The NFT description\n * @property numberOfSales - Number of sales\n * @property backgroundColor - The background color to be displayed with the item\n * @property image - Image custom image URI\n * @property imagePreview - URI of a smaller image associated with this NFT\n * @property imageThumbnail - URI of a thumbnail image associated with this NFT\n * @property imageOriginal - URI of the original image associated with this NFT\n * @property animation - URI of a animation associated with this NFT\n * @property animationOriginal - URI of the original animation associated with this NFT\n * @property externalLink - External link containing additional information\n * @property creator - The NFT owner information object\n * @property standard - NFT standard name for the NFT, e.g., ERC-721 or ERC-1155\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftMetadata {\n  name: string | null;\n  description: string | null;\n  image: string | null;\n  standard: string | null;\n  favorite?: boolean;\n  numberOfSales?: number;\n  backgroundColor?: string;\n  imagePreview?: string;\n  imageThumbnail?: string;\n  imageOriginal?: string;\n  animation?: string;\n  animationOriginal?: string;\n  externalLink?: string;\n  creator?: string;\n  transactionId?: string;\n  tokenURI?: string | null;\n  error?: string;\n  collection?: Collection;\n  address?: string;\n  attributes?: Attributes;\n  lastSale?: LastSale;\n  rarityRank?: string;\n}\n\n/**\n * @type NftConfig\n *\n * NFT controller configuration\n * @property selectedAddress - Vault selected address\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftConfig extends BaseConfig {\n  selectedAddress: string;\n  chainId: Hex;\n  ipfsGateway: string;\n  displayNftMedia: boolean;\n  useIPFSSubdomains: boolean;\n  isIpfsGatewayEnabled: boolean;\n}\n\n/**\n * @type NftState\n *\n * NFT controller state\n * @property allNftContracts - Object containing NFT contract information\n * @property allNfts - Object containing NFTs per account and network\n * @property ignoredNfts - List of NFTs that should be ignored\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface NftState extends BaseState {\n  allNftContracts: {\n    [key: string]: { [chainId: Hex]: NftContract[] };\n  };\n  allNfts: { [key: string]: { [chainId: Hex]: Nft[] } };\n  ignoredNfts: Nft[];\n}\n\nconst ALL_NFTS_STATE_KEY = 'allNfts';\nconst ALL_NFTS_CONTRACTS_STATE_KEY = 'allNftContracts';\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface NftAsset {\n  address: string;\n  tokenId: string;\n}\n\n/**\n * The name of the {@link NftController}.\n */\nconst controllerName = 'NftController';\n\n/**\n * The external actions available to the {@link NftController}.\n */\ntype AllowedActions =\n  | AddApprovalRequest\n  | NetworkControllerGetNetworkClientByIdAction;\n\n/**\n * The messenger of the {@link NftController}.\n */\nexport type NftControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\nexport const getDefaultNftState = (): NftState => {\n  return {\n    allNftContracts: {},\n    allNfts: {},\n    ignoredNfts: [],\n  };\n};\n\n/**\n * Changes regarding displayNftMedia, TokenURI and error nft metadata property are not on the core repo and needed to be refactor to be removed from the patch\n * updateNftMetadata changes will be introduced on latest versions of changes of assets controllers, v^30 or next\n */\n\n/**\n * Controller that stores assets and exposes convenience methods\n */\nexport class NftController extends BaseControllerV1<NftConfig, NftState> {\n  private readonly mutex = new Mutex();\n\n  private readonly messagingSystem: NftControllerMessenger;\n\n  getNftApi() {\n    return `${NFT_API_BASE_URL}/tokens`;\n  }\n\n  /**\n   * Helper method to update nested state for allNfts and allNftContracts.\n   *\n   * @param newCollection - the modified piece of state to update in the controller's store\n   * @param baseStateKey - The root key in the store to update.\n   * @param passedConfig - An object containing the selectedAddress and chainId that are passed through the auto-detection flow.\n   * @param passedConfig.userAddress - the address passed through the NFT detection flow to ensure assets are stored to the correct account\n   * @param passedConfig.chainId - the chainId passed through the NFT detection flow to ensure assets are stored to the correct account\n   */\n  private updateNestedNftState(\n    newCollection: Nft[] | NftContract[],\n    baseStateKey: 'allNfts' | 'allNftContracts',\n    { userAddress, chainId }: { userAddress: string; chainId: Hex },\n  ) {\n    const { [baseStateKey]: oldState } = this.state;\n\n    const addressState = oldState[userAddress];\n    const newAddressState = {\n      ...addressState,\n      ...{ [chainId]: newCollection },\n    };\n    const newState = {\n      ...oldState,\n      ...{ [userAddress]: newAddressState },\n    };\n    this.update({\n      [baseStateKey]: newState,\n    });\n  }\n\n  /**\n   * Request individual NFT information from NFT API.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformationFromApi(\n    contractAddress: string,\n    tokenId: string,\n  ): Promise<NftMetadata> {\n    // TODO Parameterize this by chainId for non-mainnet token detection\n    // Attempt to fetch the data with the nft-api\n    const urlParams = new URLSearchParams({\n      chainIds: '1',\n      tokens: `${contractAddress}:${tokenId}`,\n      includeTopBid: 'true',\n      includeAttributes: 'true',\n      includeLastSale: 'true',\n    }).toString();\n    const nftInformation: ReservoirResponse | undefined =\n      await fetchWithErrorHandling({\n        url: `${this.getNftApi()}?${urlParams}`,\n        options: {\n          headers: {\n            Version: '1',\n          },\n        },\n      });\n    // if we were still unable to fetch the data we return out the default/null of `NftMetadata`\n    if (!nftInformation?.tokens?.[0]?.token) {\n      return {\n        name: null,\n        description: null,\n        image: null,\n        standard: null,\n        error: 'Opensea import error',\n      };\n    }\n\n    // if we've reached this point, we have successfully fetched some data for nftInformation\n    // now we reconfigure the data to conform to the `NftMetadata` type for storage.\n\n    const {\n      image,\n      metadata: { imageOriginal } = {},\n      name,\n      description,\n      collection,\n      kind,\n      rarityRank,\n      rarity,\n      attributes,\n      lastSale,\n      imageSmall,\n    } = nftInformation.tokens[0].token;\n\n    /* istanbul ignore next */\n    const nftMetadata: NftMetadata = Object.assign(\n      {},\n      { name: name || null },\n      { description: description || null },\n      { image: image || null },\n      collection?.creator && { creator: collection.creator },\n      imageOriginal && { imageOriginal },\n      imageSmall && { imageThumbnail: imageSmall },\n      kind && { standard: kind.toUpperCase() },\n      lastSale && { lastSale },\n      attributes && { attributes },\n      nftInformation.tokens[0].market?.topBid && {\n        topBid: nftInformation.tokens[0].market?.topBid,\n      },\n      rarityRank && { rarityRank },\n      rarity && { rarity },\n      collection && { collection },\n    );\n\n    return nftMetadata;\n  }\n\n  /**\n   * Request individual NFT information from contracts that follows Metadata Interface.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformationFromTokenURI(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<NftMetadata> {\n    const {\n      ipfsGateway,\n      useIPFSSubdomains,\n      isIpfsGatewayEnabled,\n      displayNftMedia,\n    } = this.config;\n    const result = await this.getNftURIAndStandard(\n      contractAddress,\n      tokenId,\n      networkClientId,\n    );\n    let tokenURI = result[0];\n    const standard = result[1];\n\n    if (!displayNftMedia && !isIpfsGatewayEnabled) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI,\n      };\n    }\n\n    const hasIpfsTokenURI = tokenURI.startsWith('ipfs://');\n\n    if (hasIpfsTokenURI && !isIpfsGatewayEnabled) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    }\n\n    if (!hasIpfsTokenURI && !displayNftMedia) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    }\n\n    if (hasIpfsTokenURI) {\n      tokenURI = getFormattedIpfsUrl(ipfsGateway, tokenURI, useIPFSSubdomains);\n    }\n\n    try {\n      const object = await handleFetch(tokenURI);\n      // TODO: Check image_url existence. This is not part of EIP721 nor EIP1155\n      const image = Object.prototype.hasOwnProperty.call(object, 'image')\n        ? 'image'\n        : /* istanbul ignore next */ 'image_url';\n\n      return {\n        image: object[image],\n        name: object.name,\n        description: object.description,\n        standard,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n      };\n    } catch {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: standard || null,\n        favorite: false,\n        tokenURI: tokenURI ?? null,\n        error: 'URI import error',\n      };\n    }\n  }\n\n  /**\n   * Retrieve NFT uri with  metadata. TODO Update method to use IPFS.\n   *\n   * @param contractAddress - NFT contract address.\n   * @param tokenId - NFT token id.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving NFT uri and token standard.\n   */\n  private async getNftURIAndStandard(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<[string, string]> {\n    // try ERC721 uri\n    try {\n      const uri = await this.getERC721TokenURI(\n        contractAddress,\n        tokenId,\n        networkClientId,\n      );\n      return [uri, ERC721];\n    } catch {\n      // Ignore error\n    }\n\n    // try ERC1155 uri\n    try {\n      const tokenURI = await this.getERC1155TokenURI(\n        contractAddress,\n        tokenId,\n        networkClientId,\n      );\n\n      /**\n       * According to EIP1155 the URI value allows for ID substitution\n       * in case the string `{id}` exists.\n       * https://eips.ethereum.org/EIPS/eip-1155#metadata\n       */\n\n      if (!tokenURI.includes('{id}')) {\n        return [tokenURI, ERC1155];\n      }\n\n      const hexTokenId = remove0x(BNToHex(new BN(tokenId)))\n        .padStart(64, '0')\n        .toLowerCase();\n      return [tokenURI.replace('{id}', hexTokenId), ERC1155];\n    } catch {\n      // Ignore error\n    }\n\n    return ['', ''];\n  }\n\n  /**\n   * Request individual NFT information (name, image url and description).\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftInformation(\n    contractAddress: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<NftMetadata> {\n    const chainId = this.getCorrectChainId({\n      networkClientId,\n    });\n    const [blockchainMetadata, nftApiMetadata] = await Promise.all([\n      safelyExecute(() =>\n        this.getNftInformationFromTokenURI(\n          contractAddress,\n          tokenId,\n          networkClientId,\n        ),\n      ),\n      this.config.displayNftMedia && chainId === '0x1'\n        ? safelyExecute(() =>\n            this.getNftInformationFromApi(contractAddress, tokenId),\n          )\n        : undefined,\n    ]);\n\n    if (blockchainMetadata?.error && nftApiMetadata?.error) {\n      return {\n        image: null,\n        name: null,\n        description: null,\n        standard: blockchainMetadata.standard ?? null,\n        favorite: false,\n        tokenURI: blockchainMetadata.tokenURI ?? null,\n        error: 'Both import failed',\n      };\n    }\n\n    return {\n      ...nftApiMetadata,\n      name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,\n      description:\n        blockchainMetadata?.description ?? nftApiMetadata?.description ?? null,\n      image: blockchainMetadata?.image ?? nftApiMetadata?.image ?? null,\n      standard:\n        blockchainMetadata?.standard ?? nftApiMetadata?.standard ?? null,\n      tokenURI: blockchainMetadata?.tokenURI ?? null,\n    };\n  }\n\n  /**\n   * Request NFT contract information from the contract itself.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT name and image.\n   */\n  private async getNftContractInformationFromContract(\n    contractAddress: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<\n    Partial<ApiNftContract> &\n      Pick<ApiNftContract, 'address'> &\n      Pick<ApiNftContract, 'collection'>\n  > {\n    const [name, symbol] = await Promise.all([\n      this.getERC721AssetName(contractAddress, networkClientId),\n      this.getERC721AssetSymbol(contractAddress, networkClientId),\n    ]);\n\n    return {\n      collection: { name },\n      symbol,\n      address: contractAddress,\n    };\n  }\n\n  /**\n   * Request NFT contract information from Blockchain and aggregate with received data from NFTMetadata.\n   *\n   * @param contractAddress - Hex address of the NFT contract.\n   * @param nftMetadataFromApi - Received NFT information to be aggregated with blockchain contract information.\n   * @param networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the NFT contract name, image and description.\n   */\n  private async getNftContractInformation(\n    contractAddress: string,\n    nftMetadataFromApi: NftMetadata,\n    networkClientId?: NetworkClientId,\n  ): Promise<\n    Partial<ApiNftContract> &\n      Pick<ApiNftContract, 'address'> &\n      Pick<ApiNftContract, 'collection'>\n  > {\n    const blockchainContractData = await safelyExecute(() =>\n      this.getNftContractInformationFromContract(\n        contractAddress,\n        networkClientId,\n      ),\n    );\n\n    if (\n      blockchainContractData ||\n      !Object.values(nftMetadataFromApi).every((value) => value === null)\n    ) {\n      return {\n        address: contractAddress,\n        ...blockchainContractData,\n        schema_name: nftMetadataFromApi?.standard ?? null,\n        collection: {\n          name: null,\n          image_url:\n            nftMetadataFromApi?.collection?.image ??\n            nftMetadataFromApi?.collection?.imageUrl ??\n            null,\n          tokenCount: nftMetadataFromApi?.collection?.tokenCount ?? null,\n          ...nftMetadataFromApi?.collection,\n          ...blockchainContractData?.collection,\n        },\n      };\n    }\n\n    /* istanbul ignore next */\n    return {\n      address: contractAddress,\n      asset_contract_type: null,\n      created_date: null,\n      schema_name: null,\n      symbol: null,\n      total_supply: null,\n      description: null,\n      external_link: null,\n      collection: { name: null, image_url: null },\n    };\n  }\n\n  /**\n   * Adds an individual NFT to the stored NFT list.\n   *\n   * @param tokenAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param nftMetadata - NFT optional information (name, image and description).\n   * @param nftContract - An object containing contract data of the NFT being added.\n   * @param chainId - The chainId of the network where the NFT is being added.\n   * @param userAddress - The address of the account where the NFT is being added.\n   * @param source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @returns Promise resolving to the current NFT list.\n   */\n  private async addIndividualNft(\n    tokenAddress: string,\n    tokenId: string,\n    nftMetadata: NftMetadata,\n    nftContract: NftContract,\n    chainId: Hex,\n    userAddress: string,\n    source: Source,\n  ): Promise<Nft[]> {\n    // TODO: Remove unused return\n    const releaseLock = await this.mutex.acquire();\n    try {\n      tokenAddress = toChecksumHexAddress(tokenAddress);\n      const { allNfts } = this.state;\n\n      const nfts = allNfts[userAddress]?.[chainId] || [];\n\n      const existingEntry: Nft | undefined = nfts.find(\n        (nft) =>\n          nft.address.toLowerCase() === tokenAddress.toLowerCase() &&\n          nft.tokenId === tokenId,\n      );\n\n      if (existingEntry) {\n        const differentMetadata = compareNftMetadata(\n          nftMetadata,\n          existingEntry,\n        );\n        if (differentMetadata || !existingEntry.isCurrentlyOwned) {\n          // TODO: Switch to indexToUpdate\n          const indexToRemove = nfts.findIndex(\n            (nft) =>\n              nft.address.toLowerCase() === tokenAddress.toLowerCase() &&\n              nft.tokenId === tokenId,\n          );\n          /* istanbul ignore next */\n          if (indexToRemove !== -1) {\n            nfts.splice(indexToRemove, 1);\n          }\n        } else {\n          return nfts;\n        }\n      }\n\n      const newEntry: Nft = {\n        address: tokenAddress,\n        tokenId,\n        favorite: existingEntry?.favorite || false,\n        isCurrentlyOwned: true,\n        ...nftMetadata,\n      };\n\n      const newNfts = [...nfts, newEntry];\n      this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n        chainId,\n        userAddress,\n      });\n\n      if (this.onNftAdded) {\n        this.onNftAdded({\n          address: tokenAddress,\n          symbol: nftContract.symbol,\n          tokenId: tokenId.toString(),\n          standard: nftMetadata.standard,\n          source,\n          tokenURI: nftMetadata.tokenURI,\n        });\n      }\n      return newNfts;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Adds an NFT contract to the stored NFT contracts list.\n   *\n   * @param options - options.\n   * @param options.tokenAddress - Hex address of the NFT contract.\n   * @param options.userAddress - The address of the account where the NFT is being added.\n   * @param options.nftMetadata - The retrieved NFTMetadata from API.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @returns Promise resolving to the current NFT contracts list.\n   */\n  private async addNftContract({\n    tokenAddress,\n    userAddress,\n    networkClientId,\n    source,\n    nftMetadata,\n  }: {\n    tokenAddress: string;\n    userAddress: string;\n    nftMetadata: NftMetadata;\n    networkClientId?: NetworkClientId;\n    source?: Source;\n  }): Promise<NftContract[]> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      tokenAddress = toChecksumHexAddress(tokenAddress);\n      const { allNftContracts } = this.state;\n      const chainId = this.getCorrectChainId({\n        networkClientId,\n      });\n\n      const nftContracts = allNftContracts[userAddress]?.[chainId] || [];\n\n      const existingEntry = nftContracts.find(\n        (nftContract) =>\n          nftContract.address.toLowerCase() === tokenAddress.toLowerCase(),\n      );\n      if (existingEntry) {\n        return nftContracts;\n      }\n\n      // this doesn't work currently for detection if the user switches networks while the detection is processing\n      // will be fixed once detection uses networkClientIds\n      // get name and symbol if ERC721 then put together the metadata\n      const contractInformation = await this.getNftContractInformation(\n        tokenAddress,\n        nftMetadata,\n        networkClientId,\n      );\n      const {\n        asset_contract_type,\n        created_date,\n        symbol,\n        description,\n        external_link,\n        schema_name,\n        collection: { name, image_url, tokenCount },\n      } = contractInformation;\n\n      // If the nft is auto-detected we want some valid metadata to be present\n      if (\n        source === Source.Detected &&\n        'address' in contractInformation &&\n        typeof contractInformation.address === 'string' &&\n        'collection' in contractInformation &&\n        contractInformation.collection.name === null &&\n        'image_url' in contractInformation.collection &&\n        contractInformation.collection.image_url === null &&\n        Object.entries(contractInformation).every(([key, value]) => {\n          return key === 'address' || key === 'collection' || !value;\n        })\n      ) {\n        return nftContracts;\n      }\n\n      /* istanbul ignore next */\n      const newEntry: NftContract = Object.assign(\n        {},\n        { address: tokenAddress },\n        description && { description },\n        name && { name },\n        image_url && { logo: image_url },\n        symbol && { symbol },\n        tokenCount !== null &&\n          typeof tokenCount !== 'undefined' && { totalSupply: tokenCount },\n        asset_contract_type && { assetContractType: asset_contract_type },\n        created_date && { createdDate: created_date },\n        schema_name && { schemaName: schema_name },\n        external_link && { externalLink: external_link },\n      );\n      const newNftContracts = [...nftContracts, newEntry];\n      this.updateNestedNftState(newNftContracts, ALL_NFTS_CONTRACTS_STATE_KEY, {\n        chainId,\n        userAddress,\n      });\n\n      return newNftContracts;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Removes an individual NFT from the stored token list and saves it in ignored NFTs list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  private removeAndIgnoreIndividualNft(\n    address: string,\n    tokenId: string,\n    {\n      chainId,\n      userAddress,\n    }: {\n      chainId: Hex;\n      userAddress: string;\n    },\n  ) {\n    address = toChecksumHexAddress(address);\n    const { allNfts, ignoredNfts } = this.state;\n    const newIgnoredNfts = [...ignoredNfts];\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const newNfts = nfts.filter((nft) => {\n      if (\n        nft.address.toLowerCase() === address.toLowerCase() &&\n        nft.tokenId === tokenId\n      ) {\n        const alreadyIgnored = newIgnoredNfts.find(\n          (c) => c.address === address && c.tokenId === tokenId,\n        );\n        !alreadyIgnored && newIgnoredNfts.push(nft);\n        return false;\n      }\n      return true;\n    });\n\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n\n    this.update({\n      ignoredNfts: newIgnoredNfts,\n    });\n  }\n\n  /**\n   * Removes an individual NFT from the stored token list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  private removeIndividualNft(\n    address: string,\n    tokenId: string,\n    { chainId, userAddress }: { chainId: Hex; userAddress: string },\n  ) {\n    address = toChecksumHexAddress(address);\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const newNfts = nfts.filter(\n      (nft) =>\n        !(\n          nft.address.toLowerCase() === address.toLowerCase() &&\n          nft.tokenId === tokenId\n        ),\n    );\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n  }\n\n  /**\n   * Removes an NFT contract to the stored NFT contracts list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param options - options.\n   * @param options.chainId - The chainId of the network where the NFT is being removed.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   * @returns Promise resolving to the current NFT contracts list.\n   */\n  private removeNftContract(\n    address: string,\n    { chainId, userAddress }: { chainId: Hex; userAddress: string },\n  ): NftContract[] {\n    address = toChecksumHexAddress(address);\n    const { allNftContracts } = this.state;\n    const nftContracts = allNftContracts[userAddress]?.[chainId] || [];\n\n    const newNftContracts = nftContracts.filter(\n      (nftContract) =>\n        !(nftContract.address.toLowerCase() === address.toLowerCase()),\n    );\n    this.updateNestedNftState(newNftContracts, ALL_NFTS_CONTRACTS_STATE_KEY, {\n      chainId,\n      userAddress,\n    });\n\n    return newNftContracts;\n  }\n\n  /**\n   * EventEmitter instance used to listen to specific EIP747 events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Optional API key to use with opensea\n   */\n  openSeaApiKey?: string;\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'NftController';\n\n  private readonly getERC721AssetName: AssetsContractController['getERC721AssetName'];\n\n  private readonly getERC721AssetSymbol: AssetsContractController['getERC721AssetSymbol'];\n\n  private readonly getERC721TokenURI: AssetsContractController['getERC721TokenURI'];\n\n  private readonly getERC721OwnerOf: AssetsContractController['getERC721OwnerOf'];\n\n  private readonly getERC1155BalanceOf: AssetsContractController['getERC1155BalanceOf'];\n\n  private readonly getERC1155TokenURI: AssetsContractController['getERC1155TokenURI'];\n\n  private readonly getNetworkClientById: NetworkController['getNetworkClientById'];\n\n  private readonly onNftAdded?: (data: {\n    address: string;\n    symbol: string | undefined;\n    tokenId: string;\n    standard: string | null;\n    source: Source;\n    tokenURI?: string | null;\n  }) => void;\n\n  /**\n   * Creates an NftController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.getERC721AssetName - Gets the name of the asset at the given address.\n   * @param options.getERC721AssetSymbol - Gets the symbol of the asset at the given address.\n   * @param options.getERC721TokenURI - Gets the URI of the ERC721 token at the given address, with the given ID.\n   * @param options.getERC721OwnerOf - Get the owner of a ERC-721 NFT.\n   * @param options.getERC1155BalanceOf - Gets balance of a ERC-1155 NFT.\n   * @param options.getERC1155TokenURI - Gets the URI of the ERC1155 token at the given address, with the given ID.\n   * @param options.getNetworkClientById - Gets the network client for the given networkClientId.\n   * @param options.onNftAdded - Callback that is called when an NFT is added. Currently used pass data\n   * for tracking the NFT added event.\n   * @param options.messenger - The controller messenger.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      chainId: initialChainId,\n      onPreferencesStateChange,\n      onNetworkStateChange,\n      getERC721AssetName,\n      getERC721AssetSymbol,\n      getERC721TokenURI,\n      getERC721OwnerOf,\n      getERC1155BalanceOf,\n      getERC1155TokenURI,\n      getNetworkClientById,\n      onNftAdded,\n      messenger,\n    }: {\n      chainId: Hex;\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n      getERC721AssetName: AssetsContractController['getERC721AssetName'];\n      getERC721AssetSymbol: AssetsContractController['getERC721AssetSymbol'];\n      getERC721TokenURI: AssetsContractController['getERC721TokenURI'];\n      getERC721OwnerOf: AssetsContractController['getERC721OwnerOf'];\n      getERC1155BalanceOf: AssetsContractController['getERC1155BalanceOf'];\n      getERC1155TokenURI: AssetsContractController['getERC1155TokenURI'];\n      getNetworkClientById: NetworkController['getNetworkClientById'];\n      onNftAdded?: (data: {\n        address: string;\n        symbol: string | undefined;\n        tokenId: string;\n        standard: string | null;\n        source: string;\n        tokenURI?: string | null;\n      }) => void;\n      messenger: NftControllerMessenger;\n    },\n    config?: Partial<NftConfig>,\n    state?: Partial<NftState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      selectedAddress: '',\n      chainId: initialChainId,\n      ipfsGateway: IPFS_DEFAULT_GATEWAY_URL,\n      displayNftMedia: false,\n      useIPFSSubdomains: true,\n      isIpfsGatewayEnabled: true,\n    };\n\n    this.defaultState = getDefaultNftState();\n    this.initialize();\n    this.getERC721AssetName = getERC721AssetName;\n    this.getERC721AssetSymbol = getERC721AssetSymbol;\n    this.getERC721TokenURI = getERC721TokenURI;\n    this.getERC721OwnerOf = getERC721OwnerOf;\n    this.getERC1155BalanceOf = getERC1155BalanceOf;\n    this.getERC1155TokenURI = getERC1155TokenURI;\n    this.getNetworkClientById = getNetworkClientById;\n    this.onNftAdded = onNftAdded;\n    this.messagingSystem = messenger;\n\n    onPreferencesStateChange(\n      async ({\n        selectedAddress,\n        ipfsGateway,\n        displayNftMedia,\n        isIpfsGatewayEnabled,\n      }) => {\n        this.configure({\n          selectedAddress,\n          ipfsGateway,\n          displayNftMedia,\n          isIpfsGatewayEnabled,\n        });\n\n        const needsUpdateNftMetadata =\n          (isIpfsGatewayEnabled && ipfsGateway !== '') || displayNftMedia;\n\n        if (needsUpdateNftMetadata) {\n          const { chainId } = this.config;\n          const nfts: Nft[] =\n            this.state.allNfts[selectedAddress]?.[chainId] ?? [];\n          // filter only nfts\n          const nftsToUpdate = nfts.filter(\n            (singleNft) =>\n              !singleNft.name && !singleNft.description && !singleNft.image,\n          );\n          if (nftsToUpdate.length !== 0) {\n            await this.updateNftMetadata({\n              nfts: nftsToUpdate,\n              userAddress: selectedAddress,\n            });\n          }\n        }\n      },\n    );\n\n    onNetworkStateChange(({ selectedNetworkClientId }) => {\n      const selectedNetworkClient = getNetworkClientById(\n        selectedNetworkClientId,\n      );\n      const { chainId } = selectedNetworkClient.configuration;\n\n      this.configure({ chainId });\n    });\n  }\n\n  private async validateWatchNft(\n    asset: NftAsset,\n    type: NFTStandardType,\n    userAddress: string,\n    { networkClientId }: { networkClientId?: NetworkClientId } = {},\n  ) {\n    const { address: contractAddress, tokenId } = asset;\n\n    // Validate parameters\n    if (!type) {\n      throw rpcErrors.invalidParams('Asset type is required');\n    }\n\n    if (type !== ERC721 && type !== ERC1155) {\n      throw rpcErrors.invalidParams(\n        `Non NFT asset type ${type} not supported by watchNft`,\n      );\n    }\n\n    if (!contractAddress || !tokenId) {\n      throw rpcErrors.invalidParams('Both address and tokenId are required');\n    }\n\n    if (!isAddress(contractAddress)) {\n      throw rpcErrors.invalidParams('Invalid address');\n    }\n\n    if (!/^\\d+$/u.test(tokenId)) {\n      throw rpcErrors.invalidParams('Invalid tokenId');\n    }\n\n    // Check if the user owns the suggested NFT\n    try {\n      const isOwner = await this.isNftOwner(\n        userAddress,\n        contractAddress,\n        tokenId,\n        { networkClientId },\n      );\n      if (!isOwner) {\n        throw rpcErrors.invalidInput(\n          'Suggested NFT is not owned by the selected account',\n        );\n      }\n    } catch (error) {\n      // error thrown here: \"Unable to verify ownership. Possibly because the standard is not supported or the user's currently selected network does not match the chain of the asset in question.\"\n      if (error instanceof Error) {\n        throw rpcErrors.resourceUnavailable(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // temporary method to get the correct chainId until we remove chainId from the config & the chainId arg from the detection logic\n  // Just a helper method to prefer the networkClient chainId first then the chainId argument and then finally the config chainId\n  private getCorrectChainId({\n    networkClientId,\n  }: {\n    networkClientId?: NetworkClientId;\n  }) {\n    if (networkClientId) {\n      return this.getNetworkClientById(networkClientId).configuration.chainId;\n    }\n    return this.config.chainId;\n  }\n\n  /**\n   * Adds a new suggestedAsset to state. Parameters will be validated according to\n   * asset type being watched. A `<suggestedNftMeta.id>:pending` hub event will be emitted once added.\n   *\n   * @param asset - The asset to be watched. For now ERC721 and ERC1155 tokens are accepted.\n   * @param asset.address - The address of the asset contract.\n   * @param asset.tokenId - The ID of the asset.\n   * @param type - The asset type.\n   * @param origin - Domain origin to register the asset from.\n   * @param options - Options bag.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being added.\n   * @returns Object containing a Promise resolving to the suggestedAsset address if accepted.\n   */\n  async watchNft(\n    asset: NftAsset,\n    type: NFTStandardType,\n    origin: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: {\n      networkClientId?: NetworkClientId;\n      userAddress?: string;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    await this.validateWatchNft(asset, type, userAddress);\n\n    const nftMetadata = await this.getNftInformation(\n      asset.address,\n      asset.tokenId,\n      networkClientId,\n    );\n\n    if (nftMetadata.standard && nftMetadata.standard !== type) {\n      throw rpcErrors.invalidInput(\n        `Suggested NFT of type ${nftMetadata.standard} does not match received type ${type}`,\n      );\n    }\n\n    const suggestedNftMeta: SuggestedNftMeta = {\n      asset: { ...asset, ...nftMetadata },\n      type,\n      id: random(),\n      time: Date.now(),\n      interactingAddress: userAddress,\n      origin,\n    };\n    await this._requestApproval(suggestedNftMeta);\n    const { address, tokenId } = asset;\n    const { name, standard, description, image } = nftMetadata;\n\n    await this.addNft(address, tokenId, {\n      nftMetadata: {\n        name: name ?? null,\n        description: description ?? null,\n        image: image ?? null,\n        standard: standard ?? null,\n      },\n      userAddress,\n      source: Source.Dapp,\n      networkClientId,\n    });\n  }\n\n  /**\n   * Sets an OpenSea API key to retrieve NFT information.\n   *\n   * @param openSeaApiKey - OpenSea API key.\n   */\n  setApiKey(openSeaApiKey: string) {\n    this.openSeaApiKey = openSeaApiKey;\n  }\n\n  /**\n   * Checks the ownership of a ERC-721 or ERC-1155 NFT for a given address.\n   *\n   * @param ownerAddress - User public address.\n   * @param nftAddress - NFT contract address.\n   * @param tokenId - NFT token ID.\n   * @param options - Options bag.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving the NFT ownership.\n   */\n  async isNftOwner(\n    ownerAddress: string,\n    nftAddress: string,\n    tokenId: string,\n    {\n      networkClientId,\n    }: {\n      networkClientId?: NetworkClientId;\n    } = {},\n  ): Promise<boolean> {\n    // Checks the ownership for ERC-721.\n    try {\n      const owner = await this.getERC721OwnerOf(\n        nftAddress,\n        tokenId,\n        networkClientId,\n      );\n      return ownerAddress.toLowerCase() === owner.toLowerCase();\n      // eslint-disable-next-line no-empty\n    } catch {\n      // Ignore ERC-721 contract error\n    }\n\n    // Checks the ownership for ERC-1155.\n    try {\n      const balance = await this.getERC1155BalanceOf(\n        ownerAddress,\n        nftAddress,\n        tokenId,\n        networkClientId,\n      );\n      return !balance.isZero();\n      // eslint-disable-next-line no-empty\n    } catch {\n      // Ignore ERC-1155 contract error\n    }\n\n    throw new Error(\n      `Unable to verify ownership. Possibly because the standard is not supported or the user's currently selected network does not match the chain of the asset in question.`,\n    );\n  }\n\n  /**\n   * Verifies currently selected address owns entered NFT address/tokenId combo and\n   * adds the NFT and respective NFT contract to the stored NFT and NFT contracts lists.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param options - an object of arguments\n   * @param options.userAddress - The address of the current user.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   */\n  async addNftVerifyOwnership(\n    address: string,\n    tokenId: string,\n    {\n      userAddress = this.config.selectedAddress,\n      networkClientId,\n      source,\n    }: {\n      userAddress?: string;\n      networkClientId?: NetworkClientId;\n      source?: Source;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    if (\n      !(await this.isNftOwner(userAddress, address, tokenId, {\n        networkClientId,\n      }))\n    ) {\n      throw new Error('This NFT is not owned by the user');\n    }\n    await this.addNft(address, tokenId, {\n      networkClientId,\n      userAddress,\n      source,\n    });\n  }\n\n  /**\n   * Adds an NFT and respective NFT contract to the stored NFT and NFT contracts lists.\n   *\n   * @param tokenAddress - Hex address of the NFT contract.\n   * @param tokenId - The NFT identifier.\n   * @param options - an object of arguments\n   * @param options.nftMetadata - NFT optional metadata.\n   * @param options.userAddress - The address of the current user.\n   * @param options.source - Whether the NFT was detected, added manually or suggested by a dapp.\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns Promise resolving to the current NFT list.\n   */\n  async addNft(\n    tokenAddress: string,\n    tokenId: string,\n    {\n      nftMetadata,\n      userAddress = this.config.selectedAddress,\n      source = Source.Custom,\n      networkClientId,\n    }: {\n      nftMetadata?: NftMetadata;\n      userAddress?: string;\n      source?: Source;\n      networkClientId?: NetworkClientId;\n    } = { userAddress: this.config.selectedAddress },\n  ) {\n    tokenAddress = toChecksumHexAddress(tokenAddress);\n\n    const chainId = this.getCorrectChainId({ networkClientId });\n\n    nftMetadata =\n      nftMetadata ||\n      (await this.getNftInformation(tokenAddress, tokenId, networkClientId));\n\n    const newNftContracts = await this.addNftContract({\n      tokenAddress,\n      userAddress,\n      networkClientId,\n      source,\n      nftMetadata,\n    });\n\n    // If NFT contract was not added, do not add individual NFT\n    const nftContract = newNftContracts.find(\n      (contract) =>\n        contract.address.toLowerCase() === tokenAddress.toLowerCase(),\n    );\n\n    // If NFT contract information, add individual NFT\n    if (nftContract) {\n      await this.addIndividualNft(\n        tokenAddress,\n        tokenId,\n        nftMetadata,\n        nftContract,\n        chainId,\n        userAddress,\n        source,\n      );\n    }\n  }\n\n  /**\n   * Refetches NFT metadata and updates the state\n   *\n   * @param options - Options for refetching NFT metadata\n   * @param options.nfts - nfts to update metadata for.\n   * @param options.userAddress - The current user address\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   */\n  async updateNftMetadata({\n    nfts,\n    userAddress = this.config.selectedAddress,\n    networkClientId,\n  }: {\n    nfts: Nft[];\n    userAddress?: string;\n    networkClientId?: NetworkClientId;\n  }) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n\n    const nftsWithChecksumAdr = nfts.map((nft) => {\n      return {\n        ...nft,\n        address: toChecksumHexAddress(nft.address),\n      };\n    });\n    const nftMetadataResults = await Promise.allSettled(\n      nftsWithChecksumAdr.map(async (nft) => {\n        const resMetadata = await this.getNftInformation(\n          nft.address,\n          nft.tokenId,\n          networkClientId,\n        );\n        return {\n          nft,\n          newMetadata: resMetadata,\n        };\n      }),\n    );\n    const successfulNewFetchedNfts = nftMetadataResults.filter(\n      (result): result is PromiseFulfilledResult<NftUpdate> =>\n        result.status === 'fulfilled',\n    );\n    // We want to avoid updating the state if the state and fetched nft info are the same\n    const nftsWithDifferentMetadata: PromiseFulfilledResult<NftUpdate>[] = [];\n    const { allNfts } = this.state;\n    const stateNfts = allNfts[userAddress]?.[chainId] || [];\n\n    successfulNewFetchedNfts.forEach((singleNft) => {\n      const existingEntry: Nft | undefined = stateNfts.find(\n        (nft) =>\n          nft.address.toLowerCase() ===\n            singleNft.value.nft.address.toLowerCase() &&\n          nft.tokenId === singleNft.value.nft.tokenId,\n      );\n\n      if (existingEntry) {\n        const differentMetadata = compareNftMetadata(\n          singleNft.value.newMetadata,\n          existingEntry,\n        );\n\n        if (differentMetadata) {\n          nftsWithDifferentMetadata.push(singleNft);\n        }\n      }\n    });\n\n    if (nftsWithDifferentMetadata.length !== 0) {\n      nftsWithDifferentMetadata.forEach((elm) =>\n        this.updateNft(\n          elm.value.nft,\n          elm.value.newMetadata,\n          userAddress,\n          chainId,\n        ),\n      );\n    }\n  }\n\n  /**\n   * Removes an NFT from the stored token list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  removeNft(\n    address: string,\n    tokenId: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    address = toChecksumHexAddress(address);\n    this.removeIndividualNft(address, tokenId, { chainId, userAddress });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const remainingNft = nfts.find(\n      (nft) => nft.address.toLowerCase() === address.toLowerCase(),\n    );\n\n    if (!remainingNft) {\n      this.removeNftContract(address, { chainId, userAddress });\n    }\n  }\n\n  /**\n   * Removes an NFT from the stored token list and saves it in ignored NFTs list.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Token identifier of the NFT.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  removeAndIgnoreNft(\n    address: string,\n    tokenId: string,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    address = toChecksumHexAddress(address);\n    this.removeAndIgnoreIndividualNft(address, tokenId, {\n      chainId,\n      userAddress,\n    });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const remainingNft = nfts.find(\n      (nft) => nft.address.toLowerCase() === address.toLowerCase(),\n    );\n    if (!remainingNft) {\n      this.removeNftContract(address, { chainId, userAddress });\n    }\n  }\n\n  /**\n   * Removes all NFTs from the ignored list.\n   */\n  clearIgnoredNfts() {\n    this.update({ ignoredNfts: [] });\n  }\n\n  /**\n   * Checks whether input NFT is still owned by the user\n   * And updates the isCurrentlyOwned value on the NFT object accordingly.\n   *\n   * @param nft - The NFT object to check and update.\n   * @param batch - A boolean indicating whether this method is being called as part of a batch or single update.\n   * @param accountParams - The userAddress and chainId to check ownership against\n   * @param accountParams.userAddress - the address passed through the confirmed transaction flow to ensure assets are stored to the correct account\n   * @param accountParams.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @returns the NFT with the updated isCurrentlyOwned value\n   */\n  async checkAndUpdateSingleNftOwnershipStatus(\n    nft: Nft,\n    batch: boolean,\n    {\n      userAddress = this.config.selectedAddress,\n      networkClientId,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { address, tokenId } = nft;\n    let isOwned = nft.isCurrentlyOwned;\n    try {\n      isOwned = await this.isNftOwner(userAddress, address, tokenId, {\n        networkClientId,\n      });\n    } catch {\n      // ignore error\n      // this will only throw an error 'Unable to verify ownership' in which case\n      // we want to keep the current value of isCurrentlyOwned for this flow.\n    }\n\n    nft.isCurrentlyOwned = isOwned;\n\n    if (batch) {\n      return nft;\n    }\n\n    // if this is not part of a batched update we update this one NFT in state\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const nftToUpdate = nfts.find(\n      (item) =>\n        item.tokenId === tokenId &&\n        item.address.toLowerCase() === address.toLowerCase(),\n    );\n    if (nftToUpdate) {\n      nftToUpdate.isCurrentlyOwned = isOwned;\n      this.updateNestedNftState(nfts, ALL_NFTS_STATE_KEY, {\n        userAddress,\n        chainId,\n      });\n    }\n    return nft;\n  }\n\n  /**\n   * Checks whether NFTs associated with current selectedAddress/chainId combination are still owned by the user\n   * And updates the isCurrentlyOwned value on each accordingly.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT ownership status is checked/updated.\n   */\n  async checkAndUpdateAllNftsOwnershipStatus(\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: { networkClientId?: NetworkClientId; userAddress?: string } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const updatedNfts = await Promise.all(\n      nfts.map(async (nft) => {\n        return (\n          (await this.checkAndUpdateSingleNftOwnershipStatus(nft, true, {\n            networkClientId,\n            userAddress,\n          })) ?? nft\n        );\n      }),\n    );\n\n    this.updateNestedNftState(updatedNfts, ALL_NFTS_STATE_KEY, {\n      userAddress,\n      chainId,\n    });\n  }\n\n  /**\n   * Update NFT favorite status.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Hex address of the NFT contract.\n   * @param favorite - NFT new favorite status.\n   * @param options - an object of arguments\n   * @param options.networkClientId - The networkClientId that can be used to identify the network client to use for this request.\n   * @param options.userAddress - The address of the account where the NFT is being removed.\n   */\n  updateNftFavoriteStatus(\n    address: string,\n    tokenId: string,\n    favorite: boolean,\n    {\n      networkClientId,\n      userAddress = this.config.selectedAddress,\n    }: {\n      networkClientId?: NetworkClientId;\n      userAddress?: string;\n    } = {\n      userAddress: this.config.selectedAddress,\n    },\n  ) {\n    const chainId = this.getCorrectChainId({ networkClientId });\n    const { allNfts } = this.state;\n    const nfts = allNfts[userAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) => nft.address === address && nft.tokenId === tokenId,\n    );\n\n    if (index === -1) {\n      return;\n    }\n\n    const updatedNft: Nft = {\n      ...nfts[index],\n      favorite,\n    };\n\n    // Update Nfts array\n    nfts[index] = updatedNft;\n\n    this.updateNestedNftState(nfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress,\n    });\n  }\n\n  /**\n   * Returns an NFT by the address and token id.\n   *\n   * @param address - Hex address of the NFT contract.\n   * @param tokenId - Number that represents the id of the token.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   * @returns Object containing the NFT and its position in the array\n   */\n  findNftByAddressAndTokenId(\n    address: string,\n    tokenId: string,\n    selectedAddress: string,\n    chainId: Hex,\n  ): { nft: Nft; index: number } | null {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) =>\n        nft.address.toLowerCase() === address.toLowerCase() &&\n        nft.tokenId === tokenId,\n    );\n\n    if (index === -1) {\n      return null;\n    }\n\n    return { nft: nfts[index], index };\n  }\n\n  /**\n   * Update NFT data.\n   *\n   * @param nft - NFT object to find the right NFT to updates.\n   * @param updates - NFT partial object to update properties of the NFT.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   */\n  updateNft(\n    nft: Nft,\n    updates: Partial<Nft>,\n    selectedAddress: string,\n    chainId: Hex,\n  ) {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const nftInfo = this.findNftByAddressAndTokenId(\n      nft.address,\n      nft.tokenId,\n      selectedAddress,\n      chainId,\n    );\n\n    if (!nftInfo) {\n      return;\n    }\n\n    const updatedNft: Nft = {\n      ...nft,\n      ...updates,\n    };\n\n    const newNfts = [\n      ...nfts.slice(0, nftInfo.index),\n      updatedNft,\n      ...nfts.slice(nftInfo.index + 1),\n    ];\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress: selectedAddress,\n    });\n  }\n\n  /**\n   * Resets the transaction status of an NFT.\n   *\n   * @param transactionId - NFT transaction id.\n   * @param selectedAddress - Hex address of the user account.\n   * @param chainId - Id of the current network.\n   * @returns a boolean indicating if the reset was well succeeded or not\n   */\n  resetNftTransactionStatusByTransactionId(\n    transactionId: string,\n    selectedAddress: string,\n    chainId: Hex,\n  ): boolean {\n    const { allNfts } = this.state;\n    const nfts = allNfts[selectedAddress]?.[chainId] || [];\n    const index: number = nfts.findIndex(\n      (nft) => nft.transactionId === transactionId,\n    );\n\n    if (index === -1) {\n      return false;\n    }\n    const updatedNft: Nft = {\n      ...nfts[index],\n      transactionId: undefined,\n    };\n\n    const newNfts = [\n      ...nfts.slice(0, index),\n      updatedNft,\n      ...nfts.slice(index + 1),\n    ];\n\n    this.updateNestedNftState(newNfts, ALL_NFTS_STATE_KEY, {\n      chainId,\n      userAddress: selectedAddress,\n    });\n\n    return true;\n  }\n\n  async _requestApproval(suggestedNftMeta: SuggestedNftMeta) {\n    return this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id: suggestedNftMeta.id,\n        origin: suggestedNftMeta.origin,\n        type: ApprovalType.WatchAsset,\n        requestData: {\n          id: suggestedNftMeta.id,\n          interactingAddress: suggestedNftMeta.interactingAddress,\n          asset: {\n            address: suggestedNftMeta.asset.address,\n            tokenId: suggestedNftMeta.asset.tokenId,\n            name: suggestedNftMeta.asset.name,\n            description: suggestedNftMeta.asset.description,\n            image: suggestedNftMeta.asset.image,\n            standard: suggestedNftMeta.asset.standard,\n          },\n        },\n      },\n      true,\n    );\n  }\n}\n\nexport default NftController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-V4ZO3F2S.js b/node_modules/@metamask/assets-controllers/dist/chunk-T4WDZHE7.js
similarity index 99%
rename from node_modules/@metamask/assets-controllers/dist/chunk-V4ZO3F2S.js
rename to node_modules/@metamask/assets-controllers/dist/chunk-T4WDZHE7.js
index 0430e5c..948b2ea 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-V4ZO3F2S.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-T4WDZHE7.js
@@ -80,9 +80,8 @@ var AccountTrackerController = class extends _pollingcontroller.StaticIntervalPo
             [chainId]: accountsForChain
           }
         });
-      } catch (err) {
+      } finally {
         releaseLock();
-        throw err;
       }
     };
     this.defaultConfig = {
@@ -243,4 +242,4 @@ var AccountTrackerController_default = AccountTrackerController;
 
 
 exports.AccountTrackerController = AccountTrackerController; exports.AccountTrackerController_default = AccountTrackerController_default;
-//# sourceMappingURL=chunk-V4ZO3F2S.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-T4WDZHE7.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-T4WDZHE7.js.map b/node_modules/@metamask/assets-controllers/dist/chunk-T4WDZHE7.js.map
new file mode 100644
index 0000000..073e24e
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-T4WDZHE7.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/AccountTrackerController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BaseConfig, BaseState } from '@metamask/base-controller';\nimport { query, safelyExecuteWithTimeout } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { Provider } from '@metamask/eth-query';\nimport type {\n  NetworkClientId,\n  NetworkController,\n  NetworkState,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingControllerV1 } from '@metamask/polling-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\nimport { assert } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport { cloneDeep } from 'lodash';\n\n/**\n * @type AccountInformation\n *\n * Account information object\n * @property balance - Hex string of an account balancec in wei\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountInformation {\n  balance: Hex | undefined;\n}\n\n/**\n * @type AccountTrackerConfig\n *\n * Account tracker controller configuration\n * @property provider - Provider used to create a new underlying EthQuery instance\n */\n// This interface was created before this ESLint rule was added.\n// Remove in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountTrackerConfig extends BaseConfig {\n  interval: number;\n  provider?: Provider;\n}\n\n/**\n * @type AccountTrackerState\n *\n * Account tracker controller state\n * @property accounts - Map of addresses to account information\n */\n// This interface was created before this ESLint rule was added.\n// Remove in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountTrackerState extends BaseState {\n  accounts: { [address: string]: AccountInformation };\n  accountsByChainId: Record<string, { [address: string]: AccountInformation }>;\n}\n\n/**\n * Controller that tracks the network balances for all user accounts.\n */\nexport class AccountTrackerController extends StaticIntervalPollingControllerV1<\n  AccountTrackerConfig,\n  AccountTrackerState\n> {\n  private _provider?: Provider;\n\n  private readonly refreshMutex = new Mutex();\n\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private syncAccounts(newChainId: string) {\n    const accounts = { ...this.state.accounts };\n    const accountsByChainId = cloneDeep(this.state.accountsByChainId);\n\n    const existing = Object.keys(accounts);\n    if (!accountsByChainId[newChainId]) {\n      accountsByChainId[newChainId] = {};\n      existing.forEach((address) => {\n        accountsByChainId[newChainId][address] = { balance: '0x0' };\n      });\n    }\n\n    const addresses = Object.keys(this.getIdentities());\n    const newAddresses = addresses.filter(\n      (address) => !existing.includes(address),\n    );\n    const oldAddresses = existing.filter(\n      (address) => !addresses.includes(address),\n    );\n    newAddresses.forEach((address) => {\n      accounts[address] = { balance: '0x0' };\n    });\n    Object.keys(accountsByChainId).forEach((chainId) => {\n      newAddresses.forEach((address) => {\n        accountsByChainId[chainId][address] = {\n          balance: '0x0',\n        };\n      });\n    });\n\n    oldAddresses.forEach((address) => {\n      delete accounts[address];\n    });\n    Object.keys(accountsByChainId).forEach((chainId) => {\n      oldAddresses.forEach((address) => {\n        delete accountsByChainId[chainId][address];\n      });\n    });\n\n    this.update({ accounts, accountsByChainId });\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'AccountTrackerController';\n\n  private readonly getIdentities: () => PreferencesState['identities'];\n\n  private readonly getSelectedAddress: () => PreferencesState['selectedAddress'];\n\n  private readonly getMultiAccountBalancesEnabled: () => PreferencesState['isMultiAccountBalancesEnabled'];\n\n  private readonly getCurrentChainId: () => NetworkState['providerConfig']['chainId'];\n\n  private readonly getNetworkClientById: NetworkController['getNetworkClientById'];\n\n  /**\n   * Creates an AccountTracker instance.\n   *\n   * @param options - The controller options.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.getIdentities - Gets the identities from the Preferences store.\n   * @param options.getSelectedAddress - Gets the selected address from the Preferences store.\n   * @param options.getMultiAccountBalancesEnabled - Gets the multi account balances enabled flag from the Preferences store.\n   * @param options.getCurrentChainId - Gets the chain ID for the current network from the Network store.\n   * @param options.getNetworkClientById - Gets the network client with the given id from the NetworkController.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      onPreferencesStateChange,\n      getIdentities,\n      getSelectedAddress,\n      getMultiAccountBalancesEnabled,\n      getCurrentChainId,\n      getNetworkClientById,\n    }: {\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      getIdentities: () => PreferencesState['identities'];\n      getSelectedAddress: () => PreferencesState['selectedAddress'];\n      getMultiAccountBalancesEnabled: () => PreferencesState['isMultiAccountBalancesEnabled'];\n      getCurrentChainId: () => NetworkState['providerConfig']['chainId'];\n      getNetworkClientById: NetworkController['getNetworkClientById'];\n    },\n    config?: Partial<AccountTrackerConfig>,\n    state?: Partial<AccountTrackerState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 10000,\n    };\n    this.defaultState = {\n      accounts: {},\n      accountsByChainId: {\n        [getCurrentChainId()]: {},\n      },\n    };\n    this.initialize();\n    this.setIntervalLength(this.config.interval);\n    this.getIdentities = getIdentities;\n    this.getSelectedAddress = getSelectedAddress;\n    this.getMultiAccountBalancesEnabled = getMultiAccountBalancesEnabled;\n    this.getCurrentChainId = getCurrentChainId;\n    this.getNetworkClientById = getNetworkClientById;\n    onPreferencesStateChange(() => {\n      this.refresh();\n    });\n    this.poll();\n  }\n\n  /**\n   * Sets a new provider.\n   *\n   * TODO: Replace this wth a method.\n   *\n   * @param provider - Provider used to create a new underlying EthQuery instance.\n   */\n  set provider(provider: Provider) {\n    this._provider = provider;\n  }\n\n  get provider() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Resolves a networkClientId to a network client config\n   * or globally selected network config if not provided\n   *\n   * @param networkClientId - Optional networkClientId to fetch a network client with\n   * @returns network client config\n   */\n  #getCorrectNetworkClient(networkClientId?: NetworkClientId): {\n    chainId: string;\n    ethQuery?: EthQuery;\n  } {\n    if (networkClientId) {\n      const networkClient = this.getNetworkClientById(networkClientId);\n\n      return {\n        chainId: networkClient.configuration.chainId,\n        ethQuery: new EthQuery(networkClient.provider),\n      };\n    }\n\n    return {\n      chainId: this.getCurrentChainId(),\n      ethQuery: this._provider ? new EthQuery(this._provider) : undefined,\n    };\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval trigger a 'refresh'.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await this.refresh();\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Refreshes the balances of the accounts using the networkClientId\n   *\n   * @param networkClientId - The network client ID used to get balances.\n   */\n  async _executePoll(networkClientId: string): Promise<void> {\n    this.refresh(networkClientId);\n  }\n\n  /**\n   * Refreshes the balances of the accounts depending on the multi-account setting.\n   * If multi-account is disabled, only updates the selected account balance.\n   * If multi-account is enabled, updates balances for all accounts.\n   *\n   * @param networkClientId - Optional networkClientId to fetch a network client with\n   */\n  refresh = async (networkClientId?: NetworkClientId) => {\n    const releaseLock = await this.refreshMutex.acquire();\n    try {\n      const { chainId, ethQuery } =\n        this.#getCorrectNetworkClient(networkClientId);\n      this.syncAccounts(chainId);\n      const { accounts, accountsByChainId } = this.state;\n      const isMultiAccountBalancesEnabled =\n        this.getMultiAccountBalancesEnabled();\n\n      const accountsToUpdate = isMultiAccountBalancesEnabled\n        ? Object.keys(accounts)\n        : [this.getSelectedAddress()];\n\n      const accountsForChain = { ...accountsByChainId[chainId] };\n      for (const address of accountsToUpdate) {\n        const balance = await this.getBalanceFromChain(address, ethQuery);\n        if (balance) {\n          accountsForChain[address] = {\n            balance,\n          };\n        }\n      }\n\n      this.update({\n        ...(chainId === this.getCurrentChainId() && {\n          accounts: accountsForChain,\n        }),\n        accountsByChainId: {\n          ...this.state.accountsByChainId,\n          [chainId]: accountsForChain,\n        },\n      });\n    } finally {\n      /**\n       * This change is not present on the core repo\n       */\n      releaseLock();\n    }\n  };\n\n  /**\n   * Fetches the balance of a given address from the blockchain.\n   *\n   * @param address - The account address to fetch the balance for.\n   * @param ethQuery - The EthQuery instance to query getBalnce with.\n   * @returns A promise that resolves to the balance in a hex string format.\n   */\n  private async getBalanceFromChain(\n    address: string,\n    ethQuery?: EthQuery,\n  ): Promise<Hex | undefined> {\n    return await safelyExecuteWithTimeout(async () => {\n      assert(ethQuery, 'Provider not set.');\n      return await query(ethQuery, 'getBalance', [address]);\n    });\n  }\n\n  /**\n   * Sync accounts balances with some additional addresses.\n   *\n   * @param addresses - the additional addresses, may be hardware wallet addresses.\n   * @param networkClientId - Optional networkClientId to fetch a network client with.\n   * @returns accounts - addresses with synced balance\n   */\n  async syncBalanceWithAddresses(\n    addresses: string[],\n    networkClientId?: NetworkClientId,\n  ): Promise<Record<string, { balance: string }>> {\n    const { ethQuery } = this.#getCorrectNetworkClient(networkClientId);\n\n    return await Promise.all(\n      addresses.map((address): Promise<[string, string] | undefined> => {\n        return safelyExecuteWithTimeout(async () => {\n          assert(ethQuery, 'Provider not set.');\n          const balance = await query(ethQuery, 'getBalance', [address]);\n          return [address, balance];\n        });\n      }),\n    ).then((value) => {\n      return value.reduce((obj, item) => {\n        if (!item) {\n          return obj;\n        }\n\n        const [address, balance] = item;\n        return {\n          ...obj,\n          [address]: {\n            balance,\n          },\n        };\n      }, {});\n    });\n  }\n}\n\nexport default AccountTrackerController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-V4ZO3F2S.js.map b/node_modules/@metamask/assets-controllers/dist/chunk-V4ZO3F2S.js.map
deleted file mode 100644
index deb94d9..0000000
--- a/node_modules/@metamask/assets-controllers/dist/chunk-V4ZO3F2S.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/AccountTrackerController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BaseConfig, BaseState } from '@metamask/base-controller';\nimport { query, safelyExecuteWithTimeout } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { Provider } from '@metamask/eth-query';\nimport type {\n  NetworkClientId,\n  NetworkController,\n  NetworkState,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingControllerV1 } from '@metamask/polling-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport { assert } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport { cloneDeep } from 'lodash';\n\n/**\n * @type AccountInformation\n *\n * Account information object\n * @property balance - Hex string of an account balancec in wei\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountInformation {\n  balance: string;\n}\n\n/**\n * @type AccountTrackerConfig\n *\n * Account tracker controller configuration\n * @property provider - Provider used to create a new underlying EthQuery instance\n */\n// This interface was created before this ESLint rule was added.\n// Remove in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountTrackerConfig extends BaseConfig {\n  interval: number;\n  provider?: Provider;\n}\n\n/**\n * @type AccountTrackerState\n *\n * Account tracker controller state\n * @property accounts - Map of addresses to account information\n */\n// This interface was created before this ESLint rule was added.\n// Remove in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountTrackerState extends BaseState {\n  accounts: { [address: string]: AccountInformation };\n  accountsByChainId: Record<string, { [address: string]: AccountInformation }>;\n}\n\n/**\n * Controller that tracks the network balances for all user accounts.\n */\nexport class AccountTrackerController extends StaticIntervalPollingControllerV1<\n  AccountTrackerConfig,\n  AccountTrackerState\n> {\n  private _provider?: Provider;\n\n  private readonly refreshMutex = new Mutex();\n\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private syncAccounts(newChainId: string) {\n    const accounts = { ...this.state.accounts };\n    const accountsByChainId = cloneDeep(this.state.accountsByChainId);\n\n    const existing = Object.keys(accounts);\n    if (!accountsByChainId[newChainId]) {\n      accountsByChainId[newChainId] = {};\n      existing.forEach((address) => {\n        accountsByChainId[newChainId][address] = { balance: '0x0' };\n      });\n    }\n\n    const addresses = Object.keys(this.getIdentities());\n    const newAddresses = addresses.filter(\n      (address) => !existing.includes(address),\n    );\n    const oldAddresses = existing.filter(\n      (address) => !addresses.includes(address),\n    );\n    newAddresses.forEach((address) => {\n      accounts[address] = { balance: '0x0' };\n    });\n    Object.keys(accountsByChainId).forEach((chainId) => {\n      newAddresses.forEach((address) => {\n        accountsByChainId[chainId][address] = {\n          balance: '0x0',\n        };\n      });\n    });\n\n    oldAddresses.forEach((address) => {\n      delete accounts[address];\n    });\n    Object.keys(accountsByChainId).forEach((chainId) => {\n      oldAddresses.forEach((address) => {\n        delete accountsByChainId[chainId][address];\n      });\n    });\n\n    this.update({ accounts, accountsByChainId });\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'AccountTrackerController';\n\n  private readonly getIdentities: () => PreferencesState['identities'];\n\n  private readonly getSelectedAddress: () => PreferencesState['selectedAddress'];\n\n  private readonly getMultiAccountBalancesEnabled: () => PreferencesState['isMultiAccountBalancesEnabled'];\n\n  private readonly getCurrentChainId: () => NetworkState['providerConfig']['chainId'];\n\n  private readonly getNetworkClientById: NetworkController['getNetworkClientById'];\n\n  /**\n   * Creates an AccountTracker instance.\n   *\n   * @param options - The controller options.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.getIdentities - Gets the identities from the Preferences store.\n   * @param options.getSelectedAddress - Gets the selected address from the Preferences store.\n   * @param options.getMultiAccountBalancesEnabled - Gets the multi account balances enabled flag from the Preferences store.\n   * @param options.getCurrentChainId - Gets the chain ID for the current network from the Network store.\n   * @param options.getNetworkClientById - Gets the network client with the given id from the NetworkController.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      onPreferencesStateChange,\n      getIdentities,\n      getSelectedAddress,\n      getMultiAccountBalancesEnabled,\n      getCurrentChainId,\n      getNetworkClientById,\n    }: {\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      getIdentities: () => PreferencesState['identities'];\n      getSelectedAddress: () => PreferencesState['selectedAddress'];\n      getMultiAccountBalancesEnabled: () => PreferencesState['isMultiAccountBalancesEnabled'];\n      getCurrentChainId: () => NetworkState['providerConfig']['chainId'];\n      getNetworkClientById: NetworkController['getNetworkClientById'];\n    },\n    config?: Partial<AccountTrackerConfig>,\n    state?: Partial<AccountTrackerState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 10000,\n    };\n    this.defaultState = {\n      accounts: {},\n      accountsByChainId: {\n        [getCurrentChainId()]: {},\n      },\n    };\n    this.initialize();\n    this.setIntervalLength(this.config.interval);\n    this.getIdentities = getIdentities;\n    this.getSelectedAddress = getSelectedAddress;\n    this.getMultiAccountBalancesEnabled = getMultiAccountBalancesEnabled;\n    this.getCurrentChainId = getCurrentChainId;\n    this.getNetworkClientById = getNetworkClientById;\n    onPreferencesStateChange(() => {\n      this.refresh();\n    });\n    this.poll();\n  }\n\n  /**\n   * Sets a new provider.\n   *\n   * TODO: Replace this wth a method.\n   *\n   * @param provider - Provider used to create a new underlying EthQuery instance.\n   */\n  set provider(provider: Provider) {\n    this._provider = provider;\n  }\n\n  get provider() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Resolves a networkClientId to a network client config\n   * or globally selected network config if not provided\n   *\n   * @param networkClientId - Optional networkClientId to fetch a network client with\n   * @returns network client config\n   */\n  #getCorrectNetworkClient(networkClientId?: NetworkClientId): {\n    chainId: string;\n    ethQuery?: EthQuery;\n  } {\n    if (networkClientId) {\n      const networkClient = this.getNetworkClientById(networkClientId);\n\n      return {\n        chainId: networkClient.configuration.chainId,\n        ethQuery: new EthQuery(networkClient.provider),\n      };\n    }\n\n    return {\n      chainId: this.getCurrentChainId(),\n      ethQuery: this._provider ? new EthQuery(this._provider) : undefined,\n    };\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval trigger a 'refresh'.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await this.refresh();\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Refreshes the balances of the accounts using the networkClientId\n   *\n   * @param networkClientId - The network client ID used to get balances.\n   */\n  async _executePoll(networkClientId: string): Promise<void> {\n    this.refresh(networkClientId);\n  }\n\n  /**\n   * Refreshes the balances of the accounts depending on the multi-account setting.\n   * If multi-account is disabled, only updates the selected account balance.\n   * If multi-account is enabled, updates balances for all accounts.\n   *\n   * @param networkClientId - Optional networkClientId to fetch a network client with\n   */\n  refresh = async (networkClientId?: NetworkClientId) => {\n    const releaseLock = await this.refreshMutex.acquire();\n    try {\n      const { chainId, ethQuery } =\n        this.#getCorrectNetworkClient(networkClientId);\n      this.syncAccounts(chainId);\n      const { accounts, accountsByChainId } = this.state;\n      const isMultiAccountBalancesEnabled =\n        this.getMultiAccountBalancesEnabled();\n\n      const accountsToUpdate = isMultiAccountBalancesEnabled\n        ? Object.keys(accounts)\n        : [this.getSelectedAddress()];\n\n      const accountsForChain = { ...accountsByChainId[chainId] };\n      for (const address of accountsToUpdate) {\n        const balance = await this.getBalanceFromChain(address, ethQuery);\n        if (balance) {\n          accountsForChain[address] = {\n            balance,\n          };\n        }\n      }\n\n      this.update({\n        ...(chainId === this.getCurrentChainId() && {\n          accounts: accountsForChain,\n        }),\n        accountsByChainId: {\n          ...this.state.accountsByChainId,\n          [chainId]: accountsForChain,\n        },\n      });\n    } catch (err) {\n      releaseLock();\n      throw err;\n    }\n  };\n\n  /**\n   * Fetches the balance of a given address from the blockchain.\n   *\n   * @param address - The account address to fetch the balance for.\n   * @param ethQuery - The EthQuery instance to query getBalnce with.\n   * @returns A promise that resolves to the balance in a hex string format.\n   */\n  private async getBalanceFromChain(\n    address: string,\n    ethQuery?: EthQuery,\n  ): Promise<string | undefined> {\n    return await safelyExecuteWithTimeout(async () => {\n      assert(ethQuery, 'Provider not set.');\n      return await query(ethQuery, 'getBalance', [address]);\n    });\n  }\n\n  /**\n   * Sync accounts balances with some additional addresses.\n   *\n   * @param addresses - the additional addresses, may be hardware wallet addresses.\n   * @param networkClientId - Optional networkClientId to fetch a network client with.\n   * @returns accounts - addresses with synced balance\n   */\n  async syncBalanceWithAddresses(\n    addresses: string[],\n    networkClientId?: NetworkClientId,\n  ): Promise<Record<string, { balance: string }>> {\n    const { ethQuery } = this.#getCorrectNetworkClient(networkClientId);\n\n    return await Promise.all(\n      addresses.map((address): Promise<[string, string] | undefined> => {\n        return safelyExecuteWithTimeout(async () => {\n          assert(ethQuery, 'Provider not set.');\n          const balance = await query(ethQuery, 'getBalance', [address]);\n          return [address, balance];\n        });\n      }),\n    ).then((value) => {\n      return value.reduce((obj, item) => {\n        if (!item) {\n          return obj;\n        }\n\n        const [address, balance] = item;\n        return {\n          ...obj,\n          [address]: {\n            balance,\n          },\n        };\n      }, {});\n    });\n  }\n}\n\nexport default AccountTrackerController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-MR6EF4B7.mjs b/node_modules/@metamask/assets-controllers/dist/chunk-VGIPTYXN.mjs
similarity index 95%
rename from node_modules/@metamask/assets-controllers/dist/chunk-MR6EF4B7.mjs
rename to node_modules/@metamask/assets-controllers/dist/chunk-VGIPTYXN.mjs
index 06df77e..150932e 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-MR6EF4B7.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-VGIPTYXN.mjs
@@ -34,7 +34,7 @@ var STATIC_MAINNET_TOKEN_LIST = Object.entries(
   };
 }, {});
 var controllerName = "TokenDetectionController";
-var _intervalId, _selectedAddress, _networkClientId, _tokenList, _disabled, _isUnlocked, _isDetectionEnabledFromPreferences, _isDetectionEnabledForNetwork, _getBalancesInSingleCall, _trackMetaMetricsEvent, _registerEventListeners, registerEventListeners_fn, _stopPolling, stopPolling_fn, _startPolling, startPolling_fn, _getCorrectChainIdAndNetworkClientId, getCorrectChainIdAndNetworkClientId_fn, _restartTokenDetection, restartTokenDetection_fn, _getSlicesOfTokensToDetect, getSlicesOfTokensToDetect_fn, _addDetectedTokens, addDetectedTokens_fn;
+var _intervalId, _selectedAddress, _networkClientId, _tokenList, _disabled, _isUnlocked, _isDetectionEnabledFromPreferences, _isDetectionEnabledForNetwork, _getBalancesInSingleCall, _getTokensState, _trackMetaMetricsEvent, _registerEventListeners, registerEventListeners_fn, _stopPolling, stopPolling_fn, _startPolling, startPolling_fn, _getCorrectChainIdAndNetworkClientId, getCorrectChainIdAndNetworkClientId_fn, _restartTokenDetection, restartTokenDetection_fn, _getSlicesOfTokensToDetect, getSlicesOfTokensToDetect_fn, _addDetectedTokens, addDetectedTokens_fn;
 var TokenDetectionController = class extends StaticIntervalPollingController {
   /**
    * Creates a TokenDetectionController instance.
@@ -52,6 +52,7 @@ var TokenDetectionController = class extends StaticIntervalPollingController {
     interval = DEFAULT_INTERVAL,
     disabled = true,
     getBalancesInSingleCall,
+    getTokensState,
     trackMetaMetricsEvent,
     messenger
   }) {
@@ -91,6 +92,7 @@ var TokenDetectionController = class extends StaticIntervalPollingController {
     __privateAdd(this, _isDetectionEnabledFromPreferences, void 0);
     __privateAdd(this, _isDetectionEnabledForNetwork, void 0);
     __privateAdd(this, _getBalancesInSingleCall, void 0);
+    __privateAdd(this, _getTokensState, void 0);
     __privateAdd(this, _trackMetaMetricsEvent, void 0);
     __privateSet(this, _disabled, disabled);
     this.setIntervalLength(interval);
@@ -101,6 +103,7 @@ var TokenDetectionController = class extends StaticIntervalPollingController {
     __privateSet(this, _isDetectionEnabledFromPreferences, defaultUseTokenDetection);
     __privateSet(this, _isDetectionEnabledForNetwork, isTokenDetectionSupportedForNetwork(chainId));
     __privateSet(this, _getBalancesInSingleCall, getBalancesInSingleCall);
+    __privateSet(this, _getTokensState, getTokensState);
     __privateSet(this, _trackMetaMetricsEvent, trackMetaMetricsEvent);
     const { isUnlocked } = this.messagingSystem.call(
       "KeyringController:getState"
@@ -202,6 +205,7 @@ _isUnlocked = new WeakMap();
 _isDetectionEnabledFromPreferences = new WeakMap();
 _isDetectionEnabledForNetwork = new WeakMap();
 _getBalancesInSingleCall = new WeakMap();
+_getTokensState = new WeakMap();
 _trackMetaMetricsEvent = new WeakMap();
 _registerEventListeners = new WeakSet();
 registerEventListeners_fn = function() {
@@ -324,7 +328,7 @@ getSlicesOfTokensToDetect_fn = function({
   chainId,
   selectedAddress
 }) {
-  const { allTokens, allDetectedTokens, allIgnoredTokens } = this.messagingSystem.call("TokensController:getState");
+  const { allTokens, allDetectedTokens, allIgnoredTokens } = __privateGet(this, _getTokensState).call(this);
   const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [
     allTokens,
     allDetectedTokens,
@@ -408,4 +412,4 @@ export {
   TokenDetectionController,
   TokenDetectionController_default
 };
-//# sourceMappingURL=chunk-MR6EF4B7.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-VGIPTYXN.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-VGIPTYXN.mjs.map b/node_modules/@metamask/assets-controllers/dist/chunk-VGIPTYXN.mjs.map
new file mode 100644
index 0000000..e31b1b5
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-VGIPTYXN.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/TokenDetectionController.ts"],"sourcesContent":["import type {\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerSelectedAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport contractMap from '@metamask/contract-metadata';\nimport { ChainId, safelyExecute } from '@metamask/controller-utils';\nimport type {\n  KeyringControllerGetStateAction,\n  KeyringControllerLockEvent,\n  KeyringControllerUnlockEvent,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetNetworkConfigurationByNetworkClientId,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n} from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { isTokenDetectionSupportedForNetwork } from './assetsUtil';\nimport type {\n  GetTokenListState,\n  TokenListMap,\n  TokenListStateChange,\n} from './TokenListController';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerGetStateAction,\n  TokensState,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\n/**\n * Compare 2 given strings and return boolean\n * eg: \"foo\" and \"FOO\" => true\n * eg: \"foo\" and \"bar\" => false\n * eg: \"foo\" and 123 => false\n *\n * @param value1 - first string to compare\n * @param value2 - first string to compare\n * @returns true if 2 strings are identical when they are lowercase\n */\nexport function isEqualCaseInsensitive(\n  value1: string,\n  value2: string,\n): boolean {\n  if (typeof value1 !== 'string' || typeof value2 !== 'string') {\n    return false;\n  }\n  return value1.toLowerCase() === value2.toLowerCase();\n}\n\ntype LegacyToken = {\n  name: string;\n  logo: `${string}.svg`;\n  symbol: string;\n  decimals: number;\n  erc20?: boolean;\n  erc721?: boolean;\n};\n\ntype TokenDetectionMap = {\n  [P in keyof TokenListMap]: Omit<TokenListMap[P], 'occurrences'>;\n};\n\nexport const STATIC_MAINNET_TOKEN_LIST = Object.entries<LegacyToken>(\n  contractMap,\n).reduce<TokenDetectionMap>((acc, [base, contract]) => {\n  const { logo, erc20, erc721, ...tokenMetadata } = contract;\n  return {\n    ...acc,\n    [base.toLowerCase()]: {\n      ...tokenMetadata,\n      address: base.toLowerCase(),\n      iconUrl: `images/contract/${logo}`,\n      aggregators: [],\n    },\n  };\n}, {});\n\nexport const controllerName = 'TokenDetectionController';\n\nexport type TokenDetectionState = Record<never, never>;\n\nexport type TokenDetectionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenDetectionState\n>;\n\nexport type TokenDetectionControllerActions =\n  TokenDetectionControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetNetworkConfigurationByNetworkClientId\n  | NetworkControllerGetStateAction\n  | GetTokenListState\n  | KeyringControllerGetStateAction\n  | PreferencesControllerGetStateAction\n  | TokensControllerGetStateAction\n  | TokensControllerAddDetectedTokensAction;\n\nexport type TokenDetectionControllerStateChangeEvent =\n  ControllerStateChangeEvent<typeof controllerName, TokenDetectionState>;\n\nexport type TokenDetectionControllerEvents =\n  TokenDetectionControllerStateChangeEvent;\n\nexport type AllowedEvents =\n  | AccountsControllerSelectedAccountChangeEvent\n  | NetworkControllerNetworkDidChangeEvent\n  | TokenListStateChange\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | PreferencesControllerStateChangeEvent;\n\nexport type TokenDetectionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenDetectionControllerActions | AllowedActions,\n  TokenDetectionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Controller that passively polls on a set interval for Tokens auto detection\n * @property intervalId - Polling interval used to fetch new token rates\n * @property selectedAddress - Vault selected address\n * @property networkClientId - The network client ID of the current selected network\n * @property disabled - Boolean to track if network requests are blocked\n * @property isUnlocked - Boolean to track if the keyring state is unlocked\n * @property isDetectionEnabledFromPreferences - Boolean to track if detection is enabled from PreferencesController\n * @property isDetectionEnabledForNetwork - Boolean to track if detected is enabled for current network\n */\nexport class TokenDetectionController extends StaticIntervalPollingController<\n  typeof controllerName,\n  TokenDetectionState,\n  TokenDetectionControllerMessenger\n> {\n  #intervalId?: ReturnType<typeof setTimeout>;\n\n  #selectedAddress: string;\n\n  #networkClientId: NetworkClientId;\n\n  #tokenList: TokenDetectionMap = {};\n\n  #disabled: boolean;\n\n  #isUnlocked: boolean;\n\n  #isDetectionEnabledFromPreferences: boolean;\n\n  #isDetectionEnabledForNetwork: boolean;\n\n  readonly #getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n\n  readonly #getTokensState: () => TokensState;\n\n  readonly #trackMetaMetricsEvent: (options: {\n    event: string;\n    category: string;\n    properties: {\n      tokens: string[];\n      token_standard: string;\n      asset_type: string;\n    };\n  }) => void;\n\n  /**\n   * Creates a TokenDetectionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The controller messaging system.\n   * @param options.disabled - If set to true, all network requests are blocked.\n   * @param options.interval - Polling interval used to fetch new token rates\n   * @param options.selectedAddress - Vault selected address\n   * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.\n   * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.\n   */\n  constructor({\n    selectedAddress,\n    interval = DEFAULT_INTERVAL,\n    disabled = true,\n    getBalancesInSingleCall,\n    getTokensState,\n    trackMetaMetricsEvent,\n    messenger,\n  }: {\n    selectedAddress?: string;\n    interval?: number;\n    disabled?: boolean;\n    getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n    getTokensState: () => TokensState;\n    trackMetaMetricsEvent: (options: {\n      event: string;\n      category: string;\n      properties: {\n        tokens: string[];\n        token_standard: string;\n        asset_type: string;\n      };\n    }) => void;\n    messenger: TokenDetectionControllerMessenger;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: {},\n      metadata: {},\n    });\n\n    this.#disabled = disabled;\n    this.setIntervalLength(interval);\n\n    this.#selectedAddress =\n      selectedAddress ??\n      this.messagingSystem.call('AccountsController:getSelectedAccount')\n        .address;\n\n    const { chainId, networkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId();\n    this.#networkClientId = networkClientId;\n\n    const { useTokenDetection: defaultUseTokenDetection } =\n      this.messagingSystem.call('PreferencesController:getState');\n    this.#isDetectionEnabledFromPreferences = defaultUseTokenDetection;\n    this.#isDetectionEnabledForNetwork =\n      isTokenDetectionSupportedForNetwork(chainId);\n\n    this.#getBalancesInSingleCall = getBalancesInSingleCall;\n\n    this.#getTokensState = getTokensState;\n\n    this.#trackMetaMetricsEvent = trackMetaMetricsEvent;\n\n    const { isUnlocked } = this.messagingSystem.call(\n      'KeyringController:getState',\n    );\n    this.#isUnlocked = isUnlocked;\n\n    this.#registerEventListeners();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system subscriptions to controller events.\n   */\n  #registerEventListeners() {\n    this.messagingSystem.subscribe('KeyringController:unlock', async () => {\n      this.#isUnlocked = true;\n      await this.#restartTokenDetection();\n    });\n\n    this.messagingSystem.subscribe('KeyringController:lock', () => {\n      this.#isUnlocked = false;\n      this.#stopPolling();\n    });\n\n    this.messagingSystem.subscribe(\n      'TokenListController:stateChange',\n      async ({ tokenList }) => {\n        const hasTokens = Object.keys(tokenList).length;\n\n        if (hasTokens) {\n          await this.#restartTokenDetection();\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      async ({ selectedAddress: newSelectedAddress, useTokenDetection }) => {\n        const isSelectedAddressChanged =\n          this.#selectedAddress !== newSelectedAddress;\n        const isDetectionChangedFromPreferences =\n          this.#isDetectionEnabledFromPreferences !== useTokenDetection;\n\n        this.#selectedAddress = newSelectedAddress;\n        this.#isDetectionEnabledFromPreferences = useTokenDetection;\n\n        if (isSelectedAddressChanged || isDetectionChangedFromPreferences) {\n          await this.#restartTokenDetection({\n            selectedAddress: this.#selectedAddress,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'AccountsController:selectedAccountChange',\n      async ({ address: newSelectedAddress }) => {\n        const isSelectedAddressChanged =\n          this.#selectedAddress !== newSelectedAddress;\n        if (isSelectedAddressChanged) {\n          this.#selectedAddress = newSelectedAddress;\n          await this.#restartTokenDetection({\n            selectedAddress: this.#selectedAddress,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'NetworkController:networkDidChange',\n      async ({ selectedNetworkClientId }) => {\n        const isNetworkClientIdChanged =\n          this.#networkClientId !== selectedNetworkClientId;\n\n        const { chainId: newChainId } =\n          this.#getCorrectChainIdAndNetworkClientId(selectedNetworkClientId);\n        this.#isDetectionEnabledForNetwork =\n          isTokenDetectionSupportedForNetwork(newChainId);\n\n        if (isNetworkClientIdChanged && this.#isDetectionEnabledForNetwork) {\n          this.#networkClientId = selectedNetworkClientId;\n          await this.#restartTokenDetection({\n            networkClientId: this.#networkClientId,\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Internal isActive state\n   * @type {boolean}\n   */\n  get isActive(): boolean {\n    return !this.#disabled && this.#isUnlocked;\n  }\n\n  /**\n   * Start polling for detected tokens.\n   */\n  async start(): Promise<void> {\n    this.enable();\n    await this.#startPolling();\n  }\n\n  /**\n   * Stop polling for detected tokens.\n   */\n  stop(): void {\n    this.disable();\n    this.#stopPolling();\n  }\n\n  #stopPolling(): void {\n    if (this.#intervalId) {\n      clearInterval(this.#intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   */\n  async #startPolling(): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    this.#stopPolling();\n    await this.detectTokens();\n    this.#intervalId = setInterval(async () => {\n      await this.detectTokens();\n    }, this.getIntervalLength());\n  }\n\n  #getCorrectChainIdAndNetworkClientId(networkClientId?: NetworkClientId): {\n    chainId: Hex;\n    networkClientId: NetworkClientId;\n  } {\n    if (networkClientId) {\n      const networkConfiguration = this.messagingSystem.call(\n        'NetworkController:getNetworkConfigurationByNetworkClientId',\n        networkClientId,\n      );\n      if (networkConfiguration) {\n        return {\n          chainId: networkConfiguration.chainId,\n          networkClientId,\n        };\n      }\n    }\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId,\n      networkClientId: selectedNetworkClientId,\n    };\n  }\n\n  async _executePoll(\n    networkClientId: NetworkClientId,\n    options: { address: string },\n  ): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress: options.address,\n    });\n  }\n\n  /**\n   * Restart token detection polling period and call detectNewTokens\n   * in case of address change or user session initialization.\n   *\n   * @param options - Options for restart token detection.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances\n   * @param options.networkClientId - The ID of the network client to use.\n   */\n  async #restartTokenDetection({\n    selectedAddress,\n    networkClientId,\n  }: {\n    selectedAddress?: string;\n    networkClientId?: NetworkClientId;\n  } = {}): Promise<void> {\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress,\n    });\n    this.setIntervalLength(DEFAULT_INTERVAL);\n  }\n\n  /**\n   * For each token in the token list provided by the TokenListController, checks the token's balance for the selected account address on the active network.\n   * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.\n   *\n   * @param options - Options for token detection.\n   * @param options.networkClientId - The ID of the network client to use.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances.\n   */\n  async detectTokens({\n    networkClientId,\n    selectedAddress,\n  }: {\n    networkClientId?: NetworkClientId;\n    selectedAddress?: string;\n  } = {}): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n\n    const addressAgainstWhichToDetect =\n      selectedAddress ?? this.#selectedAddress;\n    const { chainId, networkClientId: selectedNetworkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId(networkClientId);\n    const chainIdAgainstWhichToDetect = chainId;\n    const networkClientIdAgainstWhichToDetect = selectedNetworkClientId;\n\n    if (!isTokenDetectionSupportedForNetwork(chainIdAgainstWhichToDetect)) {\n      return;\n    }\n    if (\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect !== ChainId.mainnet\n    ) {\n      return;\n    }\n    const isTokenDetectionInactiveInMainnet =\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect === ChainId.mainnet;\n    const { tokensChainsCache } = this.messagingSystem.call(\n      'TokenListController:getState',\n    );\n    this.#tokenList = isTokenDetectionInactiveInMainnet\n      ? STATIC_MAINNET_TOKEN_LIST\n      : tokensChainsCache[chainIdAgainstWhichToDetect]?.data ?? {};\n\n    for (const tokensSlice of this.#getSlicesOfTokensToDetect({\n      chainId: chainIdAgainstWhichToDetect,\n      selectedAddress: addressAgainstWhichToDetect,\n    })) {\n      await this.#addDetectedTokens({\n        tokensSlice,\n        selectedAddress: addressAgainstWhichToDetect,\n        networkClientId: networkClientIdAgainstWhichToDetect,\n        chainId: chainIdAgainstWhichToDetect,\n      });\n    }\n  }\n\n  #getSlicesOfTokensToDetect({\n    chainId,\n    selectedAddress,\n  }: {\n    chainId: Hex;\n    selectedAddress: string;\n  }): string[][] {\n    const { allTokens, allDetectedTokens, allIgnoredTokens } =\n      this.#getTokensState();\n    const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [\n      allTokens,\n      allDetectedTokens,\n      allIgnoredTokens,\n    ].map((tokens) =>\n      (tokens[chainId]?.[selectedAddress] ?? []).map((value) =>\n        typeof value === 'string' ? value : value.address,\n      ),\n    );\n\n    const tokensToDetect: string[] = [];\n    for (const tokenAddress of Object.keys(this.#tokenList)) {\n      if (\n        [\n          tokensAddresses,\n          detectedTokensAddresses,\n          ignoredTokensAddresses,\n        ].every(\n          (addresses) =>\n            !addresses.find((address) =>\n              isEqualCaseInsensitive(address, tokenAddress),\n            ),\n        )\n      ) {\n        tokensToDetect.push(tokenAddress);\n      }\n    }\n\n    const slicesOfTokensToDetect = [];\n    for (let i = 0, size = 1000; i < tokensToDetect.length; i += size) {\n      slicesOfTokensToDetect.push(tokensToDetect.slice(i, i + size));\n    }\n\n    return slicesOfTokensToDetect;\n  }\n\n  async #addDetectedTokens({\n    tokensSlice,\n    selectedAddress,\n    networkClientId,\n    chainId,\n  }: {\n    tokensSlice: string[];\n    selectedAddress: string;\n    networkClientId: NetworkClientId;\n    chainId: Hex;\n  }): Promise<void> {\n    await safelyExecute(async () => {\n      const balances = await this.#getBalancesInSingleCall(\n        selectedAddress,\n        tokensSlice,\n        networkClientId,\n      );\n\n      const tokensWithBalance: Token[] = [];\n      const eventTokensDetails: string[] = [];\n      for (const nonZeroTokenAddress of Object.keys(balances)) {\n        const { decimals, symbol, aggregators, iconUrl, name } =\n          this.#tokenList[nonZeroTokenAddress];\n        eventTokensDetails.push(`${symbol} - ${nonZeroTokenAddress}`);\n        tokensWithBalance.push({\n          address: nonZeroTokenAddress,\n          decimals,\n          symbol,\n          aggregators,\n          image: iconUrl,\n          isERC721: false,\n          name,\n        });\n      }\n\n      if (tokensWithBalance.length) {\n        this.#trackMetaMetricsEvent({\n          event: 'Token Detected',\n          category: 'Wallet',\n          properties: {\n            tokens: eventTokensDetails,\n            token_standard: 'ERC20',\n            asset_type: 'TOKEN',\n          },\n        });\n\n        await this.messagingSystem.call(\n          'TokensController:addDetectedTokens',\n          tokensWithBalance,\n          {\n            selectedAddress,\n            chainId,\n          },\n        );\n      }\n    });\n  }\n}\n\nexport default TokenDetectionController;\n"],"mappings":"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","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-HDI4L2DD.js b/node_modules/@metamask/assets-controllers/dist/chunk-ZHDWNR3L.js
similarity index 95%
rename from node_modules/@metamask/assets-controllers/dist/chunk-HDI4L2DD.js
rename to node_modules/@metamask/assets-controllers/dist/chunk-ZHDWNR3L.js
index 76e3362..93fbe5b 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-HDI4L2DD.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-ZHDWNR3L.js
@@ -34,7 +34,7 @@ var STATIC_MAINNET_TOKEN_LIST = Object.entries(
   };
 }, {});
 var controllerName = "TokenDetectionController";
-var _intervalId, _selectedAddress, _networkClientId, _tokenList, _disabled, _isUnlocked, _isDetectionEnabledFromPreferences, _isDetectionEnabledForNetwork, _getBalancesInSingleCall, _trackMetaMetricsEvent, _registerEventListeners, registerEventListeners_fn, _stopPolling, stopPolling_fn, _startPolling, startPolling_fn, _getCorrectChainIdAndNetworkClientId, getCorrectChainIdAndNetworkClientId_fn, _restartTokenDetection, restartTokenDetection_fn, _getSlicesOfTokensToDetect, getSlicesOfTokensToDetect_fn, _addDetectedTokens, addDetectedTokens_fn;
+var _intervalId, _selectedAddress, _networkClientId, _tokenList, _disabled, _isUnlocked, _isDetectionEnabledFromPreferences, _isDetectionEnabledForNetwork, _getBalancesInSingleCall, _getTokensState, _trackMetaMetricsEvent, _registerEventListeners, registerEventListeners_fn, _stopPolling, stopPolling_fn, _startPolling, startPolling_fn, _getCorrectChainIdAndNetworkClientId, getCorrectChainIdAndNetworkClientId_fn, _restartTokenDetection, restartTokenDetection_fn, _getSlicesOfTokensToDetect, getSlicesOfTokensToDetect_fn, _addDetectedTokens, addDetectedTokens_fn;
 var TokenDetectionController = class extends _pollingcontroller.StaticIntervalPollingController {
   /**
    * Creates a TokenDetectionController instance.
@@ -52,6 +52,7 @@ var TokenDetectionController = class extends _pollingcontroller.StaticIntervalPo
     interval = DEFAULT_INTERVAL,
     disabled = true,
     getBalancesInSingleCall,
+    getTokensState,
     trackMetaMetricsEvent,
     messenger
   }) {
@@ -91,6 +92,7 @@ var TokenDetectionController = class extends _pollingcontroller.StaticIntervalPo
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isDetectionEnabledFromPreferences, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isDetectionEnabledForNetwork, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getBalancesInSingleCall, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getTokensState, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _trackMetaMetricsEvent, void 0);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _disabled, disabled);
     this.setIntervalLength(interval);
@@ -101,6 +103,7 @@ var TokenDetectionController = class extends _pollingcontroller.StaticIntervalPo
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isDetectionEnabledFromPreferences, defaultUseTokenDetection);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isDetectionEnabledForNetwork, _chunkNEXY7SE2js.isTokenDetectionSupportedForNetwork.call(void 0, chainId));
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getBalancesInSingleCall, getBalancesInSingleCall);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getTokensState, getTokensState);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _trackMetaMetricsEvent, trackMetaMetricsEvent);
     const { isUnlocked } = this.messagingSystem.call(
       "KeyringController:getState"
@@ -202,6 +205,7 @@ _isUnlocked = new WeakMap();
 _isDetectionEnabledFromPreferences = new WeakMap();
 _isDetectionEnabledForNetwork = new WeakMap();
 _getBalancesInSingleCall = new WeakMap();
+_getTokensState = new WeakMap();
 _trackMetaMetricsEvent = new WeakMap();
 _registerEventListeners = new WeakSet();
 registerEventListeners_fn = function() {
@@ -324,7 +328,7 @@ getSlicesOfTokensToDetect_fn = function({
   chainId,
   selectedAddress
 }) {
-  const { allTokens, allDetectedTokens, allIgnoredTokens } = this.messagingSystem.call("TokensController:getState");
+  const { allTokens, allDetectedTokens, allIgnoredTokens } = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getTokensState).call(this);
   const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [
     allTokens,
     allDetectedTokens,
@@ -408,4 +412,4 @@ var TokenDetectionController_default = TokenDetectionController;
 
 
 exports.isEqualCaseInsensitive = isEqualCaseInsensitive; exports.STATIC_MAINNET_TOKEN_LIST = STATIC_MAINNET_TOKEN_LIST; exports.controllerName = controllerName; exports.TokenDetectionController = TokenDetectionController; exports.TokenDetectionController_default = TokenDetectionController_default;
-//# sourceMappingURL=chunk-HDI4L2DD.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-ZHDWNR3L.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-ZHDWNR3L.js.map b/node_modules/@metamask/assets-controllers/dist/chunk-ZHDWNR3L.js.map
new file mode 100644
index 0000000..f569c9a
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-ZHDWNR3L.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/TokenDetectionController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerSelectedAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport contractMap from '@metamask/contract-metadata';\nimport { ChainId, safelyExecute } from '@metamask/controller-utils';\nimport type {\n  KeyringControllerGetStateAction,\n  KeyringControllerLockEvent,\n  KeyringControllerUnlockEvent,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetNetworkConfigurationByNetworkClientId,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n} from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { isTokenDetectionSupportedForNetwork } from './assetsUtil';\nimport type {\n  GetTokenListState,\n  TokenListMap,\n  TokenListStateChange,\n} from './TokenListController';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerGetStateAction,\n  TokensState,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\n/**\n * Compare 2 given strings and return boolean\n * eg: \"foo\" and \"FOO\" => true\n * eg: \"foo\" and \"bar\" => false\n * eg: \"foo\" and 123 => false\n *\n * @param value1 - first string to compare\n * @param value2 - first string to compare\n * @returns true if 2 strings are identical when they are lowercase\n */\nexport function isEqualCaseInsensitive(\n  value1: string,\n  value2: string,\n): boolean {\n  if (typeof value1 !== 'string' || typeof value2 !== 'string') {\n    return false;\n  }\n  return value1.toLowerCase() === value2.toLowerCase();\n}\n\ntype LegacyToken = {\n  name: string;\n  logo: `${string}.svg`;\n  symbol: string;\n  decimals: number;\n  erc20?: boolean;\n  erc721?: boolean;\n};\n\ntype TokenDetectionMap = {\n  [P in keyof TokenListMap]: Omit<TokenListMap[P], 'occurrences'>;\n};\n\nexport const STATIC_MAINNET_TOKEN_LIST = Object.entries<LegacyToken>(\n  contractMap,\n).reduce<TokenDetectionMap>((acc, [base, contract]) => {\n  const { logo, erc20, erc721, ...tokenMetadata } = contract;\n  return {\n    ...acc,\n    [base.toLowerCase()]: {\n      ...tokenMetadata,\n      address: base.toLowerCase(),\n      iconUrl: `images/contract/${logo}`,\n      aggregators: [],\n    },\n  };\n}, {});\n\nexport const controllerName = 'TokenDetectionController';\n\nexport type TokenDetectionState = Record<never, never>;\n\nexport type TokenDetectionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenDetectionState\n>;\n\nexport type TokenDetectionControllerActions =\n  TokenDetectionControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetNetworkConfigurationByNetworkClientId\n  | NetworkControllerGetStateAction\n  | GetTokenListState\n  | KeyringControllerGetStateAction\n  | PreferencesControllerGetStateAction\n  | TokensControllerGetStateAction\n  | TokensControllerAddDetectedTokensAction;\n\nexport type TokenDetectionControllerStateChangeEvent =\n  ControllerStateChangeEvent<typeof controllerName, TokenDetectionState>;\n\nexport type TokenDetectionControllerEvents =\n  TokenDetectionControllerStateChangeEvent;\n\nexport type AllowedEvents =\n  | AccountsControllerSelectedAccountChangeEvent\n  | NetworkControllerNetworkDidChangeEvent\n  | TokenListStateChange\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | PreferencesControllerStateChangeEvent;\n\nexport type TokenDetectionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenDetectionControllerActions | AllowedActions,\n  TokenDetectionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Controller that passively polls on a set interval for Tokens auto detection\n * @property intervalId - Polling interval used to fetch new token rates\n * @property selectedAddress - Vault selected address\n * @property networkClientId - The network client ID of the current selected network\n * @property disabled - Boolean to track if network requests are blocked\n * @property isUnlocked - Boolean to track if the keyring state is unlocked\n * @property isDetectionEnabledFromPreferences - Boolean to track if detection is enabled from PreferencesController\n * @property isDetectionEnabledForNetwork - Boolean to track if detected is enabled for current network\n */\nexport class TokenDetectionController extends StaticIntervalPollingController<\n  typeof controllerName,\n  TokenDetectionState,\n  TokenDetectionControllerMessenger\n> {\n  #intervalId?: ReturnType<typeof setTimeout>;\n\n  #selectedAddress: string;\n\n  #networkClientId: NetworkClientId;\n\n  #tokenList: TokenDetectionMap = {};\n\n  #disabled: boolean;\n\n  #isUnlocked: boolean;\n\n  #isDetectionEnabledFromPreferences: boolean;\n\n  #isDetectionEnabledForNetwork: boolean;\n\n  readonly #getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n\n  readonly #getTokensState: () => TokensState;\n\n  readonly #trackMetaMetricsEvent: (options: {\n    event: string;\n    category: string;\n    properties: {\n      tokens: string[];\n      token_standard: string;\n      asset_type: string;\n    };\n  }) => void;\n\n  /**\n   * Creates a TokenDetectionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The controller messaging system.\n   * @param options.disabled - If set to true, all network requests are blocked.\n   * @param options.interval - Polling interval used to fetch new token rates\n   * @param options.selectedAddress - Vault selected address\n   * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.\n   * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.\n   */\n  constructor({\n    selectedAddress,\n    interval = DEFAULT_INTERVAL,\n    disabled = true,\n    getBalancesInSingleCall,\n    getTokensState,\n    trackMetaMetricsEvent,\n    messenger,\n  }: {\n    selectedAddress?: string;\n    interval?: number;\n    disabled?: boolean;\n    getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n    getTokensState: () => TokensState;\n    trackMetaMetricsEvent: (options: {\n      event: string;\n      category: string;\n      properties: {\n        tokens: string[];\n        token_standard: string;\n        asset_type: string;\n      };\n    }) => void;\n    messenger: TokenDetectionControllerMessenger;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: {},\n      metadata: {},\n    });\n\n    this.#disabled = disabled;\n    this.setIntervalLength(interval);\n\n    this.#selectedAddress =\n      selectedAddress ??\n      this.messagingSystem.call('AccountsController:getSelectedAccount')\n        .address;\n\n    const { chainId, networkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId();\n    this.#networkClientId = networkClientId;\n\n    const { useTokenDetection: defaultUseTokenDetection } =\n      this.messagingSystem.call('PreferencesController:getState');\n    this.#isDetectionEnabledFromPreferences = defaultUseTokenDetection;\n    this.#isDetectionEnabledForNetwork =\n      isTokenDetectionSupportedForNetwork(chainId);\n\n    this.#getBalancesInSingleCall = getBalancesInSingleCall;\n\n    this.#getTokensState = getTokensState;\n\n    this.#trackMetaMetricsEvent = trackMetaMetricsEvent;\n\n    const { isUnlocked } = this.messagingSystem.call(\n      'KeyringController:getState',\n    );\n    this.#isUnlocked = isUnlocked;\n\n    this.#registerEventListeners();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system subscriptions to controller events.\n   */\n  #registerEventListeners() {\n    this.messagingSystem.subscribe('KeyringController:unlock', async () => {\n      this.#isUnlocked = true;\n      await this.#restartTokenDetection();\n    });\n\n    this.messagingSystem.subscribe('KeyringController:lock', () => {\n      this.#isUnlocked = false;\n      this.#stopPolling();\n    });\n\n    this.messagingSystem.subscribe(\n      'TokenListController:stateChange',\n      async ({ tokenList }) => {\n        const hasTokens = Object.keys(tokenList).length;\n\n        if (hasTokens) {\n          await this.#restartTokenDetection();\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      async ({ selectedAddress: newSelectedAddress, useTokenDetection }) => {\n        const isSelectedAddressChanged =\n          this.#selectedAddress !== newSelectedAddress;\n        const isDetectionChangedFromPreferences =\n          this.#isDetectionEnabledFromPreferences !== useTokenDetection;\n\n        this.#selectedAddress = newSelectedAddress;\n        this.#isDetectionEnabledFromPreferences = useTokenDetection;\n\n        if (isSelectedAddressChanged || isDetectionChangedFromPreferences) {\n          await this.#restartTokenDetection({\n            selectedAddress: this.#selectedAddress,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'AccountsController:selectedAccountChange',\n      async ({ address: newSelectedAddress }) => {\n        const isSelectedAddressChanged =\n          this.#selectedAddress !== newSelectedAddress;\n        if (isSelectedAddressChanged) {\n          this.#selectedAddress = newSelectedAddress;\n          await this.#restartTokenDetection({\n            selectedAddress: this.#selectedAddress,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'NetworkController:networkDidChange',\n      async ({ selectedNetworkClientId }) => {\n        const isNetworkClientIdChanged =\n          this.#networkClientId !== selectedNetworkClientId;\n\n        const { chainId: newChainId } =\n          this.#getCorrectChainIdAndNetworkClientId(selectedNetworkClientId);\n        this.#isDetectionEnabledForNetwork =\n          isTokenDetectionSupportedForNetwork(newChainId);\n\n        if (isNetworkClientIdChanged && this.#isDetectionEnabledForNetwork) {\n          this.#networkClientId = selectedNetworkClientId;\n          await this.#restartTokenDetection({\n            networkClientId: this.#networkClientId,\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Internal isActive state\n   * @type {boolean}\n   */\n  get isActive(): boolean {\n    return !this.#disabled && this.#isUnlocked;\n  }\n\n  /**\n   * Start polling for detected tokens.\n   */\n  async start(): Promise<void> {\n    this.enable();\n    await this.#startPolling();\n  }\n\n  /**\n   * Stop polling for detected tokens.\n   */\n  stop(): void {\n    this.disable();\n    this.#stopPolling();\n  }\n\n  #stopPolling(): void {\n    if (this.#intervalId) {\n      clearInterval(this.#intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   */\n  async #startPolling(): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    this.#stopPolling();\n    await this.detectTokens();\n    this.#intervalId = setInterval(async () => {\n      await this.detectTokens();\n    }, this.getIntervalLength());\n  }\n\n  #getCorrectChainIdAndNetworkClientId(networkClientId?: NetworkClientId): {\n    chainId: Hex;\n    networkClientId: NetworkClientId;\n  } {\n    if (networkClientId) {\n      const networkConfiguration = this.messagingSystem.call(\n        'NetworkController:getNetworkConfigurationByNetworkClientId',\n        networkClientId,\n      );\n      if (networkConfiguration) {\n        return {\n          chainId: networkConfiguration.chainId,\n          networkClientId,\n        };\n      }\n    }\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId,\n      networkClientId: selectedNetworkClientId,\n    };\n  }\n\n  async _executePoll(\n    networkClientId: NetworkClientId,\n    options: { address: string },\n  ): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress: options.address,\n    });\n  }\n\n  /**\n   * Restart token detection polling period and call detectNewTokens\n   * in case of address change or user session initialization.\n   *\n   * @param options - Options for restart token detection.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances\n   * @param options.networkClientId - The ID of the network client to use.\n   */\n  async #restartTokenDetection({\n    selectedAddress,\n    networkClientId,\n  }: {\n    selectedAddress?: string;\n    networkClientId?: NetworkClientId;\n  } = {}): Promise<void> {\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress,\n    });\n    this.setIntervalLength(DEFAULT_INTERVAL);\n  }\n\n  /**\n   * For each token in the token list provided by the TokenListController, checks the token's balance for the selected account address on the active network.\n   * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.\n   *\n   * @param options - Options for token detection.\n   * @param options.networkClientId - The ID of the network client to use.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances.\n   */\n  async detectTokens({\n    networkClientId,\n    selectedAddress,\n  }: {\n    networkClientId?: NetworkClientId;\n    selectedAddress?: string;\n  } = {}): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n\n    const addressAgainstWhichToDetect =\n      selectedAddress ?? this.#selectedAddress;\n    const { chainId, networkClientId: selectedNetworkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId(networkClientId);\n    const chainIdAgainstWhichToDetect = chainId;\n    const networkClientIdAgainstWhichToDetect = selectedNetworkClientId;\n\n    if (!isTokenDetectionSupportedForNetwork(chainIdAgainstWhichToDetect)) {\n      return;\n    }\n    if (\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect !== ChainId.mainnet\n    ) {\n      return;\n    }\n    const isTokenDetectionInactiveInMainnet =\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect === ChainId.mainnet;\n    const { tokensChainsCache } = this.messagingSystem.call(\n      'TokenListController:getState',\n    );\n    this.#tokenList = isTokenDetectionInactiveInMainnet\n      ? STATIC_MAINNET_TOKEN_LIST\n      : tokensChainsCache[chainIdAgainstWhichToDetect]?.data ?? {};\n\n    for (const tokensSlice of this.#getSlicesOfTokensToDetect({\n      chainId: chainIdAgainstWhichToDetect,\n      selectedAddress: addressAgainstWhichToDetect,\n    })) {\n      await this.#addDetectedTokens({\n        tokensSlice,\n        selectedAddress: addressAgainstWhichToDetect,\n        networkClientId: networkClientIdAgainstWhichToDetect,\n        chainId: chainIdAgainstWhichToDetect,\n      });\n    }\n  }\n\n  #getSlicesOfTokensToDetect({\n    chainId,\n    selectedAddress,\n  }: {\n    chainId: Hex;\n    selectedAddress: string;\n  }): string[][] {\n    const { allTokens, allDetectedTokens, allIgnoredTokens } =\n      this.#getTokensState();\n    const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [\n      allTokens,\n      allDetectedTokens,\n      allIgnoredTokens,\n    ].map((tokens) =>\n      (tokens[chainId]?.[selectedAddress] ?? []).map((value) =>\n        typeof value === 'string' ? value : value.address,\n      ),\n    );\n\n    const tokensToDetect: string[] = [];\n    for (const tokenAddress of Object.keys(this.#tokenList)) {\n      if (\n        [\n          tokensAddresses,\n          detectedTokensAddresses,\n          ignoredTokensAddresses,\n        ].every(\n          (addresses) =>\n            !addresses.find((address) =>\n              isEqualCaseInsensitive(address, tokenAddress),\n            ),\n        )\n      ) {\n        tokensToDetect.push(tokenAddress);\n      }\n    }\n\n    const slicesOfTokensToDetect = [];\n    for (let i = 0, size = 1000; i < tokensToDetect.length; i += size) {\n      slicesOfTokensToDetect.push(tokensToDetect.slice(i, i + size));\n    }\n\n    return slicesOfTokensToDetect;\n  }\n\n  async #addDetectedTokens({\n    tokensSlice,\n    selectedAddress,\n    networkClientId,\n    chainId,\n  }: {\n    tokensSlice: string[];\n    selectedAddress: string;\n    networkClientId: NetworkClientId;\n    chainId: Hex;\n  }): Promise<void> {\n    await safelyExecute(async () => {\n      const balances = await this.#getBalancesInSingleCall(\n        selectedAddress,\n        tokensSlice,\n        networkClientId,\n      );\n\n      const tokensWithBalance: Token[] = [];\n      const eventTokensDetails: string[] = [];\n      for (const nonZeroTokenAddress of Object.keys(balances)) {\n        const { decimals, symbol, aggregators, iconUrl, name } =\n          this.#tokenList[nonZeroTokenAddress];\n        eventTokensDetails.push(`${symbol} - ${nonZeroTokenAddress}`);\n        tokensWithBalance.push({\n          address: nonZeroTokenAddress,\n          decimals,\n          symbol,\n          aggregators,\n          image: iconUrl,\n          isERC721: false,\n          name,\n        });\n      }\n\n      if (tokensWithBalance.length) {\n        this.#trackMetaMetricsEvent({\n          event: 'Token Detected',\n          category: 'Wallet',\n          properties: {\n            tokens: eventTokensDetails,\n            token_standard: 'ERC20',\n            asset_type: 'TOKEN',\n          },\n        });\n\n        await this.messagingSystem.call(\n          'TokensController:addDetectedTokens',\n          tokensWithBalance,\n          {\n            selectedAddress,\n            chainId,\n          },\n        );\n      }\n    });\n  }\n}\n\nexport default TokenDetectionController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-LD4GC7OR.js b/node_modules/@metamask/assets-controllers/dist/chunk-ZNKU4YJ7.js
similarity index 75%
rename from node_modules/@metamask/assets-controllers/dist/chunk-LD4GC7OR.js
rename to node_modules/@metamask/assets-controllers/dist/chunk-ZNKU4YJ7.js
index cd8f792..de99029 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-LD4GC7OR.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-ZNKU4YJ7.js
@@ -19,7 +19,7 @@ function getDefaultTokenBalancesState() {
     contractBalances: {}
   };
 }
-var _handle, _getERC20BalanceOf, _interval, _tokens, _disabled;
+var _handle, _getERC20BalanceOf, _interval, _tokens, _disabled, _updateInProgress;
 var TokenBalancesController = class extends _basecontroller.BaseController {
   /**
    * Construct a Token Balances Controller.
@@ -28,6 +28,7 @@ var TokenBalancesController = class extends _basecontroller.BaseController {
    * @param options.interval - Polling interval used to fetch new token balances.
    * @param options.tokens - List of tokens to track balances for.
    * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
+   * @param options.onTokensStateChange - Allows subscribing to token controller state changes.
    * @param options.getERC20BalanceOf - Gets the balance of the given account at the given contract address.
    * @param options.state - Initial state to set on this controller.
    * @param options.messenger - The controller restricted messenger.
@@ -36,6 +37,7 @@ var TokenBalancesController = class extends _basecontroller.BaseController {
     interval = DEFAULT_INTERVAL,
     tokens = [],
     disabled = false,
+    onTokensStateChange,
     getERC20BalanceOf,
     messenger,
     state = {}
@@ -54,16 +56,14 @@ var TokenBalancesController = class extends _basecontroller.BaseController {
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _interval, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _tokens, void 0);
     _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _disabled, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateInProgress, false);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _disabled, disabled);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _interval, interval);
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _tokens, tokens);
-    this.messagingSystem.subscribe(
-      "TokensController:stateChange",
-      ({ tokens: newTokens, detectedTokens }) => {
-        _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _tokens, [...newTokens, ...detectedTokens]);
-        this.updateBalances();
-      }
-    );
+    onTokensStateChange(async ({ tokens: newTokens, detectedTokens }) => {
+      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _tokens, [...newTokens, ...detectedTokens]);
+      await this.updateBalances();
+    });
     _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getERC20BalanceOf, getERC20BalanceOf);
     this.poll();
   }
@@ -100,28 +100,38 @@ var TokenBalancesController = class extends _basecontroller.BaseController {
    * Updates balances for all tokens.
    */
   async updateBalances() {
-    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _disabled)) {
+    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _disabled) || _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _updateInProgress)) {
       return;
     }
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _updateInProgress, true);
     const newContractBalances = {};
-    for (const token of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _tokens)) {
+    const balancePromises = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _tokens).map((token) => {
       const { address } = token;
       const { selectedAddress } = this.messagingSystem.call(
         "PreferencesController:getState"
       );
-      try {
-        newContractBalances[address] = _controllerutils.toHex.call(void 0, 
-          await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getERC20BalanceOf).call(this, address, selectedAddress)
-        );
+      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getERC20BalanceOf).call(this, address, selectedAddress).then((balance) => {
+        newContractBalances[address] = _controllerutils.toHex.call(void 0, balance);
         token.balanceError = null;
-      } catch (error) {
+      }).catch((error) => {
         newContractBalances[address] = _controllerutils.toHex.call(void 0, 0);
         token.balanceError = error;
-      }
-    }
+      });
+    });
+    await Promise.all(balancePromises);
     this.update((state) => {
       state.contractBalances = newContractBalances;
     });
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _updateInProgress, false);
+  }
+  /**
+   * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+   * Resets to the default state
+   */
+  reset() {
+    this.update((state) => {
+      state.contractBalances = {};
+    });
   }
 };
 _handle = new WeakMap();
@@ -129,6 +139,7 @@ _getERC20BalanceOf = new WeakMap();
 _interval = new WeakMap();
 _tokens = new WeakMap();
 _disabled = new WeakMap();
+_updateInProgress = new WeakMap();
 var TokenBalancesController_default = TokenBalancesController;
 
 
@@ -136,4 +147,4 @@ var TokenBalancesController_default = TokenBalancesController;
 
 
 exports.getDefaultTokenBalancesState = getDefaultTokenBalancesState; exports.TokenBalancesController = TokenBalancesController; exports.TokenBalancesController_default = TokenBalancesController_default;
-//# sourceMappingURL=chunk-LD4GC7OR.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-ZNKU4YJ7.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-ZNKU4YJ7.js.map b/node_modules/@metamask/assets-controllers/dist/chunk-ZNKU4YJ7.js.map
new file mode 100644
index 0000000..b75dff6
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-ZNKU4YJ7.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA,EAIE;AAAA,OACK;AACP,SAAS,eAAe,aAAa;AAUrC,IAAM,mBAAmB;AAEzB,IAAM,iBAAiB;AAEvB,IAAM,WAAW;AAAA,EACf,kBAAkB,EAAE,SAAS,MAAM,WAAW,MAAM;AACtD;AAkEO,SAAS,+BAA6D;AAC3E,SAAO;AAAA,IACL,kBAAkB,CAAC;AAAA,EACrB;AACF;AA5FA;AAkGO,IAAM,0BAAN,cAAsC,eAI3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBA,YAAY;AAAA,IACV,WAAW;AAAA,IACX,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ,CAAC;AAAA,EACX,GAAmC;AACjC,UAAM;AAAA,MACJ,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,OAAO;AAAA,QACL,GAAG,6BAA6B;AAAA,QAChC,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AAzCH;AAEA;AAEA;AAEA;AAEA;AAEA,0CAAoB;AAiClB,uBAAK,WAAY;AACjB,uBAAK,WAAY;AACjB,uBAAK,SAAU;AAEf,wBAAoB,OAAO,EAAE,QAAQ,WAAW,eAAe,MAAM;AACnE,yBAAK,SAAU,CAAC,GAAG,WAAW,GAAG,cAAc;AAC/C,YAAM,KAAK,eAAe;AAAA,IAC5B,CAAC;AAED,uBAAK,oBAAqB;AAE1B,SAAK,KAAK;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACR,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,UAAkC;AAC3C,QAAI,UAAU;AACZ,yBAAK,WAAY;AAAA,IACnB;AAEA,QAAI,mBAAK,UAAS;AAChB,mBAAa,mBAAK,QAAO;AAAA,IAC3B;AAEA,UAAM,cAAc,MAAM,KAAK,eAAe,CAAC;AAE/C,uBAAK,SAAU,WAAW,MAAM;AAC9B,WAAK,KAAK,mBAAK,UAAS;AAAA,IAC1B,GAAG,mBAAK,UAAS;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB;AACrB,QAAI,mBAAK,cAAa,mBAAK,oBAAmB;AAC5C;AAAA,IACF;AACA,uBAAK,mBAAoB;AACzB,UAAM,sBAAwC,CAAC;AAC/C,UAAM,kBAAkB,mBAAK,SAAQ,IAAI,CAAC,UAAU;AAClD,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,EAAE,gBAAgB,IAAI,KAAK,gBAAgB;AAAA,QAC/C;AAAA,MACF;AAEA,aAAO,mBAAK,oBAAL,WAAwB,SAAS,iBACrC,KAAK,CAAC,YAAY;AACjB,4BAAoB,OAAO,IAAI,MAAM,OAAO;AAC5C,cAAM,eAAe;AAAA,MACvB,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,4BAAoB,OAAO,IAAI,MAAM,CAAC;AACtC,cAAM,eAAe;AAAA,MACvB,CAAC;AAAA,IACL,CAAC;AAED,UAAM,QAAQ,IAAI,eAAe;AAEjC,SAAK,OAAO,CAAC,UAAU;AACrB,YAAM,mBAAmB;AAAA,IAC3B,CAAC;AACD,uBAAK,mBAAoB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ;AACN,SAAK,OAAO,CAAC,UAAU;AACrB,YAAM,mBAAmB,CAAC;AAAA,IAC5B,CAAC;AAAA,EACH;AACF;AAvIE;AAEA;AAEA;AAEA;AAEA;AAEA;AA+HF,IAAO,kCAAQ","sourcesContent":["import {\n  type RestrictedControllerMessenger,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  BaseController,\n} from '@metamask/base-controller';\nimport { safelyExecute, toHex } from '@metamask/controller-utils';\nimport type { PreferencesControllerGetStateAction } from '@metamask/preferences-controller';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerStateChangeEvent,\n  TokensState,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  contractBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property tokens - List of tokens to track balances for.\n * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.\n * @property getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  tokens?: Token[];\n  disabled?: boolean;\n  onTokensStateChange: (listener: (tokensState: TokensState) => void) => void;\n  getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * Represents a mapping of hash token contract addresses to their balances.\n */\ntype ContractBalances = Record<string, string>;\n\n/**\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport type TokenBalancesControllerState = {\n  contractBalances: ContractBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions = PreferencesControllerGetStateAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    contractBalances: {},\n  };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n\n  #interval: number;\n\n  #tokens: Token[];\n\n  #disabled: boolean;\n\n  #updateInProgress = false;\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.tokens - List of tokens to track balances for.\n   * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.\n   * @param options.onTokensStateChange - Allows subscribing to token controller state changes.\n   * @param options.getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    tokens = [],\n    disabled = false,\n    onTokensStateChange,\n    getERC20BalanceOf,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.#disabled = disabled;\n    this.#interval = interval;\n    this.#tokens = tokens;\n\n    onTokensStateChange(async ({ tokens: newTokens, detectedTokens }) => {\n      this.#tokens = [...newTokens, ...detectedTokens];\n      await this.updateBalances();\n    });\n\n    this.#getERC20BalanceOf = getERC20BalanceOf;\n\n    this.poll();\n  }\n\n  /**\n   * Allows controller to update tracked tokens contract balances.\n   */\n  enable() {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from updating tracked tokens contract balances.\n   */\n  disable() {\n    this.#disabled = true;\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.#interval = interval;\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await safelyExecute(() => this.updateBalances());\n\n    this.#handle = setTimeout(() => {\n      this.poll(this.#interval);\n    }, this.#interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.#disabled || this.#updateInProgress) {\n      return;\n    }\n    this.#updateInProgress = true;\n    const newContractBalances: ContractBalances = {};\n    const balancePromises = this.#tokens.map((token) => {\n      const { address } = token;\n      const { selectedAddress } = this.messagingSystem.call(\n        'PreferencesController:getState',\n      );\n\n      return this.#getERC20BalanceOf(address, selectedAddress)\n        .then((balance) => {\n          newContractBalances[address] = toHex(balance);\n          token.balanceError = null;\n        })\n        .catch((error) => {\n          newContractBalances[address] = toHex(0);\n          token.balanceError = error;\n        });\n    });\n\n    await Promise.all(balancePromises);\n\n    this.update((state) => {\n      state.contractBalances = newContractBalances;\n    });\n    this.#updateInProgress = false;\n  }\n\n  /**\n   * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO\n   * Resets to the default state\n   */\n  reset() {\n    this.update((state) => {\n      state.contractBalances = {};\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-PAJTKWEC.mjs b/node_modules/@metamask/assets-controllers/dist/chunk-ZUICS5OS.mjs
similarity index 99%
rename from node_modules/@metamask/assets-controllers/dist/chunk-PAJTKWEC.mjs
rename to node_modules/@metamask/assets-controllers/dist/chunk-ZUICS5OS.mjs
index 58047d9..f1290a8 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-PAJTKWEC.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-ZUICS5OS.mjs
@@ -80,9 +80,8 @@ var AccountTrackerController = class extends StaticIntervalPollingControllerV1 {
             [chainId]: accountsForChain
           }
         });
-      } catch (err) {
+      } finally {
         releaseLock();
-        throw err;
       }
     };
     this.defaultConfig = {
@@ -243,4 +242,4 @@ export {
   AccountTrackerController,
   AccountTrackerController_default
 };
-//# sourceMappingURL=chunk-PAJTKWEC.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-ZUICS5OS.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-ZUICS5OS.mjs.map b/node_modules/@metamask/assets-controllers/dist/chunk-ZUICS5OS.mjs.map
new file mode 100644
index 0000000..e65c0f8
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-ZUICS5OS.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/AccountTrackerController.ts"],"sourcesContent":["import type { BaseConfig, BaseState } from '@metamask/base-controller';\nimport { query, safelyExecuteWithTimeout } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { Provider } from '@metamask/eth-query';\nimport type {\n  NetworkClientId,\n  NetworkController,\n  NetworkState,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingControllerV1 } from '@metamask/polling-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\nimport { assert } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport { cloneDeep } from 'lodash';\n\n/**\n * @type AccountInformation\n *\n * Account information object\n * @property balance - Hex string of an account balancec in wei\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountInformation {\n  balance: Hex | undefined;\n}\n\n/**\n * @type AccountTrackerConfig\n *\n * Account tracker controller configuration\n * @property provider - Provider used to create a new underlying EthQuery instance\n */\n// This interface was created before this ESLint rule was added.\n// Remove in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountTrackerConfig extends BaseConfig {\n  interval: number;\n  provider?: Provider;\n}\n\n/**\n * @type AccountTrackerState\n *\n * Account tracker controller state\n * @property accounts - Map of addresses to account information\n */\n// This interface was created before this ESLint rule was added.\n// Remove in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AccountTrackerState extends BaseState {\n  accounts: { [address: string]: AccountInformation };\n  accountsByChainId: Record<string, { [address: string]: AccountInformation }>;\n}\n\n/**\n * Controller that tracks the network balances for all user accounts.\n */\nexport class AccountTrackerController extends StaticIntervalPollingControllerV1<\n  AccountTrackerConfig,\n  AccountTrackerState\n> {\n  private _provider?: Provider;\n\n  private readonly refreshMutex = new Mutex();\n\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private syncAccounts(newChainId: string) {\n    const accounts = { ...this.state.accounts };\n    const accountsByChainId = cloneDeep(this.state.accountsByChainId);\n\n    const existing = Object.keys(accounts);\n    if (!accountsByChainId[newChainId]) {\n      accountsByChainId[newChainId] = {};\n      existing.forEach((address) => {\n        accountsByChainId[newChainId][address] = { balance: '0x0' };\n      });\n    }\n\n    const addresses = Object.keys(this.getIdentities());\n    const newAddresses = addresses.filter(\n      (address) => !existing.includes(address),\n    );\n    const oldAddresses = existing.filter(\n      (address) => !addresses.includes(address),\n    );\n    newAddresses.forEach((address) => {\n      accounts[address] = { balance: '0x0' };\n    });\n    Object.keys(accountsByChainId).forEach((chainId) => {\n      newAddresses.forEach((address) => {\n        accountsByChainId[chainId][address] = {\n          balance: '0x0',\n        };\n      });\n    });\n\n    oldAddresses.forEach((address) => {\n      delete accounts[address];\n    });\n    Object.keys(accountsByChainId).forEach((chainId) => {\n      oldAddresses.forEach((address) => {\n        delete accountsByChainId[chainId][address];\n      });\n    });\n\n    this.update({ accounts, accountsByChainId });\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'AccountTrackerController';\n\n  private readonly getIdentities: () => PreferencesState['identities'];\n\n  private readonly getSelectedAddress: () => PreferencesState['selectedAddress'];\n\n  private readonly getMultiAccountBalancesEnabled: () => PreferencesState['isMultiAccountBalancesEnabled'];\n\n  private readonly getCurrentChainId: () => NetworkState['providerConfig']['chainId'];\n\n  private readonly getNetworkClientById: NetworkController['getNetworkClientById'];\n\n  /**\n   * Creates an AccountTracker instance.\n   *\n   * @param options - The controller options.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.getIdentities - Gets the identities from the Preferences store.\n   * @param options.getSelectedAddress - Gets the selected address from the Preferences store.\n   * @param options.getMultiAccountBalancesEnabled - Gets the multi account balances enabled flag from the Preferences store.\n   * @param options.getCurrentChainId - Gets the chain ID for the current network from the Network store.\n   * @param options.getNetworkClientById - Gets the network client with the given id from the NetworkController.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      onPreferencesStateChange,\n      getIdentities,\n      getSelectedAddress,\n      getMultiAccountBalancesEnabled,\n      getCurrentChainId,\n      getNetworkClientById,\n    }: {\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      getIdentities: () => PreferencesState['identities'];\n      getSelectedAddress: () => PreferencesState['selectedAddress'];\n      getMultiAccountBalancesEnabled: () => PreferencesState['isMultiAccountBalancesEnabled'];\n      getCurrentChainId: () => NetworkState['providerConfig']['chainId'];\n      getNetworkClientById: NetworkController['getNetworkClientById'];\n    },\n    config?: Partial<AccountTrackerConfig>,\n    state?: Partial<AccountTrackerState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 10000,\n    };\n    this.defaultState = {\n      accounts: {},\n      accountsByChainId: {\n        [getCurrentChainId()]: {},\n      },\n    };\n    this.initialize();\n    this.setIntervalLength(this.config.interval);\n    this.getIdentities = getIdentities;\n    this.getSelectedAddress = getSelectedAddress;\n    this.getMultiAccountBalancesEnabled = getMultiAccountBalancesEnabled;\n    this.getCurrentChainId = getCurrentChainId;\n    this.getNetworkClientById = getNetworkClientById;\n    onPreferencesStateChange(() => {\n      this.refresh();\n    });\n    this.poll();\n  }\n\n  /**\n   * Sets a new provider.\n   *\n   * TODO: Replace this wth a method.\n   *\n   * @param provider - Provider used to create a new underlying EthQuery instance.\n   */\n  set provider(provider: Provider) {\n    this._provider = provider;\n  }\n\n  get provider() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Resolves a networkClientId to a network client config\n   * or globally selected network config if not provided\n   *\n   * @param networkClientId - Optional networkClientId to fetch a network client with\n   * @returns network client config\n   */\n  #getCorrectNetworkClient(networkClientId?: NetworkClientId): {\n    chainId: string;\n    ethQuery?: EthQuery;\n  } {\n    if (networkClientId) {\n      const networkClient = this.getNetworkClientById(networkClientId);\n\n      return {\n        chainId: networkClient.configuration.chainId,\n        ethQuery: new EthQuery(networkClient.provider),\n      };\n    }\n\n    return {\n      chainId: this.getCurrentChainId(),\n      ethQuery: this._provider ? new EthQuery(this._provider) : undefined,\n    };\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval trigger a 'refresh'.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await this.refresh();\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Refreshes the balances of the accounts using the networkClientId\n   *\n   * @param networkClientId - The network client ID used to get balances.\n   */\n  async _executePoll(networkClientId: string): Promise<void> {\n    this.refresh(networkClientId);\n  }\n\n  /**\n   * Refreshes the balances of the accounts depending on the multi-account setting.\n   * If multi-account is disabled, only updates the selected account balance.\n   * If multi-account is enabled, updates balances for all accounts.\n   *\n   * @param networkClientId - Optional networkClientId to fetch a network client with\n   */\n  refresh = async (networkClientId?: NetworkClientId) => {\n    const releaseLock = await this.refreshMutex.acquire();\n    try {\n      const { chainId, ethQuery } =\n        this.#getCorrectNetworkClient(networkClientId);\n      this.syncAccounts(chainId);\n      const { accounts, accountsByChainId } = this.state;\n      const isMultiAccountBalancesEnabled =\n        this.getMultiAccountBalancesEnabled();\n\n      const accountsToUpdate = isMultiAccountBalancesEnabled\n        ? Object.keys(accounts)\n        : [this.getSelectedAddress()];\n\n      const accountsForChain = { ...accountsByChainId[chainId] };\n      for (const address of accountsToUpdate) {\n        const balance = await this.getBalanceFromChain(address, ethQuery);\n        if (balance) {\n          accountsForChain[address] = {\n            balance,\n          };\n        }\n      }\n\n      this.update({\n        ...(chainId === this.getCurrentChainId() && {\n          accounts: accountsForChain,\n        }),\n        accountsByChainId: {\n          ...this.state.accountsByChainId,\n          [chainId]: accountsForChain,\n        },\n      });\n    } finally {\n      /**\n       * This change is not present on the core repo\n       */\n      releaseLock();\n    }\n  };\n\n  /**\n   * Fetches the balance of a given address from the blockchain.\n   *\n   * @param address - The account address to fetch the balance for.\n   * @param ethQuery - The EthQuery instance to query getBalnce with.\n   * @returns A promise that resolves to the balance in a hex string format.\n   */\n  private async getBalanceFromChain(\n    address: string,\n    ethQuery?: EthQuery,\n  ): Promise<Hex | undefined> {\n    return await safelyExecuteWithTimeout(async () => {\n      assert(ethQuery, 'Provider not set.');\n      return await query(ethQuery, 'getBalance', [address]);\n    });\n  }\n\n  /**\n   * Sync accounts balances with some additional addresses.\n   *\n   * @param addresses - the additional addresses, may be hardware wallet addresses.\n   * @param networkClientId - Optional networkClientId to fetch a network client with.\n   * @returns accounts - addresses with synced balance\n   */\n  async syncBalanceWithAddresses(\n    addresses: string[],\n    networkClientId?: NetworkClientId,\n  ): Promise<Record<string, { balance: string }>> {\n    const { ethQuery } = this.#getCorrectNetworkClient(networkClientId);\n\n    return await Promise.all(\n      addresses.map((address): Promise<[string, string] | undefined> => {\n        return safelyExecuteWithTimeout(async () => {\n          assert(ethQuery, 'Provider not set.');\n          const balance = await query(ethQuery, 'getBalance', [address]);\n          return [address, balance];\n        });\n      }),\n    ).then((value) => {\n      return value.reduce((obj, item) => {\n        if (!item) {\n          return obj;\n        }\n\n        const [address, balance] = item;\n        return {\n          ...obj,\n          [address]: {\n            balance,\n          },\n        };\n      }, {});\n    });\n  }\n}\n\nexport default AccountTrackerController;\n"],"mappings":"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","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/index.js b/node_modules/@metamask/assets-controllers/dist/index.js
index 6a2713f..62f4be4 100644
--- a/node_modules/@metamask/assets-controllers/dist/index.js
+++ b/node_modules/@metamask/assets-controllers/dist/index.js
@@ -8,7 +8,7 @@ var _chunk6W5EQ3JQjs = require('./chunk-6W5EQ3JQ.js');
 var _chunkZ6TBQQE5js = require('./chunk-Z6TBQQE5.js');
 
 
-var _chunkMBCN3MNXjs = require('./chunk-MBCN3MNX.js');
+var _chunk4X5RKBLGjs = require('./chunk-4X5RKBLG.js');
 require('./chunk-XC3SOOGC.js');
 
 
@@ -16,15 +16,15 @@ require('./chunk-XC3SOOGC.js');
 var _chunkYIFA2HXHjs = require('./chunk-YIFA2HXH.js');
 
 
-var _chunkV4ZO3F2Sjs = require('./chunk-V4ZO3F2S.js');
+var _chunkT4WDZHE7js = require('./chunk-T4WDZHE7.js');
 
 
 
 
-var _chunk4ODKGWYQjs = require('./chunk-4ODKGWYQ.js');
+var _chunkEXQ3O54Ljs = require('./chunk-EXQ3O54L.js');
 require('./chunk-U3DJJN4X.js');
-require('./chunk-B5YY22QQ.js');
 require('./chunk-BOTVAG4A.js');
+require('./chunk-B5YY22QQ.js');
 
 
 var _chunkELSMS5S7js = require('./chunk-ELSMS5S7.js');
@@ -33,7 +33,7 @@ require('./chunk-WB6KJX4N.js');
 
 
 
-var _chunkLAU6ZDZRjs = require('./chunk-LAU6ZDZR.js');
+var _chunkPTBS4GL6js = require('./chunk-PTBS4GL6.js');
 
 
 
@@ -41,10 +41,10 @@ var _chunkFMZML3V5js = require('./chunk-FMZML3V5.js');
 require('./chunk-RGHTNZQ6.js');
 
 
-var _chunkLD4GC7ORjs = require('./chunk-LD4GC7OR.js');
+var _chunkZNKU4YJ7js = require('./chunk-ZNKU4YJ7.js');
 
 
-var _chunkHDI4L2DDjs = require('./chunk-HDI4L2DD.js');
+var _chunkZHDWNR3Ljs = require('./chunk-ZHDWNR3L.js');
 
 
 var _chunk5F5EQAX5js = require('./chunk-5F5EQAX5.js');
@@ -79,5 +79,5 @@ require('./chunk-Z4BLTVTB.js');
 
 
 
-exports.AccountTrackerController = _chunkV4ZO3F2Sjs.AccountTrackerController; exports.AssetsContractController = _chunk4ODKGWYQjs.AssetsContractController; exports.BlockaidResultType = _chunkFMZML3V5js.BlockaidResultType; exports.CodefiTokenPricesServiceV2 = _chunkZ6TBQQE5js.CodefiTokenPricesServiceV2; exports.Cryptocurrency = _chunkYIFA2HXHjs.Cryptocurrency; exports.CurrencyRateController = _chunkELSMS5S7js.CurrencyRateController; exports.MISSING_PROVIDER_ERROR = _chunk4ODKGWYQjs.MISSING_PROVIDER_ERROR; exports.NftController = _chunkLAU6ZDZRjs.NftController; exports.NftDetectionController = _chunkFMZML3V5js.NftDetectionController; exports.RatesController = _chunkYIFA2HXHjs.RatesController; exports.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = _chunk4ODKGWYQjs.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID; exports.SUPPORTED_CHAIN_IDS = _chunkZ6TBQQE5js.SUPPORTED_CHAIN_IDS; exports.TokenBalancesController = _chunkLD4GC7ORjs.TokenBalancesController; exports.TokenDetectionController = _chunkHDI4L2DDjs.TokenDetectionController; exports.TokenListController = _chunk5F5EQAX5js.TokenListController; exports.TokenRatesController = _chunk6W5EQ3JQjs.TokenRatesController; exports.TokensController = _chunkMBCN3MNXjs.TokensController; exports.fetchTokenContractExchangeRates = _chunkNEXY7SE2js.fetchTokenContractExchangeRates; exports.formatIconUrlWithProxy = _chunkNEXY7SE2js.formatIconUrlWithProxy; exports.getDefaultNftState = _chunkLAU6ZDZRjs.getDefaultNftState; exports.getFormattedIpfsUrl = _chunkNEXY7SE2js.getFormattedIpfsUrl; exports.isTokenDetectionSupportedForNetwork = _chunkNEXY7SE2js.isTokenDetectionSupportedForNetwork;
+exports.AccountTrackerController = _chunkT4WDZHE7js.AccountTrackerController; exports.AssetsContractController = _chunkEXQ3O54Ljs.AssetsContractController; exports.BlockaidResultType = _chunkFMZML3V5js.BlockaidResultType; exports.CodefiTokenPricesServiceV2 = _chunkZ6TBQQE5js.CodefiTokenPricesServiceV2; exports.Cryptocurrency = _chunkYIFA2HXHjs.Cryptocurrency; exports.CurrencyRateController = _chunkELSMS5S7js.CurrencyRateController; exports.MISSING_PROVIDER_ERROR = _chunkEXQ3O54Ljs.MISSING_PROVIDER_ERROR; exports.NftController = _chunkPTBS4GL6js.NftController; exports.NftDetectionController = _chunkFMZML3V5js.NftDetectionController; exports.RatesController = _chunkYIFA2HXHjs.RatesController; exports.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = _chunkEXQ3O54Ljs.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID; exports.SUPPORTED_CHAIN_IDS = _chunkZ6TBQQE5js.SUPPORTED_CHAIN_IDS; exports.TokenBalancesController = _chunkZNKU4YJ7js.TokenBalancesController; exports.TokenDetectionController = _chunkZHDWNR3Ljs.TokenDetectionController; exports.TokenListController = _chunk5F5EQAX5js.TokenListController; exports.TokenRatesController = _chunk6W5EQ3JQjs.TokenRatesController; exports.TokensController = _chunk4X5RKBLGjs.TokensController; exports.fetchTokenContractExchangeRates = _chunkNEXY7SE2js.fetchTokenContractExchangeRates; exports.formatIconUrlWithProxy = _chunkNEXY7SE2js.formatIconUrlWithProxy; exports.getDefaultNftState = _chunkPTBS4GL6js.getDefaultNftState; exports.getFormattedIpfsUrl = _chunkNEXY7SE2js.getFormattedIpfsUrl; exports.isTokenDetectionSupportedForNetwork = _chunkNEXY7SE2js.isTokenDetectionSupportedForNetwork;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/index.mjs b/node_modules/@metamask/assets-controllers/dist/index.mjs
index 13187ba..c268237 100644
--- a/node_modules/@metamask/assets-controllers/dist/index.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/index.mjs
@@ -8,7 +8,7 @@ import {
 } from "./chunk-Y35SM7TO.mjs";
 import {
   TokensController
-} from "./chunk-7MMEHAKG.mjs";
+} from "./chunk-3I3OJS23.mjs";
 import "./chunk-JYHAAA6W.mjs";
 import {
   Cryptocurrency,
@@ -16,15 +16,15 @@ import {
 } from "./chunk-B5YVX5IO.mjs";
 import {
   AccountTrackerController
-} from "./chunk-PAJTKWEC.mjs";
+} from "./chunk-ZUICS5OS.mjs";
 import {
   AssetsContractController,
   MISSING_PROVIDER_ERROR,
   SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID
-} from "./chunk-MHN7CJCZ.mjs";
+} from "./chunk-HFJC7WCX.mjs";
 import "./chunk-ASA5RLBY.mjs";
-import "./chunk-D3K5MPMW.mjs";
 import "./chunk-LZ5ZGQEX.mjs";
+import "./chunk-D3K5MPMW.mjs";
 import {
   CurrencyRateController
 } from "./chunk-B6W4CQOR.mjs";
@@ -33,7 +33,7 @@ import "./chunk-CNKVITJO.mjs";
 import {
   NftController,
   getDefaultNftState
-} from "./chunk-46UZDIXW.mjs";
+} from "./chunk-I44BWCJJ.mjs";
 import {
   BlockaidResultType,
   NftDetectionController
@@ -41,10 +41,10 @@ import {
 import "./chunk-CP3HC7AQ.mjs";
 import {
   TokenBalancesController
-} from "./chunk-4LY47RPI.mjs";
+} from "./chunk-ASBEJZFL.mjs";
 import {
   TokenDetectionController
-} from "./chunk-MR6EF4B7.mjs";
+} from "./chunk-VGIPTYXN.mjs";
 import {
   TokenListController
 } from "./chunk-XHMM35YT.mjs";
diff --git a/node_modules/@metamask/assets-controllers/dist/tsconfig.build.tsbuildinfo b/node_modules/@metamask/assets-controllers/dist/tsconfig.build.tsbuildinfo
index 66ab16e..4d40f63 100644
--- a/node_modules/@metamask/assets-controllers/dist/tsconfig.build.tsbuildinfo
+++ b/node_modules/@metamask/assets-controllers/dist/tsconfig.build.tsbuildinfo
@@ -1 +1 @@
-{"program":{"fileNames":["../../../node_modules/typescript/lib/lib.es5.d.ts","../../../node_modules/typescript/lib/lib.es2015.d.ts","../../../node_modules/typescript/lib/lib.es2016.d.ts","../../../node_modules/typescript/lib/lib.es2017.d.ts","../../../node_modules/typescript/lib/lib.es2018.d.ts","../../../node_modules/typescript/lib/lib.es2019.d.ts","../../../node_modules/typescript/lib/lib.es2020.d.ts","../../../node_modules/typescript/lib/lib.dom.d.ts","../../../node_modules/typescript/lib/lib.es2015.core.d.ts","../../../node_modules/typescript/lib/lib.es2015.collection.d.ts","../../../node_modules/typescript/lib/lib.es2015.generator.d.ts","../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../../../node_modules/typescript/lib/lib.es2015.promise.d.ts","../../../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../../../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../../../node_modules/typescript/lib/lib.es2017.object.d.ts","../../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2017.string.d.ts","../../../node_modules/typescript/lib/lib.es2017.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../../../node_modules/typescript/lib/lib.es2018.intl.d.ts","../../../node_modules/typescript/lib/lib.es2018.promise.d.ts","../../../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../../../node_modules/typescript/lib/lib.es2019.array.d.ts","../../../node_modules/typescript/lib/lib.es2019.object.d.ts","../../../node_modules/typescript/lib/lib.es2019.string.d.ts","../../../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2019.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../../../node_modules/typescript/lib/lib.es2020.date.d.ts","../../../node_modules/typescript/lib/lib.es2020.promise.d.ts","../../../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2020.string.d.ts","../../../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2020.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.number.d.ts","../../../node_modules/typescript/lib/lib.esnext.intl.d.ts","../../../types/eth-ens-namehash.d.ts","../../../types/ethereum-ens-network-map.d.ts","../../../types/global.d.ts","../../../types/single-call-balance-checker-abi.d.ts","../../../types/@metamask/contract-metadata.d.ts","../../../types/@metamask/eth-hd-keyring.d.ts","../../../types/@metamask/eth-simple-keyring.d.ts","../../../types/@metamask/ethjs-provider-http.d.ts","../../../types/@metamask/ethjs-unit.d.ts","../../../types/@metamask/metamask-eth-abis.d.ts","../../../types/eth-json-rpc-infura/src/createProvider.d.ts","../../../types/eth-phishing-detect/src/config.json.d.ts","../../../types/eth-phishing-detect/src/detector.d.ts","../../base-controller/dist/types/BaseControllerV1.d.ts","../../../node_modules/superstruct/dist/error.d.ts","../../../node_modules/superstruct/dist/utils.d.ts","../../../node_modules/superstruct/dist/struct.d.ts","../../../node_modules/superstruct/dist/structs/coercions.d.ts","../../../node_modules/superstruct/dist/structs/refinements.d.ts","../../../node_modules/superstruct/dist/structs/types.d.ts","../../../node_modules/superstruct/dist/structs/utilities.d.ts","../../../node_modules/superstruct/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/assert.d.ts","../../../node_modules/@metamask/utils/dist/types/base64.d.ts","../../../node_modules/@metamask/utils/dist/types/hex.d.ts","../../../node_modules/@metamask/utils/dist/types/bytes.d.ts","../../../node_modules/@metamask/utils/dist/types/caip-types.d.ts","../../../node_modules/@metamask/utils/dist/types/checksum.d.ts","../../../node_modules/@metamask/utils/dist/types/coercers.d.ts","../../../node_modules/@metamask/utils/dist/types/collections.d.ts","../../../node_modules/@metamask/utils/dist/types/encryption-types.d.ts","../../../node_modules/@metamask/utils/dist/types/errors.d.ts","../../../node_modules/@metamask/utils/dist/types/json.d.ts","../../../node_modules/@types/node/assert.d.ts","../../../node_modules/@types/node/assert/strict.d.ts","../../../node_modules/@types/node/globals.d.ts","../../../node_modules/@types/node/async_hooks.d.ts","../../../node_modules/@types/node/buffer.d.ts","../../../node_modules/@types/node/child_process.d.ts","../../../node_modules/@types/node/cluster.d.ts","../../../node_modules/@types/node/console.d.ts","../../../node_modules/@types/node/constants.d.ts","../../../node_modules/@types/node/crypto.d.ts","../../../node_modules/@types/node/dgram.d.ts","../../../node_modules/@types/node/diagnostics_channel.d.ts","../../../node_modules/@types/node/dns.d.ts","../../../node_modules/@types/node/dns/promises.d.ts","../../../node_modules/@types/node/dom-events.d.ts","../../../node_modules/@types/node/domain.d.ts","../../../node_modules/@types/node/events.d.ts","../../../node_modules/@types/node/fs.d.ts","../../../node_modules/@types/node/fs/promises.d.ts","../../../node_modules/@types/node/http.d.ts","../../../node_modules/@types/node/http2.d.ts","../../../node_modules/@types/node/https.d.ts","../../../node_modules/@types/node/inspector.d.ts","../../../node_modules/@types/node/module.d.ts","../../../node_modules/@types/node/net.d.ts","../../../node_modules/@types/node/os.d.ts","../../../node_modules/@types/node/path.d.ts","../../../node_modules/@types/node/perf_hooks.d.ts","../../../node_modules/@types/node/process.d.ts","../../../node_modules/@types/node/punycode.d.ts","../../../node_modules/@types/node/querystring.d.ts","../../../node_modules/@types/node/readline.d.ts","../../../node_modules/@types/node/repl.d.ts","../../../node_modules/@types/node/stream.d.ts","../../../node_modules/@types/node/stream/promises.d.ts","../../../node_modules/@types/node/stream/consumers.d.ts","../../../node_modules/@types/node/stream/web.d.ts","../../../node_modules/@types/node/string_decoder.d.ts","../../../node_modules/@types/node/test.d.ts","../../../node_modules/@types/node/timers.d.ts","../../../node_modules/@types/node/timers/promises.d.ts","../../../node_modules/@types/node/tls.d.ts","../../../node_modules/@types/node/trace_events.d.ts","../../../node_modules/@types/node/tty.d.ts","../../../node_modules/@types/node/url.d.ts","../../../node_modules/@types/node/util.d.ts","../../../node_modules/@types/node/v8.d.ts","../../../node_modules/@types/node/vm.d.ts","../../../node_modules/@types/node/wasi.d.ts","../../../node_modules/@types/node/worker_threads.d.ts","../../../node_modules/@types/node/zlib.d.ts","../../../node_modules/@types/node/globals.global.d.ts","../../../node_modules/@types/node/index.d.ts","../../../node_modules/@ethereumjs/common/dist/enums.d.ts","../../../node_modules/@ethereumjs/common/dist/types.d.ts","../../../node_modules/buffer/index.d.ts","../../../node_modules/@ethereumjs/util/dist/constants.d.ts","../../../node_modules/@ethereumjs/util/dist/units.d.ts","../../../node_modules/@ethereumjs/util/dist/address.d.ts","../../../node_modules/@ethereumjs/util/dist/bytes.d.ts","../../../node_modules/@ethereumjs/util/dist/types.d.ts","../../../node_modules/@ethereumjs/util/dist/account.d.ts","../../../node_modules/@ethereumjs/util/dist/withdrawal.d.ts","../../../node_modules/@ethereumjs/util/dist/signature.d.ts","../../../node_modules/@ethereumjs/util/dist/encoding.d.ts","../../../node_modules/@ethereumjs/util/dist/asyncEventEmitter.d.ts","../../../node_modules/@ethereumjs/util/dist/internal.d.ts","../../../node_modules/@ethereumjs/util/dist/lock.d.ts","../../../node_modules/@ethereumjs/util/dist/provider.d.ts","../../../node_modules/@ethereumjs/util/dist/index.d.ts","../../../node_modules/@ethereumjs/common/dist/common.d.ts","../../../node_modules/@ethereumjs/common/dist/utils.d.ts","../../../node_modules/@ethereumjs/common/dist/index.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip2930Transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/legacyTransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/types.d.ts","../../../node_modules/@ethereumjs/tx/dist/baseTransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip1559Transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/transactionFactory.d.ts","../../../node_modules/@ethereumjs/tx/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/keyring.d.ts","../../../node_modules/@types/ms/index.d.ts","../../../node_modules/@types/debug/index.d.ts","../../../node_modules/@metamask/utils/dist/types/logging.d.ts","../../../node_modules/@metamask/utils/dist/types/misc.d.ts","../../../node_modules/@metamask/utils/dist/types/number.d.ts","../../../node_modules/@metamask/utils/dist/types/opaque.d.ts","../../../node_modules/@metamask/utils/dist/types/promise.d.ts","../../../node_modules/@metamask/utils/dist/types/time.d.ts","../../../node_modules/@metamask/utils/dist/types/transaction-types.d.ts","../../../node_modules/@metamask/utils/dist/types/versions.d.ts","../../../node_modules/@metamask/utils/dist/types/index.d.ts","../../../node_modules/immer/dist/utils/env.d.ts","../../../node_modules/immer/dist/utils/errors.d.ts","../../../node_modules/immer/dist/types/types-external.d.ts","../../../node_modules/immer/dist/types/types-internal.d.ts","../../../node_modules/immer/dist/utils/common.d.ts","../../../node_modules/immer/dist/utils/plugins.d.ts","../../../node_modules/immer/dist/core/scope.d.ts","../../../node_modules/immer/dist/core/finalize.d.ts","../../../node_modules/immer/dist/core/proxy.d.ts","../../../node_modules/immer/dist/core/immerClass.d.ts","../../../node_modules/immer/dist/core/current.d.ts","../../../node_modules/immer/dist/internal.d.ts","../../../node_modules/immer/dist/plugins/es5.d.ts","../../../node_modules/immer/dist/plugins/patches.d.ts","../../../node_modules/immer/dist/plugins/mapset.d.ts","../../../node_modules/immer/dist/plugins/all.d.ts","../../../node_modules/immer/dist/immer.d.ts","../../base-controller/dist/types/RestrictedControllerMessenger.d.ts","../../base-controller/dist/types/ControllerMessenger.d.ts","../../base-controller/dist/types/BaseControllerV2.d.ts","../../base-controller/dist/types/index.d.ts","../../controller-utils/dist/types/types.d.ts","../../controller-utils/dist/types/constants.d.ts","../../../node_modules/@metamask/eth-query/index.d.ts","../../../node_modules/@types/bn.js/index.d.ts","../../controller-utils/dist/types/util.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/abnf.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/utils.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/parsers.d.ts","../../controller-utils/dist/types/siwe.d.ts","../../controller-utils/dist/types/index.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/types.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/createEventEmitterProxy.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/createSwappableProxy.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/index.d.ts","../../network-controller/dist/types/constants.d.ts","../../../node_modules/@metamask/safe-event-emitter/dist/cjs/index.d.ts","../../json-rpc-engine/dist/types/JsonRpcEngine.d.ts","../../json-rpc-engine/dist/types/createAsyncMiddleware.d.ts","../../json-rpc-engine/dist/types/createScaffoldMiddleware.d.ts","../../json-rpc-engine/dist/types/getUniqueId.d.ts","../../json-rpc-engine/dist/types/idRemapMiddleware.d.ts","../../json-rpc-engine/dist/types/mergeMiddleware.d.ts","../../json-rpc-engine/dist/types/index.d.ts","../../eth-json-rpc-provider/dist/types/safe-event-emitter-provider.d.ts","../../eth-json-rpc-provider/dist/types/provider-from-engine.d.ts","../../eth-json-rpc-provider/dist/types/provider-from-middleware.d.ts","../../eth-json-rpc-provider/dist/types/index.d.ts","../../../node_modules/@metamask/eth-block-tracker/dist/BlockTracker.d.ts","../../../node_modules/@metamask/eth-block-tracker/dist/PollingBlockTracker.d.ts","../../../node_modules/@metamask/eth-block-tracker/dist/SubscribeBlockTracker.d.ts","../../../node_modules/@metamask/eth-block-tracker/dist/index.d.ts","../../network-controller/dist/types/types.d.ts","../../network-controller/dist/types/create-auto-managed-network-client.d.ts","../../network-controller/dist/types/NetworkController.d.ts","../../network-controller/dist/types/create-network-client.d.ts","../../network-controller/dist/types/index.d.ts","../../polling-controller/dist/types/types.d.ts","../../polling-controller/dist/types/BlockTrackerPollingController.d.ts","../../polling-controller/dist/types/StaticIntervalPollingController.d.ts","../../polling-controller/dist/types/index.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/patchCBOR.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/lib/DataItem.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/lib/cbor-sync.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/lib/index.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/ur.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/urEncoder.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/fountainEncoder.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/fountainDecoder.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/urDecoder.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/index.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/RegistryType.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/RegistryItem.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/CryptoCoinInfo.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/PathComponent.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/CryptoKeypath.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/types.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/CryptoHDKey.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/CryptoECKey.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/Bytes.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/MultiKey.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/ScriptExpression.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/CryptoOutput.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/CryptoPSBT.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/CryptoAccount.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/Decoder/index.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/extended/CryptoMultiAccounts.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/errors/index.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/extended/DerivationSchema.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/extended/KeyDerivation.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/extended/QRHardwareCall.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/utils.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/index.d.ts","../../../node_modules/@keystonehq/bc-ur-registry-eth/dist/EthSignRequest.d.ts","../../../node_modules/@keystonehq/bc-ur-registry-eth/dist/EthSignature.d.ts","../../../node_modules/@keystonehq/bc-ur-registry-eth/dist/ETHNFTItem.d.ts","../../../node_modules/@keystonehq/bc-ur-registry-eth/dist/utlis.d.ts","../../../node_modules/@keystonehq/bc-ur-registry-eth/dist/index.d.ts","../../../node_modules/@keystonehq/base-eth-keyring/dist/InteractionProvider.d.ts","../../../node_modules/@keystonehq/base-eth-keyring/dist/BaseKeyring.d.ts","../../../node_modules/@keystonehq/base-eth-keyring/dist/index.d.ts","../../../node_modules/@types/readable-stream/node_modules/safe-buffer/index.d.ts","../../../node_modules/@types/readable-stream/index.d.ts","../../../node_modules/@metamask/obs-store/dist/ObservableStore.d.ts","../../../node_modules/@metamask/obs-store/dist/asStream.d.ts","../../../node_modules/@metamask/obs-store/dist/ComposedStore.d.ts","../../../node_modules/@metamask/obs-store/dist/MergedStore.d.ts","../../../node_modules/@metamask/obs-store/dist/transform.d.ts","../../../node_modules/@metamask/obs-store/dist/index.d.ts","../../../node_modules/@keystonehq/metamask-airgapped-keyring/dist/MetaMaskInteractionProvider.d.ts","../../../node_modules/@keystonehq/metamask-airgapped-keyring/dist/MetaMaskKeyring.d.ts","../../../node_modules/@keystonehq/metamask-airgapped-keyring/dist/index.d.ts","../../../node_modules/@metamask/browser-passworder/dist/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/base-types.d.ts","../../../node_modules/@metamask/keyring-api/dist/btc/types.d.ts","../../../node_modules/@metamask/keyring-api/dist/btc/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/superstruct.d.ts","../../../node_modules/@metamask/keyring-api/dist/eth/erc4337/types.d.ts","../../../node_modules/@metamask/keyring-api/dist/eth/erc4337/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/eth/types.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/api.d.ts","../../../node_modules/@metamask/keyring-api/dist/contexts.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/eth/EthKeyring.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/eth/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/events.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/rpc.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/types.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/eth/utils.d.ts","../../../node_modules/@metamask/keyring-api/dist/eth/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/api.d.ts","../../../node_modules/@metamask/keyring-api/dist/events.d.ts","../../../node_modules/@metamask/keyring-api/dist/JsonRpcRequest.d.ts","../../../node_modules/@metamask/keyring-api/dist/KeyringClient.d.ts","../../../node_modules/@metamask/providers/dist/types/utils.d.ts","../../../node_modules/@metamask/providers/dist/types/BaseProvider.d.ts","../../../node_modules/@metamask/providers/dist/types/EIP6963.d.ts","../../../node_modules/@metamask/providers/dist/types/StreamProvider.d.ts","../../../node_modules/@metamask/providers/dist/types/extension-provider/createExternalExtensionProvider.d.ts","../../../node_modules/@metamask/providers/dist/types/MetaMaskInpageProvider.d.ts","../../../node_modules/@metamask/providers/dist/types/initializeInpageProvider.d.ts","../../../node_modules/@metamask/providers/dist/types/shimWeb3.d.ts","../../../node_modules/@metamask/providers/dist/types/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/KeyringSnapRpcClient.d.ts","../../../node_modules/@metamask/keyring-api/dist/rpc-handler.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/utils.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/classes.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/errors.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/error-constants.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/errors.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/error-wrappers.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/errors.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/helpers.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/structs.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/create-interface.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/dialog.d.ts","../../../node_modules/@metamask/key-tree/dist/constants.d.cts","../../../node_modules/@metamask/key-tree/node_modules/@noble/curves/abstract/modular.d.ts","../../../node_modules/@metamask/key-tree/node_modules/@noble/curves/abstract/utils.d.ts","../../../node_modules/@metamask/key-tree/node_modules/@noble/curves/abstract/curve.d.ts","../../../node_modules/@metamask/key-tree/dist/curves/ed25519.d.cts","../../../node_modules/@metamask/key-tree/dist/curves/ed25519Bip32.d.cts","../../../node_modules/@metamask/key-tree/node_modules/@noble/curves/abstract/weierstrass.d.ts","../../../node_modules/@metamask/key-tree/dist/curves/secp256k1.d.cts","../../../node_modules/@metamask/key-tree/dist/curves/curve.d.cts","../../../node_modules/@metamask/key-tree/dist/curves/index.d.cts","../../../node_modules/@metamask/key-tree/dist/utils.d.cts","../../../node_modules/@metamask/key-tree/dist/BIP44CoinTypeNode.d.cts","../../../node_modules/@metamask/key-tree/dist/SLIP10Node.d.cts","../../../node_modules/@metamask/key-tree/dist/BIP44Node.d.cts","../../../node_modules/@metamask/key-tree/dist/derivers/bip32.d.cts","../../../node_modules/@metamask/key-tree/dist/derivers/bip39.d.cts","../../../node_modules/@metamask/key-tree/dist/derivers/cip3.d.cts","../../../node_modules/@metamask/key-tree/dist/derivers/slip10.d.cts","../../../node_modules/@metamask/key-tree/dist/derivers/index.d.cts","../../../node_modules/@metamask/key-tree/dist/index.d.cts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/caip.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/permissions.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-bip32-entropy.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-bip32-public-key.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-bip44-entropy.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-client-status.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-entropy.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-file.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/component.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/Address.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/Box.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/Copyable.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/Divider.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/form/Button.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/form/Input.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/form/Field.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/form/Form.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/form/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/formatting/Bold.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/formatting/Italic.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/formatting/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/Heading.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/Image.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/Link.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/Text.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/Row.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/Spinner.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/jsx-runtime.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/jsx-dev-runtime.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/validation.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/nodes.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/address.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/copyable.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/divider.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/heading.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/image.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/panel.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/spinner.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/text.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/row.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/button.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/input.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/form.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/component.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/interface.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-interface-state.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-locale.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/snap.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-snaps.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/invoke-snap.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/invoke-keyring.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/manage-accounts.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/manage-state.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/notify.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/request-snaps.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/update-interface.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/methods.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/provider.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/global.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/images.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/cronjob.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/home-page.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/keyring.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/lifecycle.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/name-lookup.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/rpc-request.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/transaction.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/signature.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/user-input.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/jsx.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/svg.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/error-wrappers.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/images.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/snap-utils.d.ts","../../../node_modules/@metamask/keyring-api/dist/index.d.ts","../../message-manager/dist/types/AbstractMessageManager.d.ts","../../message-manager/dist/types/MessageManager.d.ts","../../message-manager/dist/types/PersonalMessageManager.d.ts","../../message-manager/dist/types/TypedMessageManager.d.ts","../../message-manager/dist/types/EncryptionPublicKeyManager.d.ts","../../message-manager/dist/types/DecryptMessageManager.d.ts","../../message-manager/dist/types/index.d.ts","../../keyring-controller/dist/types/KeyringController.d.ts","../../keyring-controller/dist/types/index.d.ts","../../preferences-controller/dist/types/constants.d.ts","../../preferences-controller/dist/types/PreferencesController.d.ts","../../preferences-controller/dist/types/index.d.ts","../../../node_modules/async-mutex/lib/MutexInterface.d.ts","../../../node_modules/async-mutex/lib/Mutex.d.ts","../../../node_modules/async-mutex/lib/SemaphoreInterface.d.ts","../../../node_modules/async-mutex/lib/Semaphore.d.ts","../../../node_modules/async-mutex/lib/withTimeout.d.ts","../../../node_modules/async-mutex/lib/index.d.ts","../../../node_modules/@types/lodash/common/common.d.ts","../../../node_modules/@types/lodash/common/array.d.ts","../../../node_modules/@types/lodash/common/collection.d.ts","../../../node_modules/@types/lodash/common/date.d.ts","../../../node_modules/@types/lodash/common/function.d.ts","../../../node_modules/@types/lodash/common/lang.d.ts","../../../node_modules/@types/lodash/common/math.d.ts","../../../node_modules/@types/lodash/common/number.d.ts","../../../node_modules/@types/lodash/common/object.d.ts","../../../node_modules/@types/lodash/common/seq.d.ts","../../../node_modules/@types/lodash/common/string.d.ts","../../../node_modules/@types/lodash/common/util.d.ts","../../../node_modules/@types/lodash/index.d.ts","../src/AccountTrackerController.ts","../../../node_modules/@ethersproject/bytes/lib/index.d.ts","../../../node_modules/@ethersproject/bignumber/lib/bignumber.d.ts","../../../node_modules/@ethersproject/bignumber/lib/fixednumber.d.ts","../../../node_modules/@ethersproject/bignumber/lib/index.d.ts","../../../node_modules/@ethersproject/abi/lib/fragments.d.ts","../../../node_modules/@ethersproject/abi/lib/coders/abstract-coder.d.ts","../../../node_modules/@ethersproject/abi/lib/abi-coder.d.ts","../../../node_modules/@ethersproject/properties/lib/index.d.ts","../../../node_modules/@ethersproject/abi/lib/interface.d.ts","../../../node_modules/@ethersproject/abi/lib/index.d.ts","../../../node_modules/@ethersproject/networks/lib/types.d.ts","../../../node_modules/@ethersproject/networks/lib/index.d.ts","../../../node_modules/@ethersproject/transactions/lib/index.d.ts","../../../node_modules/@ethersproject/web/lib/index.d.ts","../../../node_modules/@ethersproject/abstract-provider/lib/index.d.ts","../../../node_modules/@ethersproject/abstract-signer/lib/index.d.ts","../../../node_modules/@ethersproject/contracts/lib/index.d.ts","../../../node_modules/@ethersproject/providers/lib/formatter.d.ts","../../../node_modules/@ethersproject/providers/lib/base-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/json-rpc-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/websocket-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/url-json-rpc-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/alchemy-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/ankr-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/cloudflare-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/etherscan-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/fallback-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/ipc-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/infura-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/nodesmith-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/pocket-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/web3-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/index.d.ts","../../../node_modules/multiformats/types/src/bases/interface.d.ts","../../../node_modules/multiformats/types/src/hashes/interface.d.ts","../../../node_modules/multiformats/types/src/cid.d.ts","../../../node_modules/@ethersproject/address/lib/index.d.ts","../../approval-controller/dist/types/ApprovalController.d.ts","../../approval-controller/dist/types/errors.d.ts","../../approval-controller/dist/types/index.d.ts","../../../node_modules/@types/uuid/index.d.ts","../src/constants.ts","../src/NftDetectionController.ts","../src/NftController.ts","../src/token-prices-service/abstract-token-prices-service.ts","../../../node_modules/cockatiel/dist/backoff/ConstantBackoff.d.ts","../../../node_modules/cockatiel/dist/backoff/DelegateBackoff.d.ts","../../../node_modules/cockatiel/dist/backoff/ExponentialBackoffGenerators.d.ts","../../../node_modules/cockatiel/dist/backoff/ExponentialBackoff.d.ts","../../../node_modules/cockatiel/dist/backoff/IterableBackoff.d.ts","../../../node_modules/cockatiel/dist/backoff/Backoff.d.ts","../../../node_modules/cockatiel/dist/common/Event.d.ts","../../../node_modules/cockatiel/dist/BulkheadPolicy.d.ts","../../../node_modules/cockatiel/dist/FallbackPolicy.d.ts","../../../node_modules/cockatiel/dist/NoopPolicy.d.ts","../../../node_modules/cockatiel/dist/RetryPolicy.d.ts","../../../node_modules/cockatiel/dist/TimeoutPolicy.d.ts","../../../node_modules/cockatiel/dist/Policy.d.ts","../../../node_modules/cockatiel/dist/common/Executor.d.ts","../../../node_modules/cockatiel/dist/CircuitBreakerPolicy.d.ts","../../../node_modules/cockatiel/dist/breaker/SamplingBreaker.d.ts","../../../node_modules/cockatiel/dist/breaker/ConsecutiveBreaker.d.ts","../../../node_modules/cockatiel/dist/breaker/Breaker.d.ts","../../../node_modules/cockatiel/dist/errors/BrokenCircuitError.d.ts","../../../node_modules/cockatiel/dist/errors/BulkheadRejectedError.d.ts","../../../node_modules/cockatiel/dist/errors/IsolatedCircuitError.d.ts","../../../node_modules/cockatiel/dist/errors/TaskCancelledError.d.ts","../../../node_modules/cockatiel/dist/errors/Errors.d.ts","../../../node_modules/cockatiel/dist/index.d.ts","../src/token-prices-service/codefi-v2.ts","../src/token-prices-service/index.ts","../src/crypto-compare-service/crypto-compare.ts","../src/crypto-compare-service/index.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/abiERC20.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/abiERC721.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/abiERC1155.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/fiatTokenV2.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/index.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/parser.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/address.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/array.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/bool.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/bytes.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/fixed-bytes.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/function.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/number.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/string.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/tuple.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/index.d.ts","../../../node_modules/@metamask/abi-utils/dist/types/abi.d.ts","../../../node_modules/@metamask/abi-utils/dist/types/index.d.ts","../../../node_modules/@metamask/abi-utils/dist/abi.d.ts","../../../node_modules/@metamask/abi-utils/dist/errors.d.ts","../../../node_modules/@metamask/abi-utils/dist/index.d.ts","../src/Standards/ERC20Standard.ts","../src/Standards/NftStandards/ERC1155/ERC1155Standard.ts","../src/token-service.ts","../src/TokenListController.ts","../src/TokensController.ts","../src/TokenRatesController.ts","../src/assetsUtil.ts","../src/Standards/NftStandards/ERC721/ERC721Standard.ts","../src/AssetsContractController.ts","../src/CurrencyRateController.ts","../src/TokenBalancesController.ts","../../../node_modules/@metamask/object-multiplex/dist/Substream.d.ts","../../../node_modules/@metamask/object-multiplex/dist/ObjectMultiplex.d.ts","../../../node_modules/@metamask/object-multiplex/dist/index.d.ts","../../../node_modules/@metamask/post-message-stream/dist/utils.d.ts","../../../node_modules/@metamask/post-message-stream/dist/BasePostMessageStream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/window/WindowPostMessageStream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/WebWorker/WebWorkerPostMessageStream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/WebWorker/WebWorkerParentPostMessageStream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/node-process/ProcessParentMessageStream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/node-process/ProcessMessageStream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/node-thread/ThreadParentMessageStream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/node-thread/ThreadMessageStream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/runtime/BrowserRuntimePostMessageStream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/index.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/array.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/auxiliary-files.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/virtual-file/VirtualFile.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/virtual-file/index.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/base64.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/bytes.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/caveats.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/checksum.d.ts","../../../node_modules/cron-parser/types/common.d.ts","../../../node_modules/cron-parser/types/index.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/cronjob.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/deep-clone.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/default-endowments.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/derivation-paths.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/entropy.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/errors.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/handler-types.d.ts","../../../node_modules/@metamask/snaps-sdk/jsx-runtime.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/handlers.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/iframe.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/json.d.ts","../../../node_modules/nanoid/index.d.ts","../../../node_modules/@types/deep-freeze-strict/index.d.ts","../../permission-controller/src/permission-middleware.ts","../../permission-controller/src/SubjectMetadataController.ts","../../permission-controller/src/utils.ts","../../permission-controller/src/PermissionController.ts","../../permission-controller/src/Permission.ts","../../permission-controller/src/errors.ts","../../permission-controller/src/Caveat.ts","../../permission-controller/src/rpc-methods/getPermissions.ts","../../permission-controller/src/rpc-methods/requestPermissions.ts","../../permission-controller/src/rpc-methods/revokePermissions.ts","../../permission-controller/src/rpc-methods/index.ts","../../permission-controller/src/index.ts","../../../node_modules/@metamask/snaps-utils/dist/types/json-rpc.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/structs.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/manifest/validation.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/manifest/index.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/localization.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/logging.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/namespace.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/path.d.ts","../../../node_modules/@metamask/snaps-registry/dist/verify.d.ts","../../../node_modules/@metamask/snaps-registry/dist/index.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/types.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/snaps.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/strings.d.ts","../../../node_modules/@metamask/snaps-sdk/jsx.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/ui.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/validation.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/versions.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/Timer.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/ExecutionService.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/AbstractExecutionService.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/ProxyPostMessageStream.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/iframe/IframeExecutionService.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/iframe/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/proxy/ProxyExecutionService.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/offscreen/OffscreenExecutionService.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/offscreen/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/webworker/WebWorkerExecutionService.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/webworker/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/location/npm.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/location/location.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/location/http.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/location/local.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/location/index.d.ts","../../../node_modules/@xstate/fsm/lib/types.d.ts","../../../node_modules/@xstate/fsm/lib/index.d.ts","../../../node_modules/@types/punycode/index.d.ts","../../phishing-controller/src/utils.ts","../../phishing-controller/src/PhishingController.ts","../../phishing-controller/src/index.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/interface/SnapInterfaceController.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/interface/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/types/encryptor.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/types/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/registry/registry.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/registry/json.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/registry/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/SnapController.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/selectors.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/utils.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/cronjob/CronjobController.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/cronjob/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/index.d.ts","../../accounts-controller/dist/types/AccountsController.d.ts","../../accounts-controller/dist/types/utils.d.ts","../../accounts-controller/dist/types/index.d.ts","../src/TokenDetectionController.ts","../src/RatesController/types.ts","../src/RatesController/RatesController.ts","../src/RatesController/index.ts","../src/index.ts","../../../node_modules/@babel/types/lib/index.d.ts","../../../node_modules/@types/babel__generator/index.d.ts","../../../node_modules/@babel/parser/typings/babel-parser.d.ts","../../../node_modules/@types/babel__template/index.d.ts","../../../node_modules/@types/babel__traverse/index.d.ts","../../../node_modules/@types/babel__core/index.d.ts","../../../node_modules/@types/eslint/helpers.d.ts","../../../node_modules/@types/estree/index.d.ts","../../../node_modules/@types/json-schema/index.d.ts","../../../node_modules/@types/eslint/index.d.ts","../../../node_modules/@types/graceful-fs/index.d.ts","../../../node_modules/@types/istanbul-lib-coverage/index.d.ts","../../../node_modules/@types/istanbul-lib-report/index.d.ts","../../../node_modules/@types/istanbul-reports/index.d.ts","../../../node_modules/chalk/index.d.ts","../../../node_modules/jest-diff/build/cleanupSemantic.d.ts","../../../node_modules/pretty-format/build/types.d.ts","../../../node_modules/pretty-format/build/index.d.ts","../../../node_modules/jest-diff/build/types.d.ts","../../../node_modules/jest-diff/build/diffLines.d.ts","../../../node_modules/jest-diff/build/printDiffs.d.ts","../../../node_modules/jest-diff/build/index.d.ts","../../../node_modules/jest-matcher-utils/build/index.d.ts","../../../node_modules/@types/jest/index.d.ts","../../../node_modules/@types/jest-when/index.d.ts","../../../node_modules/@types/json5/index.d.ts","../../../node_modules/@types/minimatch/index.d.ts","../../../node_modules/@types/parse-json/index.d.ts","../../../node_modules/@types/pbkdf2/index.d.ts","../../../node_modules/@types/prettier/index.d.ts","../../../node_modules/@types/secp256k1/index.d.ts","../../../node_modules/@types/semver/classes/semver.d.ts","../../../node_modules/@types/semver/functions/parse.d.ts","../../../node_modules/@types/semver/functions/valid.d.ts","../../../node_modules/@types/semver/functions/clean.d.ts","../../../node_modules/@types/semver/functions/inc.d.ts","../../../node_modules/@types/semver/functions/diff.d.ts","../../../node_modules/@types/semver/functions/major.d.ts","../../../node_modules/@types/semver/functions/minor.d.ts","../../../node_modules/@types/semver/functions/patch.d.ts","../../../node_modules/@types/semver/functions/prerelease.d.ts","../../../node_modules/@types/semver/functions/compare.d.ts","../../../node_modules/@types/semver/functions/rcompare.d.ts","../../../node_modules/@types/semver/functions/compare-loose.d.ts","../../../node_modules/@types/semver/functions/compare-build.d.ts","../../../node_modules/@types/semver/functions/sort.d.ts","../../../node_modules/@types/semver/functions/rsort.d.ts","../../../node_modules/@types/semver/functions/gt.d.ts","../../../node_modules/@types/semver/functions/lt.d.ts","../../../node_modules/@types/semver/functions/eq.d.ts","../../../node_modules/@types/semver/functions/neq.d.ts","../../../node_modules/@types/semver/functions/gte.d.ts","../../../node_modules/@types/semver/functions/lte.d.ts","../../../node_modules/@types/semver/functions/cmp.d.ts","../../../node_modules/@types/semver/functions/coerce.d.ts","../../../node_modules/@types/semver/classes/comparator.d.ts","../../../node_modules/@types/semver/classes/range.d.ts","../../../node_modules/@types/semver/functions/satisfies.d.ts","../../../node_modules/@types/semver/ranges/max-satisfying.d.ts","../../../node_modules/@types/semver/ranges/min-satisfying.d.ts","../../../node_modules/@types/semver/ranges/to-comparators.d.ts","../../../node_modules/@types/semver/ranges/min-version.d.ts","../../../node_modules/@types/semver/ranges/valid.d.ts","../../../node_modules/@types/semver/ranges/outside.d.ts","../../../node_modules/@types/semver/ranges/gtr.d.ts","../../../node_modules/@types/semver/ranges/ltr.d.ts","../../../node_modules/@types/semver/ranges/intersects.d.ts","../../../node_modules/@types/semver/ranges/simplify.d.ts","../../../node_modules/@types/semver/ranges/subset.d.ts","../../../node_modules/@types/semver/internals/identifiers.d.ts","../../../node_modules/@types/semver/index.d.ts","../../../node_modules/@types/sinonjs__fake-timers/index.d.ts","../../../node_modules/@types/sinon/index.d.ts","../../../node_modules/@types/stack-utils/index.d.ts","../../../node_modules/@types/yargs-parser/index.d.ts","../../../node_modules/@types/yargs/index.d.ts"],"fileInfos":[{"version":"8730f4bf322026ff5229336391a18bcaa1f94d4f82416c8b2f3954e2ccaae2ba","affectsGlobalScope":true},"dc47c4fa66b9b9890cf076304de2a9c5201e94b740cffdf09f87296d877d71f6","7a387c58583dfca701b6c85e0adaf43fb17d590fb16d5b2dc0a2fbd89f35c467","8a12173c586e95f4433e0c6dc446bc88346be73ffe9ca6eec7aa63c8f3dca7f9","5f4e733ced4e129482ae2186aae29fde948ab7182844c3a5a51dd346182c7b06","4b421cbfb3a38a27c279dec1e9112c3d1da296f77a1a85ddadf7e7a425d45d18","1fc5ab7a764205c68fa10d381b08417795fc73111d6dd16b5b1ed36badb743d9",{"version":"3aafcb693fe5b5c3bd277bd4c3a617b53db474fe498fc5df067c5603b1eebde7","affectsGlobalScope":true},{"version":"adb996790133eb33b33aadb9c09f15c2c575e71fb57a62de8bf74dbf59ec7dfb","affectsGlobalScope":true},{"version":"8cc8c5a3bac513368b0157f3d8b31cfdcfe78b56d3724f30f80ed9715e404af8","affectsGlobalScope":true},{"version":"cdccba9a388c2ee3fd6ad4018c640a471a6c060e96f1232062223063b0a5ac6a","affectsGlobalScope":true},{"version":"c5c05907c02476e4bde6b7e76a79ffcd948aedd14b6a8f56e4674221b0417398","affectsGlobalScope":true},{"version":"5f406584aef28a331c36523df688ca3650288d14f39c5d2e555c95f0d2ff8f6f","affectsGlobalScope":true},{"version":"22f230e544b35349cfb3bd9110b6ef37b41c6d6c43c3314a31bd0d9652fcec72","affectsGlobalScope":true},{"version":"7ea0b55f6b315cf9ac2ad622b0a7813315bb6e97bf4bb3fbf8f8affbca7dc695","affectsGlobalScope":true},{"version":"3013574108c36fd3aaca79764002b3717da09725a36a6fc02eac386593110f93","affectsGlobalScope":true},{"version":"eb26de841c52236d8222f87e9e6a235332e0788af8c87a71e9e210314300410a","affectsGlobalScope":true},{"version":"3be5a1453daa63e031d266bf342f3943603873d890ab8b9ada95e22389389006","affectsGlobalScope":true},{"version":"17bb1fc99591b00515502d264fa55dc8370c45c5298f4a5c2083557dccba5a2a","affectsGlobalScope":true},{"version":"7ce9f0bde3307ca1f944119f6365f2d776d281a393b576a18a2f2893a2d75c98","affectsGlobalScope":true},{"version":"6a6b173e739a6a99629a8594bfb294cc7329bfb7b227f12e1f7c11bc163b8577","affectsGlobalScope":true},{"version":"81cac4cbc92c0c839c70f8ffb94eb61e2d32dc1c3cf6d95844ca099463cf37ea","affectsGlobalScope":true},{"version":"b0124885ef82641903d232172577f2ceb5d3e60aed4da1153bab4221e1f6dd4e","affectsGlobalScope":true},{"version":"0eb85d6c590b0d577919a79e0084fa1744c1beba6fd0d4e951432fa1ede5510a","affectsGlobalScope":true},{"version":"da233fc1c8a377ba9e0bed690a73c290d843c2c3d23a7bd7ec5cd3d7d73ba1e0","affectsGlobalScope":true},{"version":"d154ea5bb7f7f9001ed9153e876b2d5b8f5c2bb9ec02b3ae0d239ec769f1f2ae","affectsGlobalScope":true},{"version":"bb2d3fb05a1d2ffbca947cc7cbc95d23e1d053d6595391bd325deb265a18d36c","affectsGlobalScope":true},{"version":"c80df75850fea5caa2afe43b9949338ce4e2de086f91713e9af1a06f973872b8","affectsGlobalScope":true},{"version":"9d57b2b5d15838ed094aa9ff1299eecef40b190722eb619bac4616657a05f951","affectsGlobalScope":true},{"version":"6c51b5dd26a2c31dbf37f00cfc32b2aa6a92e19c995aefb5b97a3a64f1ac99de","affectsGlobalScope":true},{"version":"6e7997ef61de3132e4d4b2250e75343f487903ddf5370e7ce33cf1b9db9a63ed","affectsGlobalScope":true},{"version":"2ad234885a4240522efccd77de6c7d99eecf9b4de0914adb9a35c0c22433f993","affectsGlobalScope":true},{"version":"5e5e095c4470c8bab227dbbc61374878ecead104c74ab9960d3adcccfee23205","affectsGlobalScope":true},{"version":"09aa50414b80c023553090e2f53827f007a301bc34b0495bfb2c3c08ab9ad1eb","affectsGlobalScope":true},{"version":"d7f680a43f8cd12a6b6122c07c54ba40952b0c8aa140dcfcf32eb9e6cb028596","affectsGlobalScope":true},{"version":"3787b83e297de7c315d55d4a7c546ae28e5f6c0a361b7a1dcec1f1f50a54ef11","affectsGlobalScope":true},{"version":"e7e8e1d368290e9295ef18ca23f405cf40d5456fa9f20db6373a61ca45f75f40","affectsGlobalScope":true},{"version":"faf0221ae0465363c842ce6aa8a0cbda5d9296940a8e26c86e04cc4081eea21e","affectsGlobalScope":true},{"version":"06393d13ea207a1bfe08ec8d7be562549c5e2da8983f2ee074e00002629d1871","affectsGlobalScope":true},{"version":"2768ef564cfc0689a1b76106c421a2909bdff0acbe87da010785adab80efdd5c","affectsGlobalScope":true},{"version":"b248e32ca52e8f5571390a4142558ae4f203ae2f94d5bac38a3084d529ef4e58","affectsGlobalScope":true},{"version":"52d1bb7ab7a3306fd0375c8bff560feed26ed676a5b0457fa8027b563aecb9a4","affectsGlobalScope":true},"70bbfaec021ac4a0c805374225b55d70887f987df8b8dd7711d79464bb7b4385","869089d60b67219f63e6aca810284c89bae1b384b5cbc7ce64e53d82ad223ed5",{"version":"18338b6a4b920ec7d49b4ffafcbf0fa8a86b4bfd432966efd722dab611157cf4","affectsGlobalScope":true},"62a0875a0397b35a2364f1d401c0ce17975dfa4d47bf6844de858ae04da349f9","ee7491d0318d1fafcba97d5b72b450eb52671570f7a4ecd9e8898d40eaae9472","e3e7d217d89b380c1f34395eadc9289542851b0f0a64007dfe1fb7cf7423d24e","fd79909e93b4d50fd0ed9f3d39ddf8ba0653290bac25c295aac49f6befbd081b","345a9cc2945406f53051cd0e9b51f82e1e53929848eab046fdda91ee8aa7da31","9debe2de883da37a914e5e784a7be54c201b8f1d783822ad6f443ff409a5ea21","dee5d5c5440cda1f3668f11809a5503c30db0476ad117dd450f7ba5a45300e8f","f5e396c1424c391078c866d6f84afe0b4d2f7f85a160b9c756cd63b5b1775d93","5caa6f4fff16066d377d4e254f6c34c16540da3809cd66cd626a303bc33c419f","730d055528bdf12c8524870bb33d237991be9084c57634e56e5d8075f6605e02","75b22c74010ba649de1a1676a4c4b8b5bb4294fecd05089e2094429b16d7840c","5615ccf831db2ffc82145243081ebdb60ea8e1005ee8f975d1c0c1401a9c894e","38682ed3630bb6ecdace80d5a9adc811fc20a419f1940446e306c3a020d083b9","cc182e6e4f691cd6f7bf7cb491247a4c7818f9f1cb2db1d45c65ff906e3f741b","a50599c08934a62f11657bdbe0dc929ab66da1b1f09974408fd9a33ec1bb8060","5a20e7d6c630b91be15e9b837853173829d00273197481dc8d3e94df61105a71","8d478048d71cc16f806d4b71b252ecb67c7444ccf4f4b09b29a312712184f859","e0eda929c6b9b628cdeb0e54cd3582cb97e64f28aab34612fc1431c545899584","9df4662ca3dbc2522bc115833ee04faa1afbb4e249a85ef4a0a09c621346bd08","b25d9065cf1c1f537a140bbc508e953ed2262f77134574c432d206ff36f4bdbf","1b103313097041aa9cd705a682c652f08613cb5cf8663321061c0902f845e81c","68ccec8662818911d8a12b8ed028bc5729fb4f1d34793c4701265ba60bc73cf4","5f85b8b79dc4d36af672c035b2beb71545de63a5d60bccbeee64c260941672ab","b3d48529ae61dc27d0bfbfa2cb3e0dff8189644bd155bdf5df1e8e14669f7043","40fe4b689225816b31fe5794c0fbf3534568819709e40295ead998a2bc1ab237","f65b5e33b9ad545a1eebbd6afe857314725ad42aaf069913e33f928ab3e4990a","fb6f2a87beb7fb1f4c2b762d0c76a9459fc91f557231569b0ee21399e22aa13d","31c858dc85996fac4b7fa944e1016d5c72f514930a72357ab5001097bf6511c7","3de30a871b3340be8b679c52aa12f90dd1c8c60874517be58968fdbcc4d79445","6fd985bd31eaf77542625306fb0404d32bff978990f0a06428e5f0b9a3b58109","5b3cd03ae354ea96eff1f74d7c410fe4852e6382227e8b0ecf87ab5e3a5bbcd4","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419",{"version":"056097110efd16869ec118cedb44ecbac9a019576eee808d61304ca6d5cb2cbe","affectsGlobalScope":true},"f51b4042a3ac86f1f707500a9768f88d0b0c1fc3f3e45a73333283dea720cdc6",{"version":"6fb8358e10ed92a7f515b7d79da3904c955a3ffd4e14aa9df6f0ea113041f1cf","affectsGlobalScope":true},"45c831238c6dac21c72da5f335747736a56a3847192bf03c84b958a7e9ec93e2","661a11d16ad2e3543a77c53bcd4017ee9a450f47ab7def3ab493a86eae4d550c",{"version":"8cdc646cec7819581ef343b83855b1bfe4fe674f2c84f4fb8dc90d82fb56bd3a","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","9dd56225cc2d8cb8fe5ceb0043ff386987637e12fecc6078896058a99deae284","2375ed4b439215aa3b6d0c6fd175c78a4384b30cb43cbadaecbf0a18954c98cb","7693b90b3075deaccafd5efb467bf9f2b747a3075be888652ef73e64396d8628","41231da15bb5e3e806a8395bd15c7befd2ec90f9f4e3c9d0ae1356bccb76dbb0","fccfef201d057cb407fa515311bd608549bab6c7b8adcf8f2df31f5d3b796478",{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true},"5f20d20b7607174caf1a6da9141aeb9f2142159ae2410ca30c7a0fccd1d19c99",{"version":"464762c6213566d072f1ced5e8e9a954785ec5e53883b7397198abb5ef5b8f71","affectsGlobalScope":true},"6387920dc3e18927335b086deec75bf8e50f879a5e273d32ee7bb7a55ba50572","9bba37424094688c4663c177a1379b229f919b8912889a472f32fdc5f08ddb4d","29a4be13b3a30d3e66667b75c58ec61fb2df8fa0422534fdee3cfb30c5dbf450","83366d901beda79d6eb37aaaf6ca248dcd88946302b2a7d975590783be51e88e","bf268a0aea37ad4ae3b7a9b58559190b6fc01ea16a31e35cd05817a0a60f895a","43ec77c369473e92e2ecebf0554a0fdaa9c256644a6070f28228dfcceec77351",{"version":"d7dad6db394a3d9f7b49755e4b610fbf8ed6eb0c9810ae5f1a119f6b5d76de45","affectsGlobalScope":true},"95ed02bacb4502c985b69742ec82a4576d4ff4a6620ecc91593f611d502ae546","bf755525c4e6f85a970b98c4755d98e8aa1b6dbd83a5d8fcc57d3d497351b936","dd67d2b5e4e8a182a38de8e69fb736945eaa4588e0909c14e01a14bd3cc1fd1e",{"version":"28084e15b63e6211769db2fe646d8bc5c4c6776321e0deffe2d12eefd52cb6b9","affectsGlobalScope":true},{"version":"aed37dabf86c99d6c8508700576ecede86688397bc12523541858705a0c737c2","affectsGlobalScope":true},"cc6ef5733d4ea6d2e06310a32dffd2c16418b467c5033d49cecc4f3a25de7497","94768454c3348b6ebe48e45fbad8c92e2bb7af4a35243edbe2b90823d0bd7f9a","0be79b3ff0f16b6c2f9bc8c4cc7097ea417d8d67f8267f7e1eec8e32b548c2ff","1c61ffa3a71b77363b30d19832c269ef62fba787f5610cac7254728d3b69ab2e","84da3c28344e621fd1d591f2c09e9595292d2b70018da28a553268ac122597d4","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","6e191fea1db6e9e4fa828259cf489e820ec9170effff57fb081a2f3295db4722","aed943465fbce1efe49ee16b5ea409050f15cd8eaf116f6fadb64ef0772e7d95","70d08483a67bf7050dbedace398ef3fee9f436fcd60517c97c4c1e22e3c6f3e8","c40fdf7b2e18df49ce0568e37f0292c12807a0748be79e272745e7216bed2606",{"version":"e933de8143e1d12dd51d89b398760fd5a9081896be366dad88a922d0b29f3c69","affectsGlobalScope":true},"4e228e78c1e9b0a75c70588d59288f63a6258e8b1fe4a67b0c53fe03461421d9","b38d55d08708c2410a3039687db70b4a5bfa69fc4845617c313b5a10d9c5c637","205d50c24359ead003dc537b9b65d2a64208dfdffe368f403cf9e0357831db9e","1265fddcd0c68be9d2a3b29805d0280484c961264dd95e0b675f7bd91f777e78",{"version":"a05e2d784c9be7051c4ac87a407c66d2106e23490c18c038bbd0712bde7602fd","affectsGlobalScope":true},{"version":"df90b9d0e9980762da8daf8adf6ffa0c853e76bfd269c377be0d07a9ad87acd2","affectsGlobalScope":true},"cf434b5c04792f62d6f4bdd5e2c8673f36e638e910333c172614d5def9b17f98","1d65d4798df9c2df008884035c41d3e67731f29db5ecb64cd7378797c7c53a2f","0faee6b555890a1cb106e2adc5d3ffd89545b1da894d474e9d436596d654998f","c6c01ea1c42508edf11a36d13b70f6e35774f74355ba5d358354d4a77cc67ea1","867f95abf1df444aab146b19847391fc2f922a55f6a970a27ed8226766cee29f",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"b0297b09e607bec9698cac7cf55463d6731406efb1161ee4d448293b47397c84","175323e2a79a6076e0bada8a390d535a3ea817158bf1b1f46e31efca9028a0a2","7a10053aadc19335532a4d02756db4865974fd69bea5439ddcc5bfdf062d9476","4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","aed9e712a9b168345362e8f3a949f16c99ca1e05d21328f05735dfdbb24414ef","b04fe6922ed3db93afdbd49cdda8576aa75f744592fceea96fb0d5f32158c4f5","ed8d6c8de90fc2a4faaebc28e91f2469928738efd5208fb75ade0fa607e892b7","d7c52b198d680fe65b1a8d1b001f0173ffa2536ca2e7082431d726ce1f6714cd","c07f251e1c4e415a838e5498380b55cfea94f3513229de292d2aa85ae52fc3e9","0ed401424892d6bf294a5374efe512d6951b54a71e5dd0290c55b6d0d915f6f7","b945be6da6a3616ef3a250bfe223362b1c7c6872e775b0c4d82a1bf7a28ff902","beea49237dd7c7110fabf3c7509919c9cb9da841d847c53cac162dc3479e2f87","0f45f8a529c450d8f394106cc622bff79e44a1716e1ac9c3cc68b43f7ecf65ee","c624ce90b04c27ce4f318ba6330d39bde3d4e306f0f497ce78d4bda5ab8e22ca","9b8253aa5cb2c82d505f72afdbf96e83b15cc6b9a6f4fadbbbab46210d5f1977","86a8f52e4b1ac49155e889376bcfa8528a634c90c27fec65aa0e949f77b740c5","aab5dd41c1e2316cc0b42a7dd15684f8582d5a1d16c0516276a2a8a7d0fecd9c","59948226626ee210045296ba1fc6cb0fe748d1ff613204e08e7157ab6862dee7","ec3e54d8b713c170fdc8110a7e4a6a97513a7ab6b05ac9e1100cb064d2bb7349","43beb30ecb39a603fde4376554887310b0699f25f7f39c5c91e3147b51bb3a26","666b77d7f06f49da114b090a399abbfa66d5b6c01a3fd9dc4f063a52ace28507","31997714a93fbc570f52d47d6a8ebfb021a34a68ea9ba58bbb69cdec9565657e","6032e4262822160128e644de3fc4410bcd7517c2f137525fd2623d2bb23cb0d3","8bd5c9b1016629c144fd228983395b9dbf0676a576716bc3d316cab612c33cd5","2ed90bd3925b23aed8f859ffd0e885250be0424ca2b57e9866dabef152e1d6b7","93f6bd17d92dab9db7897e1430a5aeaa03bcf51623156213d8397710367a76ce","3f62b770a42e8c47c7008726f95aa383e69d97e85e680d237b99fcb0ee601dd8","5b84cfe78028c35c3bb89c042f18bf08d09da11e82d275c378ae4d07d8477e6c","980d21b0081cbf81774083b1e3a46f4bbdcd2b68858df0f66d7fad9c82bc34bc","68cc8d6fcc2f270d7108f02f3ebc59480a54615be3e09a47e14527f349e9d53e","3eb11dbf3489064a47a2e1cf9d261b1f100ef0b3b50ffca6c44dd99d6dd81ac1","b17f3bb7d8333479c7e45e5f3d876761b9bca58f97594eca3f6a944fd825e632","3c1f1236cce6d6e0c4e2c1b4371e6f72d7c14842ecd76a98ed0748ee5730c8f3","6d7f58d5ea72d7834946fd7104a734dc7d40661be8b2e1eaced1ddce3268ebaf","4c26222991e6c97d5a8f541d4f2c67585eda9e8b33cf9f52931b098045236e88","277983d414aa99d78655186c3ee1e1c38c302e336aff1d77b47fcdc39d8273fe","47383b45796d525a4039cd22d2840ac55a1ff03a43d027f7f867ba7314a9cf53","6548773b3abbc18de29176c2141f766d4e437e40596ee480447abf83575445ad","6ddd27af0436ce59dd4c1896e2bfdb2bdb2529847d078b83ce67a144dff05491","816264799aef3fd5a09a3b6c25217d5ec26a9dfc7465eac7d6073bcdc7d88f3f","4df0891b133884cd9ed752d31c7d0ec0a09234e9ed5394abffd3c660761598db","b603b62d3dcd31ef757dc7339b4fa8acdbca318b0fb9ac485f9a1351955615f9","e642bd47b75ad6b53cbf0dfd7ddfa0f120bd10193f0c58ec37d87b59bf604aca","be90b24d2ee6f875ce3aaa482e7c41a54278856b03d04212681c4032df62baf9","78f5ff400b3cb37e7b90eef1ff311253ed31c8cb66505e9828fad099bffde021","372c47090e1131305d163469a895ff2938f33fa73aad988df31cd31743f9efb6","71c67dc6987bdbd5599353f90009ff825dd7db0450ef9a0aee5bb0c574d18512","6f12403b5eca6ae7ca8e3efe3eeb9c683b06ce3e3844ccfd04098d83cd7e4957","282c535df88175d64d9df4550d2fd1176fd940c1c6822f1e7584003237f179d3","c3a4752cf103e4c6034d5bd449c8f9d5e7b352d22a5f8f9a41a8efb11646f9c2","11a9e38611ac3c77c74240c58b6bd64a0032128b29354e999650f1de1e034b1c","4ed103ca6fff9cb244f7c4b86d1eb28ce8069c32db720784329946731badb5bb","d738f282842970e058672663311c6875482ee36607c88b98ffb6604fba99cb2a","ec859cd8226aa623e41bbb47c249a55ee16dc1b8647359585244d57d3a5ed0c7","8891c6e959d253a66434ff5dc9ae46058fb3493e84b4ca39f710ef2d350656b1","c4463cf02535444dcbc3e67ecd29f1972490f74e49957d6fd4282a1013796ba6","0cb0a957ff02de0b25fd0f3f37130ca7f22d1e0dea256569c714c1f73c6791f8","2f5075dc512d51786b1ba3b1696565641dfaae3ac854f5f13d61fa12ef81a47e","ca3353cc82b1981f0d25d71d7432d583a6ef882ccdea82d65fbe49af37be51cb","50679a8e27aacf72f8c40bcab15d7ef5e83494089b4726b83eec4554344d5cdc","45351e0d51780b6f4088277a4457b9879506ee2720a887de232df0f1efcb33d8","5d697a4b315cc5bb3042ae869abffd10c3b0d7b182cda0e4c45d8819937e5796","7528af2ed74464d2c0ae92025f14c1f11691deb07812bc66afbe6f87c3669f1f","6ee58aa536dabb19b09bc036f1abe83feb51e13d63b23d30b2d0631a2de99b8f","8aceb205dcc6f814ad99635baf1e40b6e01d06d3fe27b72fd766c6d0b8c0c600","299567f84bfedd1468dca2755a829cb19e607a6811673788807dc8921e211bc9","795d9fb85aad92221504db74dd179b506bd189bba0c104426f7e7bb8a66ffee5","1311bc194e0a69fe61031e852c1c0b439e2a2a3d1d5e2d8ff795499b9f283459","4b7ce19369d7e7fae76720c2c6c7f671bf3fa0f7093edb864f1ac358ca7c456c","c972ef44deca1fa8fab465915ffa00f82e126aacf3dfc8979c03b1b066ce5bb6","30285a1011c6d6b52f3ba3abb0a984be8148c05cdefb8eb6eb562335a3991f35","8e7adb22c0adecf7464861fc58ae3fc617b41ffbd70c97aa8493dc0966a82273","755f3cd1d9c1b564cff090e3b0e29200ae55690a91b87cb9e7a64c2dbeb314d3","d6bb7e0a6877b7856c183bff13d09dd9ae599ea43c6f6b33d3d5f72a830ed460","f1b51ae93c762d7c43f559933cd4842dd870367e8d92e90704ffa685dd5b29a3","3f450762fd7c34ed545e738abccb0af6a703572a10521643cf8fc88e3724c99c","fcc8beef29f39f09b1d9c9f99c42f9fed605ab1c28d2a630185f732b9ba53763","d6e6620a30d582182acc3f0a992a0c311adc589f111096aea11ab83fc09a5ccc","6213b8f686f56beab22b59a0f468590fd3a4c5fa931236a017efeca91d7c9584","c451cec9a588b1f105a5ea2c6063d4fca112b9d70105cacdadda0e1ef67e9379","cb047832dc68f5a2c41c62c5e95ddcacbae3a8b034d40cd15319a8cb7f25104a","980336ccdfc3c08f3c3b201aa6662e6016e20f15847f8465b68f3e8e67b4665c","5a3493939995f46ff3d9073cd534fb8961c3bf4e08c71db27066ff03d906dea8","bb5a2ac327605ebebf831c469b05bd34a33a6a46ee8c1edd9f3310aad32cf6a1","bf5d041f2440b4a9391e2b5eb3b8d94cbf1e3b8ff4703b6539d4e65e758c8f37","8516469eb90e723b0eb03df1be098f7e6a4709f6f48fd4532868d20a0a934f6e","d60e9ab369a72d234aac49adbe2900d8ef1408a6ea4db552cf2a48c9d8d6a1bc","0ebb4698803f01e2e7df6acce572fff068f4a20c47221721dafd70a27e372831","03460a54d0e0481d1e11097f66ad43f054bc95efdafe5f81bbc7a82be181af75","ded24ddc7157689a5aa14bd651272ab8cd6e7812da2196a65d8c5e63131cfb23","2cea9689efa8591732096235abe7f084fc29c92badd5b0897a5e876b77e71887","4ed4e504126014fee13aaef5e3fc140f2ff7031ff3a8b5386717905820ea2d09","00e77e0bf106bc1e4f303ab02724df5173506d44acb6c22b4f582a88f22c3250","30d2170e1a718b5035611af55e3618b4ba8f42f0749bb52ee593da6082c4e2ce","98ef38666d88ec9699a722053e07ede65d3042f693fe7ff8c786e53dbb6fd43b","a3b8b6be7620897d1e481e8650c980a210a138fceb6e710eaf95fd9dd0dfe94a","12c89d0e32758c120a569045f21cf5b77244f86792611ced8de7f86b37e77781","14bd47270e654c8eb3b1489fa8c095912ee62a0a29bb92743393203722347c53","e294fa77b2ea3c11d0e0581304ab5d6462efdbf9ef1641097c7fb79a28003cb0","1616ba804291182bc6a0d75c17bc093bed1ea87ad98b108183b8ccc4dff4e868","92cb686a9ca5eb5dd7d5d8d43a3707194c1e91ea07a027b3bcb60b6011b24632","8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","25139d6a726e0e19d9fc4fa3197367b4a82ec34a08a5ecf23963e142c202c0f3","e3328bffc8eab74665a4fe9c59d6f12f4c8570c3d858497e241eb37efe17dfcf","29389551e426a46421134b55182d6fcf5b143670998bf81db2619c1228235392","c18f7e16982695bdd04e3e183a327d116185f77f1a37b9b2e849d7d93269cd74","2cfb37011989c21dc70b91d521a2d5a4e0f18507f5f536b5dfe504edb15916e8","bb5e02df7aaec7a4ea642639a9963b24b8d9fd6798351f07d8c58616942fbcbf","299a899cb4d061f5d83843ec453e936e9659b2c435746823f90c40eddaef4745","d5610c0fd12870f644b0f42c1bcc4fa2295ac3e3ca01916bdb42c3bdc4c80c36","2c56a8e249b1f45dbdf973100cd37fe2ea68709573cf1fdf2e3052c593be68d8","3553da417ee7b07e388b13bd12a70a1c03e65a6132ba5427fe68f5b362373e6f","612358502042d351c227ba779fdcf6d875d827e424930e60297c533524e50668","d2b5be376ef162aa0c24a826e7dd2d77671a045c085e16d1c1276db4bdccbac7","c4138d8dcccedaff6621e009cf0a54a7bed2a5ad4c509a3513bccc4f417ef939","ad8747fe978dff3e80f4b12b48d37cc8dff11b61d04c035aefbc982ce21201ce","b154f789fd65298e1ba6cbba6944ea892d564c95f3d3700ed85baf8f80748473","c660265aedd7c5b236e2017e53095cb98da66200eb0e8d023b5bf713c36494e8","0efc36bf5c0daca6217fec7063359ccdab8c3a23bb405d25340fae22cf72d74f","5abff0c87d4f9c89715107042d4c73b68ef7a128759f451c8a0fc450cbaaf660","5a03308fbd1af441065149a84c692931bebc7e7735afc23be8684f4e10d3aa06","c787bf4f8f0abbf815cfbd348be41046f2b8f270be24fe7aa8a8fcdd2b7df8c2","e7a5191c663a3228f30104961d548b372e51c5936c01ffc8eddd262bb98d7d7c","43fdc9abe6f8640fda4cdc55a1ee5f666d3fce554277043df925c383137ddf69","f0b09665c9d52de465687fbd3cfb65111d3ffc59ae00c6f42654150f3db05518","72f8c078d06cff690e24ff2b0e118a9de2833dcebf7c53e762dcb505ddf36a68","9705efb0fd901180de84ca4dd11d86f87fd73f99d6a5660a664c048a7487e385","f9b9d0950fdfb90f57e3f045fe73dce7fa6e7921b37622fc12e64fcd90afbd0f","e61b36e7fde608f8bb4b9c973d81556553a715eaef42a181a16ddd7a28da4ac7","03b8389b222af729eae0fb3c33366dcbb1f5a0102ce319bf1d7d5ee987e59fd0","2bf6be7c04db280fdd9b786764f8650c23f9f4d533791cb25a11b25314b76a55","dbb5fc7edd36bfba95cc4dd564e4458276ced30eed18bc05fbda948b3fda8686","c2b556c7cff0dabce2e31cb373ac61c14d8ebc35f1086dff30b39e9ec5357d0d","f958af01131076e8af55d28c4835a51063226ab488ca8738fdee38aeef7d0d33","9f3797b01e3d83d4e4b875699ae984f380ca86aa0a0c9df43ac5bba1cb1f8b7b","752b15ad1b34887adeaa838fc55f5d4ca399026afd266d4ed4db0e3db02eae4e","778331eaea1093451e50be9844bd2b6937c3bb81b0b1ee700624c9774ecfcf2b","0ca0dfc9f657d0822eca9530c7870b22a1d2a5fc48182bdd4d0e6e88e4ad9c35","5c746f034288e6842dd1589b169dcfcc16c5ce5abbd928889ab67aea4fe0b501","92ce6dbbcc135cffd09a58e19fef34bf351391bec92c40d849e4e9997d475769","99e77d092fed72b6b8578d00c7af004f76e98b30ba99f1947535eb4c04a51676","5e379df3d61561c2ed7789b5995b9ba2143bbba21a905e2381e16efe7d1fa424","f07a137bbe2de7a122c37bfea00e761975fb264c49f18003d398d71b3fb35a5f","b5ef52a9f9083724decc5d060f0b34e3a480deed71c32d55ca16c214eb4cc928","5d3d7938b2d7d0a9f851276741327c2ae4c013e7eb420fc3f7caed3b79c8f37f","14df6b81e50a035e9e391558cf30a0420d03e2eb42c7db9c57f44b818e5d5179","f100912a3785eed4a3d29c12f5910b101af9353454de5ddba9b4d43456c56dd1","446439eacf81a163fd7dfc53b28f80deca3d13b250d67639739aa25aa4491090","98034cd285344125f7165a3bb68246d38ab35fabe7f6d6a7c8f80407d31f548d","06b4a23064991251512df4edc12341d5bc69a17b942da18372312d383c90eee7","0f898802705f9a534b537f1be6c57265080e0abd6993d935554c255e6d56cc1a","745efa7b6e27b7216cccede166a822b56acc41b10a8090966c8cf2c96239cb83","6ab2a6257ae7bb05559841100c786c845fe465a90be7b904db9096c2fb14696b","1507881fb12592d860e8b731a79cccd5880a9e3a3fdb71c8eeb08987420f7c8d","63e64a301fdbb7fb0b58e81b282608594b700e1af51d509de949e88e711a70e8","d5c19655468e29f60c871b21e73af8ebc653f736e7123ade916f22c4a5f80ce5","50aa290ee8f3ba75c7a3653613ead6594e2e034a7627b249c9a400858cac79f5","9138338d4fff57ba42d57c7316ad1d055b72b90c9e1acbbfa6cfe16db201802a","d5c19655468e29f60c871b21e73af8ebc653f736e7123ade916f22c4a5f80ce5","863416d62eb7dfa12b63b23c112fd0831aa330816c39d64ca88898ebe5fd62a3","9325a5ce0f09132607e27e599b568e3a67f80ea932f6bbb08bdc1bb7727e11a3","6a8649609161e2794b383ba275b0a6cb4a072dde7b954648f83dc6cdf1bfe4a8","6d3101b183ea67ef606b93fe42127f30b2db5ac3b72c34ca9d6d8b00eb85d0f6","f5d7a36ff056cc314b0f61c89a03c4c36a24183b246e61d958e75e86521304cd","f961ddb0abe88c9815a81132cc9984f0294fd920174fccbdde73d156b8a4ab39","6c951235cbf3c324a20c0e2dfdd013d7b226b0c2a72dbd84925682a8d7199237","aba578ce97acb630b406ffb6ed31302dbd8d2ffcfd671194b1d8704825086e05","3a971ea3e36685b96f24fbd53a94ad8dc061711b84e51fde4cf201f7041e618d","77234d8682b67d78748cb61a63407104dc2c8e3196dcf15a454aae26b42f3ee7","c8be9283a381044a392a0687af5d98d3f51cbada2320b1801a82c948b6e39499","d5cdc145bf5ec321674e31804c075ad408a68c86877ce293970e03634d3709f1","85052c71d72b9b017c88179f57a464d66e22619c7acd7d83b117a79cf1608979","9b6c162d20e2ad4abdcff61a24082564ac59e63092220618162aef6e440c9228","b0874729266d9f7fafb9ff1127fcbad2cf7972b5dcc1fdc104be79266a708bc2","d1f010c19eb9c8190bd0859fa3b6f4975543b912b8b85e20bbb0b5bfbdf4d2b3","de4ccc96cef3f97fab148640799abb32a24b567a902a8233913f98481e3131bf",{"version":"801934aa449fe6df584bccdcc5d5b9280295cb7ac84918b6014fc5086e6f9ff6","affectsGlobalScope":true},"6af760fb9ea02dc807c5053d8aee86389c4fce72fbb26af7b9568cac6c4710d5","c62c4ba5e910b4523f7e7adf4a55ec45c2bac99d9d8e9b0fe0c2a800a6f641b9","92131434f876fdd6fcbc40bd54a9d7500c66974362b16bd42641f990468587f4","8cf023c0bd57992fdd2ce6a7030a1874f49c8edc62eaffa9bfffcf18d2a2a1a2","8ea8f3040e38fb50d7dc3653f3b8a0dbb5244e82111576f99ce096bdc0fbf94c","48ed788ad126545a6156fcc37cd3bcf17de18a3e3fe6b6ef62cfb8140d1a45a2","63c271a745f628ffd4bd7ad0a63b021c362c9bd6bf8b18441a7162892395a214","a867ba47f71fe3993cef54246893ff8f01411e12e411d8cf1bd038a448b36404","9f9e5bae412fa5909fae636d6733aee27a108cc2ed5b13980611016336774d3c","662fe197bba64bd3f17ee118058cd2d0d2dbe33d7c0c865fd6365d90bfc44e1e","030519c351f800551cac2658038804969ca4584d2c0175a710602ac234ca1340","0278a6939ca83cd040b08ff8c5fc7838b6693ddc52f22526bf158e6b10e0246c","c2d6206e5ba4fd3063b01218c2b3b997afc1cfbeb49fcee991fa8595842ce53d","6a8096993458a3d71229031aa7415974eb5b47b320213e29660adfb519d6a3f4","cb7996a1af5b1d276483cd0c9b9de6540eff021abc90a720511ff4464519a2ff","9df6ec68878d65bc690ea3a33ce3ef5aa8254c36bc5f8346c0c2fd1f3b88a35c","a4fad04c4acc8a4b195cbbccef4c55019104753d547d5c94441643ccc89108a0","0244c23ea642361f7c192c1f0cfff9c12cfa5f51f9b155edd5c0a89fef308d34","ac5da520487547013c3abae0933d6366f51db6df31d1993ddb931ce04b083269","3c69a83bde847af6fc3a53e1bb6b13cd06d38a27a142814b8dacc374f3b93284","5b46f7113f54565e7ffc83f2b474f557a1f54c7e5946769d5be220454656be73","fb58035d39c5759283cb73cfb3548aefe370aa3ad4e81fdb4e46f0979eb7669f","1311c325948b2d5576cebc70b1bf968d3446b4630802bef54120daf04ce1f625","d0b3609e8e7afed0fd0570152255458407e67249b94f6603afdfd68599423f21","17f4c5a1d6eaa87ea27eadcdff9085af3190533d98f799dda79a3af6f9a630ea","3e6f734ddf40e2e99ff7fff9568b7d9720663af9a0632c26a352c8d3270a3f0e","ec13f78303abcf550c5569dfae1446b8ceb89050f68ce04491481e72e8122ae2","a3fc57dbaa7f1efb010399ad4ef4fd9b462aa4e93bf74a9a34b099b97ffcc9cb","ffddd7ec6a450b0cb6f2f73f80de1df963ead312d7c81a8440268f34146ecb87","5d6a36ca0087fd6876df654d1b4192f0e402adfde994ad47e5c065da33692f9c","eb157a09c5f543d98644e2a99a785f9e0e91f054f9fecbf1c3e15831ff5d63a7","edd5530e2b1ccdf65093296e40a8634fcb11ecda3c164c31383a8c34cb04bc9d","9dfaf96d090fe8d96143465d85b4837661ae535143eea9ef99cd20df2e66338e","209d45c27e03c1417c42985252de6c25a2ec23abdc199d88e6139c88b93abd11","0ee5cdba58cfde3012bb9ff2e9edcc4e35a651373a2aa2c83ff9eb7df635419a","540f4dca27ea5a232828b6d91e1b2fce2720bdabaa4c1f3fbf59b672cc58bd8a","ba086b99d545ec6c9ff356989f076b5652ea1b09bcc65b87dfc43a5195a2efcc","c85d9776b36166b928ab1488d9224ebf970d41b0a35f09a3ee0b9bee3e698061","683196f606c5dab1c8c4a24a66d26e00f16f2d4b2a5abe25ebedd37d2954f930","9c3a1b01cba1238fb723ce06b6c163ef6c53be755394406782564d5c42c636b2","6e795e6270d39e918c7a0e62ac73793cda06fcf4b3692ee46583e15f5bf57ab8","0e821ef1eb67fa6144ea4de4277d913f5b1982d7407afd5f93754a8239d41554","5c09195ef359ffa9c6bbdb4fefb101d87ede4b9e9c28213faf5b45d102e4c609","80b4d93a4dcc90a12f6f4bb7c6851a8182ae29e556716d0d80b5c012a5ef554a","2556ef9d1820e0b6bbca6dd65a50ea64f525c4d8247ab50dff44c3f0d14a5643","cbd1c836db190d6e3add07165afc228f04e1f6170e1fe3aa5e6fc24a7e9573a3","9b13881feb958237232586d888a10a39d47cdffe3ee34688ed41888fa7baad94","122fe82cf5af80f0b26832b258b537b7dfe3ec28449c301b259ab10204b50d45","c467dada8fea6d60dff8a8be2675f737cacc76e14e50b72daa0f0710376df84b","9cb80bba611c2dd155a446ce424fe4bb1df2129751bc9416b7e42c055d1ddbff","44f41abb29bf3f4c52270d8119a96c935131e42a9186da15216a76b35e793b4e","043783bebe87efb440183c9ebc8c4fdc1bb92060a5a0f7ce847e30dee7013ac3","e3dc0a97a59dea936b4fb7b1f6f4117b4aac9c86d0cd08b69bab2d0532a8a5e3","5d897601f8a4fe913057019d8211b99b06e3138f625a0cfb601d074f4278271d","cfde5d194dd858ad68f910defaed5b0d28730f8bf38359a9265a93ab29bc7bef","16b21bbe6ad41019c071677877b8fc5dbc8d39a8b0406f020261c5f6f3894be3","f20aae41b169cddcbf3fde8ac380443182c8d7225194e788c404d9e11e6dc75d","87fd9a98cb1e689320ab89adc65e85d140a61260b4f66d12c777f4bd7cae2060","c48566cb13403fca44192b4528e3f2ac993869d39526bd42cd2f2167c0285add","efae20e0c581240c7522e04829da4f0453ca263068596554d4b0e27878c7dfac","3af68ef927788cda7daab34be513fa4508229fdc6e5130d564a0a1ccb3fefafe","bbbd2cbb15a37d5f4dd54ad8c7c537d3df8352117523030fcec7dcbe62a05a58","b50d24ebc117f8805332e7e260e9587f572bb7b2ff0ca1ff6cfafb38015781f3","5cc8b8e18fe7fefab4b3c53a39467b5a0deb4200abae7f063ff0624b9e856c51","8e990781eb0107c25429b1274a31a4f3866a9a46290cce40f354b2a6e71c6c21","8616706e4bd72987bd86c1b4afafa90fa2d4ef2f71708de03a823ab4e9b48e60","b9ce4613536386a98897f1e3d8f61a851ce6cb34dc3c9db4f2ef5f55f007e9e1","77fe56751d7615743937268c72d797fba28309f13ec9079c018b232040fca86a","31b5f53e3d57470830e87f9e03c02d4569ac81d4a758fdda75092f9a3f58beba","d765fbab22fd7003a65ed670100362ec1c90d55a772e6773a774135594e7ea41","1bf86149ef215f258d479695aa35ac89a3d34a6356a6df04e1b5db869289e563","58f4da9e99a4bdbd2f54eeb9303d5b5634b25423d729d44abb3fc55c925495b3","f75cd30f162c2af5e5aca39c01c1a521bfa034fae523793de872815a3468bc08","0cf1123db73dabd86466a462375a6addae52f58d23030c6033f8aadc23539a36","e29cef4158591ed213b1c2cba8988237b1ff369f7a6ecd8cb8ac0302bad1fba8","5307876e4d0021ea01235eb2f7c24671f3d8b37590f4b446cd132a4e1dc9a335","92550acd737790dc60c4c130e6aac78656dd48a8334a4882f40e7f86bdf7a590","3df821880914f8bb3c8107b1107be75c8ddbe2120a2cefabbaf9b65936b5f4dd","20626e4260b7d621745b2e78e883d9de7cc94ec346ef13344dd96eb479813870","078b7043bea0968860374bf4671ed74dd9f6be4e28ab659517d81f74be463c51","68b139ebb9a7f3ee4ded6286d74f978a47968727665120f3bfc560476ce33c4d","56d02c29b2fd39b1b1a1265df291f3f98e6ec3e6119aff9f4cfa44fe888efaa7","2d01884891da6495cb4a2f060e4898209a507e711464c4c1480df85264e863ed","620eb3b3aafe33839ee0f50e2cb237450f066fd88c8367cd15d75d02f7c9146f","6a5a3a7ae4e448668f8986632d2b6adfeebfdc06b0f9256f35c10ec148fa01f0","080b1aa93227952b4dd74b9d2c6e4f6002eb8403533749116a1c53bb9961c02d","874087eec1d457f6e3baf5ac46c42ea200e55040b394fac667aa3a64c49f5f6c","6e8a5b04a18abb192abc89d7219b9c6f633cb3136777ec808673a65f111ca749","6db505486e882a6688c5525cb65f6f06d3c5f16f03f329fbdec01dd379c97f96","d74d2a92b54f95e47d2b76bd5ee516aab7ae93afb79cd34c6681dd29eb09e72a","747e6326a724bc54f799a466a5b5c4978a601a04a063a5bdabe150af2f25b9e2","b57e22e53b56cca7a57bfcfb234aa6a66f9b9e4c07159d7388f94f17a3eaee2c","e47709ec4d1618ef429648cd8ef967aef2005526b34fcbfac33037add347dc71","b81abb3e47fbbb3af41fa75bada89bbcfa4b0feed9a0d6d4b19ed1ce1033b53c","15b330546e9784461058e5fd6e2346bf272140fa6f0cda34e193ae501d8b17b1","4d8ce72fd080bf9a46bdcc274bcbacccedd66d84e203966b197ac25a96932183","73327e6ae34e3f6591877fb75b451cf620cbbd76ee2b678213a9f793633cd0d3","3f1ba2f69944fa346789db7f60d53c9bec00032de0d797967978dea42e77b941","3f5df31539fee4816b97d4e45b4344fbdaf3ca59f6df941f8d780ee441e92cc1","50aaf44eb4d0e086af13729b3471a0a7dce95ea35ebd21c762ba26e203134b2e","3857c1773b8503c3ca45b7bc09ac89c3930c85ce93021054503f73d5d9101b5c","72702bd07fd6fb3ef64aadbcb909103aadfe71ee76e9fdeb11e0c92693cff6cb","f0dd6f7c9783637655478db7d7caf6becd41a79d54482aa59578ce88ab38e9bf",{"version":"cd756ccdabf433dd02b84d755383e489f14b3c1aede0477783aa04830fd5d695","affectsGlobalScope":true},"a4c88dbecdf8ee0c79f5b7c2bf31cd77e593f5d78384e2b674f67d754a549a9e","9cbdff04326da794ba008c0fc977ab062d1fe3fa2e9759654c72ffbe54b64a7c","aa60f8d20d36116fe05edaab24adee3c275209f71b65e272692cf99daf9489e1","150855f967a6490161d5aeed4cc4adf31fcb8f5dbe54b75799c12b8687fc9cc2","cf08b7139adc21b94204e3d4b3daf9946e3462a9e3fdc3e94c87e767e7936e20","47ddb601df40bfa01cebdd06ee8b87d0b72aa1259a4ceba3ad3b5cf68130112a","6b6392704ddb3f50e647dbbb716782bdd0cf8ea9cc134aae256a26223e632b47","afc3ad2a50f7f4de908e26fcf467e09ab8528c0e90f91e602b4865d953839228","df90b0c6b1d81851364c4d97fa23b91a993482bcf4a7bed7c7a24aa41632d494","03c0bc80f67c6f75b02341fbeb9f6ee92c66b90597729377f478885e6ad15a88","11ee9ab699b4619d217c640d917ca198f58066a86bd58c2917197d62aa6601e0","cf9d589d9e73bf32c8e7a6cae6b4a1cf9bef39e5594072533fdce985581a6ddc","959544feb1ca2df29eec6c500f27ea10f4885df245ebd8418fb4b87914614383","6548ab4b57eb9d092471a04513091673345f2fd95d5b876f600402ea8d603ee0","2793e8c6a023d26f78d6777a6d7f20fae3a9a8169863d46d8d54c73071851232","d0f11e830aa1350a31d9c00a0197243e9711e4882947aef53a96c629f405cb10","6610b9f45f1f71d2b1fb67df49cbcabe3f9e668a1ccb7d8328a51407b259ffb3","abbcc437e0792ab2fe08797ceca1ec85a95ec413c51612313b18ab8e75f690f6","e29d76ef1183ac0edf94b4712b6e51730c447c7e773e75ceb44a720b0c9a9fd9","4ee6dc3424998eede9a2a9b114acaaf7969cdda67baf82ba2c9cf88a8eec0ab1","613c7d49928c9ad45ec4882a75472111a4497c4a7de9d6c9c843bd889be7f8aa","96f0d856b66d8af1242dea20c5eb182aaaa74be74b7fc6be91bcb5f6c16e405f","4749d39670f618849b640148c8164b52283b4a3be227f192a431fbf132d9d7c1","b682db93a241da3a145e40b75bff4e5f454c74bbb44af7cff2884847294f2ddb","53c7854f35e1d3fab9f0e95d7f7c70777a9f95e121d980269f17ae7d26b5fcce","960fccfbc730994718317411e9f75dac992f48d1645fbedb177f77bd4ee5eea4","2e28c01ab28f1c6d97e47def32e3df6a36c3848dd21520fff899b5c79b286659","e7cc0357509d0368b01503d0b0610d59a11c811bd34b9be7149c24e45a5a2233","d42c6e985bdb10a2aaa3dae14d9b0d8589e74a7c2f9475bf543b855bb3c010ba","be11d1fd9568724e5fc8f6801bc7f92408cb6dc726c58782b4ebcda150bbca64","945942f35d88fc6a6ac2143f6a063943fce94c9654dd1e1bfec1e147437e608d","4b1b0fb8836d0f01909626e3e1b6542fb7a2e69f1a269ef5b676abcbae5770b5","72e7be5040a865e113cf78e17eba90499c44607a6a59d0d9b6f843369167523c","0d2acd3a3840418f280e10b2adc0154848f4a162ab6a6466cbf5d0210200a6f8","08417035838838db86f31bd576b1fe246be76c1507b8fc1f2eec744c0d0d125e","b78647f4fd09671f9e7502612cf5f0c072ab2ec917312810d36927fcdeeb5a7c","d6b58d955981bc1742501b792f1ab9f4cba0c4611f28dcf1c99376c1c33c9f9c","0cb9cfa126435d30332ff00441e0db904e55dccb5b1fa7220eaf024e7f425eeb","b8442e9db28157344d1bc5d8a5a256f1692de213f0c0ddeb84359834015a008c","458111fc89d11d2151277c822dfdc1a28fa5b6b2493cf942e37d4cd0a6ee5f22","da2b6356b84a40111aaecb18304ea4e4fcb43d70efb1c13ca7d7a906445ee0d3","187119ff4f9553676a884e296089e131e8cc01691c546273b1d0089c3533ce42","febf0b2de54781102b00f61653b21377390a048fbf5262718c91860d11ff34a6","6f294731b495c65ecf46a5694f0082954b961cf05463bea823f8014098eaffa0","0aaef8cded245bf5036a7a40b65622dd6c4da71f7a35343112edbe112b348a1e","00baffbe8a2f2e4875367479489b5d43b5fc1429ecb4a4cc98cfc3009095f52a","68a0d0c508e1b6d8d23a519a8a0a3303dc5baa4849ca049f21e5bad41945e3fc","3c92b6dfd43cc1c2485d9eba5ff0b74a19bb8725b692773ef1d66dac48cda4bd","b03afe4bec768ae333582915146f48b161e567a81b5ebc31c4d78af089770ac9","df996e25faa505f85aeb294d15ebe61b399cf1d1e49959cdfaf2cc0815c203f9","4f6a12044ee6f458db11964153830abbc499e73d065c51c329ec97407f4b13dd",{"version":"27c33fb4f509b29317686c6ff123aba92074ff6c7bc4c36aaa5ce02e39aa5880","signature":"b3df1401040a165c0422c12ebb1f1b6804b6e474926e5cdc7a5883a56015ed5f"},"1fcb8b15db812281d69a3090d488903f9e93033004aef9d8889ca3ad0753a96f","bdf5a95eb0a2dd1d39805bdf51b46ba012bb9b92b2ddaae16219595bba7678a5","9f794a0e8550a03baff865a3961cc22afbd85bc4ba9672bdda036971928f85f4","66a697d1e4cdbf25cdce4644a8085a8563041fa8c7731d4d9f5e8f22e66ba72c","a0c8e17f4d1ea2704c62d7349bc3b8d9a12e3761b5960cb44144d3f0333b3fcb","3471c0df3d0391e1dffe6e8bf150294531b2b71a2afa5f2b86e52bf84a5db60a","5d4df4de055eddf3187094f938a640f8d96e4c551a47d6686596fdb6ba4c3014","8bc2cad630da1033c1fd8d7df2bffb18af0da6113bd086a8bbec04a2471a1e00","a1059d1bbc8ad46bfe668b8450e7e8002887c4ab987bdb96d6108d8023f8bb8f","5134885e9648e2c6745f8aa1c3e7f5ab3b3617258b3d81ca02de6655ede3d74e","4f1ae3f24125216cf07c5211a3f00d2bb4782d7cc76c0681603f8249f9232ff0","d3fb92a5640f83f7844d60b35317a0f95c27e3658a749d76d218c461ad091668","d1f8bfcd91b284657ef8187c55ace7db91a3c43e642c3f14e54364154932f7e4","f54c92bfcae54f360fe79514746efce4870e4ddabc064e95d406bba291e9f672","175fd7186fa6a70f9db9b270a04a503cae23cf01cb77e3905bac115c38424cf7","c993f7ed1b8e1023c1f2ee5b262dbc3b70b27475674e40a53a58591f9972dacc","c914014ab7c7001178663f29d31a495398234a41219af61f26d7e8e91b46af96","277afd6ab6ec72889e2988e0ddd7d138c1f512e68a1fa4e90eedfd71e2097a51","c0908f85f2b645d375127a3b53a17a65f782e17962d5c1eb68f08b1188acbf15","3fadac5d409cc2f27b1d2f4e7568600f02840205f301c9ae7a3068b46476438b","da6aae64ad559286830fd44c81e3d33303348f184af7db4fde8dd99ae9749407","3633f87c97d359cb55fa7bf0668fb2be8a23342951af6ec2d06e6d0cf7409371","cc3a5427d44fc77ff25e80b3edee4650a51f83de761faf5e633994ecf1ab1b44","b350eda75c6e47299b36002b31d5b220c405c21c365e708989829db013fadbb4","f421882756b6714834ae4687ab1aeadf344a1cc45437d2edffbac020ff3801c1","1d61d6ad832dabafbf63b86c5a79d704f2c8763ada9318e135b17a3cb2d09b32","e5cef5de3e5ad3436d414d20743231e284733b9cf4375dc79eff4fcca4282f99","e624419ba84e33e661e89a28083119ca41f6953dba09a4f82b660684087afe6d","942be430bd0feaced2e3e598273b17e50ea565ec9dac840b580b0b99e1a3cd5c","73350006cec5a0c6b71d53b0b0ddbfb82be96752a9c4e3c904c59e633bc9485e","a7df5c2e9594966c7e0d4a763b13ed5727506d892669df5f7bc9826f539c1d35","258cc5cd6891f6bcbaccefd953997038844e7f65d582cac987ffabf7181bcd4c","00a6db28fc4df6ddf10adbe630d9df620ec13af19039c1869653e60dafa739d2","649324d5abb5464aabe35d86cd0eef16562df811f0971481cee664afa5acbc88","930446bf32192f698b78f8ea4b309d8c2cfe02ab5ad78e4db907417405ebf5e7","5d3e07dbeabff37885262d9b4bd21c3185d95a09a268ab795f81135046a32bf4","7d309fbde13b5e30eff77c07a28b66451b0b50b83564d0cfa6a2a52c8b69aae6","f02da9dd36d7a9aa33c9b2e37ef1f54b0d9ad6a713bae372ae4b72890e40c168","29c188a2c660f99f1b4835022e011c4268d7af989d4b7dda33c0a69ca1a777f8","1ed0bf138e87912d741e28333b58cbf814ae863783b3b404d2454cbabb9c5fc0","3452ee7d8ef0b1bbd47b2a56924a1dc3c79dc84a19d212e9dc496f92e4943aa0","fab58e600970e66547644a44bc9918e3223aa2cbd9e8763cec004b2cfb48827e",{"version":"5943b853fbb3d54c14caf7190a70811ece9a04fd48a0a9f9694078ad9be5cd03","signature":"71e2431e82504b51217a255925d20a8758ad61230024650112b6d925e613b131"},{"version":"b5c8dc504000ccad2588cf2b7a7edca69741d4986ff38a9b8bcd387d0e2dafb1","signature":"7647ca5b6dceccb21afdc7a2e235e039d263ad63a7755615475acde462191303"},{"version":"f672122316a828191c6a0310a6f2c8bad9e4955e98abffe6527e71a1799c90e0","signature":"e5a686c0a9f1859ac2d757d54f5f34fbb5dd47e717bc3d4d99082b03e3097734"},{"version":"4aa0db6f3a8a01032cb54a7963803e97105d7524ec38454cca5a2c2854907941","signature":"48b2f75aa424bb7b059447a4ea27196a9818d9e0924c77d5f8b8b24d3fb9caa3"},"da04ea3f901991d8097ac63ef6fb5967726e3dc1924e2c8efef374b1db9487c6","96c42cfe5614d9f894078048dda1b53409774bd502d584ffa9bee3c1b39537fc","a49dd2c42f34a0f8fd8577340378112785f3a8fa44c5fe6522466421c68f66f2","7a3e0d544a45a2801f7b657fb931e5ceb749cac766560a4cde600c171b41079f","78edf86617005dfa5709c44024989d60398a21bbf865574680e0cdb29e93b88b","0dd44432ff360867ec9422c184e78973fec749dc96920c23aa02088a908cb0cd","06b1afe677e95808681e5260e9f567815e67c59d00eb5de7d21e4754581deb8c","58b3270f2e1111859e0f15c74d2a47b45471a6cda53bb61fadf2d17987ff4c0e","ff6139ad0ecc332393c72a42af66734c3104f775ceeb7af4533fd82df42dfa51","12597a7bb3fa105568418303af2376061d15f57f2d5f24059082043b358dee74","4c2291243804f0e8610c1f05f0d2a3c5a1497e34bf6314378a0857cd42472680","d2e012a1efa7115c2857284eb541e8b906c0d24c5918568e6dd77e2d6a9592f7","99d74aabcb821273945c9f8446f52b9fb27f666d7ee5b00b4814fc29ce72f307","3f1af437818017218c9a8afd6404d25ddb811482952a18c703acbf0889e5d5a4","f7478db71332be7f074506a83b8bd76d52569e022256c2088b27204f1b3b2f22","d4e4c606f38b8a083af300a9011d3bdf77dd63a5a98f05f1566dd84539df6562","e33dedae6123556e3052e6102b2bd64a3c99850b1eb21e27eaed328ccda6f611","391e793b760e7a3e504784021eab7b430a24a87821ad86ea1ae2da88fd2a413a","1356a2fbd07d5f9a5530f9658342bce4f0358f1620f0bba7a923f842ad8d0600","d2c0337f150e9d23259a20d6a6b1db9173f0171162adbd7c42b9a10d53b086b1","54586daaf9e77f8a26b27a4e3cb191f668c54abe9a402c2ce4be19c0b9d95207","95a276eeed4301374463a1725f4bd6a339a6e9dde5ba51910a17f65f8d0c2414","2094effba5caec56950d079ee0c08e175f38dd205d06a877e86cd4bf864fefa1","8c054d37f059c24bb3cc0f1a828009185ff690af19b5c68946074144f8c11904",{"version":"249414b254960054cc118dbfea2ba1a1e97f397cff55cf6a740d9a810fe18369","signature":"e68ea15df38c326d53a31212450dea2aa3a837a6b29aa5bdaf4ceef3b5cfc4db"},"53f6d74dbd78f08ed7b56f6b0a558b7f8d201852ebcde17e7a0be8816abafff2",{"version":"5360ef53b86afac97d950e4f8b70df6de7d8804cb44fc9bad324399469db4141","signature":"26f4ab7bbd5b57bbd62b66da5edff0156ad793b4b6df1ee9ff77bff9e0e5520d"},"a8fa959b0e753ee8da2ae4bb1ceee164ae25fde684682d3dac1f05dd039064c0","14c94f7888c75007a94132f03caef0f6b58bcb136c2994213fd2d3b99f3d7f85","4695042a55a75a6c62dc57f2efe60ef3c7bbe19adedb5081f6e51dd664bbc3f7","b006ad8d854471e7a270bd8918508090961bdc1cfe77ed51f13f471fe682acac","310901df1081433ff7c3b7918496cabb92ded208b04294d3d2bd35acae2de836","c8646410cd2a6bf05eb7e7a51c881776410d07fd5d8f75092a2c815c9c6fda52","37a4a7a5aef4e6a9c652e636aefeef0df9a1cddc24d94dc00a32401a9c9cf8a6","deb2b8baebf3bb0d77453a950dc16dd3f51cbdc12efb69bf8bc4805fbf20fe7e","032108185be5a41a316b4a7872c74331bd574b13499f4b32ce7105ba1c12c339","bd05b91626fdf3e479751850b11e93c3d05ec9dc2afe6e0c1614dd34162aa970","b2ff62f5ded5dc3f30e89fd7d3bd1e5904085326e16ae71cec450b14bb0884e7","afbf3186ef8d68015006b1ed3bbaf54eece8908c27b146b0f7d522842f3210ac","09aea5c0044ff8161e00a9e874bfa5806652270d490dba2a914606f89351ef06","d42ca1c2dc79317b5fb8e14a7d85fc0addc9fe2b142355e34753d60ccc78007a","598b50b11b8daa1bee5f6c59c35ef8df93e05737ec541846634d79bdc60b8503","b40d2724b7cfa63ce888b2e6ebc269c9472109f65072ec9eddb97a83f4801897","2897ce01245d031ff94ec172a8537473ab88c56b139dfcf6d2f620b7b6d4a450","9bbe7d497d72552f0c13b88affff3b9c43dc16037e55ee342e9e7c11d15fc1c8","269867d10a8163319dd29262fcde46cdc275f60fc8750119fe71480474c2b66b","cf0c859d39a640beb86ecc33ec846c32d705f9982aa69e11009e23649934b95f","0e5e5794df0a788165de5a59e25ce055250360a36764e91b060cc1d05e9a9b59","04f00895ed87b76dcfeae85fd8389b10b363d86f08da4d5283f0be5dc42cbee4",{"version":"a254f5dc005eaffffb0afc0c42d168534fc959b2bde70b494afedfe20bfd7dc5","signature":"6a6747a61a1d968c53970b79f35641fba4a17005efc6d021240f3897ce2878fe"},{"version":"4e0094fc185fa5d4aeaacd5f525579bdfd8c2e10fc9ba2b349b312f329aa8b3c","signature":"3f1a08c5204101a5aee11207600d595a3e8cc24ee2b320e6c29edf198573e744"},{"version":"4dd8c5b5144d4121b7aedf21cbc6152f46cf3b773c311f0d6913f771544522ff","signature":"e8209c49bdebdd9b9b12dbee908242ddb48768f43a1bfb809a67b8ced27d2abb"},{"version":"e9526437280f5cf11d114fc5df84f529ca142df90a320a56176e363ebed5c0b5","signature":"8ddb476321ecb63bfd236d0f4fd7f9b8965f1866dae46bd3168f559c302f4e2d"},{"version":"e8a9d476c45af9c0330983441deeb93c39e325ebb73b3385b7644630bbeacf6e","signature":"1daa834e9f98c8e116c64ced04a0d81b7de730466b0d466a2e0b9538bb2eddc7"},{"version":"f12f40fee8a145ca1211b3a4959169a2774d215cca52baca3005a11cc4e623fe","signature":"c64bfbbae6e6e712ce7d9255b331085cf6caab6ef642332f49df24e5604cf740"},{"version":"c33404dfd86ca1a0d23a2477fa33a4077115e6d61671c7b483e5586c76317eae","signature":"5603161d52594be86fd7066626bef3b9166f10f9594fdda6a5e496d8ad56cfd0"},{"version":"c1d5dab3ed6d2e5d8986ce002d6341f49de45533444938cae2eb370e22b9cc7e","signature":"b9c4088f76376b9aa0005a67a2998bbe87c1222af2a62db949b6e5f006e3fb35"},{"version":"013344885a84af2fee522177a8409160cdaf87fec5523cec9a883d958d42785a","signature":"324a12bd7356b69c8f6cf1b75e02bc38cc167e2d4a2073ebffbd93388e224e09"},{"version":"abd0044796f7dd1aa8b94b37980288b6bf6f6ca4edd5617a950e643549e55d42","signature":"97dde781d72037d04abeff50329c971f18fe0b49aeb65454f378b25d97202987"},{"version":"a04dd52280a45c96b6d9ac0af59246320e46f1925d3f0d7d481bdcd9f63927f5","signature":"c6c1d82d09e9b43209287e728d4a58d4d37f29cc774baa2a6538025eabd45c38"},"56c48fb5bb6316dfc27fbad065966b4ddbc38e9a0a1a5060d19b5da405ae7d6e","7091568b9a1b74b699ad09df6c130db712ed089d173a235e301a7a7ee0a4ca44","de33aa2a38affd9e71297ef7ec001a4525502878b09744308fb6518159f77d2d","57476e482c9b4e152bd23d0dc3c29375e48afee0de775674a3c1ea63cb4cf843","3ec4ecf6502ebdb1f3e24c712eb70160c606214ba2e71b4304b5a50fc2e4f293","83f7b6c1dc91deece32c3bee746a43f3616b7cc9f6510764bd53451f6712ff25","c23f2e8772304163fa7e4335be11f3dbdfd720d2209057566b7dfef746ef1862","2a26cb78d3de9708cd656787a663902270c9421ef89188286c3b7ec89b63bb15","e61fda2800677c210116c397dd85079a0956c87fd714826c08b25b10fdd56546","ef7bdfb4f157f9c9b9bd7f5766f0f8e07fac8e7482eec071673f3c9d08082982","d2f2ac1436cbb7c8d122cc7de96521345254e5b36591d9d064d9763de2a7b254","3cd2ba07285d01224f9595924dc7f760c7babb386a6eb825cb551f8d829fe6fa","3ae9770861c2ece5849778e9f15567d95b87df0165c0a5b1312181df19458a56","37b51656ff8302a4556e29c775f311eb9ad813948d2c527405cea041dba3baf3","00abf32ca3af92f8be9ecbc9b63090b4909a756317d791927a83cffd24e9c8ac","cd28efe88fac7a92f3f5cfc7dd3c764f0b31bdaaa061ff044de1639810d6a7da","8b2100d3ba68063b7baf5038f26eefe46543dcebf1e7dbaf46277f24307cefcb","131b7f32092aa78e12fcb2a6db7c71e17f85e076c0635ad8d991b80d10130c19","d1c84af1e6d5fa4a5f4badd45b03b67c9255a675df235a3ec25307a0f5524278","aa4d6dc9282133162a76109d99c5795583276c4fd27284f128d484acf12b0841","3355c4c572f076ad963d95f0e28075b8558e2ab492c84eb94f9e2c48f1c2368b","5638cfd48b0c56bc9ed0c779d53a40b92c9cd9c9d6312e3a21c52542d38094f3","827eb54656695635a6e25543f711f0fe86d1083e5e1c0e84f394ffc122bd3ad7","2309cee540edc190aa607149b673b437cb8807f4e8d921bf7f5a50e6aa8d609c","703509e96cc30dce834ef8188c958c69306473b8a7e5cb3a6f324cee05a1f7bb","900daf04dc607dc3858c0f976d6f9e17b829a07de58d62dc6f730eaf06986075","08e0ac95e650bd4c87145b6ab2257b70c06254bf76a0b9f8a7d60c51fb8ed6b8","4b57ec505a035491c692b89af2c6902c312ec22f8fa9b6dae3e93686659fb7e0","7d796672940d3b2d37f2edea4d7bcf4c7993966286006228cbc8fa35ac92871d","132fd53917ed7f55275faa52c35e4d4d41e9576fea231d12740b723df2bade93","de2ecf9b1d6f60338f7b59b6f593ef77af9abd0e70ba8f2942953d0c6e1850af","ef3e2ea3690a42db943ff732df55409e5658ae4e67370b331cd9daa24cabb4e0","53968130af2a091c147ddbdd9c8cfa19e083dd154584d5bef39ad25535650c35","27ca878cf70b3030e8403f51ce65949d364fa776d6dae3527f91635a40836672","178e2de7a8702742957ad24deaeddec84a48cd913b5d932b16afd2a707b3e416","a45ee7555d019a67fbe092898d1aef0b1d02a9f6679ab84461ff515b4460d706","8c95f96ccd4be0674944077aec1e4f2cccd515ca06d4327562dd017250e7d3fc","6fe7571c8a80808224648046008d1366ba4e29206ac79ce4c56d6fab3350492b","ae2fbee237555ff41daf5275bcc337870886f673b2f029815a8cb6802dfaf2ff","a04521ed86b3bff338b629100837b29c7b4763908ea291d1015276a6ebee1a8e","361552e99ecdb079dabb805c34070d2b89c91ceb23c8e738c1e589e303567748","a64568c16a5821575de4f6280ba1ea4686a1ceecd649fa90ba957c8b1b007013","172a32ac07136bb10578df96b57d3a7fe42795d95bca5f281bf36e83b20715bc","dee4dbaef83bb1061a44f39a91a59300d3dc02528eb57f748222235dd8e02159","a39c32b055d2e6103e5c49b9aed2d7bb5b06571c98fc31105264d280431bdbd7","618ebb93311695a13844118cdc9a7314dd3a2c6f35092d87f76828cac555ddc9","d36c3d116ce59a3f072c0014f0c020c76e916ba906066ddc4f193f546a43bceb","9bed8447acaa89be63540ec500b165442fcb0de020015175b5a5c66d42a61c4a","f128a2d1209d243ba2f7755c2fc313be2c7569fa0d9b4dc5cc60714fb0cc6634","a17e6861b709149f29a2bd896cee94526df2f06b24a2b60614b56649b5e9aabe","9c79ace686f720f4dd833740f7190e12cdce363362c982c164745527a412ef40","439850ca5075c6db55487b2c7fb27a6051fecbf180eee0809b67bb2783a89813","75d48857bc4216880443a24d985071262bb8b89a9952c77fd430cb0caa21f9bf","33e40cf77499b3d9712db82e15683373925e85817dbe82a24ee0ee6e44bffb70","d5bbd453310990e851908183fbbef9e6e2db8e0c86d97b42b723fd5238f71c81","95e76bed30f6e993e1fcc1b90a4675682e4800ae43403547a775d6e3c7ab2b0f","8b206b995edc6dd849b85c1c56531b9780e3ba75302fd02a2d173f008028707e","97040b190f0daa10cf9a15e51a2fac66b26ddefd7b65998bd6027d1dd67647b7","877c25dfae100e555014e45d1d80364496a0c876201e5dea91a0fd0a6a4ff765","d53f9f96afd41359edeb2d5ad98559f3bfad261391d5aef95320fefb0c6a8742","23d98226adf3be74e1f0470f85e7fd154cd7aa979d60b43190a7437f0d0426eb","639f9321a98b734242a3573764d7f1de5369b0b0b10c768ae37639e8bda5dd03","cf18e9d003f1d3d1d61a04eb2d1cff3e8a8cf9cd306d0532ea82700069f2fc42","a42c39d8b7d1b1eccb69c7919ea60dcc2670ea672a0af90b70a730974ec0e9fb","dc5fe5f6b39c3fdfaeba333bcd5f0cc98bb3068797a4d7010f585366f549ddf7","4a3ab8cb278bfd1f18f24cc45a02188b63afa6aef50035df6d79c4638f24059a","e724c9ce92f2a8a31ed260764c5455852a13d292e2a31d26acc6840ec0e83208","40220ba1b091aff0cb20df5467202b62af561b09fcf3b24c22a60066d46f9e62","30abf588759f9e828a94f0c7f031eae094bb668c6dd4d902fa296779267c05c5","bd875d031474860131eadb42300aa57a71527bbb2b239d5b31ab6a9e352c84f0","773bf9af93b5027de9b5b4c779d5cda35f0eb92c7f43a97f2ef3ca081495a191","617f2b4f5115969c7b0f225d4962e6bec1cec7e5c687d84370eba4931b7dd047","59625b1fcc91f2686751fd5b623126f434d7b405bd8d866a555963ce2ac69846","5e0dc1bd24b45c46f2188d2f7f4b67f311610c72b706f963c5bf04c2e1fcc35d","fc69ffd599d3e525aba38f80c7cc2ecd187dbf148287364c75f199c8294a00e6","2ad138be6972de52ed966e6402aa6403af79e9f183486e0a725ffa075a0555fb","480274a4f75a7b3bd5c697a55e1905887b62a928592c0db3c282525fb235ba70","967fb6e86b55db228ab50c81f85f39d6a23a0c15bcfa6e19d255e0952d33a65a","c39e7d32dddfcdaa93b18b99fa430ebb1d6ba366459563d400add22f92e3644b","e3932de252bbe43132ad3226865b2a376ad945dbc1d767540c01b7bddc6477c2","b2f52f3cbd863dc4e690614b5cddbf412dea435d0de099db6d8adfd3cbefcd65","557c93b35f3b58e6844a9b8817559da1e0641f7f08f918e3cd1a8efee126746f","80ad2ae93d57dadac5e377ec6743df5e0211ea30bafd4b648c52366af057bb2b","07f90213b5800a0b43a6d6f309517dcca5afc6ffeb4bed396878a29fc5d6ceb0","bb0e637020f81cb40d16f202c3a783f0e269e29547fb84ca9f187a5ea8556965","462da802b50ac0d94a3c8f7f58a6a0aa08108bfc1394449ea56f1e0f63f5132e","2ccea88888048bbfcacbc9531a5596ea48a3e7dcd0a25f531a81bb717903ba4f","dfef9c847826fac5c480b6d972d3a597b932a2308f330a4416eeeb81c63ba1b2","7f3413d02ad371ab1e5630539aa572ad2e6b129b49946680a0ccc4d2a7f8df07","21f706150e32f03ecd1714d7a7ac55ce3caadc7c7a2a960ba57cc5d39ad84c9d","dbaabf2fd9d9d616427f5c594e251bc8cad3010afeeae96566cf594d061263d1","da1963f37d566ff9f71bf8ca5c628656bae02fc9509050041547e9c7063cc58f","57e4bed825036f7f1328505bc512af492f28b1b57a48f1ff9b6d90b930041a52","3ef0957915b7719ac58153eaea6ce810ff8688276e570f8938455f3ec7930df7","05e0ad043fdd4e2d4874a97bd716174af64d63e43851c09830c00e819a80d395","2dff0ed1eb2046fbdbc2c13914117e1ff1112e217f90542ea5e7f41e39f0393e","a0ba1e2711c2520189ed980225e7a429b0706a1eabf9113e53f0e72550a1b23d","bc3ea94e755b90e96a589ea9d293551c21860db6c1455f04607a732902e1e686","badb4cfbfc6eca3a038be22c76297bec0b5c1478d8b73d60e8b50725b7dcc15c","21e7e0eddddc112f2b891d1066eac74680291db768d3ef9b908965935380ab98","d7443d7b5982dd467848beb2484d9f1a6a569cb162d07fb52389de31e946cfb9","516efe800aaa0b7504b71f2d7e7e9bed5f28eb6c9c739bfdf237f09c7addea46","10ae729013e6620dc937df5dd7077c34e29ad313a28aa75cec39957640cdc8b0","ac5f95dee5e4787fa7c68a81a052cdfa0e03adec8331d3276389384df36cb849","82a68bb9c764a52b9edc0a7fbe6ca7a53ddb3b81532beafb425d402136d31d98","6cf4c4adc1177c401ef8cd74e2904e7f83194c796930620e91663d9d41d5a1e4","955a15609b0b382eaefedbe00bd7b669244b05692989a0bfb44e206f2479a7da",{"version":"cfd225912d5e550fa821bc397ac8677db3e7f2d58d2d2971248c9155ad9d0362","signature":"a5ac165a57188ab19afc0375d08a98fb8886cfdb95bfeccb7cdae09c0854cc2f"},{"version":"45c579f619700f9e558c8aecfc5e2ce26b2aaaccfdbe70a535e268d704c3de35","signature":"60b0940b93afc5295b98c71b9326c668122e0ca683d286353cbce26fb0e3d115"},{"version":"e7e3e68d30ba670b6f51a795536616ee5208cf60ba616cd6050080a1d9ac0d55","signature":"c8e4d1a0faefca5a148883813ce67c5c71aae156a42ac974c4d99f9e8d669057"},{"version":"7d4e42608954a097462fdfb81690dd8c7e8b144bf9930b6c140c0dede33e054f","signature":"c7f150c313799f24e4c32a15787d578502cce86ad19e1d5d71834e5566117256"},{"version":"e8c299d506e7ae57f1821abd8315ffa42be38dc9d232333ace8ecbdcb26d7ff0","signature":"ecf5df62f1b8a5cb237be9df89ef195139c3bf7866dd330584175335cc164bab"},"4489c6a9fde8934733aa7df6f7911461ee6e9e4ad092736bd416f6b2cc20b2c6","2c8e55457aaf4902941dfdba4061935922e8ee6e120539c9801cd7b400fae050","8041cfce439ff29d339742389de04c136e3029d6b1817f07b2d7fcbfb7534990","670a76db379b27c8ff42f1ba927828a22862e2ab0b0908e38b671f0e912cc5ed","9d38964b57191567a14b396422c87488cecd48f405c642daa734159875ee81d9","069bebfee29864e3955378107e243508b163e77ab10de6a5ee03ae06939f0bb9",{"version":"64d4b35c5456adf258d2cf56c341e203a073253f229ef3208fc0d5020253b241","affectsGlobalScope":true},"ee7d8894904b465b072be0d2e4b45cf6b887cdba16a467645c4e200982ece7ea","f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","bc3cba7b0af2d52e7425299aee518db479d44004eff6fbbd206d1ee7e5ec3fb5","afe73051ff6a03a9565cbd8ebb0e956ee3df5e913ad5c1ded64218aabfa3dcb5","035a5df183489c2e22f3cf59fc1ed2b043d27f357eecc0eb8d8e840059d44245","a4809f4d92317535e6b22b01019437030077a76fec1d93b9881c9ed4738fcc54","5f53fa0bd22096d2a78533f94e02c899143b8f0f9891a46965294ee8b91a9434","0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2","d8aab31ba8e618cc3eea10b0945de81cb93b7e8150a013a482332263b9305322","462bccdf75fcafc1ae8c30400c9425e1a4681db5d605d1a0edb4f990a54d8094","5923d8facbac6ecf7c84739a5c701a57af94a6f6648d6229a6c768cf28f0f8cb","7adecb2c3238794c378d336a8182d4c3dd2c4fa6fa1785e2797a3db550edea62","dc12dc0e5aa06f4e1a7692149b78f89116af823b9e1f1e4eae140cd3e0e674e6","1bfc6565b90c8771615cd8cfcf9b36efc0275e5e83ac7d9181307e96eb495161","8a8a96898906f065f296665e411f51010b51372fa260d5373bf9f64356703190","7f82ef88bdb67d9a850dd1c7cd2d690f33e0f0acd208e3c9eba086f3670d4f73",{"version":"ccfd8774cd9b929f63ff7dcf657977eb0652e3547f1fcac1b3a1dc5db22d4d58","affectsGlobalScope":true},"d92dc90fecd2552db74d8dc3c6fb4db9145b2aa0efe2c127236ba035969068d4","96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","8841e2aa774b89bd23302dede20663306dc1b9902431ac64b24be8b8d0e3f649","916be7d770b0ae0406be9486ac12eb9825f21514961dd050594c4b250617d5a8","254d9fb8c872d73d34594be8a200fd7311dbfa10a4116bfc465fba408052f2b3","d88a5e779faf033be3d52142a04fbe1cb96009868e3bbdd296b2bc6c59e06c0e","d8f7109e14f20eb735225a62fd3f8366da1a8349e90331cdad57f4b04caf6c5a","cf3d384d082b933d987c4e2fe7bfb8710adfd9dc8155190056ed6695a25a559e","9871b7ee672bc16c78833bdab3052615834b08375cb144e4d2cba74473f4a589","c863198dae89420f3c552b5a03da6ed6d0acfa3807a64772b895db624b0de707","8b03a5e327d7db67112ebbc93b4f744133eda2c1743dbb0a990c61a8007823ef","86c73f2ee1752bac8eeeece234fd05dfcf0637a4fbd8032e4f5f43102faa8eec","42fad1f540271e35ca37cecda12c4ce2eef27f0f5cf0f8dd761d723c744d3159","ff3743a5de32bee10906aff63d1de726f6a7fd6ee2da4b8229054dfa69de2c34","83acd370f7f84f203e71ebba33ba61b7f1291ca027d7f9a662c6307d74e4ac22","1445cec898f90bdd18b2949b9590b3c012f5b7e1804e6e329fb0fe053946d5ec","0e5318ec2275d8da858b541920d9306650ae6ac8012f0e872fe66eb50321a669","cf530297c3fb3a92ec9591dd4fa229d58b5981e45fe6702a0bd2bea53a5e59be","c1f6f7d08d42148ddfe164d36d7aba91f467dbcb3caa715966ff95f55048b3a4","f4e9bf9103191ef3b3612d3ec0044ca4044ca5be27711fe648ada06fad4bcc85","0c1ee27b8f6a00097c2d6d91a21ee4d096ab52c1e28350f6362542b55380059a","7677d5b0db9e020d3017720f853ba18f415219fb3a9597343b1b1012cfd699f7","bc1c6bc119c1784b1a2be6d9c47addec0d83ef0d52c8fbe1f14a51b4dfffc675","52cf2ce99c2a23de70225e252e9822a22b4e0adb82643ab0b710858810e00bf1","770625067bb27a20b9826255a8d47b6b5b0a2d3dfcbd21f89904c731f671ba77","d1ed6765f4d7906a05968fb5cd6d1db8afa14dbe512a4884e8ea5c0f5e142c80","799c0f1b07c092626cf1efd71d459997635911bb5f7fc1196efe449bba87e965","2a184e4462b9914a30b1b5c41cf80c6d3428f17b20d3afb711fff3f0644001fd","9eabde32a3aa5d80de34af2c2206cdc3ee094c6504a8d0c2d6d20c7c179503cc","397c8051b6cfcb48aa22656f0faca2553c5f56187262135162ee79d2b2f6c966","a8ead142e0c87dcd5dc130eba1f8eeed506b08952d905c47621dc2f583b1bff9","a02f10ea5f73130efca046429254a4e3c06b5475baecc8f7b99a0014731be8b3","c2576a4083232b0e2d9bd06875dd43d371dee2e090325a9eac0133fd5650c1cb","4c9a0564bb317349de6a24eb4efea8bb79898fa72ad63a1809165f5bd42970dd","f40ac11d8859092d20f953aae14ba967282c3bb056431a37fced1866ec7a2681","cc11e9e79d4746cc59e0e17473a59d6f104692fd0eeea1bdb2e206eabed83b03","b444a410d34fb5e98aa5ee2b381362044f4884652e8bc8a11c8fe14bbd85518e","c35808c1f5e16d2c571aa65067e3cb95afeff843b259ecfa2fc107a9519b5392","14d5dc055143e941c8743c6a21fa459f961cbc3deedf1bfe47b11587ca4b3ef5","a3ad4e1fc542751005267d50a6298e6765928c0c3a8dce1572f2ba6ca518661c","f237e7c97a3a89f4591afd49ecb3bd8d14f51a1c4adc8fcae3430febedff5eb6","3ffdfbec93b7aed71082af62b8c3e0cc71261cc68d796665faa1e91604fbae8f","662201f943ed45b1ad600d03a90dffe20841e725203ced8b708c91fcd7f9379a","c9ef74c64ed051ea5b958621e7fb853fe3b56e8787c1587aefc6ea988b3c7e79","2462ccfac5f3375794b861abaa81da380f1bbd9401de59ffa43119a0b644253d","34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","7d8ddf0f021c53099e34ee831a06c394d50371816caa98684812f089b4c6b3d4","7d2a0ba1297be385a89b5515b88cd31b4a1eeef5236f710166dc1b36b1741e1b","9d92b037978bb9525bc4b673ebddd443277542e010c0aef019c03a170ccdaa73","ab82804a14454734010dcdcd43f564ff7b0389bee4c5692eec76ff5b30d4cf66","bae8d023ef6b23df7da26f51cea44321f95817c190342a36882e93b80d07a960","ae271d475b632ce7b03fea6d9cf6da72439e57a109672671cbc79f54e1386938"],"options":{"composite":true,"declaration":true,"declarationMap":true,"emitDeclarationOnly":true,"esModuleInterop":true,"inlineSources":true,"module":1,"outDir":"./types","rootDir":"../src","sourceMap":true,"strict":true,"target":7},"fileIdsList":[[679],[92,128,129,130,145],[129,130,146,147],[128,129],[128,145,148,151],[128,148,151,152],[149,150,151,153,154],[128,151],[128,145,148,149,150,153],[128,136],[128],[92,128],[80,128],[132,133,134,135,136,137,138,139,140,141,142,143,144],[128,134,135],[128,134,136],[461,465,466],[461,464],[464],[465,467,469],[461,464,465,466,467,468],[461,464,468,472,473,474],[461,464,468,475],[461],[461,462],[462,463],[461,464,470,473,475,476],[471],[472,474,478,481,482],[472,474,482],[128,464,468,472,473,475,478],[472,482],[472,475,479],[464,473,475],[472,475,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493],[472,480],[128,480],[461,468,472,473,474,475,476,479],[472,474,478,480],[472,479,480],[128,155,265,266],[265],[266,267],[128,260],[260,261,262,263,264],[128,232,239,240],[128,232,239,240,260],[128,232,239,240,244],[128,232,239,240,241,243,244],[128,232,239,240,242],[128,232,239,240,245,246,248,249],[238,260],[230,239,240,245,246],[232,238,239],[128,232,239,240,245],[128,232,239,240,243],[128,232,239,240,256],[128,232,239,240,257],[131,229,232,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259],[230],[230,231],[92,128,265,268,276],[268,277],[277,278],[167,552],[167,550,552,553,554],[167,540],[540],[540,541,542,543,544,545,546,547,548,549],[550],[551],[204],[204,215,216],[216,217,218],[325,334,335,338],[325,334,337],[325,334,336,338],[326,329,330,332],[326,327,328],[329,330,332,333],[326,327,331],[337,343],[325,334,337,343],[334,337,343],[334,337,339,340,341,342],[325,334,335,336,337,338,343],[325,334],[326],[64,167,284],[167,298,300],[167,300,301,310],[64,167,281,283,284,297],[64,167],[282],[285],[64,284],[286,287,296],[295],[283,284,289,295,297,298,299,301,311,312,427],[64,167,428],[167,289,297],[290],[288,291,292,293,294],[64,167,282,284,287],[167,299,426],[58,64],[535,536,537,538],[128,270,567],[128,270,568],[568],[271],[128,270,271],[271,272,273,274,275],[128,270],[270,570],[270,571],[270,570,571],[570,571,572,573,574,575,576,577,578,579],[81,128,270,570,571],[125,128,270,570,571],[167,204,211,302],[303],[128,167,270,303,305],[128,167,204,211,270,303],[305],[302,303,304,305,306,307,308,309],[128,270,304,307],[302,307],[167,211],[167,313],[313,314],[313,314,315,316],[167],[188,426,615,633,634,647,670],[668],[167,645,658,666,667,669],[188,426,629,656],[657],[128,211,270,569,580,633,634,635,647],[167,188,633,647],[167,580],[580,636],[638],[635,636,637,639,642,644],[636,640,645],[641],[580,636,637],[636,637],[643],[167,184,188,426,501,615,625,633,634,645,647,650,652,658,660,663],[650,663,664,665],[633,647],[646,647,648,649],[633,647,648],[167,633,646,647],[167,633,647],[661,662],[167,188,625,661],[167,426,625],[659],[167,426,615,633,634,647,666],[64,167,624],[128,167,318],[167,423],[392],[167,318,392,420,423,424,425],[128,167,317,318],[319,320,321,322,421,422],[58,64,420],[58,64,321],[353],[353,365],[353,354,367,369],[353,365,368],[353,359],[353,358,360],[358,359,360,361],[363,364],[354,355,356,357,362,365,366,367,368,369,370,371],[353,372,373,374,375],[353,372,423],[407],[420],[410,411,412,413,414,415,416,417,418],[167,345],[392,416,423],[345,420,423],[64],[345,346,393,396,406,407,408,419],[64,376,392],[420,423],[344,346],[346],[423],[393],[167,396],[323,324,347,348,349,350,351,352,394,395,397,398,399,400,401,402,403,404,405],[167,398],[323,324,347,348,349,350,351,352,394,395,397,398,399,400,401,402,403,404,423],[167,344,345],[310,406],[167,346],[390],[64,377],[378,379,380,381,382,383,384,385,386,387,388,389],[377,390,391],[373],[376],[426],[584],[583],[64,167,590],[344],[167,317,426],[64,426,597,598],[581,582,584,585,586,587,588,591,592,593,594,595,596,597,599,600,601,616,617,619,620,621,622,623,626,627,628,630,631,632],[64,167,615],[64,167,426,584,619],[158],[618],[64,167,344,426,617],[64,426,617],[64,426,615,618,620,625,626],[64,167,584,587,599,619,620],[426,629],[626],[199],[199,200,201],[67],[64,67],[65,66,67,68,69,70,71,72,73,74,75,156,159,160,161,162,163,164,165,166],[58,64,65],[67,73,75,155],[67,68],[64,162],[128,235],[233,234,237],[233,236],[128,233],[194,195],[679,680,681,682,683],[679,681],[157],[685,686,687],[93,128],[690],[691],[702],[696,701],[447,449,450,451,452,453,454,455,456,457,458,459],[447,448,450,451,452,453,454,455,456,457,458,459],[448,449,450,451,452,453,454,455,456,457,458,459],[447,448,449,451,452,453,454,455,456,457,458,459],[447,448,449,450,452,453,454,455,456,457,458,459],[447,448,449,450,451,453,454,455,456,457,458,459],[447,448,449,450,451,452,454,455,456,457,458,459],[447,448,449,450,451,452,453,455,456,457,458,459],[447,448,449,450,451,452,453,454,456,457,458,459],[447,448,449,450,451,452,453,454,455,457,458,459],[447,448,449,450,451,452,453,454,455,456,458,459],[447,448,449,450,451,452,453,454,455,456,457,459],[447,448,449,450,451,452,453,454,455,456,457,458],[76],[79],[80,85,112],[81,92,93,100,109,120],[81,82,92,100],[83,121],[84,85,93,101],[85,109,117],[86,88,92,100],[87],[88,89],[92],[91,92],[79,92],[92,93,94,109,120],[92,93,94,109],[92,95,100,109,120],[92,93,95,96,100,109,117,120],[95,97,109,117,120],[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],[92,98],[99,120,125],[88,92,100,109],[101],[102],[79,103],[104,119,125],[105],[106],[92,107],[107,108,121,123],[80,92,109,110,111],[80,109,111],[109,110],[112],[113],[92,115,116],[115,116],[85,100,109,117],[118],[100,119],[80,95,106,120],[85,121],[109,122],[123],[124],[80,85,92,94,103,109,120,123,125],[109,126],[128,269],[710,749],[710,734,749],[749],[710],[710,735,749],[710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748],[735,749],[750],[753],[651],[441],[443],[441,442,443,444,445],[441,443],[128,513,519],[128,513,519,520,524],[128,519,520,530],[128,519,530],[128,512,513,514,515,516,517,518,521,524],[128,512,513,519,520],[128,513,519,520],[507,508,509,510,511],[512],[509,512],[510],[521,522,523],[524],[521,524],[513,519],[525,526,527,528],[525],[512,513,514,515,516,517,518,519,521,524,529],[589],[179],[179,180,181,182,183],[168,169,170,171,172,173,174,175,176,177,178],[694,697],[694,697,698,699],[696],[693,700],[495,496],[695],[57,59,60,61,62,63],[57,58],[59],[58,59],[57,59],[188,428,437,670],[671,672],[184,437,502,671],[167,188,317],[499,500],[167,188,191,198,224,228,440,446,459],[46,167,188,192,198,224,440,477,494,556,557,562,563],[188,198,224,228,446,534],[92,167,188,192,198,224,317,440,446,498,501,502,503,504,562,564],[167,188,198,224,228,440,503,505],[188,446,534,675],[675,676],[188,534,676],[52,145,167,192,198,477,494,555,562],[52,192,198,477,494,562],[52,198,477,494,562],[188,198,440,560,561,564],[47,167,188,198,224,228,437,440,559,560,561,562,564,673],[167,188,198,224,228,446,558,562],[167,188,198,224,228,440,459,506,531,534,560,562],[47,52,92,167,184,188,198,224,317,440,446,477,494,501,502,556,557,558,559,561,562],[167,192,198,464,497,505,532,561],[198],[533],[460,504,505,532,559,560,561,562,564,565,566,674,677],[167,198,506,530],[506,531],[167,198,562],[167,184,185,186],[185],[186],[56,185,186,187],[189],[189,190,193,197],[196],[167,191,192],[212,213,214],[211,212],[167,211,212],[167,204,211],[167,204],[167,205],[205,206,207,208,209,210],[155,167,184,188,279,280,428,435],[436],[92,128,167,188],[429],[198,429],[429,430,431,432,433,434],[167,188,191,198,202,203,220,221],[220],[203,220,222,223],[167,198,215,219],[167,607,608,609],[167,188,198,602,605,607,610],[167,184,188,198,317,501,602,603,604,605,606,608,609,610],[167,188,607],[317,607,608,610],[605,606,607,608,609,610,614],[167,211,607,609,615],[167,211,606,607,608],[611,612,613],[167,198,211,606,608,609],[167,211,606,608,609],[167,211,608,610],[55,188,198,653,654],[655],[167,188,224,225],[128,167,188,224,225],[225,226,227],[167,224],[188,437,438],[438,439],[188,191,224,228,440],[167,188,192,224,440,494,556,557,563],[188,224,228,534],[92,167,188,224,440,501,503,504,564],[167,188,224,228,440,503,505],[188,675],[192,494],[494],[188,440,560,561,564],[188,224,228,437,440,559,560,564,673],[167,188,224,228],[167,188,224,228,440,506,560],[92,167,184,188,224,440,477,494,501,559,561],[167,192,464,505,532,561],[167,506]],"referencedMap":[[681,1],[146,2],[148,3],[130,4],[152,5],[153,6],[149,6],[155,7],[150,6],[154,8],[151,9],[137,10],[134,11],[141,12],[135,10],[132,13],[145,14],[139,11],[136,15],[138,16],[467,17],[466,18],[465,19],[470,20],[469,21],[475,22],[476,23],[498,18],[462,24],[463,25],[464,26],[477,27],[472,28],[483,29],[484,30],[479,31],[485,32],[486,33],[487,33],[478,34],[494,35],[489,29],[488,36],[490,37],[480,38],[491,32],[492,30],[482,39],[493,36],[481,40],[473,18],[267,41],[266,42],[268,43],[263,44],[261,44],[262,44],[265,45],[247,46],[252,47],[241,46],[246,48],[245,49],[243,50],[250,51],[251,46],[253,52],[248,53],[240,54],[254,55],[256,56],[257,57],[258,58],[260,59],[231,60],[232,61],[277,62],[278,63],[279,64],[553,65],[555,66],[541,67],[542,68],[543,68],[544,67],[545,67],[546,68],[550,69],[547,67],[548,68],[549,68],[551,70],[552,71],[216,72],[217,73],[218,73],[219,74],[336,75],[338,76],[337,77],[333,78],[329,79],[330,79],[334,80],[332,81],[339,82],[340,83],[341,84],[343,85],[342,82],[344,86],[335,87],[328,88],[331,79],[300,89],[301,90],[311,91],[298,92],[281,93],[283,94],[282,93],[286,95],[285,96],[297,97],[287,93],[296,98],[428,99],[288,100],[290,101],[291,102],[292,93],[295,103],[294,104],[312,90],[427,105],[284,106],[539,107],[568,108],[567,109],[569,110],[273,111],[274,111],[271,72],[272,112],[276,113],[275,114],[571,115],[574,116],[573,117],[580,118],[576,117],[575,119],[578,117],[577,120],[579,116],[572,116],[303,121],[304,122],[307,123],[305,124],[306,125],[310,126],[308,127],[309,128],[302,129],[314,130],[315,131],[317,132],[313,133],[204,12],[668,134],[669,135],[670,136],[657,137],[658,138],[636,139],[635,140],[637,141],[638,142],[639,143],[645,144],[641,145],[642,146],[640,147],[643,148],[644,149],[664,150],[666,151],[648,152],[650,153],[649,154],[647,155],[646,156],[663,157],[662,158],[661,159],[665,152],[659,133],[660,160],[667,161],[625,162],[624,93],[424,163],[318,164],[425,165],[426,166],[319,167],[320,133],[321,133],[423,168],[421,169],[322,170],[353,133],[354,171],[355,171],[356,171],[357,171],[366,171],[367,171],[368,172],[370,173],[371,171],[369,174],[358,171],[360,175],[361,176],[359,171],[362,177],[363,171],[364,171],[365,178],[372,179],[376,180],[374,171],[373,171],[375,181],[408,182],[410,133],[411,183],[419,184],[412,133],[413,133],[414,185],[415,133],[417,186],[416,187],[418,188],[420,189],[393,190],[323,183],[324,191],[347,192],[348,193],[349,192],[351,133],[352,194],[394,195],[397,196],[406,197],[399,198],[398,133],[400,133],[401,164],[405,199],[402,194],[403,196],[404,183],[346,200],[407,201],[396,202],[391,203],[378,204],[387,204],[379,204],[380,204],[389,204],[381,204],[382,204],[390,205],[388,204],[383,204],[386,204],[384,204],[385,204],[392,206],[377,188],[598,207],[629,208],[582,209],[585,210],[586,211],[588,210],[591,212],[594,213],[596,214],[599,215],[633,216],[616,217],[601,133],[620,218],[621,219],[619,220],[618,221],[622,222],[627,223],[617,106],[626,224],[630,225],[631,226],[632,133],[584,211],[200,227],[201,227],[202,228],[65,188],[66,188],[68,229],[69,188],[70,188],[71,230],[67,188],[167,231],[75,232],[156,233],[159,219],[165,234],[166,235],[236,236],[235,11],[238,237],[233,11],[237,238],[234,239],[196,240],[684,241],[680,1],[682,242],[683,1],[192,11],[158,243],[688,244],[689,245],[691,246],[692,247],[703,248],[702,249],[448,250],[449,251],[447,252],[450,253],[451,254],[452,255],[453,256],[454,257],[455,258],[456,259],[457,260],[458,261],[459,262],[76,263],[77,263],[79,264],[80,265],[81,266],[82,267],[83,268],[84,269],[85,270],[86,271],[87,272],[88,273],[89,273],[90,274],[91,275],[92,276],[93,277],[94,278],[95,279],[96,280],[97,281],[128,282],[98,283],[99,284],[100,285],[101,286],[102,287],[103,288],[104,289],[105,290],[106,291],[107,292],[108,293],[109,294],[111,295],[110,296],[112,297],[113,298],[115,299],[116,300],[117,301],[118,302],[119,303],[120,304],[121,305],[122,306],[123,307],[124,308],[125,309],[126,310],[707,11],[270,311],[709,11],[734,312],[735,313],[710,314],[713,314],[732,312],[733,312],[723,312],[722,315],[720,312],[715,312],[728,312],[726,312],[730,312],[714,312],[727,312],[731,312],[716,312],[717,312],[729,312],[711,312],[718,312],[719,312],[721,312],[725,312],[736,316],[724,312],[712,312],[749,317],[743,316],[745,318],[744,316],[737,316],[738,316],[740,316],[742,316],[746,318],[747,318],[739,318],[741,318],[751,319],[754,320],[652,321],[442,322],[444,323],[446,324],[445,325],[514,326],[521,327],[515,328],[516,329],[519,330],[517,331],[518,332],[512,333],[507,334],[508,334],[510,335],[509,336],[511,334],[524,337],[523,338],[522,339],[513,11],[520,340],[529,341],[527,342],[530,343],[590,344],[175,345],[177,345],[176,345],[174,345],[184,346],[179,347],[170,345],[171,345],[172,345],[173,345],[698,348],[700,349],[699,348],[697,350],[701,351],[497,352],[696,353],[64,354],[59,355],[60,356],[61,356],[62,357],[63,357],[58,358],[671,359],[673,360],[672,361],[499,362],[501,363],[460,364],[564,365],[565,366],[505,367],[504,368],[676,369],[677,370],[675,371],[556,372],[557,373],[563,374],[566,375],[674,376],[559,377],[561,378],[560,379],[562,380],[533,381],[534,382],[678,383],[506,133],[531,384],[532,385],[558,386],[187,387],[186,388],[185,389],[188,390],[190,391],[198,392],[197,393],[193,394],[215,395],[213,396],[214,397],[212,398],[205,399],[206,400],[207,400],[209,400],[211,401],[210,400],[436,402],[437,403],[429,404],[434,405],[433,405],[430,405],[431,406],[432,405],[435,407],[222,408],[221,409],[223,409],[224,410],[220,411],[610,412],[608,413],[607,414],[605,415],[609,416],[615,417],[604,418],[611,419],[614,420],[612,421],[613,422],[606,423],[655,424],[656,425],[654,425],[226,426],[227,427],[228,428],[225,429],[439,430],[440,431]],"exportedModulesMap":[[681,1],[146,2],[148,3],[130,4],[152,5],[153,6],[149,6],[155,7],[150,6],[154,8],[151,9],[137,10],[134,11],[141,12],[135,10],[132,13],[145,14],[139,11],[136,15],[138,16],[467,17],[466,18],[465,19],[470,20],[469,21],[475,22],[476,23],[498,18],[462,24],[463,25],[464,26],[477,27],[472,28],[483,29],[484,30],[479,31],[485,32],[486,33],[487,33],[478,34],[494,35],[489,29],[488,36],[490,37],[480,38],[491,32],[492,30],[482,39],[493,36],[481,40],[473,18],[267,41],[266,42],[268,43],[263,44],[261,44],[262,44],[265,45],[247,46],[252,47],[241,46],[246,48],[245,49],[243,50],[250,51],[251,46],[253,52],[248,53],[240,54],[254,55],[256,56],[257,57],[258,58],[260,59],[231,60],[232,61],[277,62],[278,63],[279,64],[553,65],[555,66],[541,67],[542,68],[543,68],[544,67],[545,67],[546,68],[550,69],[547,67],[548,68],[549,68],[551,70],[552,71],[216,72],[217,73],[218,73],[219,74],[336,75],[338,76],[337,77],[333,78],[329,79],[330,79],[334,80],[332,81],[339,82],[340,83],[341,84],[343,85],[342,82],[344,86],[335,87],[328,88],[331,79],[300,89],[301,90],[311,91],[298,92],[281,93],[283,94],[282,93],[286,95],[285,96],[297,97],[287,93],[296,98],[428,99],[288,100],[290,101],[291,102],[292,93],[295,103],[294,104],[312,90],[427,105],[284,106],[539,107],[568,108],[567,109],[569,110],[273,111],[274,111],[271,72],[272,112],[276,113],[275,114],[571,115],[574,116],[573,117],[580,118],[576,117],[575,119],[578,117],[577,120],[579,116],[572,116],[303,121],[304,122],[307,123],[305,124],[306,125],[310,126],[308,127],[309,128],[302,129],[314,130],[315,131],[317,132],[313,133],[204,12],[668,134],[669,135],[670,136],[657,137],[658,138],[636,139],[635,140],[637,141],[638,142],[639,143],[645,144],[641,145],[642,146],[640,147],[643,148],[644,149],[664,150],[666,151],[648,152],[650,153],[649,154],[647,155],[646,156],[663,157],[662,158],[661,159],[665,152],[659,133],[660,160],[667,161],[625,162],[624,93],[424,163],[318,164],[425,165],[426,166],[319,167],[320,133],[321,133],[423,168],[421,169],[322,170],[353,133],[354,171],[355,171],[356,171],[357,171],[366,171],[367,171],[368,172],[370,173],[371,171],[369,174],[358,171],[360,175],[361,176],[359,171],[362,177],[363,171],[364,171],[365,178],[372,179],[376,180],[374,171],[373,171],[375,181],[408,182],[410,133],[411,183],[419,184],[412,133],[413,133],[414,185],[415,133],[417,186],[416,187],[418,188],[420,189],[393,190],[323,183],[324,191],[347,192],[348,193],[349,192],[351,133],[352,194],[394,195],[397,196],[406,197],[399,198],[398,133],[400,133],[401,164],[405,199],[402,194],[403,196],[404,183],[346,200],[407,201],[396,202],[391,203],[378,204],[387,204],[379,204],[380,204],[389,204],[381,204],[382,204],[390,205],[388,204],[383,204],[386,204],[384,204],[385,204],[392,206],[377,188],[598,207],[629,208],[582,209],[585,210],[586,211],[588,210],[591,212],[594,213],[596,214],[599,215],[633,216],[616,217],[601,133],[620,218],[621,219],[619,220],[618,221],[622,222],[627,223],[617,106],[626,224],[630,225],[631,226],[632,133],[584,211],[200,227],[201,227],[202,228],[65,188],[66,188],[68,229],[69,188],[70,188],[71,230],[67,188],[167,231],[75,232],[156,233],[159,219],[165,234],[166,235],[236,236],[235,11],[238,237],[233,11],[237,238],[234,239],[196,240],[684,241],[680,1],[682,242],[683,1],[192,11],[158,243],[688,244],[689,245],[691,246],[692,247],[703,248],[702,249],[448,250],[449,251],[447,252],[450,253],[451,254],[452,255],[453,256],[454,257],[455,258],[456,259],[457,260],[458,261],[459,262],[76,263],[77,263],[79,264],[80,265],[81,266],[82,267],[83,268],[84,269],[85,270],[86,271],[87,272],[88,273],[89,273],[90,274],[91,275],[92,276],[93,277],[94,278],[95,279],[96,280],[97,281],[128,282],[98,283],[99,284],[100,285],[101,286],[102,287],[103,288],[104,289],[105,290],[106,291],[107,292],[108,293],[109,294],[111,295],[110,296],[112,297],[113,298],[115,299],[116,300],[117,301],[118,302],[119,303],[120,304],[121,305],[122,306],[123,307],[124,308],[125,309],[126,310],[707,11],[270,311],[709,11],[734,312],[735,313],[710,314],[713,314],[732,312],[733,312],[723,312],[722,315],[720,312],[715,312],[728,312],[726,312],[730,312],[714,312],[727,312],[731,312],[716,312],[717,312],[729,312],[711,312],[718,312],[719,312],[721,312],[725,312],[736,316],[724,312],[712,312],[749,317],[743,316],[745,318],[744,316],[737,316],[738,316],[740,316],[742,316],[746,318],[747,318],[739,318],[741,318],[751,319],[754,320],[652,321],[442,322],[444,323],[446,324],[445,325],[514,326],[521,327],[515,328],[516,329],[519,330],[517,331],[518,332],[512,333],[507,334],[508,334],[510,335],[509,336],[511,334],[524,337],[523,338],[522,339],[513,11],[520,340],[529,341],[527,342],[530,343],[590,344],[175,345],[177,345],[176,345],[174,345],[184,346],[179,347],[170,345],[171,345],[172,345],[173,345],[698,348],[700,349],[699,348],[697,350],[701,351],[497,352],[696,353],[64,354],[59,355],[60,356],[61,356],[62,357],[63,357],[58,358],[671,359],[673,360],[672,361],[499,362],[501,363],[460,432],[564,433],[565,434],[505,435],[504,436],[676,437],[677,370],[675,371],[556,438],[557,438],[563,439],[566,440],[674,441],[559,442],[561,443],[560,444],[562,445],[534,382],[678,383],[506,133],[531,446],[532,385],[558,133],[187,387],[186,388],[185,389],[188,390],[190,391],[198,392],[197,393],[193,394],[215,395],[213,396],[214,397],[212,398],[205,399],[206,400],[207,400],[209,400],[211,401],[210,400],[436,402],[437,403],[429,404],[434,405],[433,405],[430,405],[431,406],[432,405],[435,407],[222,408],[221,409],[223,409],[224,410],[220,411],[610,412],[608,413],[607,414],[605,415],[609,416],[615,417],[604,418],[611,419],[614,420],[612,421],[613,422],[606,423],[655,424],[656,425],[654,425],[226,426],[227,427],[228,428],[225,429],[439,430],[440,431]],"semanticDiagnosticsPerFile":[681,679,146,129,148,130,147,152,153,149,155,150,154,151,137,134,141,135,132,140,145,142,143,144,139,136,133,138,467,466,465,470,469,475,476,498,462,463,464,461,477,472,471,468,483,484,479,485,486,487,478,494,489,488,490,480,491,492,482,493,481,473,474,267,266,268,263,261,262,265,264,247,252,241,246,245,243,250,251,253,248,242,240,239,249,255,254,256,257,258,260,230,231,232,229,244,259,277,278,279,553,554,555,541,542,543,544,545,546,550,547,540,548,549,551,552,280,216,217,218,219,191,336,338,337,325,333,329,330,334,332,339,340,341,343,342,344,335,328,326,327,331,300,301,311,298,281,283,282,289,286,285,297,287,296,299,428,288,290,291,292,295,293,294,312,427,284,537,535,536,538,539,568,567,569,273,274,271,272,276,275,571,574,573,580,576,575,578,577,579,570,572,303,304,307,305,306,310,308,309,302,314,316,315,317,313,204,668,669,670,657,658,636,635,637,638,639,645,641,642,640,643,644,664,634,666,648,650,649,647,646,663,662,661,665,659,660,667,625,624,424,318,425,426,319,320,321,423,421,322,422,353,354,355,356,357,366,367,368,370,371,369,358,360,361,359,362,363,364,365,372,376,374,373,375,345,408,410,411,419,412,413,414,415,417,416,418,409,420,393,323,324,347,348,349,350,351,352,394,395,397,406,399,398,400,401,405,402,403,404,346,407,396,391,378,387,379,380,389,381,382,390,388,383,386,384,385,392,377,598,629,581,582,585,586,587,588,591,592,593,594,595,596,597,599,600,633,616,601,620,621,619,618,622,623,627,628,617,626,630,631,632,583,584,200,201,202,199,65,66,68,69,70,71,72,73,74,67,167,75,156,159,160,161,162,163,164,165,166,236,235,238,233,237,234,194,196,195,684,680,682,683,192,158,603,685,688,686,689,690,691,692,703,702,687,704,448,449,447,450,451,452,453,454,455,456,457,458,459,705,157,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,78,127,95,96,97,128,98,99,100,101,102,103,104,105,106,107,108,109,111,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,706,707,708,653,270,269,709,734,735,710,713,732,733,723,722,720,715,728,726,730,714,727,731,716,717,729,711,718,719,721,725,736,724,712,749,748,743,745,744,737,738,740,742,746,747,739,741,751,750,752,502,753,754,652,651,442,441,444,443,446,445,131,693,514,521,515,516,519,517,518,512,507,508,510,509,511,524,523,522,513,520,525,526,529,527,528,530,589,590,178,175,177,176,174,184,179,183,180,182,181,170,171,172,168,169,173,694,698,700,699,697,701,495,497,496,602,696,695,57,64,59,60,61,62,63,58,8,10,9,2,11,12,13,14,15,16,17,18,3,4,22,19,20,21,23,24,25,5,26,27,28,29,6,33,30,31,32,34,7,35,40,41,36,37,38,39,1,42,671,673,672,499,500,501,460,564,565,505,504,676,677,675,556,557,563,566,674,559,561,560,562,503,533,534,678,506,531,532,558,56,187,186,185,188,190,198,197,189,193,215,213,214,212,205,206,207,208,209,211,210,436,437,429,434,433,430,431,432,435,222,203,221,223,224,220,610,608,607,605,609,615,604,611,614,612,613,606,655,656,654,226,227,228,225,439,438,440,47,48,49,50,51,52,43,53,54,55,44,45,46],"latestChangedDtsFile":"./types/index.d.ts"},"version":"4.9.5"}
\ No newline at end of file
+{"program":{"fileNames":["../../../node_modules/typescript/lib/lib.es5.d.ts","../../../node_modules/typescript/lib/lib.es2015.d.ts","../../../node_modules/typescript/lib/lib.es2016.d.ts","../../../node_modules/typescript/lib/lib.es2017.d.ts","../../../node_modules/typescript/lib/lib.es2018.d.ts","../../../node_modules/typescript/lib/lib.es2019.d.ts","../../../node_modules/typescript/lib/lib.es2020.d.ts","../../../node_modules/typescript/lib/lib.dom.d.ts","../../../node_modules/typescript/lib/lib.es2015.core.d.ts","../../../node_modules/typescript/lib/lib.es2015.collection.d.ts","../../../node_modules/typescript/lib/lib.es2015.generator.d.ts","../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../../../node_modules/typescript/lib/lib.es2015.promise.d.ts","../../../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../../../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../../../node_modules/typescript/lib/lib.es2017.object.d.ts","../../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2017.string.d.ts","../../../node_modules/typescript/lib/lib.es2017.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../../../node_modules/typescript/lib/lib.es2018.intl.d.ts","../../../node_modules/typescript/lib/lib.es2018.promise.d.ts","../../../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../../../node_modules/typescript/lib/lib.es2019.array.d.ts","../../../node_modules/typescript/lib/lib.es2019.object.d.ts","../../../node_modules/typescript/lib/lib.es2019.string.d.ts","../../../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2019.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../../../node_modules/typescript/lib/lib.es2020.date.d.ts","../../../node_modules/typescript/lib/lib.es2020.promise.d.ts","../../../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2020.string.d.ts","../../../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2020.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.number.d.ts","../../../node_modules/typescript/lib/lib.esnext.intl.d.ts","../../../types/eth-ens-namehash.d.ts","../../../types/ethereum-ens-network-map.d.ts","../../../types/global.d.ts","../../../types/single-call-balance-checker-abi.d.ts","../../../types/@metamask/contract-metadata.d.ts","../../../types/@metamask/eth-hd-keyring.d.ts","../../../types/@metamask/eth-simple-keyring.d.ts","../../../types/@metamask/ethjs-provider-http.d.ts","../../../types/@metamask/ethjs-unit.d.ts","../../../types/@metamask/metamask-eth-abis.d.ts","../../../types/eth-json-rpc-infura/src/createprovider.d.ts","../../../types/eth-phishing-detect/src/config.json.d.ts","../../../types/eth-phishing-detect/src/detector.d.ts","../../base-controller/dist/types/basecontrollerv1.d.ts","../../../node_modules/superstruct/dist/error.d.ts","../../../node_modules/superstruct/dist/utils.d.ts","../../../node_modules/superstruct/dist/struct.d.ts","../../../node_modules/superstruct/dist/structs/coercions.d.ts","../../../node_modules/superstruct/dist/structs/refinements.d.ts","../../../node_modules/superstruct/dist/structs/types.d.ts","../../../node_modules/superstruct/dist/structs/utilities.d.ts","../../../node_modules/superstruct/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/assert.d.ts","../../../node_modules/@metamask/utils/dist/types/base64.d.ts","../../../node_modules/@metamask/utils/dist/types/hex.d.ts","../../../node_modules/@metamask/utils/dist/types/bytes.d.ts","../../../node_modules/@metamask/utils/dist/types/caip-types.d.ts","../../../node_modules/@metamask/utils/dist/types/checksum.d.ts","../../../node_modules/@metamask/utils/dist/types/coercers.d.ts","../../../node_modules/@metamask/utils/dist/types/collections.d.ts","../../../node_modules/@metamask/utils/dist/types/encryption-types.d.ts","../../../node_modules/@metamask/utils/dist/types/errors.d.ts","../../../node_modules/@metamask/utils/dist/types/json.d.ts","../../../node_modules/@types/node/assert.d.ts","../../../node_modules/@types/node/assert/strict.d.ts","../../../node_modules/@types/node/globals.d.ts","../../../node_modules/@types/node/async_hooks.d.ts","../../../node_modules/@types/node/buffer.d.ts","../../../node_modules/@types/node/child_process.d.ts","../../../node_modules/@types/node/cluster.d.ts","../../../node_modules/@types/node/console.d.ts","../../../node_modules/@types/node/constants.d.ts","../../../node_modules/@types/node/crypto.d.ts","../../../node_modules/@types/node/dgram.d.ts","../../../node_modules/@types/node/diagnostics_channel.d.ts","../../../node_modules/@types/node/dns.d.ts","../../../node_modules/@types/node/dns/promises.d.ts","../../../node_modules/@types/node/dom-events.d.ts","../../../node_modules/@types/node/domain.d.ts","../../../node_modules/@types/node/events.d.ts","../../../node_modules/@types/node/fs.d.ts","../../../node_modules/@types/node/fs/promises.d.ts","../../../node_modules/@types/node/http.d.ts","../../../node_modules/@types/node/http2.d.ts","../../../node_modules/@types/node/https.d.ts","../../../node_modules/@types/node/inspector.d.ts","../../../node_modules/@types/node/module.d.ts","../../../node_modules/@types/node/net.d.ts","../../../node_modules/@types/node/os.d.ts","../../../node_modules/@types/node/path.d.ts","../../../node_modules/@types/node/perf_hooks.d.ts","../../../node_modules/@types/node/process.d.ts","../../../node_modules/@types/node/punycode.d.ts","../../../node_modules/@types/node/querystring.d.ts","../../../node_modules/@types/node/readline.d.ts","../../../node_modules/@types/node/repl.d.ts","../../../node_modules/@types/node/stream.d.ts","../../../node_modules/@types/node/stream/promises.d.ts","../../../node_modules/@types/node/stream/consumers.d.ts","../../../node_modules/@types/node/stream/web.d.ts","../../../node_modules/@types/node/string_decoder.d.ts","../../../node_modules/@types/node/test.d.ts","../../../node_modules/@types/node/timers.d.ts","../../../node_modules/@types/node/timers/promises.d.ts","../../../node_modules/@types/node/tls.d.ts","../../../node_modules/@types/node/trace_events.d.ts","../../../node_modules/@types/node/tty.d.ts","../../../node_modules/@types/node/url.d.ts","../../../node_modules/@types/node/util.d.ts","../../../node_modules/@types/node/v8.d.ts","../../../node_modules/@types/node/vm.d.ts","../../../node_modules/@types/node/wasi.d.ts","../../../node_modules/@types/node/worker_threads.d.ts","../../../node_modules/@types/node/zlib.d.ts","../../../node_modules/@types/node/globals.global.d.ts","../../../node_modules/@types/node/index.d.ts","../../../node_modules/@ethereumjs/common/dist/enums.d.ts","../../../node_modules/@ethereumjs/common/dist/types.d.ts","../../../node_modules/buffer/index.d.ts","../../../node_modules/@ethereumjs/util/dist/constants.d.ts","../../../node_modules/@ethereumjs/util/dist/units.d.ts","../../../node_modules/@ethereumjs/util/dist/address.d.ts","../../../node_modules/@ethereumjs/util/dist/bytes.d.ts","../../../node_modules/@ethereumjs/util/dist/types.d.ts","../../../node_modules/@ethereumjs/util/dist/account.d.ts","../../../node_modules/@ethereumjs/util/dist/withdrawal.d.ts","../../../node_modules/@ethereumjs/util/dist/signature.d.ts","../../../node_modules/@ethereumjs/util/dist/encoding.d.ts","../../../node_modules/@ethereumjs/util/dist/asynceventemitter.d.ts","../../../node_modules/@ethereumjs/util/dist/internal.d.ts","../../../node_modules/@ethereumjs/util/dist/lock.d.ts","../../../node_modules/@ethereumjs/util/dist/provider.d.ts","../../../node_modules/@ethereumjs/util/dist/index.d.ts","../../../node_modules/@ethereumjs/common/dist/common.d.ts","../../../node_modules/@ethereumjs/common/dist/utils.d.ts","../../../node_modules/@ethereumjs/common/dist/index.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip2930transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/legacytransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/types.d.ts","../../../node_modules/@ethereumjs/tx/dist/basetransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip1559transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/transactionfactory.d.ts","../../../node_modules/@ethereumjs/tx/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/keyring.d.ts","../../../node_modules/@types/ms/index.d.ts","../../../node_modules/@types/debug/index.d.ts","../../../node_modules/@metamask/utils/dist/types/logging.d.ts","../../../node_modules/@metamask/utils/dist/types/misc.d.ts","../../../node_modules/@metamask/utils/dist/types/number.d.ts","../../../node_modules/@metamask/utils/dist/types/opaque.d.ts","../../../node_modules/@metamask/utils/dist/types/promise.d.ts","../../../node_modules/@metamask/utils/dist/types/time.d.ts","../../../node_modules/@metamask/utils/dist/types/transaction-types.d.ts","../../../node_modules/@metamask/utils/dist/types/versions.d.ts","../../../node_modules/@metamask/utils/dist/types/index.d.ts","../../../node_modules/immer/dist/utils/env.d.ts","../../../node_modules/immer/dist/utils/errors.d.ts","../../../node_modules/immer/dist/types/types-external.d.ts","../../../node_modules/immer/dist/types/types-internal.d.ts","../../../node_modules/immer/dist/utils/common.d.ts","../../../node_modules/immer/dist/utils/plugins.d.ts","../../../node_modules/immer/dist/core/scope.d.ts","../../../node_modules/immer/dist/core/finalize.d.ts","../../../node_modules/immer/dist/core/proxy.d.ts","../../../node_modules/immer/dist/core/immerclass.d.ts","../../../node_modules/immer/dist/core/current.d.ts","../../../node_modules/immer/dist/internal.d.ts","../../../node_modules/immer/dist/plugins/es5.d.ts","../../../node_modules/immer/dist/plugins/patches.d.ts","../../../node_modules/immer/dist/plugins/mapset.d.ts","../../../node_modules/immer/dist/plugins/all.d.ts","../../../node_modules/immer/dist/immer.d.ts","../../base-controller/dist/types/restrictedcontrollermessenger.d.ts","../../base-controller/dist/types/controllermessenger.d.ts","../../base-controller/dist/types/basecontrollerv2.d.ts","../../base-controller/dist/types/index.d.ts","../../controller-utils/dist/types/types.d.ts","../../controller-utils/dist/types/constants.d.ts","../../../node_modules/@metamask/eth-query/index.d.ts","../../../node_modules/@types/bn.js/index.d.ts","../../controller-utils/dist/types/util.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/abnf.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/utils.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/parsers.d.ts","../../controller-utils/dist/types/siwe.d.ts","../../controller-utils/dist/types/index.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/types.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/createeventemitterproxy.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/createswappableproxy.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/index.d.ts","../../network-controller/dist/types/constants.d.ts","../../../node_modules/@metamask/safe-event-emitter/dist/cjs/index.d.ts","../../json-rpc-engine/dist/types/jsonrpcengine.d.ts","../../json-rpc-engine/dist/types/createasyncmiddleware.d.ts","../../json-rpc-engine/dist/types/createscaffoldmiddleware.d.ts","../../json-rpc-engine/dist/types/getuniqueid.d.ts","../../json-rpc-engine/dist/types/idremapmiddleware.d.ts","../../json-rpc-engine/dist/types/mergemiddleware.d.ts","../../json-rpc-engine/dist/types/index.d.ts","../../eth-json-rpc-provider/dist/types/safe-event-emitter-provider.d.ts","../../eth-json-rpc-provider/dist/types/provider-from-engine.d.ts","../../eth-json-rpc-provider/dist/types/provider-from-middleware.d.ts","../../eth-json-rpc-provider/dist/types/index.d.ts","../../../node_modules/@metamask/eth-block-tracker/dist/blocktracker.d.ts","../../../node_modules/@metamask/eth-block-tracker/dist/pollingblocktracker.d.ts","../../../node_modules/@metamask/eth-block-tracker/dist/subscribeblocktracker.d.ts","../../../node_modules/@metamask/eth-block-tracker/dist/index.d.ts","../../network-controller/dist/types/types.d.ts","../../network-controller/dist/types/create-auto-managed-network-client.d.ts","../../network-controller/dist/types/networkcontroller.d.ts","../../network-controller/dist/types/create-network-client.d.ts","../../network-controller/dist/types/index.d.ts","../../polling-controller/dist/types/types.d.ts","../../polling-controller/dist/types/blocktrackerpollingcontroller.d.ts","../../polling-controller/dist/types/staticintervalpollingcontroller.d.ts","../../polling-controller/dist/types/index.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/patchcbor.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/lib/dataitem.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/lib/cbor-sync.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/lib/index.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/ur.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/urencoder.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/fountainencoder.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/fountaindecoder.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/urdecoder.d.ts","../../../node_modules/@ngraveio/bc-ur/dist/index.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/registrytype.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/registryitem.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/cryptocoininfo.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/pathcomponent.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/cryptokeypath.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/types.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/cryptohdkey.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/cryptoeckey.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/bytes.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/multikey.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/scriptexpression.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/cryptooutput.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/cryptopsbt.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/cryptoaccount.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/decoder/index.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/extended/cryptomultiaccounts.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/errors/index.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/extended/derivationschema.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/extended/keyderivation.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/extended/qrhardwarecall.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/utils.d.ts","../../../node_modules/@keystonehq/bc-ur-registry/dist/index.d.ts","../../../node_modules/@keystonehq/bc-ur-registry-eth/dist/ethsignrequest.d.ts","../../../node_modules/@keystonehq/bc-ur-registry-eth/dist/ethsignature.d.ts","../../../node_modules/@keystonehq/bc-ur-registry-eth/dist/ethnftitem.d.ts","../../../node_modules/@keystonehq/bc-ur-registry-eth/dist/utlis.d.ts","../../../node_modules/@keystonehq/bc-ur-registry-eth/dist/index.d.ts","../../../node_modules/@keystonehq/base-eth-keyring/dist/interactionprovider.d.ts","../../../node_modules/@keystonehq/base-eth-keyring/dist/basekeyring.d.ts","../../../node_modules/@keystonehq/base-eth-keyring/dist/index.d.ts","../../../node_modules/@types/readable-stream/node_modules/safe-buffer/index.d.ts","../../../node_modules/@types/readable-stream/index.d.ts","../../../node_modules/@metamask/obs-store/dist/observablestore.d.ts","../../../node_modules/@metamask/obs-store/dist/asstream.d.ts","../../../node_modules/@metamask/obs-store/dist/composedstore.d.ts","../../../node_modules/@metamask/obs-store/dist/mergedstore.d.ts","../../../node_modules/@metamask/obs-store/dist/transform.d.ts","../../../node_modules/@metamask/obs-store/dist/index.d.ts","../../../node_modules/@keystonehq/metamask-airgapped-keyring/dist/metamaskinteractionprovider.d.ts","../../../node_modules/@keystonehq/metamask-airgapped-keyring/dist/metamaskkeyring.d.ts","../../../node_modules/@keystonehq/metamask-airgapped-keyring/dist/index.d.ts","../../../node_modules/@metamask/browser-passworder/dist/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/base-types.d.ts","../../../node_modules/@metamask/keyring-api/dist/btc/types.d.ts","../../../node_modules/@metamask/keyring-api/dist/btc/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/superstruct.d.ts","../../../node_modules/@metamask/keyring-api/dist/eth/erc4337/types.d.ts","../../../node_modules/@metamask/keyring-api/dist/eth/erc4337/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/eth/types.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/api.d.ts","../../../node_modules/@metamask/keyring-api/dist/contexts.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/eth/ethkeyring.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/eth/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/events.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/rpc.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/types.d.ts","../../../node_modules/@metamask/keyring-api/dist/internal/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/eth/utils.d.ts","../../../node_modules/@metamask/keyring-api/dist/eth/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/api.d.ts","../../../node_modules/@metamask/keyring-api/dist/events.d.ts","../../../node_modules/@metamask/keyring-api/dist/jsonrpcrequest.d.ts","../../../node_modules/@metamask/keyring-api/dist/keyringclient.d.ts","../../../node_modules/@metamask/providers/dist/types/utils.d.ts","../../../node_modules/@metamask/providers/dist/types/baseprovider.d.ts","../../../node_modules/@metamask/providers/dist/types/eip6963.d.ts","../../../node_modules/@metamask/providers/dist/types/streamprovider.d.ts","../../../node_modules/@metamask/providers/dist/types/extension-provider/createexternalextensionprovider.d.ts","../../../node_modules/@metamask/providers/dist/types/metamaskinpageprovider.d.ts","../../../node_modules/@metamask/providers/dist/types/initializeinpageprovider.d.ts","../../../node_modules/@metamask/providers/dist/types/shimweb3.d.ts","../../../node_modules/@metamask/providers/dist/types/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/keyringsnaprpcclient.d.ts","../../../node_modules/@metamask/keyring-api/dist/rpc-handler.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/utils.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/classes.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/errors.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/error-constants.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/errors.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/error-wrappers.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/errors.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/helpers.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/structs.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/create-interface.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/dialog.d.ts","../../../node_modules/@metamask/key-tree/dist/constants.d.cts","../../../node_modules/@metamask/key-tree/node_modules/@noble/curves/abstract/modular.d.ts","../../../node_modules/@metamask/key-tree/node_modules/@noble/curves/abstract/utils.d.ts","../../../node_modules/@metamask/key-tree/node_modules/@noble/curves/abstract/curve.d.ts","../../../node_modules/@metamask/key-tree/dist/curves/ed25519.d.cts","../../../node_modules/@metamask/key-tree/dist/curves/ed25519bip32.d.cts","../../../node_modules/@metamask/key-tree/node_modules/@noble/curves/abstract/weierstrass.d.ts","../../../node_modules/@metamask/key-tree/dist/curves/secp256k1.d.cts","../../../node_modules/@metamask/key-tree/dist/curves/curve.d.cts","../../../node_modules/@metamask/key-tree/dist/curves/index.d.cts","../../../node_modules/@metamask/key-tree/dist/utils.d.cts","../../../node_modules/@metamask/key-tree/dist/bip44cointypenode.d.cts","../../../node_modules/@metamask/key-tree/dist/slip10node.d.cts","../../../node_modules/@metamask/key-tree/dist/bip44node.d.cts","../../../node_modules/@metamask/key-tree/dist/derivers/bip32.d.cts","../../../node_modules/@metamask/key-tree/dist/derivers/bip39.d.cts","../../../node_modules/@metamask/key-tree/dist/derivers/cip3.d.cts","../../../node_modules/@metamask/key-tree/dist/derivers/slip10.d.cts","../../../node_modules/@metamask/key-tree/dist/derivers/index.d.cts","../../../node_modules/@metamask/key-tree/dist/index.d.cts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/caip.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/permissions.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-bip32-entropy.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-bip32-public-key.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-bip44-entropy.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-client-status.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-entropy.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-file.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/component.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/address.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/box.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/copyable.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/divider.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/form/button.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/form/input.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/form/field.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/form/form.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/form/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/formatting/bold.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/formatting/italic.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/formatting/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/heading.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/image.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/link.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/text.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/row.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/spinner.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/components/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/jsx-runtime.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/jsx-dev-runtime.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/validation.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/jsx/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/nodes.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/address.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/copyable.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/divider.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/heading.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/image.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/panel.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/spinner.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/text.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/row.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/button.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/input.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/form.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/components/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/component.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/ui/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/interface.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-interface-state.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-locale.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/snap.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/get-snaps.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/invoke-snap.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/invoke-keyring.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/manage-accounts.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/manage-state.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/notify.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/request-snaps.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/update-interface.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/methods.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/methods/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/provider.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/global.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/images.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/cronjob.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/home-page.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/keyring.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/lifecycle.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/name-lookup.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/rpc-request.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/transaction.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/signature.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/user-input.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/handlers/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/types/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/jsx.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/svg.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/internals/index.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/error-wrappers.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/images.d.ts","../../../node_modules/@metamask/snaps-sdk/dist/types/index.d.ts","../../../node_modules/@metamask/keyring-api/dist/snap-utils.d.ts","../../../node_modules/@metamask/keyring-api/dist/index.d.ts","../../message-manager/dist/types/abstractmessagemanager.d.ts","../../message-manager/dist/types/messagemanager.d.ts","../../message-manager/dist/types/personalmessagemanager.d.ts","../../message-manager/dist/types/typedmessagemanager.d.ts","../../message-manager/dist/types/encryptionpublickeymanager.d.ts","../../message-manager/dist/types/decryptmessagemanager.d.ts","../../message-manager/dist/types/index.d.ts","../../keyring-controller/dist/types/keyringcontroller.d.ts","../../keyring-controller/dist/types/index.d.ts","../../preferences-controller/dist/types/constants.d.ts","../../preferences-controller/dist/types/preferencescontroller.d.ts","../../preferences-controller/dist/types/index.d.ts","../../../node_modules/async-mutex/lib/mutexinterface.d.ts","../../../node_modules/async-mutex/lib/mutex.d.ts","../../../node_modules/async-mutex/lib/semaphoreinterface.d.ts","../../../node_modules/async-mutex/lib/semaphore.d.ts","../../../node_modules/async-mutex/lib/withtimeout.d.ts","../../../node_modules/async-mutex/lib/index.d.ts","../../../node_modules/@types/lodash/common/common.d.ts","../../../node_modules/@types/lodash/common/array.d.ts","../../../node_modules/@types/lodash/common/collection.d.ts","../../../node_modules/@types/lodash/common/date.d.ts","../../../node_modules/@types/lodash/common/function.d.ts","../../../node_modules/@types/lodash/common/lang.d.ts","../../../node_modules/@types/lodash/common/math.d.ts","../../../node_modules/@types/lodash/common/number.d.ts","../../../node_modules/@types/lodash/common/object.d.ts","../../../node_modules/@types/lodash/common/seq.d.ts","../../../node_modules/@types/lodash/common/string.d.ts","../../../node_modules/@types/lodash/common/util.d.ts","../../../node_modules/@types/lodash/index.d.ts","../src/accounttrackercontroller.ts","../../../node_modules/@ethersproject/bytes/lib/index.d.ts","../../../node_modules/@ethersproject/bignumber/lib/bignumber.d.ts","../../../node_modules/@ethersproject/bignumber/lib/fixednumber.d.ts","../../../node_modules/@ethersproject/bignumber/lib/index.d.ts","../../../node_modules/@ethersproject/abi/lib/fragments.d.ts","../../../node_modules/@ethersproject/abi/lib/coders/abstract-coder.d.ts","../../../node_modules/@ethersproject/abi/lib/abi-coder.d.ts","../../../node_modules/@ethersproject/properties/lib/index.d.ts","../../../node_modules/@ethersproject/abi/lib/interface.d.ts","../../../node_modules/@ethersproject/abi/lib/index.d.ts","../../../node_modules/@ethersproject/networks/lib/types.d.ts","../../../node_modules/@ethersproject/networks/lib/index.d.ts","../../../node_modules/@ethersproject/transactions/lib/index.d.ts","../../../node_modules/@ethersproject/web/lib/index.d.ts","../../../node_modules/@ethersproject/abstract-provider/lib/index.d.ts","../../../node_modules/@ethersproject/abstract-signer/lib/index.d.ts","../../../node_modules/@ethersproject/contracts/lib/index.d.ts","../../../node_modules/@ethersproject/providers/lib/formatter.d.ts","../../../node_modules/@ethersproject/providers/lib/base-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/json-rpc-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/websocket-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/url-json-rpc-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/alchemy-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/ankr-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/cloudflare-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/etherscan-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/fallback-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/ipc-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/infura-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/nodesmith-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/pocket-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/web3-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/index.d.ts","../../../node_modules/multiformats/types/src/bases/interface.d.ts","../../../node_modules/multiformats/types/src/hashes/interface.d.ts","../../../node_modules/multiformats/types/src/cid.d.ts","../../../node_modules/@ethersproject/address/lib/index.d.ts","../../approval-controller/dist/types/approvalcontroller.d.ts","../../approval-controller/dist/types/errors.d.ts","../../approval-controller/dist/types/index.d.ts","../../../node_modules/@types/uuid/index.d.ts","../src/constants.ts","../src/nftdetectioncontroller.ts","../src/nftcontroller.ts","../src/token-prices-service/abstract-token-prices-service.ts","../../../node_modules/cockatiel/dist/backoff/constantbackoff.d.ts","../../../node_modules/cockatiel/dist/backoff/delegatebackoff.d.ts","../../../node_modules/cockatiel/dist/backoff/exponentialbackoffgenerators.d.ts","../../../node_modules/cockatiel/dist/backoff/exponentialbackoff.d.ts","../../../node_modules/cockatiel/dist/backoff/iterablebackoff.d.ts","../../../node_modules/cockatiel/dist/backoff/backoff.d.ts","../../../node_modules/cockatiel/dist/common/event.d.ts","../../../node_modules/cockatiel/dist/bulkheadpolicy.d.ts","../../../node_modules/cockatiel/dist/fallbackpolicy.d.ts","../../../node_modules/cockatiel/dist/nooppolicy.d.ts","../../../node_modules/cockatiel/dist/retrypolicy.d.ts","../../../node_modules/cockatiel/dist/timeoutpolicy.d.ts","../../../node_modules/cockatiel/dist/policy.d.ts","../../../node_modules/cockatiel/dist/common/executor.d.ts","../../../node_modules/cockatiel/dist/circuitbreakerpolicy.d.ts","../../../node_modules/cockatiel/dist/breaker/samplingbreaker.d.ts","../../../node_modules/cockatiel/dist/breaker/consecutivebreaker.d.ts","../../../node_modules/cockatiel/dist/breaker/breaker.d.ts","../../../node_modules/cockatiel/dist/errors/brokencircuiterror.d.ts","../../../node_modules/cockatiel/dist/errors/bulkheadrejectederror.d.ts","../../../node_modules/cockatiel/dist/errors/isolatedcircuiterror.d.ts","../../../node_modules/cockatiel/dist/errors/taskcancellederror.d.ts","../../../node_modules/cockatiel/dist/errors/errors.d.ts","../../../node_modules/cockatiel/dist/index.d.ts","../src/token-prices-service/codefi-v2.ts","../src/token-prices-service/index.ts","../src/crypto-compare-service/crypto-compare.ts","../src/crypto-compare-service/index.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/abierc20.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/abierc721.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/abierc1155.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/fiattokenv2.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/index.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/parser.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/address.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/array.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/bool.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/bytes.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/fixed-bytes.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/function.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/number.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/string.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/tuple.d.ts","../../../node_modules/@metamask/abi-utils/dist/parsers/index.d.ts","../../../node_modules/@metamask/abi-utils/dist/types/abi.d.ts","../../../node_modules/@metamask/abi-utils/dist/types/index.d.ts","../../../node_modules/@metamask/abi-utils/dist/abi.d.ts","../../../node_modules/@metamask/abi-utils/dist/errors.d.ts","../../../node_modules/@metamask/abi-utils/dist/index.d.ts","../src/standards/erc20standard.ts","../src/standards/nftstandards/erc1155/erc1155standard.ts","../src/token-service.ts","../src/tokenlistcontroller.ts","../src/tokenscontroller.ts","../src/tokenratescontroller.ts","../src/assetsutil.ts","../src/standards/nftstandards/erc721/erc721standard.ts","../src/assetscontractcontroller.ts","../src/currencyratecontroller.ts","../src/tokenbalancescontroller.ts","../../../node_modules/@metamask/object-multiplex/dist/substream.d.ts","../../../node_modules/@metamask/object-multiplex/dist/objectmultiplex.d.ts","../../../node_modules/@metamask/object-multiplex/dist/index.d.ts","../../../node_modules/@metamask/post-message-stream/dist/utils.d.ts","../../../node_modules/@metamask/post-message-stream/dist/basepostmessagestream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/window/windowpostmessagestream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/webworker/webworkerpostmessagestream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/webworker/webworkerparentpostmessagestream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/node-process/processparentmessagestream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/node-process/processmessagestream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/node-thread/threadparentmessagestream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/node-thread/threadmessagestream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/runtime/browserruntimepostmessagestream.d.ts","../../../node_modules/@metamask/post-message-stream/dist/index.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/array.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/auxiliary-files.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/virtual-file/virtualfile.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/virtual-file/index.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/base64.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/bytes.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/caveats.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/checksum.d.ts","../../../node_modules/cron-parser/types/common.d.ts","../../../node_modules/cron-parser/types/index.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/cronjob.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/deep-clone.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/default-endowments.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/derivation-paths.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/entropy.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/errors.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/handler-types.d.ts","../../../node_modules/@metamask/snaps-sdk/jsx-runtime.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/handlers.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/iframe.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/json.d.ts","../../../node_modules/nanoid/index.d.ts","../../../node_modules/@types/deep-freeze-strict/index.d.ts","../../permission-controller/src/permission-middleware.ts","../../permission-controller/src/subjectmetadatacontroller.ts","../../permission-controller/src/utils.ts","../../permission-controller/src/permissioncontroller.ts","../../permission-controller/src/permission.ts","../../permission-controller/src/errors.ts","../../permission-controller/src/caveat.ts","../../permission-controller/src/rpc-methods/getpermissions.ts","../../permission-controller/src/rpc-methods/requestpermissions.ts","../../permission-controller/src/rpc-methods/revokepermissions.ts","../../permission-controller/src/rpc-methods/index.ts","../../permission-controller/src/index.ts","../../../node_modules/@metamask/snaps-utils/dist/types/json-rpc.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/structs.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/manifest/validation.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/manifest/index.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/localization.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/logging.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/namespace.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/path.d.ts","../../../node_modules/@metamask/snaps-registry/dist/verify.d.ts","../../../node_modules/@metamask/snaps-registry/dist/index.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/types.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/snaps.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/strings.d.ts","../../../node_modules/@metamask/snaps-sdk/jsx.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/ui.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/validation.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/versions.d.ts","../../../node_modules/@metamask/snaps-utils/dist/types/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/timer.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/executionservice.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/abstractexecutionservice.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/proxypostmessagestream.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/iframe/iframeexecutionservice.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/iframe/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/proxy/proxyexecutionservice.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/offscreen/offscreenexecutionservice.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/offscreen/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/webworker/webworkerexecutionservice.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/webworker/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/services/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/location/npm.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/location/location.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/location/http.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/location/local.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/location/index.d.ts","../../../node_modules/@xstate/fsm/lib/types.d.ts","../../../node_modules/@xstate/fsm/lib/index.d.ts","../../../node_modules/@types/punycode/index.d.ts","../../phishing-controller/src/utils.ts","../../phishing-controller/src/phishingcontroller.ts","../../phishing-controller/src/index.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/interface/snapinterfacecontroller.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/interface/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/types/encryptor.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/types/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/registry/registry.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/registry/json.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/registry/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/snapcontroller.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/selectors.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/snaps/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/utils.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/cronjob/cronjobcontroller.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/cronjob/index.d.ts","../../../node_modules/@metamask/snaps-controllers/dist/types/index.d.ts","../../accounts-controller/dist/types/accountscontroller.d.ts","../../accounts-controller/dist/types/utils.d.ts","../../accounts-controller/dist/types/index.d.ts","../src/tokendetectioncontroller.ts","../src/ratescontroller/types.ts","../src/ratescontroller/ratescontroller.ts","../src/ratescontroller/index.ts","../src/index.ts","../../../node_modules/@babel/types/lib/index.d.ts","../../../node_modules/@types/babel__generator/index.d.ts","../../../node_modules/@babel/parser/typings/babel-parser.d.ts","../../../node_modules/@types/babel__template/index.d.ts","../../../node_modules/@types/babel__traverse/index.d.ts","../../../node_modules/@types/babel__core/index.d.ts","../../../node_modules/@types/eslint/helpers.d.ts","../../../node_modules/@types/estree/index.d.ts","../../../node_modules/@types/json-schema/index.d.ts","../../../node_modules/@types/eslint/index.d.ts","../../../node_modules/@types/graceful-fs/index.d.ts","../../../node_modules/@types/istanbul-lib-coverage/index.d.ts","../../../node_modules/@types/istanbul-lib-report/index.d.ts","../../../node_modules/@types/istanbul-reports/index.d.ts","../../../node_modules/chalk/index.d.ts","../../../node_modules/jest-diff/build/cleanupsemantic.d.ts","../../../node_modules/pretty-format/build/types.d.ts","../../../node_modules/pretty-format/build/index.d.ts","../../../node_modules/jest-diff/build/types.d.ts","../../../node_modules/jest-diff/build/difflines.d.ts","../../../node_modules/jest-diff/build/printdiffs.d.ts","../../../node_modules/jest-diff/build/index.d.ts","../../../node_modules/jest-matcher-utils/build/index.d.ts","../../../node_modules/@types/jest/index.d.ts","../../../node_modules/@types/jest-when/index.d.ts","../../../node_modules/@types/json5/index.d.ts","../../../node_modules/@types/minimatch/index.d.ts","../../../node_modules/@types/parse-json/index.d.ts","../../../node_modules/@types/pbkdf2/index.d.ts","../../../node_modules/@types/prettier/index.d.ts","../../../node_modules/@types/secp256k1/index.d.ts","../../../node_modules/@types/semver/classes/semver.d.ts","../../../node_modules/@types/semver/functions/parse.d.ts","../../../node_modules/@types/semver/functions/valid.d.ts","../../../node_modules/@types/semver/functions/clean.d.ts","../../../node_modules/@types/semver/functions/inc.d.ts","../../../node_modules/@types/semver/functions/diff.d.ts","../../../node_modules/@types/semver/functions/major.d.ts","../../../node_modules/@types/semver/functions/minor.d.ts","../../../node_modules/@types/semver/functions/patch.d.ts","../../../node_modules/@types/semver/functions/prerelease.d.ts","../../../node_modules/@types/semver/functions/compare.d.ts","../../../node_modules/@types/semver/functions/rcompare.d.ts","../../../node_modules/@types/semver/functions/compare-loose.d.ts","../../../node_modules/@types/semver/functions/compare-build.d.ts","../../../node_modules/@types/semver/functions/sort.d.ts","../../../node_modules/@types/semver/functions/rsort.d.ts","../../../node_modules/@types/semver/functions/gt.d.ts","../../../node_modules/@types/semver/functions/lt.d.ts","../../../node_modules/@types/semver/functions/eq.d.ts","../../../node_modules/@types/semver/functions/neq.d.ts","../../../node_modules/@types/semver/functions/gte.d.ts","../../../node_modules/@types/semver/functions/lte.d.ts","../../../node_modules/@types/semver/functions/cmp.d.ts","../../../node_modules/@types/semver/functions/coerce.d.ts","../../../node_modules/@types/semver/classes/comparator.d.ts","../../../node_modules/@types/semver/classes/range.d.ts","../../../node_modules/@types/semver/functions/satisfies.d.ts","../../../node_modules/@types/semver/ranges/max-satisfying.d.ts","../../../node_modules/@types/semver/ranges/min-satisfying.d.ts","../../../node_modules/@types/semver/ranges/to-comparators.d.ts","../../../node_modules/@types/semver/ranges/min-version.d.ts","../../../node_modules/@types/semver/ranges/valid.d.ts","../../../node_modules/@types/semver/ranges/outside.d.ts","../../../node_modules/@types/semver/ranges/gtr.d.ts","../../../node_modules/@types/semver/ranges/ltr.d.ts","../../../node_modules/@types/semver/ranges/intersects.d.ts","../../../node_modules/@types/semver/ranges/simplify.d.ts","../../../node_modules/@types/semver/ranges/subset.d.ts","../../../node_modules/@types/semver/internals/identifiers.d.ts","../../../node_modules/@types/semver/index.d.ts","../../../node_modules/@types/sinonjs__fake-timers/index.d.ts","../../../node_modules/@types/sinon/index.d.ts","../../../node_modules/@types/stack-utils/index.d.ts","../../../node_modules/@types/yargs-parser/index.d.ts","../../../node_modules/@types/yargs/index.d.ts"],"fileInfos":[{"version":"8730f4bf322026ff5229336391a18bcaa1f94d4f82416c8b2f3954e2ccaae2ba","affectsGlobalScope":true},"dc47c4fa66b9b9890cf076304de2a9c5201e94b740cffdf09f87296d877d71f6","7a387c58583dfca701b6c85e0adaf43fb17d590fb16d5b2dc0a2fbd89f35c467","8a12173c586e95f4433e0c6dc446bc88346be73ffe9ca6eec7aa63c8f3dca7f9","5f4e733ced4e129482ae2186aae29fde948ab7182844c3a5a51dd346182c7b06","4b421cbfb3a38a27c279dec1e9112c3d1da296f77a1a85ddadf7e7a425d45d18","1fc5ab7a764205c68fa10d381b08417795fc73111d6dd16b5b1ed36badb743d9",{"version":"3aafcb693fe5b5c3bd277bd4c3a617b53db474fe498fc5df067c5603b1eebde7","affectsGlobalScope":true},{"version":"adb996790133eb33b33aadb9c09f15c2c575e71fb57a62de8bf74dbf59ec7dfb","affectsGlobalScope":true},{"version":"8cc8c5a3bac513368b0157f3d8b31cfdcfe78b56d3724f30f80ed9715e404af8","affectsGlobalScope":true},{"version":"cdccba9a388c2ee3fd6ad4018c640a471a6c060e96f1232062223063b0a5ac6a","affectsGlobalScope":true},{"version":"c5c05907c02476e4bde6b7e76a79ffcd948aedd14b6a8f56e4674221b0417398","affectsGlobalScope":true},{"version":"5f406584aef28a331c36523df688ca3650288d14f39c5d2e555c95f0d2ff8f6f","affectsGlobalScope":true},{"version":"22f230e544b35349cfb3bd9110b6ef37b41c6d6c43c3314a31bd0d9652fcec72","affectsGlobalScope":true},{"version":"7ea0b55f6b315cf9ac2ad622b0a7813315bb6e97bf4bb3fbf8f8affbca7dc695","affectsGlobalScope":true},{"version":"3013574108c36fd3aaca79764002b3717da09725a36a6fc02eac386593110f93","affectsGlobalScope":true},{"version":"eb26de841c52236d8222f87e9e6a235332e0788af8c87a71e9e210314300410a","affectsGlobalScope":true},{"version":"3be5a1453daa63e031d266bf342f3943603873d890ab8b9ada95e22389389006","affectsGlobalScope":true},{"version":"17bb1fc99591b00515502d264fa55dc8370c45c5298f4a5c2083557dccba5a2a","affectsGlobalScope":true},{"version":"7ce9f0bde3307ca1f944119f6365f2d776d281a393b576a18a2f2893a2d75c98","affectsGlobalScope":true},{"version":"6a6b173e739a6a99629a8594bfb294cc7329bfb7b227f12e1f7c11bc163b8577","affectsGlobalScope":true},{"version":"81cac4cbc92c0c839c70f8ffb94eb61e2d32dc1c3cf6d95844ca099463cf37ea","affectsGlobalScope":true},{"version":"b0124885ef82641903d232172577f2ceb5d3e60aed4da1153bab4221e1f6dd4e","affectsGlobalScope":true},{"version":"0eb85d6c590b0d577919a79e0084fa1744c1beba6fd0d4e951432fa1ede5510a","affectsGlobalScope":true},{"version":"da233fc1c8a377ba9e0bed690a73c290d843c2c3d23a7bd7ec5cd3d7d73ba1e0","affectsGlobalScope":true},{"version":"d154ea5bb7f7f9001ed9153e876b2d5b8f5c2bb9ec02b3ae0d239ec769f1f2ae","affectsGlobalScope":true},{"version":"bb2d3fb05a1d2ffbca947cc7cbc95d23e1d053d6595391bd325deb265a18d36c","affectsGlobalScope":true},{"version":"c80df75850fea5caa2afe43b9949338ce4e2de086f91713e9af1a06f973872b8","affectsGlobalScope":true},{"version":"9d57b2b5d15838ed094aa9ff1299eecef40b190722eb619bac4616657a05f951","affectsGlobalScope":true},{"version":"6c51b5dd26a2c31dbf37f00cfc32b2aa6a92e19c995aefb5b97a3a64f1ac99de","affectsGlobalScope":true},{"version":"6e7997ef61de3132e4d4b2250e75343f487903ddf5370e7ce33cf1b9db9a63ed","affectsGlobalScope":true},{"version":"2ad234885a4240522efccd77de6c7d99eecf9b4de0914adb9a35c0c22433f993","affectsGlobalScope":true},{"version":"5e5e095c4470c8bab227dbbc61374878ecead104c74ab9960d3adcccfee23205","affectsGlobalScope":true},{"version":"09aa50414b80c023553090e2f53827f007a301bc34b0495bfb2c3c08ab9ad1eb","affectsGlobalScope":true},{"version":"d7f680a43f8cd12a6b6122c07c54ba40952b0c8aa140dcfcf32eb9e6cb028596","affectsGlobalScope":true},{"version":"3787b83e297de7c315d55d4a7c546ae28e5f6c0a361b7a1dcec1f1f50a54ef11","affectsGlobalScope":true},{"version":"e7e8e1d368290e9295ef18ca23f405cf40d5456fa9f20db6373a61ca45f75f40","affectsGlobalScope":true},{"version":"faf0221ae0465363c842ce6aa8a0cbda5d9296940a8e26c86e04cc4081eea21e","affectsGlobalScope":true},{"version":"06393d13ea207a1bfe08ec8d7be562549c5e2da8983f2ee074e00002629d1871","affectsGlobalScope":true},{"version":"2768ef564cfc0689a1b76106c421a2909bdff0acbe87da010785adab80efdd5c","affectsGlobalScope":true},{"version":"b248e32ca52e8f5571390a4142558ae4f203ae2f94d5bac38a3084d529ef4e58","affectsGlobalScope":true},{"version":"52d1bb7ab7a3306fd0375c8bff560feed26ed676a5b0457fa8027b563aecb9a4","affectsGlobalScope":true},"70bbfaec021ac4a0c805374225b55d70887f987df8b8dd7711d79464bb7b4385","869089d60b67219f63e6aca810284c89bae1b384b5cbc7ce64e53d82ad223ed5",{"version":"18338b6a4b920ec7d49b4ffafcbf0fa8a86b4bfd432966efd722dab611157cf4","affectsGlobalScope":true},"62a0875a0397b35a2364f1d401c0ce17975dfa4d47bf6844de858ae04da349f9","ee7491d0318d1fafcba97d5b72b450eb52671570f7a4ecd9e8898d40eaae9472","e3e7d217d89b380c1f34395eadc9289542851b0f0a64007dfe1fb7cf7423d24e","fd79909e93b4d50fd0ed9f3d39ddf8ba0653290bac25c295aac49f6befbd081b","345a9cc2945406f53051cd0e9b51f82e1e53929848eab046fdda91ee8aa7da31","9debe2de883da37a914e5e784a7be54c201b8f1d783822ad6f443ff409a5ea21","dee5d5c5440cda1f3668f11809a5503c30db0476ad117dd450f7ba5a45300e8f","f5e396c1424c391078c866d6f84afe0b4d2f7f85a160b9c756cd63b5b1775d93","5caa6f4fff16066d377d4e254f6c34c16540da3809cd66cd626a303bc33c419f","730d055528bdf12c8524870bb33d237991be9084c57634e56e5d8075f6605e02","75b22c74010ba649de1a1676a4c4b8b5bb4294fecd05089e2094429b16d7840c","5615ccf831db2ffc82145243081ebdb60ea8e1005ee8f975d1c0c1401a9c894e","38682ed3630bb6ecdace80d5a9adc811fc20a419f1940446e306c3a020d083b9","cc182e6e4f691cd6f7bf7cb491247a4c7818f9f1cb2db1d45c65ff906e3f741b","a50599c08934a62f11657bdbe0dc929ab66da1b1f09974408fd9a33ec1bb8060","5a20e7d6c630b91be15e9b837853173829d00273197481dc8d3e94df61105a71","8d478048d71cc16f806d4b71b252ecb67c7444ccf4f4b09b29a312712184f859","e0eda929c6b9b628cdeb0e54cd3582cb97e64f28aab34612fc1431c545899584","9df4662ca3dbc2522bc115833ee04faa1afbb4e249a85ef4a0a09c621346bd08","b25d9065cf1c1f537a140bbc508e953ed2262f77134574c432d206ff36f4bdbf","1b103313097041aa9cd705a682c652f08613cb5cf8663321061c0902f845e81c","68ccec8662818911d8a12b8ed028bc5729fb4f1d34793c4701265ba60bc73cf4","5f85b8b79dc4d36af672c035b2beb71545de63a5d60bccbeee64c260941672ab","b3d48529ae61dc27d0bfbfa2cb3e0dff8189644bd155bdf5df1e8e14669f7043","40fe4b689225816b31fe5794c0fbf3534568819709e40295ead998a2bc1ab237","f65b5e33b9ad545a1eebbd6afe857314725ad42aaf069913e33f928ab3e4990a","fb6f2a87beb7fb1f4c2b762d0c76a9459fc91f557231569b0ee21399e22aa13d","31c858dc85996fac4b7fa944e1016d5c72f514930a72357ab5001097bf6511c7","3de30a871b3340be8b679c52aa12f90dd1c8c60874517be58968fdbcc4d79445","6fd985bd31eaf77542625306fb0404d32bff978990f0a06428e5f0b9a3b58109","5b3cd03ae354ea96eff1f74d7c410fe4852e6382227e8b0ecf87ab5e3a5bbcd4","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419",{"version":"056097110efd16869ec118cedb44ecbac9a019576eee808d61304ca6d5cb2cbe","affectsGlobalScope":true},"f51b4042a3ac86f1f707500a9768f88d0b0c1fc3f3e45a73333283dea720cdc6",{"version":"6fb8358e10ed92a7f515b7d79da3904c955a3ffd4e14aa9df6f0ea113041f1cf","affectsGlobalScope":true},"45c831238c6dac21c72da5f335747736a56a3847192bf03c84b958a7e9ec93e2","661a11d16ad2e3543a77c53bcd4017ee9a450f47ab7def3ab493a86eae4d550c",{"version":"8cdc646cec7819581ef343b83855b1bfe4fe674f2c84f4fb8dc90d82fb56bd3a","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","9dd56225cc2d8cb8fe5ceb0043ff386987637e12fecc6078896058a99deae284","2375ed4b439215aa3b6d0c6fd175c78a4384b30cb43cbadaecbf0a18954c98cb","7693b90b3075deaccafd5efb467bf9f2b747a3075be888652ef73e64396d8628","41231da15bb5e3e806a8395bd15c7befd2ec90f9f4e3c9d0ae1356bccb76dbb0","fccfef201d057cb407fa515311bd608549bab6c7b8adcf8f2df31f5d3b796478",{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true},"5f20d20b7607174caf1a6da9141aeb9f2142159ae2410ca30c7a0fccd1d19c99",{"version":"464762c6213566d072f1ced5e8e9a954785ec5e53883b7397198abb5ef5b8f71","affectsGlobalScope":true},"6387920dc3e18927335b086deec75bf8e50f879a5e273d32ee7bb7a55ba50572","9bba37424094688c4663c177a1379b229f919b8912889a472f32fdc5f08ddb4d","29a4be13b3a30d3e66667b75c58ec61fb2df8fa0422534fdee3cfb30c5dbf450","83366d901beda79d6eb37aaaf6ca248dcd88946302b2a7d975590783be51e88e","bf268a0aea37ad4ae3b7a9b58559190b6fc01ea16a31e35cd05817a0a60f895a","43ec77c369473e92e2ecebf0554a0fdaa9c256644a6070f28228dfcceec77351",{"version":"d7dad6db394a3d9f7b49755e4b610fbf8ed6eb0c9810ae5f1a119f6b5d76de45","affectsGlobalScope":true},"95ed02bacb4502c985b69742ec82a4576d4ff4a6620ecc91593f611d502ae546","bf755525c4e6f85a970b98c4755d98e8aa1b6dbd83a5d8fcc57d3d497351b936","dd67d2b5e4e8a182a38de8e69fb736945eaa4588e0909c14e01a14bd3cc1fd1e",{"version":"28084e15b63e6211769db2fe646d8bc5c4c6776321e0deffe2d12eefd52cb6b9","affectsGlobalScope":true},{"version":"aed37dabf86c99d6c8508700576ecede86688397bc12523541858705a0c737c2","affectsGlobalScope":true},"cc6ef5733d4ea6d2e06310a32dffd2c16418b467c5033d49cecc4f3a25de7497","94768454c3348b6ebe48e45fbad8c92e2bb7af4a35243edbe2b90823d0bd7f9a","0be79b3ff0f16b6c2f9bc8c4cc7097ea417d8d67f8267f7e1eec8e32b548c2ff","1c61ffa3a71b77363b30d19832c269ef62fba787f5610cac7254728d3b69ab2e","84da3c28344e621fd1d591f2c09e9595292d2b70018da28a553268ac122597d4","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","6e191fea1db6e9e4fa828259cf489e820ec9170effff57fb081a2f3295db4722","aed943465fbce1efe49ee16b5ea409050f15cd8eaf116f6fadb64ef0772e7d95","70d08483a67bf7050dbedace398ef3fee9f436fcd60517c97c4c1e22e3c6f3e8","c40fdf7b2e18df49ce0568e37f0292c12807a0748be79e272745e7216bed2606",{"version":"e933de8143e1d12dd51d89b398760fd5a9081896be366dad88a922d0b29f3c69","affectsGlobalScope":true},"4e228e78c1e9b0a75c70588d59288f63a6258e8b1fe4a67b0c53fe03461421d9","b38d55d08708c2410a3039687db70b4a5bfa69fc4845617c313b5a10d9c5c637","205d50c24359ead003dc537b9b65d2a64208dfdffe368f403cf9e0357831db9e","1265fddcd0c68be9d2a3b29805d0280484c961264dd95e0b675f7bd91f777e78",{"version":"a05e2d784c9be7051c4ac87a407c66d2106e23490c18c038bbd0712bde7602fd","affectsGlobalScope":true},{"version":"df90b9d0e9980762da8daf8adf6ffa0c853e76bfd269c377be0d07a9ad87acd2","affectsGlobalScope":true},"cf434b5c04792f62d6f4bdd5e2c8673f36e638e910333c172614d5def9b17f98","1d65d4798df9c2df008884035c41d3e67731f29db5ecb64cd7378797c7c53a2f","0faee6b555890a1cb106e2adc5d3ffd89545b1da894d474e9d436596d654998f","c6c01ea1c42508edf11a36d13b70f6e35774f74355ba5d358354d4a77cc67ea1","867f95abf1df444aab146b19847391fc2f922a55f6a970a27ed8226766cee29f",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"b0297b09e607bec9698cac7cf55463d6731406efb1161ee4d448293b47397c84","175323e2a79a6076e0bada8a390d535a3ea817158bf1b1f46e31efca9028a0a2","7a10053aadc19335532a4d02756db4865974fd69bea5439ddcc5bfdf062d9476","4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","aed9e712a9b168345362e8f3a949f16c99ca1e05d21328f05735dfdbb24414ef","b04fe6922ed3db93afdbd49cdda8576aa75f744592fceea96fb0d5f32158c4f5","ed8d6c8de90fc2a4faaebc28e91f2469928738efd5208fb75ade0fa607e892b7","d7c52b198d680fe65b1a8d1b001f0173ffa2536ca2e7082431d726ce1f6714cd","c07f251e1c4e415a838e5498380b55cfea94f3513229de292d2aa85ae52fc3e9","0ed401424892d6bf294a5374efe512d6951b54a71e5dd0290c55b6d0d915f6f7","b945be6da6a3616ef3a250bfe223362b1c7c6872e775b0c4d82a1bf7a28ff902","beea49237dd7c7110fabf3c7509919c9cb9da841d847c53cac162dc3479e2f87","0f45f8a529c450d8f394106cc622bff79e44a1716e1ac9c3cc68b43f7ecf65ee","c624ce90b04c27ce4f318ba6330d39bde3d4e306f0f497ce78d4bda5ab8e22ca","9b8253aa5cb2c82d505f72afdbf96e83b15cc6b9a6f4fadbbbab46210d5f1977","86a8f52e4b1ac49155e889376bcfa8528a634c90c27fec65aa0e949f77b740c5","aab5dd41c1e2316cc0b42a7dd15684f8582d5a1d16c0516276a2a8a7d0fecd9c","59948226626ee210045296ba1fc6cb0fe748d1ff613204e08e7157ab6862dee7","ec3e54d8b713c170fdc8110a7e4a6a97513a7ab6b05ac9e1100cb064d2bb7349","43beb30ecb39a603fde4376554887310b0699f25f7f39c5c91e3147b51bb3a26","666b77d7f06f49da114b090a399abbfa66d5b6c01a3fd9dc4f063a52ace28507","31997714a93fbc570f52d47d6a8ebfb021a34a68ea9ba58bbb69cdec9565657e","6032e4262822160128e644de3fc4410bcd7517c2f137525fd2623d2bb23cb0d3","8bd5c9b1016629c144fd228983395b9dbf0676a576716bc3d316cab612c33cd5","2ed90bd3925b23aed8f859ffd0e885250be0424ca2b57e9866dabef152e1d6b7","93f6bd17d92dab9db7897e1430a5aeaa03bcf51623156213d8397710367a76ce","3f62b770a42e8c47c7008726f95aa383e69d97e85e680d237b99fcb0ee601dd8","5b84cfe78028c35c3bb89c042f18bf08d09da11e82d275c378ae4d07d8477e6c","980d21b0081cbf81774083b1e3a46f4bbdcd2b68858df0f66d7fad9c82bc34bc","68cc8d6fcc2f270d7108f02f3ebc59480a54615be3e09a47e14527f349e9d53e","3eb11dbf3489064a47a2e1cf9d261b1f100ef0b3b50ffca6c44dd99d6dd81ac1","b17f3bb7d8333479c7e45e5f3d876761b9bca58f97594eca3f6a944fd825e632","3c1f1236cce6d6e0c4e2c1b4371e6f72d7c14842ecd76a98ed0748ee5730c8f3","6d7f58d5ea72d7834946fd7104a734dc7d40661be8b2e1eaced1ddce3268ebaf","4c26222991e6c97d5a8f541d4f2c67585eda9e8b33cf9f52931b098045236e88","277983d414aa99d78655186c3ee1e1c38c302e336aff1d77b47fcdc39d8273fe","47383b45796d525a4039cd22d2840ac55a1ff03a43d027f7f867ba7314a9cf53","6548773b3abbc18de29176c2141f766d4e437e40596ee480447abf83575445ad","6ddd27af0436ce59dd4c1896e2bfdb2bdb2529847d078b83ce67a144dff05491","816264799aef3fd5a09a3b6c25217d5ec26a9dfc7465eac7d6073bcdc7d88f3f","4df0891b133884cd9ed752d31c7d0ec0a09234e9ed5394abffd3c660761598db","b603b62d3dcd31ef757dc7339b4fa8acdbca318b0fb9ac485f9a1351955615f9","e642bd47b75ad6b53cbf0dfd7ddfa0f120bd10193f0c58ec37d87b59bf604aca","be90b24d2ee6f875ce3aaa482e7c41a54278856b03d04212681c4032df62baf9","78f5ff400b3cb37e7b90eef1ff311253ed31c8cb66505e9828fad099bffde021","372c47090e1131305d163469a895ff2938f33fa73aad988df31cd31743f9efb6","71c67dc6987bdbd5599353f90009ff825dd7db0450ef9a0aee5bb0c574d18512","6f12403b5eca6ae7ca8e3efe3eeb9c683b06ce3e3844ccfd04098d83cd7e4957","282c535df88175d64d9df4550d2fd1176fd940c1c6822f1e7584003237f179d3","c3a4752cf103e4c6034d5bd449c8f9d5e7b352d22a5f8f9a41a8efb11646f9c2","11a9e38611ac3c77c74240c58b6bd64a0032128b29354e999650f1de1e034b1c","4ed103ca6fff9cb244f7c4b86d1eb28ce8069c32db720784329946731badb5bb","d738f282842970e058672663311c6875482ee36607c88b98ffb6604fba99cb2a","ec859cd8226aa623e41bbb47c249a55ee16dc1b8647359585244d57d3a5ed0c7","8891c6e959d253a66434ff5dc9ae46058fb3493e84b4ca39f710ef2d350656b1","c4463cf02535444dcbc3e67ecd29f1972490f74e49957d6fd4282a1013796ba6","0cb0a957ff02de0b25fd0f3f37130ca7f22d1e0dea256569c714c1f73c6791f8","2f5075dc512d51786b1ba3b1696565641dfaae3ac854f5f13d61fa12ef81a47e","ca3353cc82b1981f0d25d71d7432d583a6ef882ccdea82d65fbe49af37be51cb","50679a8e27aacf72f8c40bcab15d7ef5e83494089b4726b83eec4554344d5cdc","45351e0d51780b6f4088277a4457b9879506ee2720a887de232df0f1efcb33d8","5d697a4b315cc5bb3042ae869abffd10c3b0d7b182cda0e4c45d8819937e5796","7528af2ed74464d2c0ae92025f14c1f11691deb07812bc66afbe6f87c3669f1f","6ee58aa536dabb19b09bc036f1abe83feb51e13d63b23d30b2d0631a2de99b8f","8aceb205dcc6f814ad99635baf1e40b6e01d06d3fe27b72fd766c6d0b8c0c600","299567f84bfedd1468dca2755a829cb19e607a6811673788807dc8921e211bc9","795d9fb85aad92221504db74dd179b506bd189bba0c104426f7e7bb8a66ffee5","1311bc194e0a69fe61031e852c1c0b439e2a2a3d1d5e2d8ff795499b9f283459","4b7ce19369d7e7fae76720c2c6c7f671bf3fa0f7093edb864f1ac358ca7c456c","c972ef44deca1fa8fab465915ffa00f82e126aacf3dfc8979c03b1b066ce5bb6","30285a1011c6d6b52f3ba3abb0a984be8148c05cdefb8eb6eb562335a3991f35","8e7adb22c0adecf7464861fc58ae3fc617b41ffbd70c97aa8493dc0966a82273","755f3cd1d9c1b564cff090e3b0e29200ae55690a91b87cb9e7a64c2dbeb314d3","d6bb7e0a6877b7856c183bff13d09dd9ae599ea43c6f6b33d3d5f72a830ed460","f1b51ae93c762d7c43f559933cd4842dd870367e8d92e90704ffa685dd5b29a3","3f450762fd7c34ed545e738abccb0af6a703572a10521643cf8fc88e3724c99c","fcc8beef29f39f09b1d9c9f99c42f9fed605ab1c28d2a630185f732b9ba53763","d6e6620a30d582182acc3f0a992a0c311adc589f111096aea11ab83fc09a5ccc","6213b8f686f56beab22b59a0f468590fd3a4c5fa931236a017efeca91d7c9584","c451cec9a588b1f105a5ea2c6063d4fca112b9d70105cacdadda0e1ef67e9379","cb047832dc68f5a2c41c62c5e95ddcacbae3a8b034d40cd15319a8cb7f25104a","980336ccdfc3c08f3c3b201aa6662e6016e20f15847f8465b68f3e8e67b4665c","5a3493939995f46ff3d9073cd534fb8961c3bf4e08c71db27066ff03d906dea8","bb5a2ac327605ebebf831c469b05bd34a33a6a46ee8c1edd9f3310aad32cf6a1","bf5d041f2440b4a9391e2b5eb3b8d94cbf1e3b8ff4703b6539d4e65e758c8f37","8516469eb90e723b0eb03df1be098f7e6a4709f6f48fd4532868d20a0a934f6e","d60e9ab369a72d234aac49adbe2900d8ef1408a6ea4db552cf2a48c9d8d6a1bc","0ebb4698803f01e2e7df6acce572fff068f4a20c47221721dafd70a27e372831","03460a54d0e0481d1e11097f66ad43f054bc95efdafe5f81bbc7a82be181af75","ded24ddc7157689a5aa14bd651272ab8cd6e7812da2196a65d8c5e63131cfb23","2cea9689efa8591732096235abe7f084fc29c92badd5b0897a5e876b77e71887","4ed4e504126014fee13aaef5e3fc140f2ff7031ff3a8b5386717905820ea2d09","00e77e0bf106bc1e4f303ab02724df5173506d44acb6c22b4f582a88f22c3250","30d2170e1a718b5035611af55e3618b4ba8f42f0749bb52ee593da6082c4e2ce","98ef38666d88ec9699a722053e07ede65d3042f693fe7ff8c786e53dbb6fd43b","a3b8b6be7620897d1e481e8650c980a210a138fceb6e710eaf95fd9dd0dfe94a","12c89d0e32758c120a569045f21cf5b77244f86792611ced8de7f86b37e77781","14bd47270e654c8eb3b1489fa8c095912ee62a0a29bb92743393203722347c53","e294fa77b2ea3c11d0e0581304ab5d6462efdbf9ef1641097c7fb79a28003cb0","1616ba804291182bc6a0d75c17bc093bed1ea87ad98b108183b8ccc4dff4e868","92cb686a9ca5eb5dd7d5d8d43a3707194c1e91ea07a027b3bcb60b6011b24632","8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","25139d6a726e0e19d9fc4fa3197367b4a82ec34a08a5ecf23963e142c202c0f3","e3328bffc8eab74665a4fe9c59d6f12f4c8570c3d858497e241eb37efe17dfcf","29389551e426a46421134b55182d6fcf5b143670998bf81db2619c1228235392","c18f7e16982695bdd04e3e183a327d116185f77f1a37b9b2e849d7d93269cd74","2cfb37011989c21dc70b91d521a2d5a4e0f18507f5f536b5dfe504edb15916e8","bb5e02df7aaec7a4ea642639a9963b24b8d9fd6798351f07d8c58616942fbcbf","299a899cb4d061f5d83843ec453e936e9659b2c435746823f90c40eddaef4745","d5610c0fd12870f644b0f42c1bcc4fa2295ac3e3ca01916bdb42c3bdc4c80c36","2c56a8e249b1f45dbdf973100cd37fe2ea68709573cf1fdf2e3052c593be68d8","3553da417ee7b07e388b13bd12a70a1c03e65a6132ba5427fe68f5b362373e6f","612358502042d351c227ba779fdcf6d875d827e424930e60297c533524e50668","d2b5be376ef162aa0c24a826e7dd2d77671a045c085e16d1c1276db4bdccbac7","c4138d8dcccedaff6621e009cf0a54a7bed2a5ad4c509a3513bccc4f417ef939","ad8747fe978dff3e80f4b12b48d37cc8dff11b61d04c035aefbc982ce21201ce","b154f789fd65298e1ba6cbba6944ea892d564c95f3d3700ed85baf8f80748473","c660265aedd7c5b236e2017e53095cb98da66200eb0e8d023b5bf713c36494e8","0efc36bf5c0daca6217fec7063359ccdab8c3a23bb405d25340fae22cf72d74f","5abff0c87d4f9c89715107042d4c73b68ef7a128759f451c8a0fc450cbaaf660","5a03308fbd1af441065149a84c692931bebc7e7735afc23be8684f4e10d3aa06","c787bf4f8f0abbf815cfbd348be41046f2b8f270be24fe7aa8a8fcdd2b7df8c2","e7a5191c663a3228f30104961d548b372e51c5936c01ffc8eddd262bb98d7d7c","43fdc9abe6f8640fda4cdc55a1ee5f666d3fce554277043df925c383137ddf69","f0b09665c9d52de465687fbd3cfb65111d3ffc59ae00c6f42654150f3db05518","72f8c078d06cff690e24ff2b0e118a9de2833dcebf7c53e762dcb505ddf36a68","9705efb0fd901180de84ca4dd11d86f87fd73f99d6a5660a664c048a7487e385","f9b9d0950fdfb90f57e3f045fe73dce7fa6e7921b37622fc12e64fcd90afbd0f","e61b36e7fde608f8bb4b9c973d81556553a715eaef42a181a16ddd7a28da4ac7","03b8389b222af729eae0fb3c33366dcbb1f5a0102ce319bf1d7d5ee987e59fd0","2bf6be7c04db280fdd9b786764f8650c23f9f4d533791cb25a11b25314b76a55","dbb5fc7edd36bfba95cc4dd564e4458276ced30eed18bc05fbda948b3fda8686","c2b556c7cff0dabce2e31cb373ac61c14d8ebc35f1086dff30b39e9ec5357d0d","f958af01131076e8af55d28c4835a51063226ab488ca8738fdee38aeef7d0d33","9f3797b01e3d83d4e4b875699ae984f380ca86aa0a0c9df43ac5bba1cb1f8b7b","752b15ad1b34887adeaa838fc55f5d4ca399026afd266d4ed4db0e3db02eae4e","778331eaea1093451e50be9844bd2b6937c3bb81b0b1ee700624c9774ecfcf2b","0ca0dfc9f657d0822eca9530c7870b22a1d2a5fc48182bdd4d0e6e88e4ad9c35","5c746f034288e6842dd1589b169dcfcc16c5ce5abbd928889ab67aea4fe0b501","92ce6dbbcc135cffd09a58e19fef34bf351391bec92c40d849e4e9997d475769","99e77d092fed72b6b8578d00c7af004f76e98b30ba99f1947535eb4c04a51676","5e379df3d61561c2ed7789b5995b9ba2143bbba21a905e2381e16efe7d1fa424","f07a137bbe2de7a122c37bfea00e761975fb264c49f18003d398d71b3fb35a5f","b5ef52a9f9083724decc5d060f0b34e3a480deed71c32d55ca16c214eb4cc928","5d3d7938b2d7d0a9f851276741327c2ae4c013e7eb420fc3f7caed3b79c8f37f","14df6b81e50a035e9e391558cf30a0420d03e2eb42c7db9c57f44b818e5d5179","f100912a3785eed4a3d29c12f5910b101af9353454de5ddba9b4d43456c56dd1","446439eacf81a163fd7dfc53b28f80deca3d13b250d67639739aa25aa4491090","98034cd285344125f7165a3bb68246d38ab35fabe7f6d6a7c8f80407d31f548d","06b4a23064991251512df4edc12341d5bc69a17b942da18372312d383c90eee7","0f898802705f9a534b537f1be6c57265080e0abd6993d935554c255e6d56cc1a","745efa7b6e27b7216cccede166a822b56acc41b10a8090966c8cf2c96239cb83","6ab2a6257ae7bb05559841100c786c845fe465a90be7b904db9096c2fb14696b","1507881fb12592d860e8b731a79cccd5880a9e3a3fdb71c8eeb08987420f7c8d","63e64a301fdbb7fb0b58e81b282608594b700e1af51d509de949e88e711a70e8","d5c19655468e29f60c871b21e73af8ebc653f736e7123ade916f22c4a5f80ce5","50aa290ee8f3ba75c7a3653613ead6594e2e034a7627b249c9a400858cac79f5","9138338d4fff57ba42d57c7316ad1d055b72b90c9e1acbbfa6cfe16db201802a","d5c19655468e29f60c871b21e73af8ebc653f736e7123ade916f22c4a5f80ce5","863416d62eb7dfa12b63b23c112fd0831aa330816c39d64ca88898ebe5fd62a3","9325a5ce0f09132607e27e599b568e3a67f80ea932f6bbb08bdc1bb7727e11a3","6a8649609161e2794b383ba275b0a6cb4a072dde7b954648f83dc6cdf1bfe4a8","6d3101b183ea67ef606b93fe42127f30b2db5ac3b72c34ca9d6d8b00eb85d0f6","f5d7a36ff056cc314b0f61c89a03c4c36a24183b246e61d958e75e86521304cd","f961ddb0abe88c9815a81132cc9984f0294fd920174fccbdde73d156b8a4ab39","6c951235cbf3c324a20c0e2dfdd013d7b226b0c2a72dbd84925682a8d7199237","aba578ce97acb630b406ffb6ed31302dbd8d2ffcfd671194b1d8704825086e05","3a971ea3e36685b96f24fbd53a94ad8dc061711b84e51fde4cf201f7041e618d","77234d8682b67d78748cb61a63407104dc2c8e3196dcf15a454aae26b42f3ee7","c8be9283a381044a392a0687af5d98d3f51cbada2320b1801a82c948b6e39499","d5cdc145bf5ec321674e31804c075ad408a68c86877ce293970e03634d3709f1","85052c71d72b9b017c88179f57a464d66e22619c7acd7d83b117a79cf1608979","9b6c162d20e2ad4abdcff61a24082564ac59e63092220618162aef6e440c9228","b0874729266d9f7fafb9ff1127fcbad2cf7972b5dcc1fdc104be79266a708bc2","d1f010c19eb9c8190bd0859fa3b6f4975543b912b8b85e20bbb0b5bfbdf4d2b3","de4ccc96cef3f97fab148640799abb32a24b567a902a8233913f98481e3131bf",{"version":"801934aa449fe6df584bccdcc5d5b9280295cb7ac84918b6014fc5086e6f9ff6","affectsGlobalScope":true},"6af760fb9ea02dc807c5053d8aee86389c4fce72fbb26af7b9568cac6c4710d5","c62c4ba5e910b4523f7e7adf4a55ec45c2bac99d9d8e9b0fe0c2a800a6f641b9","92131434f876fdd6fcbc40bd54a9d7500c66974362b16bd42641f990468587f4","8cf023c0bd57992fdd2ce6a7030a1874f49c8edc62eaffa9bfffcf18d2a2a1a2","8ea8f3040e38fb50d7dc3653f3b8a0dbb5244e82111576f99ce096bdc0fbf94c","48ed788ad126545a6156fcc37cd3bcf17de18a3e3fe6b6ef62cfb8140d1a45a2","63c271a745f628ffd4bd7ad0a63b021c362c9bd6bf8b18441a7162892395a214","a867ba47f71fe3993cef54246893ff8f01411e12e411d8cf1bd038a448b36404","9f9e5bae412fa5909fae636d6733aee27a108cc2ed5b13980611016336774d3c","662fe197bba64bd3f17ee118058cd2d0d2dbe33d7c0c865fd6365d90bfc44e1e","030519c351f800551cac2658038804969ca4584d2c0175a710602ac234ca1340","0278a6939ca83cd040b08ff8c5fc7838b6693ddc52f22526bf158e6b10e0246c","c2d6206e5ba4fd3063b01218c2b3b997afc1cfbeb49fcee991fa8595842ce53d","6a8096993458a3d71229031aa7415974eb5b47b320213e29660adfb519d6a3f4","cb7996a1af5b1d276483cd0c9b9de6540eff021abc90a720511ff4464519a2ff","9df6ec68878d65bc690ea3a33ce3ef5aa8254c36bc5f8346c0c2fd1f3b88a35c","a4fad04c4acc8a4b195cbbccef4c55019104753d547d5c94441643ccc89108a0","0244c23ea642361f7c192c1f0cfff9c12cfa5f51f9b155edd5c0a89fef308d34","ac5da520487547013c3abae0933d6366f51db6df31d1993ddb931ce04b083269","3c69a83bde847af6fc3a53e1bb6b13cd06d38a27a142814b8dacc374f3b93284","5b46f7113f54565e7ffc83f2b474f557a1f54c7e5946769d5be220454656be73","fb58035d39c5759283cb73cfb3548aefe370aa3ad4e81fdb4e46f0979eb7669f","1311c325948b2d5576cebc70b1bf968d3446b4630802bef54120daf04ce1f625","d0b3609e8e7afed0fd0570152255458407e67249b94f6603afdfd68599423f21","17f4c5a1d6eaa87ea27eadcdff9085af3190533d98f799dda79a3af6f9a630ea","3e6f734ddf40e2e99ff7fff9568b7d9720663af9a0632c26a352c8d3270a3f0e","ec13f78303abcf550c5569dfae1446b8ceb89050f68ce04491481e72e8122ae2","a3fc57dbaa7f1efb010399ad4ef4fd9b462aa4e93bf74a9a34b099b97ffcc9cb","ffddd7ec6a450b0cb6f2f73f80de1df963ead312d7c81a8440268f34146ecb87","5d6a36ca0087fd6876df654d1b4192f0e402adfde994ad47e5c065da33692f9c","eb157a09c5f543d98644e2a99a785f9e0e91f054f9fecbf1c3e15831ff5d63a7","edd5530e2b1ccdf65093296e40a8634fcb11ecda3c164c31383a8c34cb04bc9d","9dfaf96d090fe8d96143465d85b4837661ae535143eea9ef99cd20df2e66338e","209d45c27e03c1417c42985252de6c25a2ec23abdc199d88e6139c88b93abd11","0ee5cdba58cfde3012bb9ff2e9edcc4e35a651373a2aa2c83ff9eb7df635419a","540f4dca27ea5a232828b6d91e1b2fce2720bdabaa4c1f3fbf59b672cc58bd8a","ba086b99d545ec6c9ff356989f076b5652ea1b09bcc65b87dfc43a5195a2efcc","c85d9776b36166b928ab1488d9224ebf970d41b0a35f09a3ee0b9bee3e698061","683196f606c5dab1c8c4a24a66d26e00f16f2d4b2a5abe25ebedd37d2954f930","9c3a1b01cba1238fb723ce06b6c163ef6c53be755394406782564d5c42c636b2","6e795e6270d39e918c7a0e62ac73793cda06fcf4b3692ee46583e15f5bf57ab8","0e821ef1eb67fa6144ea4de4277d913f5b1982d7407afd5f93754a8239d41554","5c09195ef359ffa9c6bbdb4fefb101d87ede4b9e9c28213faf5b45d102e4c609","80b4d93a4dcc90a12f6f4bb7c6851a8182ae29e556716d0d80b5c012a5ef554a","2556ef9d1820e0b6bbca6dd65a50ea64f525c4d8247ab50dff44c3f0d14a5643","cbd1c836db190d6e3add07165afc228f04e1f6170e1fe3aa5e6fc24a7e9573a3","9b13881feb958237232586d888a10a39d47cdffe3ee34688ed41888fa7baad94","122fe82cf5af80f0b26832b258b537b7dfe3ec28449c301b259ab10204b50d45","c467dada8fea6d60dff8a8be2675f737cacc76e14e50b72daa0f0710376df84b","9cb80bba611c2dd155a446ce424fe4bb1df2129751bc9416b7e42c055d1ddbff","44f41abb29bf3f4c52270d8119a96c935131e42a9186da15216a76b35e793b4e","043783bebe87efb440183c9ebc8c4fdc1bb92060a5a0f7ce847e30dee7013ac3","e3dc0a97a59dea936b4fb7b1f6f4117b4aac9c86d0cd08b69bab2d0532a8a5e3","5d897601f8a4fe913057019d8211b99b06e3138f625a0cfb601d074f4278271d","cfde5d194dd858ad68f910defaed5b0d28730f8bf38359a9265a93ab29bc7bef","16b21bbe6ad41019c071677877b8fc5dbc8d39a8b0406f020261c5f6f3894be3","f20aae41b169cddcbf3fde8ac380443182c8d7225194e788c404d9e11e6dc75d","87fd9a98cb1e689320ab89adc65e85d140a61260b4f66d12c777f4bd7cae2060","c48566cb13403fca44192b4528e3f2ac993869d39526bd42cd2f2167c0285add","efae20e0c581240c7522e04829da4f0453ca263068596554d4b0e27878c7dfac","3af68ef927788cda7daab34be513fa4508229fdc6e5130d564a0a1ccb3fefafe","bbbd2cbb15a37d5f4dd54ad8c7c537d3df8352117523030fcec7dcbe62a05a58","b50d24ebc117f8805332e7e260e9587f572bb7b2ff0ca1ff6cfafb38015781f3","5cc8b8e18fe7fefab4b3c53a39467b5a0deb4200abae7f063ff0624b9e856c51","8e990781eb0107c25429b1274a31a4f3866a9a46290cce40f354b2a6e71c6c21","8616706e4bd72987bd86c1b4afafa90fa2d4ef2f71708de03a823ab4e9b48e60","b9ce4613536386a98897f1e3d8f61a851ce6cb34dc3c9db4f2ef5f55f007e9e1","77fe56751d7615743937268c72d797fba28309f13ec9079c018b232040fca86a","31b5f53e3d57470830e87f9e03c02d4569ac81d4a758fdda75092f9a3f58beba","d765fbab22fd7003a65ed670100362ec1c90d55a772e6773a774135594e7ea41","1bf86149ef215f258d479695aa35ac89a3d34a6356a6df04e1b5db869289e563","58f4da9e99a4bdbd2f54eeb9303d5b5634b25423d729d44abb3fc55c925495b3","f75cd30f162c2af5e5aca39c01c1a521bfa034fae523793de872815a3468bc08","0cf1123db73dabd86466a462375a6addae52f58d23030c6033f8aadc23539a36","e29cef4158591ed213b1c2cba8988237b1ff369f7a6ecd8cb8ac0302bad1fba8","5307876e4d0021ea01235eb2f7c24671f3d8b37590f4b446cd132a4e1dc9a335","92550acd737790dc60c4c130e6aac78656dd48a8334a4882f40e7f86bdf7a590","3df821880914f8bb3c8107b1107be75c8ddbe2120a2cefabbaf9b65936b5f4dd","20626e4260b7d621745b2e78e883d9de7cc94ec346ef13344dd96eb479813870","078b7043bea0968860374bf4671ed74dd9f6be4e28ab659517d81f74be463c51","68b139ebb9a7f3ee4ded6286d74f978a47968727665120f3bfc560476ce33c4d","56d02c29b2fd39b1b1a1265df291f3f98e6ec3e6119aff9f4cfa44fe888efaa7","2d01884891da6495cb4a2f060e4898209a507e711464c4c1480df85264e863ed","620eb3b3aafe33839ee0f50e2cb237450f066fd88c8367cd15d75d02f7c9146f","6a5a3a7ae4e448668f8986632d2b6adfeebfdc06b0f9256f35c10ec148fa01f0","080b1aa93227952b4dd74b9d2c6e4f6002eb8403533749116a1c53bb9961c02d","874087eec1d457f6e3baf5ac46c42ea200e55040b394fac667aa3a64c49f5f6c","6e8a5b04a18abb192abc89d7219b9c6f633cb3136777ec808673a65f111ca749","6db505486e882a6688c5525cb65f6f06d3c5f16f03f329fbdec01dd379c97f96","d74d2a92b54f95e47d2b76bd5ee516aab7ae93afb79cd34c6681dd29eb09e72a","747e6326a724bc54f799a466a5b5c4978a601a04a063a5bdabe150af2f25b9e2","b57e22e53b56cca7a57bfcfb234aa6a66f9b9e4c07159d7388f94f17a3eaee2c","e47709ec4d1618ef429648cd8ef967aef2005526b34fcbfac33037add347dc71","b81abb3e47fbbb3af41fa75bada89bbcfa4b0feed9a0d6d4b19ed1ce1033b53c","15b330546e9784461058e5fd6e2346bf272140fa6f0cda34e193ae501d8b17b1","4d8ce72fd080bf9a46bdcc274bcbacccedd66d84e203966b197ac25a96932183","73327e6ae34e3f6591877fb75b451cf620cbbd76ee2b678213a9f793633cd0d3","3f1ba2f69944fa346789db7f60d53c9bec00032de0d797967978dea42e77b941","3f5df31539fee4816b97d4e45b4344fbdaf3ca59f6df941f8d780ee441e92cc1","50aaf44eb4d0e086af13729b3471a0a7dce95ea35ebd21c762ba26e203134b2e","3857c1773b8503c3ca45b7bc09ac89c3930c85ce93021054503f73d5d9101b5c","72702bd07fd6fb3ef64aadbcb909103aadfe71ee76e9fdeb11e0c92693cff6cb","f0dd6f7c9783637655478db7d7caf6becd41a79d54482aa59578ce88ab38e9bf",{"version":"cd756ccdabf433dd02b84d755383e489f14b3c1aede0477783aa04830fd5d695","affectsGlobalScope":true},"a4c88dbecdf8ee0c79f5b7c2bf31cd77e593f5d78384e2b674f67d754a549a9e","9cbdff04326da794ba008c0fc977ab062d1fe3fa2e9759654c72ffbe54b64a7c","aa60f8d20d36116fe05edaab24adee3c275209f71b65e272692cf99daf9489e1","150855f967a6490161d5aeed4cc4adf31fcb8f5dbe54b75799c12b8687fc9cc2","cf08b7139adc21b94204e3d4b3daf9946e3462a9e3fdc3e94c87e767e7936e20","47ddb601df40bfa01cebdd06ee8b87d0b72aa1259a4ceba3ad3b5cf68130112a","6b6392704ddb3f50e647dbbb716782bdd0cf8ea9cc134aae256a26223e632b47","afc3ad2a50f7f4de908e26fcf467e09ab8528c0e90f91e602b4865d953839228","df90b0c6b1d81851364c4d97fa23b91a993482bcf4a7bed7c7a24aa41632d494","03c0bc80f67c6f75b02341fbeb9f6ee92c66b90597729377f478885e6ad15a88","11ee9ab699b4619d217c640d917ca198f58066a86bd58c2917197d62aa6601e0","cf9d589d9e73bf32c8e7a6cae6b4a1cf9bef39e5594072533fdce985581a6ddc","959544feb1ca2df29eec6c500f27ea10f4885df245ebd8418fb4b87914614383","6548ab4b57eb9d092471a04513091673345f2fd95d5b876f600402ea8d603ee0","2793e8c6a023d26f78d6777a6d7f20fae3a9a8169863d46d8d54c73071851232","d0f11e830aa1350a31d9c00a0197243e9711e4882947aef53a96c629f405cb10","6610b9f45f1f71d2b1fb67df49cbcabe3f9e668a1ccb7d8328a51407b259ffb3","abbcc437e0792ab2fe08797ceca1ec85a95ec413c51612313b18ab8e75f690f6","e29d76ef1183ac0edf94b4712b6e51730c447c7e773e75ceb44a720b0c9a9fd9","4ee6dc3424998eede9a2a9b114acaaf7969cdda67baf82ba2c9cf88a8eec0ab1","613c7d49928c9ad45ec4882a75472111a4497c4a7de9d6c9c843bd889be7f8aa","96f0d856b66d8af1242dea20c5eb182aaaa74be74b7fc6be91bcb5f6c16e405f","4749d39670f618849b640148c8164b52283b4a3be227f192a431fbf132d9d7c1","b682db93a241da3a145e40b75bff4e5f454c74bbb44af7cff2884847294f2ddb","53c7854f35e1d3fab9f0e95d7f7c70777a9f95e121d980269f17ae7d26b5fcce","960fccfbc730994718317411e9f75dac992f48d1645fbedb177f77bd4ee5eea4","2e28c01ab28f1c6d97e47def32e3df6a36c3848dd21520fff899b5c79b286659","e7cc0357509d0368b01503d0b0610d59a11c811bd34b9be7149c24e45a5a2233","d42c6e985bdb10a2aaa3dae14d9b0d8589e74a7c2f9475bf543b855bb3c010ba","be11d1fd9568724e5fc8f6801bc7f92408cb6dc726c58782b4ebcda150bbca64","78ac3ad0ec7eb087b5bf0cc21a1c8daeb85058bb48e70944775a1d45eda1e545","4b1b0fb8836d0f01909626e3e1b6542fb7a2e69f1a269ef5b676abcbae5770b5","72e7be5040a865e113cf78e17eba90499c44607a6a59d0d9b6f843369167523c","0d2acd3a3840418f280e10b2adc0154848f4a162ab6a6466cbf5d0210200a6f8","08417035838838db86f31bd576b1fe246be76c1507b8fc1f2eec744c0d0d125e","b78647f4fd09671f9e7502612cf5f0c072ab2ec917312810d36927fcdeeb5a7c","d6b58d955981bc1742501b792f1ab9f4cba0c4611f28dcf1c99376c1c33c9f9c","0cb9cfa126435d30332ff00441e0db904e55dccb5b1fa7220eaf024e7f425eeb","b8442e9db28157344d1bc5d8a5a256f1692de213f0c0ddeb84359834015a008c","458111fc89d11d2151277c822dfdc1a28fa5b6b2493cf942e37d4cd0a6ee5f22","da2b6356b84a40111aaecb18304ea4e4fcb43d70efb1c13ca7d7a906445ee0d3","187119ff4f9553676a884e296089e131e8cc01691c546273b1d0089c3533ce42","febf0b2de54781102b00f61653b21377390a048fbf5262718c91860d11ff34a6","6f294731b495c65ecf46a5694f0082954b961cf05463bea823f8014098eaffa0","0aaef8cded245bf5036a7a40b65622dd6c4da71f7a35343112edbe112b348a1e","00baffbe8a2f2e4875367479489b5d43b5fc1429ecb4a4cc98cfc3009095f52a","68a0d0c508e1b6d8d23a519a8a0a3303dc5baa4849ca049f21e5bad41945e3fc","3c92b6dfd43cc1c2485d9eba5ff0b74a19bb8725b692773ef1d66dac48cda4bd","b03afe4bec768ae333582915146f48b161e567a81b5ebc31c4d78af089770ac9","df996e25faa505f85aeb294d15ebe61b399cf1d1e49959cdfaf2cc0815c203f9","4f6a12044ee6f458db11964153830abbc499e73d065c51c329ec97407f4b13dd",{"version":"5518aada205932a3b30800023ae96307622e2d995dae80916dcb19fc1f2cfc01","signature":"81dcf7d21e016141508417445c4fc5d7335f5981e52682698795da3b043bd15d"},"1fcb8b15db812281d69a3090d488903f9e93033004aef9d8889ca3ad0753a96f","bdf5a95eb0a2dd1d39805bdf51b46ba012bb9b92b2ddaae16219595bba7678a5","9f794a0e8550a03baff865a3961cc22afbd85bc4ba9672bdda036971928f85f4","66a697d1e4cdbf25cdce4644a8085a8563041fa8c7731d4d9f5e8f22e66ba72c","a0c8e17f4d1ea2704c62d7349bc3b8d9a12e3761b5960cb44144d3f0333b3fcb","3471c0df3d0391e1dffe6e8bf150294531b2b71a2afa5f2b86e52bf84a5db60a","5d4df4de055eddf3187094f938a640f8d96e4c551a47d6686596fdb6ba4c3014","8bc2cad630da1033c1fd8d7df2bffb18af0da6113bd086a8bbec04a2471a1e00","a1059d1bbc8ad46bfe668b8450e7e8002887c4ab987bdb96d6108d8023f8bb8f","5134885e9648e2c6745f8aa1c3e7f5ab3b3617258b3d81ca02de6655ede3d74e","4f1ae3f24125216cf07c5211a3f00d2bb4782d7cc76c0681603f8249f9232ff0","d3fb92a5640f83f7844d60b35317a0f95c27e3658a749d76d218c461ad091668","d1f8bfcd91b284657ef8187c55ace7db91a3c43e642c3f14e54364154932f7e4","f54c92bfcae54f360fe79514746efce4870e4ddabc064e95d406bba291e9f672","175fd7186fa6a70f9db9b270a04a503cae23cf01cb77e3905bac115c38424cf7","c993f7ed1b8e1023c1f2ee5b262dbc3b70b27475674e40a53a58591f9972dacc","c914014ab7c7001178663f29d31a495398234a41219af61f26d7e8e91b46af96","277afd6ab6ec72889e2988e0ddd7d138c1f512e68a1fa4e90eedfd71e2097a51","c0908f85f2b645d375127a3b53a17a65f782e17962d5c1eb68f08b1188acbf15","3fadac5d409cc2f27b1d2f4e7568600f02840205f301c9ae7a3068b46476438b","da6aae64ad559286830fd44c81e3d33303348f184af7db4fde8dd99ae9749407","3633f87c97d359cb55fa7bf0668fb2be8a23342951af6ec2d06e6d0cf7409371","cc3a5427d44fc77ff25e80b3edee4650a51f83de761faf5e633994ecf1ab1b44","b350eda75c6e47299b36002b31d5b220c405c21c365e708989829db013fadbb4","f421882756b6714834ae4687ab1aeadf344a1cc45437d2edffbac020ff3801c1","1d61d6ad832dabafbf63b86c5a79d704f2c8763ada9318e135b17a3cb2d09b32","e5cef5de3e5ad3436d414d20743231e284733b9cf4375dc79eff4fcca4282f99","e624419ba84e33e661e89a28083119ca41f6953dba09a4f82b660684087afe6d","942be430bd0feaced2e3e598273b17e50ea565ec9dac840b580b0b99e1a3cd5c","73350006cec5a0c6b71d53b0b0ddbfb82be96752a9c4e3c904c59e633bc9485e","a7df5c2e9594966c7e0d4a763b13ed5727506d892669df5f7bc9826f539c1d35","258cc5cd6891f6bcbaccefd953997038844e7f65d582cac987ffabf7181bcd4c","00a6db28fc4df6ddf10adbe630d9df620ec13af19039c1869653e60dafa739d2","649324d5abb5464aabe35d86cd0eef16562df811f0971481cee664afa5acbc88","930446bf32192f698b78f8ea4b309d8c2cfe02ab5ad78e4db907417405ebf5e7","5d3e07dbeabff37885262d9b4bd21c3185d95a09a268ab795f81135046a32bf4","7d309fbde13b5e30eff77c07a28b66451b0b50b83564d0cfa6a2a52c8b69aae6","f02da9dd36d7a9aa33c9b2e37ef1f54b0d9ad6a713bae372ae4b72890e40c168","29c188a2c660f99f1b4835022e011c4268d7af989d4b7dda33c0a69ca1a777f8","1ed0bf138e87912d741e28333b58cbf814ae863783b3b404d2454cbabb9c5fc0","3452ee7d8ef0b1bbd47b2a56924a1dc3c79dc84a19d212e9dc496f92e4943aa0","fab58e600970e66547644a44bc9918e3223aa2cbd9e8763cec004b2cfb48827e",{"version":"5943b853fbb3d54c14caf7190a70811ece9a04fd48a0a9f9694078ad9be5cd03","signature":"71e2431e82504b51217a255925d20a8758ad61230024650112b6d925e613b131"},{"version":"b5c8dc504000ccad2588cf2b7a7edca69741d4986ff38a9b8bcd387d0e2dafb1","signature":"7647ca5b6dceccb21afdc7a2e235e039d263ad63a7755615475acde462191303"},{"version":"0fa4c40b1102e3b2d51c38326a23abe7772d8a52b4f720296d58d91d356e440e","signature":"ad263e24511ec0bbadfb179ef62396d680fdf524901a2861be7c79963b4f0c75"},{"version":"4aa0db6f3a8a01032cb54a7963803e97105d7524ec38454cca5a2c2854907941","signature":"48b2f75aa424bb7b059447a4ea27196a9818d9e0924c77d5f8b8b24d3fb9caa3"},"da04ea3f901991d8097ac63ef6fb5967726e3dc1924e2c8efef374b1db9487c6","96c42cfe5614d9f894078048dda1b53409774bd502d584ffa9bee3c1b39537fc","a49dd2c42f34a0f8fd8577340378112785f3a8fa44c5fe6522466421c68f66f2","7a3e0d544a45a2801f7b657fb931e5ceb749cac766560a4cde600c171b41079f","78edf86617005dfa5709c44024989d60398a21bbf865574680e0cdb29e93b88b","0dd44432ff360867ec9422c184e78973fec749dc96920c23aa02088a908cb0cd","06b1afe677e95808681e5260e9f567815e67c59d00eb5de7d21e4754581deb8c","58b3270f2e1111859e0f15c74d2a47b45471a6cda53bb61fadf2d17987ff4c0e","ff6139ad0ecc332393c72a42af66734c3104f775ceeb7af4533fd82df42dfa51","12597a7bb3fa105568418303af2376061d15f57f2d5f24059082043b358dee74","4c2291243804f0e8610c1f05f0d2a3c5a1497e34bf6314378a0857cd42472680","d2e012a1efa7115c2857284eb541e8b906c0d24c5918568e6dd77e2d6a9592f7","99d74aabcb821273945c9f8446f52b9fb27f666d7ee5b00b4814fc29ce72f307","3f1af437818017218c9a8afd6404d25ddb811482952a18c703acbf0889e5d5a4","f7478db71332be7f074506a83b8bd76d52569e022256c2088b27204f1b3b2f22","d4e4c606f38b8a083af300a9011d3bdf77dd63a5a98f05f1566dd84539df6562","e33dedae6123556e3052e6102b2bd64a3c99850b1eb21e27eaed328ccda6f611","391e793b760e7a3e504784021eab7b430a24a87821ad86ea1ae2da88fd2a413a","1356a2fbd07d5f9a5530f9658342bce4f0358f1620f0bba7a923f842ad8d0600","d2c0337f150e9d23259a20d6a6b1db9173f0171162adbd7c42b9a10d53b086b1","54586daaf9e77f8a26b27a4e3cb191f668c54abe9a402c2ce4be19c0b9d95207","95a276eeed4301374463a1725f4bd6a339a6e9dde5ba51910a17f65f8d0c2414","2094effba5caec56950d079ee0c08e175f38dd205d06a877e86cd4bf864fefa1","8c054d37f059c24bb3cc0f1a828009185ff690af19b5c68946074144f8c11904",{"version":"249414b254960054cc118dbfea2ba1a1e97f397cff55cf6a740d9a810fe18369","signature":"e68ea15df38c326d53a31212450dea2aa3a837a6b29aa5bdaf4ceef3b5cfc4db"},"53f6d74dbd78f08ed7b56f6b0a558b7f8d201852ebcde17e7a0be8816abafff2",{"version":"5360ef53b86afac97d950e4f8b70df6de7d8804cb44fc9bad324399469db4141","signature":"26f4ab7bbd5b57bbd62b66da5edff0156ad793b4b6df1ee9ff77bff9e0e5520d"},"a8fa959b0e753ee8da2ae4bb1ceee164ae25fde684682d3dac1f05dd039064c0","14c94f7888c75007a94132f03caef0f6b58bcb136c2994213fd2d3b99f3d7f85","4695042a55a75a6c62dc57f2efe60ef3c7bbe19adedb5081f6e51dd664bbc3f7","b006ad8d854471e7a270bd8918508090961bdc1cfe77ed51f13f471fe682acac","310901df1081433ff7c3b7918496cabb92ded208b04294d3d2bd35acae2de836","c8646410cd2a6bf05eb7e7a51c881776410d07fd5d8f75092a2c815c9c6fda52","37a4a7a5aef4e6a9c652e636aefeef0df9a1cddc24d94dc00a32401a9c9cf8a6","deb2b8baebf3bb0d77453a950dc16dd3f51cbdc12efb69bf8bc4805fbf20fe7e","032108185be5a41a316b4a7872c74331bd574b13499f4b32ce7105ba1c12c339","bd05b91626fdf3e479751850b11e93c3d05ec9dc2afe6e0c1614dd34162aa970","b2ff62f5ded5dc3f30e89fd7d3bd1e5904085326e16ae71cec450b14bb0884e7","afbf3186ef8d68015006b1ed3bbaf54eece8908c27b146b0f7d522842f3210ac","09aea5c0044ff8161e00a9e874bfa5806652270d490dba2a914606f89351ef06","d42ca1c2dc79317b5fb8e14a7d85fc0addc9fe2b142355e34753d60ccc78007a","598b50b11b8daa1bee5f6c59c35ef8df93e05737ec541846634d79bdc60b8503","b40d2724b7cfa63ce888b2e6ebc269c9472109f65072ec9eddb97a83f4801897","2897ce01245d031ff94ec172a8537473ab88c56b139dfcf6d2f620b7b6d4a450","9bbe7d497d72552f0c13b88affff3b9c43dc16037e55ee342e9e7c11d15fc1c8","269867d10a8163319dd29262fcde46cdc275f60fc8750119fe71480474c2b66b","cf0c859d39a640beb86ecc33ec846c32d705f9982aa69e11009e23649934b95f","0e5e5794df0a788165de5a59e25ce055250360a36764e91b060cc1d05e9a9b59","04f00895ed87b76dcfeae85fd8389b10b363d86f08da4d5283f0be5dc42cbee4",{"version":"a254f5dc005eaffffb0afc0c42d168534fc959b2bde70b494afedfe20bfd7dc5","signature":"6a6747a61a1d968c53970b79f35641fba4a17005efc6d021240f3897ce2878fe"},{"version":"4e0094fc185fa5d4aeaacd5f525579bdfd8c2e10fc9ba2b349b312f329aa8b3c","signature":"3f1a08c5204101a5aee11207600d595a3e8cc24ee2b320e6c29edf198573e744"},{"version":"4dd8c5b5144d4121b7aedf21cbc6152f46cf3b773c311f0d6913f771544522ff","signature":"e8209c49bdebdd9b9b12dbee908242ddb48768f43a1bfb809a67b8ced27d2abb"},{"version":"e9526437280f5cf11d114fc5df84f529ca142df90a320a56176e363ebed5c0b5","signature":"8ddb476321ecb63bfd236d0f4fd7f9b8965f1866dae46bd3168f559c302f4e2d"},{"version":"e8a9d476c45af9c0330983441deeb93c39e325ebb73b3385b7644630bbeacf6e","signature":"1daa834e9f98c8e116c64ced04a0d81b7de730466b0d466a2e0b9538bb2eddc7"},{"version":"f12f40fee8a145ca1211b3a4959169a2774d215cca52baca3005a11cc4e623fe","signature":"c64bfbbae6e6e712ce7d9255b331085cf6caab6ef642332f49df24e5604cf740"},{"version":"c33404dfd86ca1a0d23a2477fa33a4077115e6d61671c7b483e5586c76317eae","signature":"5603161d52594be86fd7066626bef3b9166f10f9594fdda6a5e496d8ad56cfd0"},{"version":"c1d5dab3ed6d2e5d8986ce002d6341f49de45533444938cae2eb370e22b9cc7e","signature":"b9c4088f76376b9aa0005a67a2998bbe87c1222af2a62db949b6e5f006e3fb35"},{"version":"013344885a84af2fee522177a8409160cdaf87fec5523cec9a883d958d42785a","signature":"324a12bd7356b69c8f6cf1b75e02bc38cc167e2d4a2073ebffbd93388e224e09"},{"version":"abd0044796f7dd1aa8b94b37980288b6bf6f6ca4edd5617a950e643549e55d42","signature":"97dde781d72037d04abeff50329c971f18fe0b49aeb65454f378b25d97202987"},{"version":"d21183993081f6b6ae8b85cf265e3db51387e1ab1501407f518ea0d32b80aa4d","signature":"ae14f05345aec5808a59e056af194a0f6f3cd49cdac84eadc86a037a171d9d39"},"56c48fb5bb6316dfc27fbad065966b4ddbc38e9a0a1a5060d19b5da405ae7d6e","7091568b9a1b74b699ad09df6c130db712ed089d173a235e301a7a7ee0a4ca44","de33aa2a38affd9e71297ef7ec001a4525502878b09744308fb6518159f77d2d","57476e482c9b4e152bd23d0dc3c29375e48afee0de775674a3c1ea63cb4cf843","3ec4ecf6502ebdb1f3e24c712eb70160c606214ba2e71b4304b5a50fc2e4f293","83f7b6c1dc91deece32c3bee746a43f3616b7cc9f6510764bd53451f6712ff25","c23f2e8772304163fa7e4335be11f3dbdfd720d2209057566b7dfef746ef1862","2a26cb78d3de9708cd656787a663902270c9421ef89188286c3b7ec89b63bb15","e61fda2800677c210116c397dd85079a0956c87fd714826c08b25b10fdd56546","ef7bdfb4f157f9c9b9bd7f5766f0f8e07fac8e7482eec071673f3c9d08082982","d2f2ac1436cbb7c8d122cc7de96521345254e5b36591d9d064d9763de2a7b254","3cd2ba07285d01224f9595924dc7f760c7babb386a6eb825cb551f8d829fe6fa","3ae9770861c2ece5849778e9f15567d95b87df0165c0a5b1312181df19458a56","37b51656ff8302a4556e29c775f311eb9ad813948d2c527405cea041dba3baf3","00abf32ca3af92f8be9ecbc9b63090b4909a756317d791927a83cffd24e9c8ac","cd28efe88fac7a92f3f5cfc7dd3c764f0b31bdaaa061ff044de1639810d6a7da","8b2100d3ba68063b7baf5038f26eefe46543dcebf1e7dbaf46277f24307cefcb","131b7f32092aa78e12fcb2a6db7c71e17f85e076c0635ad8d991b80d10130c19","d1c84af1e6d5fa4a5f4badd45b03b67c9255a675df235a3ec25307a0f5524278","aa4d6dc9282133162a76109d99c5795583276c4fd27284f128d484acf12b0841","3355c4c572f076ad963d95f0e28075b8558e2ab492c84eb94f9e2c48f1c2368b","5638cfd48b0c56bc9ed0c779d53a40b92c9cd9c9d6312e3a21c52542d38094f3","827eb54656695635a6e25543f711f0fe86d1083e5e1c0e84f394ffc122bd3ad7","2309cee540edc190aa607149b673b437cb8807f4e8d921bf7f5a50e6aa8d609c","703509e96cc30dce834ef8188c958c69306473b8a7e5cb3a6f324cee05a1f7bb","900daf04dc607dc3858c0f976d6f9e17b829a07de58d62dc6f730eaf06986075","08e0ac95e650bd4c87145b6ab2257b70c06254bf76a0b9f8a7d60c51fb8ed6b8","4b57ec505a035491c692b89af2c6902c312ec22f8fa9b6dae3e93686659fb7e0","7d796672940d3b2d37f2edea4d7bcf4c7993966286006228cbc8fa35ac92871d","132fd53917ed7f55275faa52c35e4d4d41e9576fea231d12740b723df2bade93","de2ecf9b1d6f60338f7b59b6f593ef77af9abd0e70ba8f2942953d0c6e1850af","ef3e2ea3690a42db943ff732df55409e5658ae4e67370b331cd9daa24cabb4e0","53968130af2a091c147ddbdd9c8cfa19e083dd154584d5bef39ad25535650c35","27ca878cf70b3030e8403f51ce65949d364fa776d6dae3527f91635a40836672","178e2de7a8702742957ad24deaeddec84a48cd913b5d932b16afd2a707b3e416","a45ee7555d019a67fbe092898d1aef0b1d02a9f6679ab84461ff515b4460d706","8c95f96ccd4be0674944077aec1e4f2cccd515ca06d4327562dd017250e7d3fc","6fe7571c8a80808224648046008d1366ba4e29206ac79ce4c56d6fab3350492b","ae2fbee237555ff41daf5275bcc337870886f673b2f029815a8cb6802dfaf2ff","a04521ed86b3bff338b629100837b29c7b4763908ea291d1015276a6ebee1a8e","361552e99ecdb079dabb805c34070d2b89c91ceb23c8e738c1e589e303567748","a64568c16a5821575de4f6280ba1ea4686a1ceecd649fa90ba957c8b1b007013","172a32ac07136bb10578df96b57d3a7fe42795d95bca5f281bf36e83b20715bc","dee4dbaef83bb1061a44f39a91a59300d3dc02528eb57f748222235dd8e02159","a39c32b055d2e6103e5c49b9aed2d7bb5b06571c98fc31105264d280431bdbd7","618ebb93311695a13844118cdc9a7314dd3a2c6f35092d87f76828cac555ddc9","d36c3d116ce59a3f072c0014f0c020c76e916ba906066ddc4f193f546a43bceb","9bed8447acaa89be63540ec500b165442fcb0de020015175b5a5c66d42a61c4a","f128a2d1209d243ba2f7755c2fc313be2c7569fa0d9b4dc5cc60714fb0cc6634","a17e6861b709149f29a2bd896cee94526df2f06b24a2b60614b56649b5e9aabe","9c79ace686f720f4dd833740f7190e12cdce363362c982c164745527a412ef40","439850ca5075c6db55487b2c7fb27a6051fecbf180eee0809b67bb2783a89813","75d48857bc4216880443a24d985071262bb8b89a9952c77fd430cb0caa21f9bf","33e40cf77499b3d9712db82e15683373925e85817dbe82a24ee0ee6e44bffb70","d5bbd453310990e851908183fbbef9e6e2db8e0c86d97b42b723fd5238f71c81","95e76bed30f6e993e1fcc1b90a4675682e4800ae43403547a775d6e3c7ab2b0f","8b206b995edc6dd849b85c1c56531b9780e3ba75302fd02a2d173f008028707e","97040b190f0daa10cf9a15e51a2fac66b26ddefd7b65998bd6027d1dd67647b7","877c25dfae100e555014e45d1d80364496a0c876201e5dea91a0fd0a6a4ff765","d53f9f96afd41359edeb2d5ad98559f3bfad261391d5aef95320fefb0c6a8742","23d98226adf3be74e1f0470f85e7fd154cd7aa979d60b43190a7437f0d0426eb","639f9321a98b734242a3573764d7f1de5369b0b0b10c768ae37639e8bda5dd03","cf18e9d003f1d3d1d61a04eb2d1cff3e8a8cf9cd306d0532ea82700069f2fc42","a42c39d8b7d1b1eccb69c7919ea60dcc2670ea672a0af90b70a730974ec0e9fb","dc5fe5f6b39c3fdfaeba333bcd5f0cc98bb3068797a4d7010f585366f549ddf7","4a3ab8cb278bfd1f18f24cc45a02188b63afa6aef50035df6d79c4638f24059a","e724c9ce92f2a8a31ed260764c5455852a13d292e2a31d26acc6840ec0e83208","40220ba1b091aff0cb20df5467202b62af561b09fcf3b24c22a60066d46f9e62","30abf588759f9e828a94f0c7f031eae094bb668c6dd4d902fa296779267c05c5","bd875d031474860131eadb42300aa57a71527bbb2b239d5b31ab6a9e352c84f0","773bf9af93b5027de9b5b4c779d5cda35f0eb92c7f43a97f2ef3ca081495a191","617f2b4f5115969c7b0f225d4962e6bec1cec7e5c687d84370eba4931b7dd047","59625b1fcc91f2686751fd5b623126f434d7b405bd8d866a555963ce2ac69846","5e0dc1bd24b45c46f2188d2f7f4b67f311610c72b706f963c5bf04c2e1fcc35d","fc69ffd599d3e525aba38f80c7cc2ecd187dbf148287364c75f199c8294a00e6","2ad138be6972de52ed966e6402aa6403af79e9f183486e0a725ffa075a0555fb","480274a4f75a7b3bd5c697a55e1905887b62a928592c0db3c282525fb235ba70","967fb6e86b55db228ab50c81f85f39d6a23a0c15bcfa6e19d255e0952d33a65a","c39e7d32dddfcdaa93b18b99fa430ebb1d6ba366459563d400add22f92e3644b","e3932de252bbe43132ad3226865b2a376ad945dbc1d767540c01b7bddc6477c2","b2f52f3cbd863dc4e690614b5cddbf412dea435d0de099db6d8adfd3cbefcd65","557c93b35f3b58e6844a9b8817559da1e0641f7f08f918e3cd1a8efee126746f","80ad2ae93d57dadac5e377ec6743df5e0211ea30bafd4b648c52366af057bb2b","07f90213b5800a0b43a6d6f309517dcca5afc6ffeb4bed396878a29fc5d6ceb0","bb0e637020f81cb40d16f202c3a783f0e269e29547fb84ca9f187a5ea8556965","462da802b50ac0d94a3c8f7f58a6a0aa08108bfc1394449ea56f1e0f63f5132e","2ccea88888048bbfcacbc9531a5596ea48a3e7dcd0a25f531a81bb717903ba4f","dfef9c847826fac5c480b6d972d3a597b932a2308f330a4416eeeb81c63ba1b2","7f3413d02ad371ab1e5630539aa572ad2e6b129b49946680a0ccc4d2a7f8df07","21f706150e32f03ecd1714d7a7ac55ce3caadc7c7a2a960ba57cc5d39ad84c9d","dbaabf2fd9d9d616427f5c594e251bc8cad3010afeeae96566cf594d061263d1","da1963f37d566ff9f71bf8ca5c628656bae02fc9509050041547e9c7063cc58f","57e4bed825036f7f1328505bc512af492f28b1b57a48f1ff9b6d90b930041a52","3ef0957915b7719ac58153eaea6ce810ff8688276e570f8938455f3ec7930df7","05e0ad043fdd4e2d4874a97bd716174af64d63e43851c09830c00e819a80d395","2dff0ed1eb2046fbdbc2c13914117e1ff1112e217f90542ea5e7f41e39f0393e","a0ba1e2711c2520189ed980225e7a429b0706a1eabf9113e53f0e72550a1b23d","bc3ea94e755b90e96a589ea9d293551c21860db6c1455f04607a732902e1e686","badb4cfbfc6eca3a038be22c76297bec0b5c1478d8b73d60e8b50725b7dcc15c","21e7e0eddddc112f2b891d1066eac74680291db768d3ef9b908965935380ab98","d7443d7b5982dd467848beb2484d9f1a6a569cb162d07fb52389de31e946cfb9","516efe800aaa0b7504b71f2d7e7e9bed5f28eb6c9c739bfdf237f09c7addea46","10ae729013e6620dc937df5dd7077c34e29ad313a28aa75cec39957640cdc8b0","ac5f95dee5e4787fa7c68a81a052cdfa0e03adec8331d3276389384df36cb849","82a68bb9c764a52b9edc0a7fbe6ca7a53ddb3b81532beafb425d402136d31d98","6cf4c4adc1177c401ef8cd74e2904e7f83194c796930620e91663d9d41d5a1e4","955a15609b0b382eaefedbe00bd7b669244b05692989a0bfb44e206f2479a7da",{"version":"66f6b1f89bb349cef36655cb186f48e6246f421fc40b8395c2e930f272c18543","signature":"8065d1e1bae39f137d95a505cc9895d1c75a54615c6a7795184bb2f5f18c073c"},{"version":"45c579f619700f9e558c8aecfc5e2ce26b2aaaccfdbe70a535e268d704c3de35","signature":"60b0940b93afc5295b98c71b9326c668122e0ca683d286353cbce26fb0e3d115"},{"version":"e7e3e68d30ba670b6f51a795536616ee5208cf60ba616cd6050080a1d9ac0d55","signature":"c8e4d1a0faefca5a148883813ce67c5c71aae156a42ac974c4d99f9e8d669057"},{"version":"7d4e42608954a097462fdfb81690dd8c7e8b144bf9930b6c140c0dede33e054f","signature":"c7f150c313799f24e4c32a15787d578502cce86ad19e1d5d71834e5566117256"},{"version":"593d303d33c69e6799f259c15c81bbd8148acf393d32d30b258bb69ecfc20699","signature":"386d149bcbcafb7de15b4d48eee4202479e6ba4db311ce0704bcbad490f9d3c8"},"4489c6a9fde8934733aa7df6f7911461ee6e9e4ad092736bd416f6b2cc20b2c6","2c8e55457aaf4902941dfdba4061935922e8ee6e120539c9801cd7b400fae050","8041cfce439ff29d339742389de04c136e3029d6b1817f07b2d7fcbfb7534990","670a76db379b27c8ff42f1ba927828a22862e2ab0b0908e38b671f0e912cc5ed","9d38964b57191567a14b396422c87488cecd48f405c642daa734159875ee81d9","069bebfee29864e3955378107e243508b163e77ab10de6a5ee03ae06939f0bb9",{"version":"64d4b35c5456adf258d2cf56c341e203a073253f229ef3208fc0d5020253b241","affectsGlobalScope":true},"ee7d8894904b465b072be0d2e4b45cf6b887cdba16a467645c4e200982ece7ea","f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","bc3cba7b0af2d52e7425299aee518db479d44004eff6fbbd206d1ee7e5ec3fb5","afe73051ff6a03a9565cbd8ebb0e956ee3df5e913ad5c1ded64218aabfa3dcb5","035a5df183489c2e22f3cf59fc1ed2b043d27f357eecc0eb8d8e840059d44245","a4809f4d92317535e6b22b01019437030077a76fec1d93b9881c9ed4738fcc54","5f53fa0bd22096d2a78533f94e02c899143b8f0f9891a46965294ee8b91a9434","0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2","d8aab31ba8e618cc3eea10b0945de81cb93b7e8150a013a482332263b9305322","462bccdf75fcafc1ae8c30400c9425e1a4681db5d605d1a0edb4f990a54d8094","5923d8facbac6ecf7c84739a5c701a57af94a6f6648d6229a6c768cf28f0f8cb","7adecb2c3238794c378d336a8182d4c3dd2c4fa6fa1785e2797a3db550edea62","dc12dc0e5aa06f4e1a7692149b78f89116af823b9e1f1e4eae140cd3e0e674e6","1bfc6565b90c8771615cd8cfcf9b36efc0275e5e83ac7d9181307e96eb495161","8a8a96898906f065f296665e411f51010b51372fa260d5373bf9f64356703190","7f82ef88bdb67d9a850dd1c7cd2d690f33e0f0acd208e3c9eba086f3670d4f73",{"version":"ccfd8774cd9b929f63ff7dcf657977eb0652e3547f1fcac1b3a1dc5db22d4d58","affectsGlobalScope":true},"d92dc90fecd2552db74d8dc3c6fb4db9145b2aa0efe2c127236ba035969068d4","96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","8841e2aa774b89bd23302dede20663306dc1b9902431ac64b24be8b8d0e3f649","916be7d770b0ae0406be9486ac12eb9825f21514961dd050594c4b250617d5a8","254d9fb8c872d73d34594be8a200fd7311dbfa10a4116bfc465fba408052f2b3","d88a5e779faf033be3d52142a04fbe1cb96009868e3bbdd296b2bc6c59e06c0e","d8f7109e14f20eb735225a62fd3f8366da1a8349e90331cdad57f4b04caf6c5a","cf3d384d082b933d987c4e2fe7bfb8710adfd9dc8155190056ed6695a25a559e","9871b7ee672bc16c78833bdab3052615834b08375cb144e4d2cba74473f4a589","c863198dae89420f3c552b5a03da6ed6d0acfa3807a64772b895db624b0de707","8b03a5e327d7db67112ebbc93b4f744133eda2c1743dbb0a990c61a8007823ef","86c73f2ee1752bac8eeeece234fd05dfcf0637a4fbd8032e4f5f43102faa8eec","42fad1f540271e35ca37cecda12c4ce2eef27f0f5cf0f8dd761d723c744d3159","ff3743a5de32bee10906aff63d1de726f6a7fd6ee2da4b8229054dfa69de2c34","83acd370f7f84f203e71ebba33ba61b7f1291ca027d7f9a662c6307d74e4ac22","1445cec898f90bdd18b2949b9590b3c012f5b7e1804e6e329fb0fe053946d5ec","0e5318ec2275d8da858b541920d9306650ae6ac8012f0e872fe66eb50321a669","cf530297c3fb3a92ec9591dd4fa229d58b5981e45fe6702a0bd2bea53a5e59be","c1f6f7d08d42148ddfe164d36d7aba91f467dbcb3caa715966ff95f55048b3a4","f4e9bf9103191ef3b3612d3ec0044ca4044ca5be27711fe648ada06fad4bcc85","0c1ee27b8f6a00097c2d6d91a21ee4d096ab52c1e28350f6362542b55380059a","7677d5b0db9e020d3017720f853ba18f415219fb3a9597343b1b1012cfd699f7","bc1c6bc119c1784b1a2be6d9c47addec0d83ef0d52c8fbe1f14a51b4dfffc675","52cf2ce99c2a23de70225e252e9822a22b4e0adb82643ab0b710858810e00bf1","770625067bb27a20b9826255a8d47b6b5b0a2d3dfcbd21f89904c731f671ba77","d1ed6765f4d7906a05968fb5cd6d1db8afa14dbe512a4884e8ea5c0f5e142c80","799c0f1b07c092626cf1efd71d459997635911bb5f7fc1196efe449bba87e965","2a184e4462b9914a30b1b5c41cf80c6d3428f17b20d3afb711fff3f0644001fd","9eabde32a3aa5d80de34af2c2206cdc3ee094c6504a8d0c2d6d20c7c179503cc","397c8051b6cfcb48aa22656f0faca2553c5f56187262135162ee79d2b2f6c966","a8ead142e0c87dcd5dc130eba1f8eeed506b08952d905c47621dc2f583b1bff9","a02f10ea5f73130efca046429254a4e3c06b5475baecc8f7b99a0014731be8b3","c2576a4083232b0e2d9bd06875dd43d371dee2e090325a9eac0133fd5650c1cb","4c9a0564bb317349de6a24eb4efea8bb79898fa72ad63a1809165f5bd42970dd","f40ac11d8859092d20f953aae14ba967282c3bb056431a37fced1866ec7a2681","cc11e9e79d4746cc59e0e17473a59d6f104692fd0eeea1bdb2e206eabed83b03","b444a410d34fb5e98aa5ee2b381362044f4884652e8bc8a11c8fe14bbd85518e","c35808c1f5e16d2c571aa65067e3cb95afeff843b259ecfa2fc107a9519b5392","14d5dc055143e941c8743c6a21fa459f961cbc3deedf1bfe47b11587ca4b3ef5","a3ad4e1fc542751005267d50a6298e6765928c0c3a8dce1572f2ba6ca518661c","f237e7c97a3a89f4591afd49ecb3bd8d14f51a1c4adc8fcae3430febedff5eb6","3ffdfbec93b7aed71082af62b8c3e0cc71261cc68d796665faa1e91604fbae8f","662201f943ed45b1ad600d03a90dffe20841e725203ced8b708c91fcd7f9379a","c9ef74c64ed051ea5b958621e7fb853fe3b56e8787c1587aefc6ea988b3c7e79","2462ccfac5f3375794b861abaa81da380f1bbd9401de59ffa43119a0b644253d","34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","7d8ddf0f021c53099e34ee831a06c394d50371816caa98684812f089b4c6b3d4","7d2a0ba1297be385a89b5515b88cd31b4a1eeef5236f710166dc1b36b1741e1b","9d92b037978bb9525bc4b673ebddd443277542e010c0aef019c03a170ccdaa73","ab82804a14454734010dcdcd43f564ff7b0389bee4c5692eec76ff5b30d4cf66","bae8d023ef6b23df7da26f51cea44321f95817c190342a36882e93b80d07a960","ae271d475b632ce7b03fea6d9cf6da72439e57a109672671cbc79f54e1386938"],"options":{"composite":true,"declaration":true,"declarationMap":true,"emitDeclarationOnly":true,"esModuleInterop":true,"inlineSources":true,"module":1,"outDir":"./types","rootDir":"../src","sourceMap":true,"strict":true,"target":7},"fileIdsList":[[679],[92,128,129,130,145],[129,130,146,147],[128,129],[128,145,148,151],[128,148,151,152],[149,150,151,153,154],[128,151],[128,145,148,149,150,153],[128,136],[128],[92,128],[80,128],[132,133,134,135,136,137,138,139,140,141,142,143,144],[128,134,135],[128,134,136],[461,465,466],[461,464],[464],[465,467,469],[461,464,465,466,467,468],[461,464,468,472,473,474],[461,464,468,475],[461],[461,462],[462,463],[461,464,470,473,475,476],[471],[472,474,478,481,482],[472,474,482],[128,464,468,472,473,475,478],[472,482],[472,475,479],[464,473,475],[472,475,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493],[472,480],[128,480],[461,468,472,473,474,475,476,479],[472,474,478,480],[472,479,480],[128,155,265,266],[266,267],[265],[128,260],[260,261,262,263,264],[128,232,239,240],[128,232,239,240,260],[128,232,239,240,244],[128,232,239,240,241,243,244],[128,232,239,240,242],[128,232,239,240,245,246,248,249],[238,260],[128,232,239,240,245],[128,232,239,240,243],[128,232,239,240,256],[128,232,239,240,257],[131,229,232,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259],[230],[230,231],[230,239,240,245,246],[232,238,239],[277,278],[92,128,265,268,276],[268,277],[167,552],[167,550,552,553,554],[167,540],[540],[540,541,542,543,544,545,546,547,548,549],[550],[551],[204],[216,217,218],[204,215,216],[325,334,335,338],[325,334,337],[326,329,330,332],[326,327,328],[329,330,332,333],[326,327,331],[337,343],[325,334,337,343],[334,337,343],[334,337,339,340,341,342],[325,334,335,336,337,338,343],[325,334,336,338],[325,334],[326],[64,167,281,283,284,297],[64,167],[282],[285],[64,284],[286,287,296],[295],[283,284,289,295,297,298,299,301,311,312,427],[64,167,428],[167,289,297],[290],[288,291,292,293,294],[64,167,282,284,287],[64,167,284],[167,298,300],[167,300,301,310],[167,299,426],[58,64],[535,536,537,538],[568],[128,270,567],[128,270,568],[128,270,271],[271],[271,272,273,274,275],[128,270],[270,570],[570,571,572,573,574,575,576,577,578,579],[270,570,571],[81,128,270,570,571],[125,128,270,570,571],[270,571],[167,204,211,302],[303],[305],[302,303,304,305,306,307,308,309],[128,270,304,307],[128,167,270,303,305],[302,307],[128,167,204,211,270,303],[167,211],[167,313],[313,314],[313,314,315,316],[167],[188,426,615,633,634,647,670],[668],[167,645,658,666,667,669],[657],[188,426,629,656],[128,211,270,569,580,633,634,635,647],[167,188,633,647],[580,636],[638],[635,636,637,639,642,644],[641],[636,640,645],[580,636,637],[167,580],[643],[636,637],[650,663,664,665],[633,647],[646,647,648,649],[633,647,648],[167,633,646,647],[167,633,647],[661,662],[167,188,625,661],[167,426,625],[167,184,188,426,501,615,625,633,634,645,647,650,652,658,660,663],[659],[167,426,615,633,634,647,666],[64,167,624],[128,167,318],[167,423],[392],[167,318,392,420,423,424,425],[128,167,317,318],[319,320,321,322,421,422],[58,64,420],[58,64,321],[353],[353,359],[353,358,360],[358,359,360,361],[363,364],[354,355,356,357,362,365,366,367,368,369,370,371],[353,365],[353,354,367,369],[353,365,368],[353,372,373,374,375],[353,372,423],[407],[420],[410,411,412,413,414,415,416,417,418],[167,345],[392,416,423],[345,420,423],[64],[345,346,393,396,406,407,408,419],[64,376,392],[420,423],[344,346],[346],[423],[393],[167,396],[323,324,347,348,349,350,351,352,394,395,397,398,399,400,401,402,403,404,405],[167,398],[323,324,347,348,349,350,351,352,394,395,397,398,399,400,401,402,403,404,423],[167,344,345],[310,406],[167,346],[390],[64,377],[378,379,380,381,382,383,384,385,386,387,388,389],[377,390,391],[373],[376],[426],[584],[583],[64,167,590],[344],[167,317,426],[64,426,597,598],[581,582,584,585,586,587,588,591,592,593,594,595,596,597,599,600,601,616,617,619,620,621,622,623,626,627,628,630,631,632],[64,167,615],[64,167,426,584,619],[158],[618],[64,167,344,426,617],[64,426,617],[64,426,615,618,620,625,626],[64,167,584,587,599,619,620],[426,629],[626],[199],[199,200,201],[67],[64,67],[65,66,67,68,69,70,71,72,73,74,75,156,159,160,161,162,163,164,165,166],[58,64,65],[67,73,75,155],[67,68],[64,162],[128,235],[233,234,237],[233,236],[128,233],[194,195],[679,680,681,682,683],[679,681],[157],[685,686,687],[93,128],[690],[691],[702],[696,701],[447,449,450,451,452,453,454,455,456,457,458,459],[447,448,450,451,452,453,454,455,456,457,458,459],[448,449,450,451,452,453,454,455,456,457,458,459],[447,448,449,451,452,453,454,455,456,457,458,459],[447,448,449,450,452,453,454,455,456,457,458,459],[447,448,449,450,451,453,454,455,456,457,458,459],[447,448,449,450,451,452,454,455,456,457,458,459],[447,448,449,450,451,452,453,455,456,457,458,459],[447,448,449,450,451,452,453,454,456,457,458,459],[447,448,449,450,451,452,453,454,455,457,458,459],[447,448,449,450,451,452,453,454,455,456,458,459],[447,448,449,450,451,452,453,454,455,456,457,459],[447,448,449,450,451,452,453,454,455,456,457,458],[76],[79],[80,85,112],[81,92,93,100,109,120],[81,82,92,100],[83,121],[84,85,93,101],[85,109,117],[86,88,92,100],[87],[88,89],[92],[91,92],[79,92],[92,93,94,109,120],[92,93,94,109],[92,95,100,109,120],[92,93,95,96,100,109,117,120],[95,97,109,117,120],[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],[92,98],[99,120,125],[88,92,100,109],[101],[102],[79,103],[104,119,125],[105],[106],[92,107],[107,108,121,123],[80,92,109,110,111],[80,109,111],[109,110],[112],[113],[92,115,116],[115,116],[85,100,109,117],[118],[100,119],[80,95,106,120],[85,121],[109,122],[123],[124],[80,85,92,94,103,109,120,123,125],[109,126],[128,269],[710,749],[710,734,749],[749],[710],[710,735,749],[710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748],[735,749],[750],[753],[651],[441,442,443,444,445],[441],[443],[441,443],[507,508,509,510,511],[512],[509,512],[510],[521,522,523],[524],[521,524],[128,513,519],[128,513,519,520,524],[513,519],[525,526,527,528],[525],[128,519,520,530],[512,513,514,515,516,517,518,519,521,524,529],[128,519,530],[128,512,513,514,515,516,517,518,521,524],[128,512,513,519,520],[128,513,519,520],[589],[179],[179,180,181,182,183],[168,169,170,171,172,173,174,175,176,177,178],[694,697],[694,697,698,699],[696],[693,700],[495,496],[695],[57,59,60,61,62,63],[57,58],[59],[58,59],[57,59],[188,428,437,670],[671,672],[184,437,502,671],[167,188,317],[499,500],[167,188,191,198,224,228,440,446,459],[46,167,188,192,198,224,440,477,494,556,557,562,563],[167,192,198,464,497,505,532,561],[198],[533],[188,198,224,228,446,534],[460,504,505,532,559,560,561,562,564,565,566,674,677],[92,167,188,192,198,224,317,440,446,498,501,502,503,504,562,564],[167,188,198,224,228,440,503,505],[675,676],[188,446,534,675],[188,534,676],[52,145,167,192,198,477,494,555,562],[52,192,198,477,494,562],[52,198,477,494,562],[167,198,506,530],[506,531],[167,198,562],[188,198,440,560,561,564],[47,167,188,198,224,228,437,440,559,560,561,562,564,673],[167,188,198,224,228,446,558,562],[167,188,198,224,228,440,459,506,531,534,560,562],[47,52,92,167,184,188,198,224,317,440,446,477,494,501,502,556,557,558,559,561,562],[167,184,185,186],[185],[56,185,186,187],[186],[189],[189,190,193,197],[196],[167,191,192],[212,213,214],[211,212],[167,211,212],[167,204,211],[167,205],[205,206,207,208,209,210],[167,204],[436],[155,167,184,188,279,280,428,435],[92,128,167,188],[429],[429,430,431,432,433,434],[198,429],[220],[203,220,222,223],[167,188,191,198,202,203,220,221],[167,198,215,219],[167,607,608,609],[317,607,608,610],[605,606,607,608,609,610,614],[167,211,607,609,615],[167,188,198,602,605,607,610],[167,184,188,198,317,501,602,603,604,605,606,608,609,610],[167,211,606,607,608],[611,612,613],[167,198,211,606,608,609],[167,211,606,608,609],[167,188,607],[167,211,608,610],[655],[55,188,198,653,654],[167,188,224,225],[225,226,227],[128,167,188,224,225],[167,224],[438,439],[188,437,438],[167,188,191,224,228,440],[167,188,192,224,440,494,556,557,563],[167,192,464,505,532,561],[188,224,228,534],[92,167,188,224,440,501,503,504,564],[167,188,224,228,440,503,505],[188,675],[192,494],[494],[167,506],[188,440,560,561,564],[188,224,228,437,440,559,560,564,673],[167,188,224,228],[167,188,224,228,440,506,560],[92,167,184,188,224,440,477,494,501,559,561]],"referencedMap":[[681,1],[146,2],[148,3],[130,4],[152,5],[153,6],[149,6],[155,7],[150,6],[154,8],[151,9],[137,10],[134,11],[141,12],[135,10],[132,13],[145,14],[139,11],[136,15],[138,16],[467,17],[466,18],[465,19],[470,20],[469,21],[475,22],[476,23],[498,18],[462,24],[463,25],[464,26],[477,27],[472,28],[483,29],[484,30],[479,31],[485,32],[486,33],[487,33],[478,34],[494,35],[489,29],[488,36],[490,37],[480,38],[491,32],[492,30],[482,39],[493,36],[481,40],[473,18],[267,41],[268,42],[266,43],[263,44],[262,44],[261,44],[265,45],[247,46],[252,47],[241,46],[246,48],[245,49],[243,50],[250,51],[251,46],[253,52],[254,53],[256,54],[257,55],[258,56],[260,57],[231,58],[232,59],[248,60],[240,61],[279,62],[277,63],[278,64],[553,65],[555,66],[541,67],[542,68],[543,68],[544,67],[545,67],[546,68],[550,69],[547,67],[548,68],[549,68],[551,70],[552,71],[216,72],[219,73],[217,74],[218,74],[336,75],[338,76],[333,77],[329,78],[330,78],[334,79],[332,80],[339,81],[340,82],[341,83],[343,84],[342,81],[344,85],[337,86],[335,87],[328,88],[331,78],[298,89],[281,90],[283,91],[282,90],[286,92],[285,93],[297,94],[287,90],[296,95],[428,96],[288,97],[290,98],[291,99],[292,90],[295,100],[294,101],[300,102],[301,103],[311,104],[312,103],[427,105],[284,106],[539,107],[569,108],[568,109],[567,110],[272,111],[273,112],[276,113],[274,112],[271,72],[275,114],[571,115],[580,116],[576,117],[575,118],[578,117],[577,119],[579,120],[574,120],[573,117],[572,120],[303,121],[304,122],[306,123],[310,124],[308,125],[307,126],[309,127],[305,128],[302,129],[314,130],[315,131],[317,132],[313,133],[204,12],[668,134],[669,135],[670,136],[658,137],[657,138],[636,139],[635,140],[638,141],[639,142],[645,143],[642,144],[641,145],[640,146],[637,147],[644,148],[643,149],[666,150],[648,151],[650,152],[649,153],[647,154],[646,155],[663,156],[662,157],[661,158],[665,151],[664,159],[659,133],[660,160],[667,161],[625,162],[624,90],[424,163],[318,164],[425,165],[426,166],[319,167],[320,133],[321,133],[423,168],[421,169],[322,170],[353,133],[354,171],[355,171],[356,171],[357,171],[358,171],[360,172],[361,173],[362,174],[359,171],[363,171],[365,175],[364,171],[366,171],[367,171],[372,176],[368,177],[370,178],[371,171],[369,179],[376,180],[374,171],[373,171],[375,181],[408,182],[410,133],[411,183],[419,184],[412,133],[413,133],[414,185],[415,133],[417,186],[416,187],[418,188],[420,189],[393,190],[323,183],[324,191],[347,192],[348,193],[349,192],[351,133],[352,194],[394,195],[397,196],[406,197],[399,198],[398,133],[400,133],[401,164],[405,199],[402,194],[403,196],[404,183],[346,200],[407,201],[396,202],[391,203],[378,204],[387,204],[379,204],[380,204],[389,204],[381,204],[382,204],[390,205],[388,204],[383,204],[386,204],[384,204],[385,204],[392,206],[377,188],[598,207],[629,208],[582,209],[585,210],[586,211],[588,210],[591,212],[594,213],[596,214],[599,215],[633,216],[616,217],[601,133],[620,218],[621,219],[619,220],[618,221],[622,222],[627,223],[617,106],[626,224],[630,225],[631,226],[632,133],[584,211],[200,227],[201,227],[202,228],[65,188],[66,188],[68,229],[69,188],[70,188],[71,230],[67,188],[167,231],[75,232],[156,233],[159,219],[165,234],[166,235],[236,236],[235,11],[238,237],[233,11],[237,238],[234,239],[196,240],[684,241],[680,1],[682,242],[683,1],[192,11],[158,243],[688,244],[689,245],[691,246],[692,247],[703,248],[702,249],[448,250],[449,251],[447,252],[450,253],[451,254],[452,255],[453,256],[454,257],[455,258],[456,259],[457,260],[458,261],[459,262],[76,263],[77,263],[79,264],[80,265],[81,266],[82,267],[83,268],[84,269],[85,270],[86,271],[87,272],[88,273],[89,273],[90,274],[91,275],[92,276],[93,277],[94,278],[95,279],[96,280],[97,281],[128,282],[98,283],[99,284],[100,285],[101,286],[102,287],[103,288],[104,289],[105,290],[106,291],[107,292],[108,293],[109,294],[111,295],[110,296],[112,297],[113,298],[115,299],[116,300],[117,301],[118,302],[119,303],[120,304],[121,305],[122,306],[123,307],[124,308],[125,309],[126,310],[707,11],[270,311],[709,11],[734,312],[735,313],[710,314],[713,314],[732,312],[733,312],[723,312],[722,315],[720,312],[715,312],[728,312],[726,312],[730,312],[714,312],[727,312],[731,312],[716,312],[717,312],[729,312],[711,312],[718,312],[719,312],[721,312],[725,312],[736,316],[724,312],[712,312],[749,317],[743,316],[745,318],[744,316],[737,316],[738,316],[740,316],[742,316],[746,318],[747,318],[739,318],[741,318],[751,319],[754,320],[652,321],[446,322],[442,323],[444,324],[445,325],[512,326],[507,327],[508,327],[510,328],[509,329],[511,327],[524,330],[523,331],[522,332],[514,333],[521,334],[513,11],[520,335],[529,336],[527,337],[515,338],[530,339],[516,340],[519,341],[517,342],[518,343],[590,344],[175,345],[177,345],[176,345],[174,345],[184,346],[179,347],[170,345],[171,345],[172,345],[173,345],[698,348],[700,349],[699,348],[697,350],[701,351],[497,352],[696,353],[64,354],[59,355],[60,356],[61,356],[62,357],[63,357],[58,358],[671,359],[673,360],[672,361],[499,362],[501,363],[460,364],[564,365],[562,366],[533,367],[534,368],[565,369],[678,370],[505,371],[504,372],[677,373],[676,374],[675,375],[556,376],[557,377],[563,378],[506,133],[531,379],[532,380],[558,381],[566,382],[674,383],[559,384],[561,385],[560,386],[187,387],[186,388],[188,389],[185,390],[190,391],[198,392],[197,393],[193,394],[215,395],[213,396],[214,397],[212,398],[206,399],[207,399],[209,399],[211,400],[205,401],[210,399],[437,402],[436,403],[429,404],[434,405],[433,405],[435,406],[430,405],[431,407],[432,405],[221,408],[223,408],[224,409],[222,410],[220,411],[610,412],[609,413],[615,414],[604,415],[608,416],[607,417],[611,418],[614,419],[612,420],[613,421],[605,422],[606,423],[656,424],[655,425],[654,424],[226,426],[228,427],[227,428],[225,429],[440,430],[439,431]],"exportedModulesMap":[[681,1],[146,2],[148,3],[130,4],[152,5],[153,6],[149,6],[155,7],[150,6],[154,8],[151,9],[137,10],[134,11],[141,12],[135,10],[132,13],[145,14],[139,11],[136,15],[138,16],[467,17],[466,18],[465,19],[470,20],[469,21],[475,22],[476,23],[498,18],[462,24],[463,25],[464,26],[477,27],[472,28],[483,29],[484,30],[479,31],[485,32],[486,33],[487,33],[478,34],[494,35],[489,29],[488,36],[490,37],[480,38],[491,32],[492,30],[482,39],[493,36],[481,40],[473,18],[267,41],[268,42],[266,43],[263,44],[262,44],[261,44],[265,45],[247,46],[252,47],[241,46],[246,48],[245,49],[243,50],[250,51],[251,46],[253,52],[254,53],[256,54],[257,55],[258,56],[260,57],[231,58],[232,59],[248,60],[240,61],[279,62],[277,63],[278,64],[553,65],[555,66],[541,67],[542,68],[543,68],[544,67],[545,67],[546,68],[550,69],[547,67],[548,68],[549,68],[551,70],[552,71],[216,72],[219,73],[217,74],[218,74],[336,75],[338,76],[333,77],[329,78],[330,78],[334,79],[332,80],[339,81],[340,82],[341,83],[343,84],[342,81],[344,85],[337,86],[335,87],[328,88],[331,78],[298,89],[281,90],[283,91],[282,90],[286,92],[285,93],[297,94],[287,90],[296,95],[428,96],[288,97],[290,98],[291,99],[292,90],[295,100],[294,101],[300,102],[301,103],[311,104],[312,103],[427,105],[284,106],[539,107],[569,108],[568,109],[567,110],[272,111],[273,112],[276,113],[274,112],[271,72],[275,114],[571,115],[580,116],[576,117],[575,118],[578,117],[577,119],[579,120],[574,120],[573,117],[572,120],[303,121],[304,122],[306,123],[310,124],[308,125],[307,126],[309,127],[305,128],[302,129],[314,130],[315,131],[317,132],[313,133],[204,12],[668,134],[669,135],[670,136],[658,137],[657,138],[636,139],[635,140],[638,141],[639,142],[645,143],[642,144],[641,145],[640,146],[637,147],[644,148],[643,149],[666,150],[648,151],[650,152],[649,153],[647,154],[646,155],[663,156],[662,157],[661,158],[665,151],[664,159],[659,133],[660,160],[667,161],[625,162],[624,90],[424,163],[318,164],[425,165],[426,166],[319,167],[320,133],[321,133],[423,168],[421,169],[322,170],[353,133],[354,171],[355,171],[356,171],[357,171],[358,171],[360,172],[361,173],[362,174],[359,171],[363,171],[365,175],[364,171],[366,171],[367,171],[372,176],[368,177],[370,178],[371,171],[369,179],[376,180],[374,171],[373,171],[375,181],[408,182],[410,133],[411,183],[419,184],[412,133],[413,133],[414,185],[415,133],[417,186],[416,187],[418,188],[420,189],[393,190],[323,183],[324,191],[347,192],[348,193],[349,192],[351,133],[352,194],[394,195],[397,196],[406,197],[399,198],[398,133],[400,133],[401,164],[405,199],[402,194],[403,196],[404,183],[346,200],[407,201],[396,202],[391,203],[378,204],[387,204],[379,204],[380,204],[389,204],[381,204],[382,204],[390,205],[388,204],[383,204],[386,204],[384,204],[385,204],[392,206],[377,188],[598,207],[629,208],[582,209],[585,210],[586,211],[588,210],[591,212],[594,213],[596,214],[599,215],[633,216],[616,217],[601,133],[620,218],[621,219],[619,220],[618,221],[622,222],[627,223],[617,106],[626,224],[630,225],[631,226],[632,133],[584,211],[200,227],[201,227],[202,228],[65,188],[66,188],[68,229],[69,188],[70,188],[71,230],[67,188],[167,231],[75,232],[156,233],[159,219],[165,234],[166,235],[236,236],[235,11],[238,237],[233,11],[237,238],[234,239],[196,240],[684,241],[680,1],[682,242],[683,1],[192,11],[158,243],[688,244],[689,245],[691,246],[692,247],[703,248],[702,249],[448,250],[449,251],[447,252],[450,253],[451,254],[452,255],[453,256],[454,257],[455,258],[456,259],[457,260],[458,261],[459,262],[76,263],[77,263],[79,264],[80,265],[81,266],[82,267],[83,268],[84,269],[85,270],[86,271],[87,272],[88,273],[89,273],[90,274],[91,275],[92,276],[93,277],[94,278],[95,279],[96,280],[97,281],[128,282],[98,283],[99,284],[100,285],[101,286],[102,287],[103,288],[104,289],[105,290],[106,291],[107,292],[108,293],[109,294],[111,295],[110,296],[112,297],[113,298],[115,299],[116,300],[117,301],[118,302],[119,303],[120,304],[121,305],[122,306],[123,307],[124,308],[125,309],[126,310],[707,11],[270,311],[709,11],[734,312],[735,313],[710,314],[713,314],[732,312],[733,312],[723,312],[722,315],[720,312],[715,312],[728,312],[726,312],[730,312],[714,312],[727,312],[731,312],[716,312],[717,312],[729,312],[711,312],[718,312],[719,312],[721,312],[725,312],[736,316],[724,312],[712,312],[749,317],[743,316],[745,318],[744,316],[737,316],[738,316],[740,316],[742,316],[746,318],[747,318],[739,318],[741,318],[751,319],[754,320],[652,321],[446,322],[442,323],[444,324],[445,325],[512,326],[507,327],[508,327],[510,328],[509,329],[511,327],[524,330],[523,331],[522,332],[514,333],[521,334],[513,11],[520,335],[529,336],[527,337],[515,338],[530,339],[516,340],[519,341],[517,342],[518,343],[590,344],[175,345],[177,345],[176,345],[174,345],[184,346],[179,347],[170,345],[171,345],[172,345],[173,345],[698,348],[700,349],[699,348],[697,350],[701,351],[497,352],[696,353],[64,354],[59,355],[60,356],[61,356],[62,357],[63,357],[58,358],[671,359],[673,360],[672,361],[499,362],[501,363],[460,432],[564,433],[562,434],[534,368],[565,435],[678,370],[505,436],[504,437],[677,373],[676,438],[675,375],[556,439],[557,439],[563,440],[506,133],[531,441],[532,380],[558,133],[566,442],[674,443],[559,444],[561,445],[560,446],[187,387],[186,388],[188,389],[185,390],[190,391],[198,392],[197,393],[193,394],[215,395],[213,396],[214,397],[212,398],[206,399],[207,399],[209,399],[211,400],[205,401],[210,399],[437,402],[436,403],[429,404],[434,405],[433,405],[435,406],[430,405],[431,407],[432,405],[221,408],[223,408],[224,409],[222,410],[220,411],[610,412],[609,413],[615,414],[604,415],[608,416],[607,417],[611,418],[614,419],[612,420],[613,421],[605,422],[606,423],[656,424],[655,425],[654,424],[226,426],[228,427],[227,428],[225,429],[440,430],[439,431]],"semanticDiagnosticsPerFile":[681,679,146,129,148,130,147,152,153,149,155,150,154,151,137,134,141,135,132,140,145,142,143,144,139,136,133,138,467,466,465,470,469,475,476,498,462,463,464,461,477,472,471,468,483,484,479,485,486,487,478,494,489,488,490,480,491,492,482,493,481,473,474,267,268,266,263,262,261,265,264,247,252,241,246,245,243,250,251,253,255,254,256,257,258,260,231,230,232,248,229,242,240,239,249,244,259,279,277,278,553,554,555,541,542,543,544,545,546,550,547,540,548,549,551,552,280,216,219,217,218,191,336,338,325,333,329,330,334,332,339,340,341,343,342,344,337,335,328,326,327,331,298,281,283,282,289,286,285,297,287,296,299,428,288,290,291,292,295,293,294,300,301,311,312,427,284,537,535,536,538,539,569,568,567,272,273,276,274,271,275,571,580,576,575,578,577,579,570,574,573,572,303,304,306,310,308,307,309,305,302,314,316,315,317,313,204,668,669,670,658,657,636,635,638,639,645,642,641,640,637,644,643,666,648,650,649,647,646,663,662,661,665,664,634,659,660,667,625,624,424,318,425,426,319,320,321,423,421,322,422,353,354,355,356,357,358,360,361,362,359,363,365,364,366,367,372,368,370,371,369,376,374,373,375,345,408,410,411,419,412,413,414,415,417,416,418,409,420,393,323,324,347,348,349,350,351,352,394,395,397,406,399,398,400,401,405,402,403,404,346,407,396,391,378,387,379,380,389,381,382,390,388,383,386,384,385,392,377,598,629,581,582,585,586,587,588,591,592,593,594,595,596,597,599,600,633,616,601,620,621,619,618,622,623,627,628,617,626,630,631,632,584,583,200,201,202,199,65,66,68,69,70,71,72,73,74,67,167,75,156,159,160,161,162,163,164,165,166,236,235,238,233,237,234,194,196,195,684,680,682,683,192,158,603,685,688,686,689,690,691,692,703,702,687,704,448,449,447,450,451,452,453,454,455,456,457,458,459,705,157,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,78,127,95,96,97,128,98,99,100,101,102,103,104,105,106,107,108,109,111,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,706,707,708,653,270,269,709,734,735,710,713,732,733,723,722,720,715,728,726,730,714,727,731,716,717,729,711,718,719,721,725,736,724,712,749,748,743,745,744,737,738,740,742,746,747,739,741,751,750,752,502,753,754,652,651,446,442,441,444,443,445,131,693,512,507,508,510,509,511,524,523,522,514,521,513,520,525,526,529,527,528,515,530,516,519,517,518,589,590,178,175,177,176,174,184,179,183,180,182,181,170,171,172,168,169,173,694,698,700,699,697,701,495,497,496,602,696,695,57,64,59,60,61,62,63,58,8,10,9,2,11,12,13,14,15,16,17,18,3,4,22,19,20,21,23,24,25,5,26,27,28,29,6,33,30,31,32,34,7,35,40,41,36,37,38,39,1,42,671,673,672,499,500,501,460,564,562,503,533,534,565,678,505,504,677,676,675,556,557,563,506,531,532,558,566,674,559,561,560,56,187,186,188,185,190,198,197,189,193,215,213,214,212,206,207,208,209,211,205,210,437,436,429,434,433,435,430,431,432,203,221,223,224,222,220,610,609,615,604,608,607,611,614,612,613,605,606,656,655,654,226,228,227,225,438,440,439,47,48,49,50,51,52,43,53,54,55,44,45,46],"latestChangedDtsFile":"./types/index.d.ts"},"version":"4.9.5"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/AccountTrackerController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/AccountTrackerController.d.ts
index b3272df..fac500a 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/AccountTrackerController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/AccountTrackerController.d.ts
@@ -3,6 +3,7 @@ import type { Provider } from '@metamask/eth-query';
 import type { NetworkClientId, NetworkController, NetworkState } from '@metamask/network-controller';
 import { StaticIntervalPollingControllerV1 } from '@metamask/polling-controller';
 import type { PreferencesState } from '@metamask/preferences-controller';
+import type { Hex } from '@metamask/utils';
 /**
  * @type AccountInformation
  *
@@ -10,7 +11,7 @@ import type { PreferencesState } from '@metamask/preferences-controller';
  * @property balance - Hex string of an account balancec in wei
  */
 export interface AccountInformation {
-    balance: string;
+    balance: Hex | undefined;
 }
 /**
  * @type AccountTrackerConfig
diff --git a/node_modules/@metamask/assets-controllers/dist/types/AccountTrackerController.d.ts.map b/node_modules/@metamask/assets-controllers/dist/types/AccountTrackerController.d.ts.map
index 02640ae..0483a0c 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/AccountTrackerController.d.ts.map
+++ b/node_modules/@metamask/assets-controllers/dist/types/AccountTrackerController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"AccountTrackerController.d.ts","sourceRoot":"","sources":["../../src/AccountTrackerController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"AccountTrackerController.d.ts","sourceRoot":"","sources":["../../src/AccountTrackerController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts
index 42a321a..41e5ebd 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts
@@ -109,6 +109,7 @@ export interface NftMetadata {
     creator?: string;
     transactionId?: string;
     tokenURI?: string | null;
+    error?: string;
     collection?: Collection;
     address?: string;
     attributes?: Attributes;
@@ -125,7 +126,7 @@ export interface NftConfig extends BaseConfig {
     selectedAddress: string;
     chainId: Hex;
     ipfsGateway: string;
-    openSeaEnabled: boolean;
+    displayNftMedia: boolean;
     useIPFSSubdomains: boolean;
     isIpfsGatewayEnabled: boolean;
 }
@@ -167,6 +168,10 @@ type AllowedActions = AddApprovalRequest | NetworkControllerGetNetworkClientById
  */
 export type NftControllerMessenger = RestrictedControllerMessenger<typeof controllerName, AllowedActions, never, AllowedActions['type'], never>;
 export declare const getDefaultNftState: () => NftState;
+/**
+ * Changes regarding displayNftMedia, TokenURI and error nft metadata property are not on the core repo and needed to be refactor to be removed from the patch
+ * updateNftMetadata changes will be introduced on latest versions of changes of assets controllers, v^30 or next
+ */
 /**
  * Controller that stores assets and exposes convenience methods
  */
@@ -348,9 +353,10 @@ export declare class NftController extends BaseControllerV1<NftConfig, NftState>
             tokenId: string;
             standard: string | null;
             source: string;
+            tokenURI?: string | null;
         }) => void;
         messenger: NftControllerMessenger;
-    }, config?: Partial<BaseConfig>, state?: Partial<NftState>);
+    }, config?: Partial<NftConfig>, state?: Partial<NftState>);
     private validateWatchNft;
     private getCorrectChainId;
     /**
diff --git a/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts.map b/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts.map
index 7bd2972..aac6e25 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts.map
+++ b/node_modules/@metamask/assets-controllers/dist/types/NftController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"NftController.d.ts","sourceRoot":"","sources":["../../src/NftController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"NftController.d.ts","sourceRoot":"","sources":["../../src/NftController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts
index 52bb3ac..ff9a823 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts
@@ -2,7 +2,7 @@ import { type RestrictedControllerMessenger, type ControllerGetStateAction, type
 import type { PreferencesControllerGetStateAction } from '@metamask/preferences-controller';
 import type { AssetsContractController } from './AssetsContractController';
 import type { Token } from './TokenRatesController';
-import type { TokensControllerStateChangeEvent } from './TokensController';
+import type { TokensControllerStateChangeEvent, TokensState } from './TokensController';
 declare const controllerName = "TokenBalancesController";
 /**
  * Token balances controller options
@@ -15,6 +15,7 @@ type TokenBalancesControllerOptions = {
     interval?: number;
     tokens?: Token[];
     disabled?: boolean;
+    onTokensStateChange: (listener: (tokensState: TokensState) => void) => void;
     getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];
     messenger: TokenBalancesControllerMessenger;
     state?: Partial<TokenBalancesControllerState>;
@@ -56,11 +57,12 @@ export declare class TokenBalancesController extends BaseController<typeof contr
      * @param options.interval - Polling interval used to fetch new token balances.
      * @param options.tokens - List of tokens to track balances for.
      * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
+     * @param options.onTokensStateChange - Allows subscribing to token controller state changes.
      * @param options.getERC20BalanceOf - Gets the balance of the given account at the given contract address.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller restricted messenger.
      */
-    constructor({ interval, tokens, disabled, getERC20BalanceOf, messenger, state, }: TokenBalancesControllerOptions);
+    constructor({ interval, tokens, disabled, onTokensStateChange, getERC20BalanceOf, messenger, state, }: TokenBalancesControllerOptions);
     /**
      * Allows controller to update tracked tokens contract balances.
      */
@@ -79,6 +81,11 @@ export declare class TokenBalancesController extends BaseController<typeof contr
      * Updates balances for all tokens.
      */
     updateBalances(): Promise<void>;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+     */
+    reset(): void;
 }
 export default TokenBalancesController;
 //# sourceMappingURL=TokenBalancesController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts.map b/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts.map
index 0fbf42b..ca082cd 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts.map
+++ b/node_modules/@metamask/assets-controllers/dist/types/TokenBalancesController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenBalancesController.d.ts","sourceRoot":"","sources":["../../src/TokenBalancesController.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,KAAK,6BAA6B,EAClC,KAAK,wBAAwB,EAC7B,KAAK,0BAA0B,EAC/B,cAAc,EACf,MAAM,2BAA2B,CAAC;AAEnC,OAAO,KAAK,EAAE,mCAAmC,EAAE,MAAM,kCAAkC,CAAC;AAE5F,OAAO,KAAK,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAC3E,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AACpD,OAAO,KAAK,EAAE,gCAAgC,EAAE,MAAM,oBAAoB,CAAC;AAI3E,QAAA,MAAM,cAAc,4BAA4B,CAAC;AAMjD;;;;;;GAMG;AACH,KAAK,8BAA8B,GAAG;IACpC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC;IACjB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,iBAAiB,EAAE,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;IACjE,SAAS,EAAE,gCAAgC,CAAC;IAC5C,KAAK,CAAC,EAAE,OAAO,CAAC,4BAA4B,CAAC,CAAC;CAC/C,CAAC;AAEF;;GAEG;AACH,KAAK,gBAAgB,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAE/C;;;GAGG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,gBAAgB,EAAE,gBAAgB,CAAC;CACpC,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,8BAA8B,GACxC,qCAAqC,CAAC;AAExC,MAAM,MAAM,cAAc,GAAG,mCAAmC,CAAC;AAEjE,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,6BAA6B,GACvC,uCAAuC,CAAC;AAE1C,MAAM,MAAM,aAAa,GAAG,gCAAgC,CAAC;AAE7D,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;;;GAIG;AACH,wBAAgB,4BAA4B,IAAI,4BAA4B,CAI3E;AAED;;;GAGG;AACH,qBAAa,uBAAwB,SAAQ,cAAc,CACzD,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;;IAWC;;;;;;;;;;OAUG;gBACS,EACV,QAA2B,EAC3B,MAAW,EACX,QAAgB,EAChB,iBAAiB,EACjB,SAAS,EACT,KAAU,GACX,EAAE,8BAA8B;IA4BjC;;OAEG;IACH,MAAM;IAIN;;OAEG;IACH,OAAO;IAIP;;;;OAIG;IACG,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAgB5C;;OAEG;IACG,cAAc;CA0BrB;AAED,eAAe,uBAAuB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"TokenBalancesController.d.ts","sourceRoot":"","sources":["../../src/TokenBalancesController.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,KAAK,6BAA6B,EAClC,KAAK,wBAAwB,EAC7B,KAAK,0BAA0B,EAC/B,cAAc,EACf,MAAM,2BAA2B,CAAC;AAEnC,OAAO,KAAK,EAAE,mCAAmC,EAAE,MAAM,kCAAkC,CAAC;AAE5F,OAAO,KAAK,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAC3E,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AACpD,OAAO,KAAK,EACV,gCAAgC,EAChC,WAAW,EACZ,MAAM,oBAAoB,CAAC;AAI5B,QAAA,MAAM,cAAc,4BAA4B,CAAC;AAMjD;;;;;;GAMG;AACH,KAAK,8BAA8B,GAAG;IACpC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC;IACjB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,mBAAmB,EAAE,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,WAAW,KAAK,IAAI,KAAK,IAAI,CAAC;IAC5E,iBAAiB,EAAE,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;IACjE,SAAS,EAAE,gCAAgC,CAAC;IAC5C,KAAK,CAAC,EAAE,OAAO,CAAC,4BAA4B,CAAC,CAAC;CAC/C,CAAC;AAEF;;GAEG;AACH,KAAK,gBAAgB,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAE/C;;;GAGG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,gBAAgB,EAAE,gBAAgB,CAAC;CACpC,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,8BAA8B,GACxC,qCAAqC,CAAC;AAExC,MAAM,MAAM,cAAc,GAAG,mCAAmC,CAAC;AAEjE,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,6BAA6B,GACvC,uCAAuC,CAAC;AAE1C,MAAM,MAAM,aAAa,GAAG,gCAAgC,CAAC;AAE7D,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;;;GAIG;AACH,wBAAgB,4BAA4B,IAAI,4BAA4B,CAI3E;AAED;;;GAGG;AACH,qBAAa,uBAAwB,SAAQ,cAAc,CACzD,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;;IAaC;;;;;;;;;;;OAWG;gBACS,EACV,QAA2B,EAC3B,MAAW,EACX,QAAgB,EAChB,mBAAmB,EACnB,iBAAiB,EACjB,SAAS,EACT,KAAU,GACX,EAAE,8BAA8B;IAyBjC;;OAEG;IACH,MAAM;IAIN;;OAEG;IACH,OAAO;IAIP;;;;OAIG;IACG,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAgB5C;;OAEG;IACG,cAAc;IA+BpB;;;OAGG;IACH,KAAK;CAKN;AAED,eAAe,uBAAuB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/TokenDetectionController.d.ts b/node_modules/@metamask/assets-controllers/dist/types/TokenDetectionController.d.ts
index 220d78d..795b96e 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/TokenDetectionController.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/TokenDetectionController.d.ts
@@ -6,7 +6,7 @@ import { StaticIntervalPollingController } from '@metamask/polling-controller';
 import type { PreferencesControllerGetStateAction, PreferencesControllerStateChangeEvent } from '@metamask/preferences-controller';
 import type { AssetsContractController } from './AssetsContractController';
 import type { GetTokenListState, TokenListMap, TokenListStateChange } from './TokenListController';
-import type { TokensControllerAddDetectedTokensAction, TokensControllerGetStateAction } from './TokensController';
+import type { TokensControllerAddDetectedTokensAction, TokensControllerGetStateAction, TokensState } from './TokensController';
 /**
  * Compare 2 given strings and return boolean
  * eg: "foo" and "FOO" => true
@@ -54,11 +54,12 @@ export declare class TokenDetectionController extends StaticIntervalPollingContr
      * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.
      * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.
      */
-    constructor({ selectedAddress, interval, disabled, getBalancesInSingleCall, trackMetaMetricsEvent, messenger, }: {
+    constructor({ selectedAddress, interval, disabled, getBalancesInSingleCall, getTokensState, trackMetaMetricsEvent, messenger, }: {
         selectedAddress?: string;
         interval?: number;
         disabled?: boolean;
         getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];
+        getTokensState: () => TokensState;
         trackMetaMetricsEvent: (options: {
             event: string;
             category: string;
diff --git a/node_modules/@metamask/assets-controllers/dist/types/TokenDetectionController.d.ts.map b/node_modules/@metamask/assets-controllers/dist/types/TokenDetectionController.d.ts.map
index cf7653a..17a8e15 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/TokenDetectionController.d.ts.map
+++ b/node_modules/@metamask/assets-controllers/dist/types/TokenDetectionController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenDetectionController.d.ts","sourceRoot":"","sources":["../../src/TokenDetectionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"TokenDetectionController.d.ts","sourceRoot":"","sources":["../../src/TokenDetectionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/types/index.d.ts b/node_modules/@metamask/assets-controllers/dist/types/index.d.ts
index a71f4a7..66488ce 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/index.d.ts
+++ b/node_modules/@metamask/assets-controllers/dist/types/index.d.ts
@@ -3,7 +3,7 @@ export * from './AssetsContractController';
 export * from './CurrencyRateController';
 export * from './NftController';
 export * from './NftDetectionController';
-export type { TokenBalancesControllerMessenger, TokenBalancesControllerActions, TokenBalancesControllerGetStateAction, TokenBalancesControllerEvents, TokenBalancesControllerStateChangeEvent, } from './TokenBalancesController';
+export type { TokenBalancesControllerMessenger, TokenBalancesControllerActions, TokenBalancesControllerGetStateAction, TokenBalancesControllerEvents, TokenBalancesControllerStateChangeEvent, TokenBalancesControllerState, } from './TokenBalancesController';
 export { TokenBalancesController } from './TokenBalancesController';
 export type { TokenDetectionControllerMessenger, TokenDetectionControllerActions, TokenDetectionControllerGetStateAction, TokenDetectionControllerEvents, TokenDetectionControllerStateChangeEvent, } from './TokenDetectionController';
 export { TokenDetectionController } from './TokenDetectionController';
diff --git a/node_modules/@metamask/assets-controllers/dist/types/index.d.ts.map b/node_modules/@metamask/assets-controllers/dist/types/index.d.ts.map
index a24e61e..2b942d5 100644
--- a/node_modules/@metamask/assets-controllers/dist/types/index.d.ts.map
+++ b/node_modules/@metamask/assets-controllers/dist/types/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,4BAA4B,CAAC;AAC3C,cAAc,4BAA4B,CAAC;AAC3C,cAAc,0BAA0B,CAAC;AACzC,cAAc,iBAAiB,CAAC;AAChC,cAAc,0BAA0B,CAAC;AACzC,YAAY,EACV,gCAAgC,EAChC,8BAA8B,EAC9B,qCAAqC,EACrC,6BAA6B,EAC7B,uCAAuC,GACxC,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,YAAY,EACV,iCAAiC,EACjC,+BAA+B,EAC/B,sCAAsC,EACtC,8BAA8B,EAC9B,wCAAwC,GACzC,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AACtE,YAAY,EACV,cAAc,EACd,cAAc,EACd,YAAY,EACZ,oBAAoB,EACpB,yBAAyB,EACzB,iBAAiB,EACjB,0BAA0B,EAC1B,4BAA4B,GAC7B,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,YAAY,EACV,KAAK,EACL,gBAAgB,EAChB,qBAAqB,EACrB,eAAe,GAChB,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,YAAY,EACV,YAAY,EACZ,WAAW,EACX,uBAAuB,EACvB,8BAA8B,EAC9B,uCAAuC,EACvC,sBAAsB,EACtB,gCAAgC,EAChC,yBAAyB,GAC1B,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EACL,mCAAmC,EACnC,sBAAsB,EACtB,mBAAmB,EACnB,+BAA+B,GAChC,MAAM,cAAc,CAAC;AACtB,OAAO,EACL,0BAA0B,EAC1B,mBAAmB,GACpB,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACpE,YAAY,EACV,oBAAoB,EACpB,qBAAqB,EACrB,sBAAsB,EACtB,wBAAwB,EACxB,6BAA6B,EAC7B,+BAA+B,EAC/B,kCAAkC,EAClC,kCAAkC,GACnC,MAAM,mBAAmB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,4BAA4B,CAAC;AAC3C,cAAc,4BAA4B,CAAC;AAC3C,cAAc,0BAA0B,CAAC;AACzC,cAAc,iBAAiB,CAAC;AAChC,cAAc,0BAA0B,CAAC;AACzC,YAAY,EACV,gCAAgC,EAChC,8BAA8B,EAC9B,qCAAqC,EACrC,6BAA6B,EAC7B,uCAAuC,EACvC,4BAA4B,GAC7B,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,YAAY,EACV,iCAAiC,EACjC,+BAA+B,EAC/B,sCAAsC,EACtC,8BAA8B,EAC9B,wCAAwC,GACzC,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AACtE,YAAY,EACV,cAAc,EACd,cAAc,EACd,YAAY,EACZ,oBAAoB,EACpB,yBAAyB,EACzB,iBAAiB,EACjB,0BAA0B,EAC1B,4BAA4B,GAC7B,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,YAAY,EACV,KAAK,EACL,gBAAgB,EAChB,qBAAqB,EACrB,eAAe,GAChB,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,YAAY,EACV,YAAY,EACZ,WAAW,EACX,uBAAuB,EACvB,8BAA8B,EAC9B,uCAAuC,EACvC,sBAAsB,EACtB,gCAAgC,EAChC,yBAAyB,GAC1B,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EACL,mCAAmC,EACnC,sBAAsB,EACtB,mBAAmB,EACnB,+BAA+B,GAChC,MAAM,cAAc,CAAC;AACtB,OAAO,EACL,0BAA0B,EAC1B,mBAAmB,GACpB,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACpE,YAAY,EACV,oBAAoB,EACpB,qBAAqB,EACrB,sBAAsB,EACtB,wBAAwB,EACxB,6BAA6B,EAC7B,+BAA+B,EAC/B,kCAAkC,EAClC,kCAAkC,GACnC,MAAM,mBAAmB,CAAC"}
\ No newline at end of file
