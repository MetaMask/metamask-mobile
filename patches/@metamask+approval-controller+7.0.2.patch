diff --git a/node_modules/@metamask/approval-controller/dist/.patch.txt b/node_modules/@metamask/approval-controller/dist/.patch.txt
new file mode 100644
index 0000000..1c8ef8f
--- /dev/null
+++ b/node_modules/@metamask/approval-controller/dist/.patch.txt
@@ -0,0 +1,7 @@
+PATCH GENERATED FROM MetaMask/core branch: patch/mobile-approval-controller-7-0-1
+This patch backports various transaction controller features from the main branch of MetaMask/core
+Steps to update patch:
+* Create a new core branch from: patch/mobile-approval-controller-7-0-1
+* Run "yarn build" in the core monorepo
+* Run "yarn patch:approval <core-directory>" in the mobile repo
+* Once the new patch is merged, add your changes to: patch/mobile-approval-controller-7-0-1
diff --git a/node_modules/@metamask/approval-controller/dist/ApprovalController.js b/node_modules/@metamask/approval-controller/dist/ApprovalController.js
index 21178e9..db8fdcf 100644
--- a/node_modules/@metamask/approval-controller/dist/ApprovalController.js
+++ b/node_modules/@metamask/approval-controller/dist/ApprovalController.js
@@ -4,7 +4,7 @@
 
 
 
-var _chunkPMXPCCKSjs = require('./chunk-PMXPCCKS.js');
+var _chunkNONDXCHJjs = require('./chunk-NONDXCHJ.js');
 require('./chunk-LKCXZAKD.js');
 
 
@@ -12,5 +12,5 @@ require('./chunk-LKCXZAKD.js');
 
 
 
-exports.APPROVAL_TYPE_RESULT_ERROR = _chunkPMXPCCKSjs.APPROVAL_TYPE_RESULT_ERROR; exports.APPROVAL_TYPE_RESULT_SUCCESS = _chunkPMXPCCKSjs.APPROVAL_TYPE_RESULT_SUCCESS; exports.ApprovalController = _chunkPMXPCCKSjs.ApprovalController; exports.ORIGIN_METAMASK = _chunkPMXPCCKSjs.ORIGIN_METAMASK; exports.default = _chunkPMXPCCKSjs.ApprovalController_default;
+exports.APPROVAL_TYPE_RESULT_ERROR = _chunkNONDXCHJjs.APPROVAL_TYPE_RESULT_ERROR; exports.APPROVAL_TYPE_RESULT_SUCCESS = _chunkNONDXCHJjs.APPROVAL_TYPE_RESULT_SUCCESS; exports.ApprovalController = _chunkNONDXCHJjs.ApprovalController; exports.ORIGIN_METAMASK = _chunkNONDXCHJjs.ORIGIN_METAMASK; exports.default = _chunkNONDXCHJjs.ApprovalController_default;
 //# sourceMappingURL=ApprovalController.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/ApprovalController.js.map b/node_modules/@metamask/approval-controller/dist/ApprovalController.js.map
deleted file mode 100644
index a464c67..0000000
--- a/node_modules/@metamask/approval-controller/dist/ApprovalController.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/ApprovalController.mjs b/node_modules/@metamask/approval-controller/dist/ApprovalController.mjs
index a6f0950..664ec6b 100644
--- a/node_modules/@metamask/approval-controller/dist/ApprovalController.mjs
+++ b/node_modules/@metamask/approval-controller/dist/ApprovalController.mjs
@@ -4,7 +4,7 @@ import {
   ApprovalController,
   ApprovalController_default,
   ORIGIN_METAMASK
-} from "./chunk-PIJZDVKC.mjs";
+} from "./chunk-CZANKQ6E.mjs";
 import "./chunk-C4VZRQ2J.mjs";
 export {
   APPROVAL_TYPE_RESULT_ERROR,
diff --git a/node_modules/@metamask/approval-controller/dist/ApprovalController.mjs.map b/node_modules/@metamask/approval-controller/dist/ApprovalController.mjs.map
deleted file mode 100644
index 84c51b2..0000000
--- a/node_modules/@metamask/approval-controller/dist/ApprovalController.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/chunk-C4VZRQ2J.mjs.map b/node_modules/@metamask/approval-controller/dist/chunk-C4VZRQ2J.mjs.map
deleted file mode 100644
index 0df9138..0000000
--- a/node_modules/@metamask/approval-controller/dist/chunk-C4VZRQ2J.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/errors.ts"],"sourcesContent":["export class ApprovalRequestNotFoundError extends Error {\n  constructor(id: string) {\n    super(`Approval request with id '${id}' not found.`);\n  }\n}\n\nexport class ApprovalRequestNoResultSupportError extends Error {\n  constructor(id: string) {\n    super(\n      `Approval acceptance requested result but request with id '${id}' does not support it.`,\n    );\n  }\n}\n\nexport class NoApprovalFlowsError extends Error {\n  constructor() {\n    super(`No approval flows found.`);\n  }\n}\n\nexport class EndInvalidFlowError extends Error {\n  constructor(id: string, flowIds: string[]) {\n    super(\n      `Attempted to end flow with id '${id}' which does not match current flow with id '${\n        flowIds.slice(-1)[0]\n      }'. All Flows: ${flowIds.join(', ')}`,\n    );\n  }\n}\n\nexport class MissingApprovalFlowError extends Error {\n  constructor(id: string) {\n    super(`No approval flows found with id '${id}'.`);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,+BAAN,cAA2C,MAAM;AAAA,EACtD,YAAY,IAAY;AACtB,UAAM,6BAA6B,EAAE,cAAc;AAAA,EACrD;AACF;AAEO,IAAM,sCAAN,cAAkD,MAAM;AAAA,EAC7D,YAAY,IAAY;AACtB;AAAA,MACE,6DAA6D,EAAE;AAAA,IACjE;AAAA,EACF;AACF;AAEO,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAC9C,cAAc;AACZ,UAAM,0BAA0B;AAAA,EAClC;AACF;AAEO,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAC7C,YAAY,IAAY,SAAmB;AACzC;AAAA,MACE,kCAAkC,EAAE,gDAClC,QAAQ,MAAM,EAAE,EAAE,CAAC,CACrB,iBAAiB,QAAQ,KAAK,IAAI,CAAC;AAAA,IACrC;AAAA,EACF;AACF;AAEO,IAAM,2BAAN,cAAuC,MAAM;AAAA,EAClD,YAAY,IAAY;AACtB,UAAM,oCAAoC,EAAE,IAAI;AAAA,EAClD;AACF;","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/chunk-PIJZDVKC.mjs b/node_modules/@metamask/approval-controller/dist/chunk-CZANKQ6E.mjs
similarity index 94%
rename from node_modules/@metamask/approval-controller/dist/chunk-PIJZDVKC.mjs
rename to node_modules/@metamask/approval-controller/dist/chunk-CZANKQ6E.mjs
index 57f7b7b..573794d 100644
--- a/node_modules/@metamask/approval-controller/dist/chunk-PIJZDVKC.mjs
+++ b/node_modules/@metamask/approval-controller/dist/chunk-CZANKQ6E.mjs
@@ -33,7 +33,7 @@ var getDefaultState = () => {
     approvalFlows: []
   };
 };
-var _approvals, _origins, _showApprovalRequest, _typesExcludedFromRateLimiting, _add, add_fn, _validateAddParams, validateAddParams_fn, _addPendingApprovalOrigin, addPendingApprovalOrigin_fn, _addToStore, addToStore_fn, _delete, delete_fn, _deleteApprovalAndGetCallbacks, deleteApprovalAndGetCallbacks_fn, _result, result_fn;
+var _approvals, _origins, _showApprovalRequest, _typesExcludedFromRateLimiting, _add, add_fn, _validateAddParams, validateAddParams_fn, _addPendingApprovalOrigin, addPendingApprovalOrigin_fn, _addToStore, addToStore_fn, _delete, delete_fn, _getCallbacks, getCallbacks_fn, _result, result_fn;
 var ApprovalController = class extends BaseController {
   /**
    * Construct an Approval controller.
@@ -100,23 +100,15 @@ var ApprovalController = class extends BaseController {
      */
     __privateAdd(this, _addToStore);
     /**
-     * Deletes the approval with the given id. The approval promise must be
-     * resolved or reject before this method is called.
+     * Deletes the approval with the given id.
+     *
      * Deletion is an internal operation because approval state is solely
      * managed by this controller.
      *
      * @param id - The id of the approval request to be deleted.
      */
     __privateAdd(this, _delete);
-    /**
-     * Gets the approval callbacks for the given id, deletes the entry, and then
-     * returns the callbacks for promise resolution.
-     * Throws an error if no approval is found for the given id.
-     *
-     * @param id - The id of the approval request.
-     * @returns The promise callbacks associated with the approval request.
-     */
-    __privateAdd(this, _deleteApprovalAndGetCallbacks);
+    __privateAdd(this, _getCallbacks);
     __privateAdd(this, _result);
     __privateAdd(this, _approvals, void 0);
     __privateAdd(this, _origins, void 0);
@@ -306,7 +298,12 @@ var ApprovalController = class extends BaseController {
    */
   accept(id, value, options) {
     const approval = this.get(id);
-    const requestPromise = __privateMethod(this, _deleteApprovalAndGetCallbacks, deleteApprovalAndGetCallbacks_fn).call(this, id);
+    const requestPromise = __privateMethod(this, _getCallbacks, getCallbacks_fn).call(this, id);
+    let requestDeleted = false;
+    if (!options?.deleteAfterResult || !options.waitForResult) {
+      __privateMethod(this, _delete, delete_fn).call(this, id);
+      requestDeleted = true;
+    }
     return new Promise((resolve, reject) => {
       const resultCallbacks = {
         success: (acceptValue) => resolve({ value: acceptValue }),
@@ -322,6 +319,10 @@ var ApprovalController = class extends BaseController {
       if (!options?.waitForResult) {
         resolve({ value: void 0 });
       }
+    }).finally(() => {
+      if (!requestDeleted) {
+        __privateMethod(this, _delete, delete_fn).call(this, id);
+      }
     });
   }
   /**
@@ -332,7 +333,9 @@ var ApprovalController = class extends BaseController {
    * @param error - The error to reject the approval promise with.
    */
   reject(id, error) {
-    __privateMethod(this, _deleteApprovalAndGetCallbacks, deleteApprovalAndGetCallbacks_fn).call(this, id).reject(error);
+    const callbacks = __privateMethod(this, _getCallbacks, getCallbacks_fn).call(this, id);
+    __privateMethod(this, _delete, delete_fn).call(this, id);
+    callbacks.reject(error);
   }
   /**
    * Rejects and deletes all approval requests.
@@ -533,6 +536,9 @@ addToStore_fn = function(id, origin, type, requestData, requestState, expectsRes
 };
 _delete = new WeakSet();
 delete_fn = function(id) {
+  if (!__privateGet(this, _approvals).has(id)) {
+    throw new ApprovalRequestNotFoundError(id);
+  }
   __privateGet(this, _approvals).delete(id);
   const { origin, type } = this.state.pendingApprovals[id];
   const originMap = __privateGet(this, _origins).get(origin);
@@ -550,13 +556,12 @@ delete_fn = function(id) {
     ).length;
   });
 };
-_deleteApprovalAndGetCallbacks = new WeakSet();
-deleteApprovalAndGetCallbacks_fn = function(id) {
+_getCallbacks = new WeakSet();
+getCallbacks_fn = function(id) {
   const callbacks = __privateGet(this, _approvals).get(id);
   if (!callbacks) {
     throw new ApprovalRequestNotFoundError(id);
   }
-  __privateMethod(this, _delete, delete_fn).call(this, id);
   return callbacks;
 };
 _result = new WeakSet();
@@ -588,4 +593,4 @@ export {
   ApprovalController,
   ApprovalController_default
 };
-//# sourceMappingURL=chunk-PIJZDVKC.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-CZANKQ6E.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/chunk-LKCXZAKD.js.map b/node_modules/@metamask/approval-controller/dist/chunk-LKCXZAKD.js.map
deleted file mode 100644
index 4834941..0000000
--- a/node_modules/@metamask/approval-controller/dist/chunk-LKCXZAKD.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,+BAAN,cAA2C,MAAM;AAAA,EACtD,YAAY,IAAY;AACtB,UAAM,6BAA6B,EAAE,cAAc;AAAA,EACrD;AACF;AAEO,IAAM,sCAAN,cAAkD,MAAM;AAAA,EAC7D,YAAY,IAAY;AACtB;AAAA,MACE,6DAA6D,EAAE;AAAA,IACjE;AAAA,EACF;AACF;AAEO,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAC9C,cAAc;AACZ,UAAM,0BAA0B;AAAA,EAClC;AACF;AAEO,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAC7C,YAAY,IAAY,SAAmB;AACzC;AAAA,MACE,kCAAkC,EAAE,gDAClC,QAAQ,MAAM,EAAE,EAAE,CAAC,CACrB,iBAAiB,QAAQ,KAAK,IAAI,CAAC;AAAA,IACrC;AAAA,EACF;AACF;AAEO,IAAM,2BAAN,cAAuC,MAAM;AAAA,EAClD,YAAY,IAAY;AACtB,UAAM,oCAAoC,EAAE,IAAI;AAAA,EAClD;AACF","sourcesContent":["export class ApprovalRequestNotFoundError extends Error {\n  constructor(id: string) {\n    super(`Approval request with id '${id}' not found.`);\n  }\n}\n\nexport class ApprovalRequestNoResultSupportError extends Error {\n  constructor(id: string) {\n    super(\n      `Approval acceptance requested result but request with id '${id}' does not support it.`,\n    );\n  }\n}\n\nexport class NoApprovalFlowsError extends Error {\n  constructor() {\n    super(`No approval flows found.`);\n  }\n}\n\nexport class EndInvalidFlowError extends Error {\n  constructor(id: string, flowIds: string[]) {\n    super(\n      `Attempted to end flow with id '${id}' which does not match current flow with id '${\n        flowIds.slice(-1)[0]\n      }'. All Flows: ${flowIds.join(', ')}`,\n    );\n  }\n}\n\nexport class MissingApprovalFlowError extends Error {\n  constructor(id: string) {\n    super(`No approval flows found with id '${id}'.`);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/chunk-PMXPCCKS.js b/node_modules/@metamask/approval-controller/dist/chunk-NONDXCHJ.js
similarity index 94%
rename from node_modules/@metamask/approval-controller/dist/chunk-PMXPCCKS.js
rename to node_modules/@metamask/approval-controller/dist/chunk-NONDXCHJ.js
index d840c27..42b4765 100644
--- a/node_modules/@metamask/approval-controller/dist/chunk-PMXPCCKS.js
+++ b/node_modules/@metamask/approval-controller/dist/chunk-NONDXCHJ.js
@@ -33,7 +33,7 @@ var getDefaultState = () => {
     approvalFlows: []
   };
 };
-var _approvals, _origins, _showApprovalRequest, _typesExcludedFromRateLimiting, _add, add_fn, _validateAddParams, validateAddParams_fn, _addPendingApprovalOrigin, addPendingApprovalOrigin_fn, _addToStore, addToStore_fn, _delete, delete_fn, _deleteApprovalAndGetCallbacks, deleteApprovalAndGetCallbacks_fn, _result, result_fn;
+var _approvals, _origins, _showApprovalRequest, _typesExcludedFromRateLimiting, _add, add_fn, _validateAddParams, validateAddParams_fn, _addPendingApprovalOrigin, addPendingApprovalOrigin_fn, _addToStore, addToStore_fn, _delete, delete_fn, _getCallbacks, getCallbacks_fn, _result, result_fn;
 var ApprovalController = class extends _basecontroller.BaseController {
   /**
    * Construct an Approval controller.
@@ -100,23 +100,15 @@ var ApprovalController = class extends _basecontroller.BaseController {
      */
     _chunkLKCXZAKDjs.__privateAdd.call(void 0, this, _addToStore);
     /**
-     * Deletes the approval with the given id. The approval promise must be
-     * resolved or reject before this method is called.
+     * Deletes the approval with the given id.
+     *
      * Deletion is an internal operation because approval state is solely
      * managed by this controller.
      *
      * @param id - The id of the approval request to be deleted.
      */
     _chunkLKCXZAKDjs.__privateAdd.call(void 0, this, _delete);
-    /**
-     * Gets the approval callbacks for the given id, deletes the entry, and then
-     * returns the callbacks for promise resolution.
-     * Throws an error if no approval is found for the given id.
-     *
-     * @param id - The id of the approval request.
-     * @returns The promise callbacks associated with the approval request.
-     */
-    _chunkLKCXZAKDjs.__privateAdd.call(void 0, this, _deleteApprovalAndGetCallbacks);
+    _chunkLKCXZAKDjs.__privateAdd.call(void 0, this, _getCallbacks);
     _chunkLKCXZAKDjs.__privateAdd.call(void 0, this, _result);
     _chunkLKCXZAKDjs.__privateAdd.call(void 0, this, _approvals, void 0);
     _chunkLKCXZAKDjs.__privateAdd.call(void 0, this, _origins, void 0);
@@ -306,7 +298,12 @@ var ApprovalController = class extends _basecontroller.BaseController {
    */
   accept(id, value, options) {
     const approval = this.get(id);
-    const requestPromise = _chunkLKCXZAKDjs.__privateMethod.call(void 0, this, _deleteApprovalAndGetCallbacks, deleteApprovalAndGetCallbacks_fn).call(this, id);
+    const requestPromise = _chunkLKCXZAKDjs.__privateMethod.call(void 0, this, _getCallbacks, getCallbacks_fn).call(this, id);
+    let requestDeleted = false;
+    if (!options?.deleteAfterResult || !options.waitForResult) {
+      _chunkLKCXZAKDjs.__privateMethod.call(void 0, this, _delete, delete_fn).call(this, id);
+      requestDeleted = true;
+    }
     return new Promise((resolve, reject) => {
       const resultCallbacks = {
         success: (acceptValue) => resolve({ value: acceptValue }),
@@ -322,6 +319,10 @@ var ApprovalController = class extends _basecontroller.BaseController {
       if (!options?.waitForResult) {
         resolve({ value: void 0 });
       }
+    }).finally(() => {
+      if (!requestDeleted) {
+        _chunkLKCXZAKDjs.__privateMethod.call(void 0, this, _delete, delete_fn).call(this, id);
+      }
     });
   }
   /**
@@ -332,7 +333,9 @@ var ApprovalController = class extends _basecontroller.BaseController {
    * @param error - The error to reject the approval promise with.
    */
   reject(id, error) {
-    _chunkLKCXZAKDjs.__privateMethod.call(void 0, this, _deleteApprovalAndGetCallbacks, deleteApprovalAndGetCallbacks_fn).call(this, id).reject(error);
+    const callbacks = _chunkLKCXZAKDjs.__privateMethod.call(void 0, this, _getCallbacks, getCallbacks_fn).call(this, id);
+    _chunkLKCXZAKDjs.__privateMethod.call(void 0, this, _delete, delete_fn).call(this, id);
+    callbacks.reject(error);
   }
   /**
    * Rejects and deletes all approval requests.
@@ -533,6 +536,9 @@ addToStore_fn = function(id, origin, type, requestData, requestState, expectsRes
 };
 _delete = new WeakSet();
 delete_fn = function(id) {
+  if (!_chunkLKCXZAKDjs.__privateGet.call(void 0, this, _approvals).has(id)) {
+    throw new (0, _chunkLKCXZAKDjs.ApprovalRequestNotFoundError)(id);
+  }
   _chunkLKCXZAKDjs.__privateGet.call(void 0, this, _approvals).delete(id);
   const { origin, type } = this.state.pendingApprovals[id];
   const originMap = _chunkLKCXZAKDjs.__privateGet.call(void 0, this, _origins).get(origin);
@@ -550,13 +556,12 @@ delete_fn = function(id) {
     ).length;
   });
 };
-_deleteApprovalAndGetCallbacks = new WeakSet();
-deleteApprovalAndGetCallbacks_fn = function(id) {
+_getCallbacks = new WeakSet();
+getCallbacks_fn = function(id) {
   const callbacks = _chunkLKCXZAKDjs.__privateGet.call(void 0, this, _approvals).get(id);
   if (!callbacks) {
     throw new (0, _chunkLKCXZAKDjs.ApprovalRequestNotFoundError)(id);
   }
-  _chunkLKCXZAKDjs.__privateMethod.call(void 0, this, _delete, delete_fn).call(this, id);
   return callbacks;
 };
 _result = new WeakSet();
@@ -588,4 +593,4 @@ var ApprovalController_default = ApprovalController;
 
 
 exports.ORIGIN_METAMASK = ORIGIN_METAMASK; exports.APPROVAL_TYPE_RESULT_ERROR = APPROVAL_TYPE_RESULT_ERROR; exports.APPROVAL_TYPE_RESULT_SUCCESS = APPROVAL_TYPE_RESULT_SUCCESS; exports.ApprovalController = ApprovalController; exports.ApprovalController_default = ApprovalController_default;
-//# sourceMappingURL=chunk-PMXPCCKS.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-NONDXCHJ.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/chunk-PIJZDVKC.mjs.map b/node_modules/@metamask/approval-controller/dist/chunk-PIJZDVKC.mjs.map
deleted file mode 100644
index 11b7edd..0000000
--- a/node_modules/@metamask/approval-controller/dist/chunk-PIJZDVKC.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/ApprovalController.ts"],"sourcesContent":["import type { ControllerGetStateAction } from '@metamask/base-controller';\nimport {\n  BaseController,\n  type ControllerStateChangeEvent,\n  type RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport type { JsonRpcError, DataWithOptionalCause } from '@metamask/rpc-errors';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type { Json, OptionalField } from '@metamask/utils';\nimport { nanoid } from 'nanoid';\n\nimport {\n  ApprovalRequestNotFoundError,\n  ApprovalRequestNoResultSupportError,\n  EndInvalidFlowError,\n  NoApprovalFlowsError,\n  MissingApprovalFlowError,\n} from './errors';\n\n// Constants\n\n// Avoiding dependency on controller-utils\nexport const ORIGIN_METAMASK = 'metamask';\nexport const APPROVAL_TYPE_RESULT_ERROR = 'result_error';\nexport const APPROVAL_TYPE_RESULT_SUCCESS = 'result_success';\n\nconst controllerName = 'ApprovalController';\n\nconst stateMetadata = {\n  pendingApprovals: { persist: false, anonymous: true },\n  pendingApprovalCount: { persist: false, anonymous: false },\n  approvalFlows: { persist: false, anonymous: false },\n};\n\nconst getAlreadyPendingMessage = (origin: string, type: string) =>\n  `Request of type '${type}' already pending for origin ${origin}. Please wait.`;\n\nconst getDefaultState = (): ApprovalControllerState => {\n  return {\n    pendingApprovals: {},\n    pendingApprovalCount: 0,\n    approvalFlows: [],\n  };\n};\n\n// Internal Types\n\ntype ApprovalPromiseResolve = (value?: unknown | AddResult) => void;\n\ntype ApprovalPromiseReject = (error?: unknown) => void;\n\ntype ApprovalRequestData = Record<string, Json> | null;\n\ntype ApprovalRequestState = Record<string, Json> | null;\n\ntype ApprovalCallbacks = {\n  resolve: ApprovalPromiseResolve;\n  reject: ApprovalPromiseReject;\n};\n\ntype ApprovalFlow = {\n  id: string;\n  loadingText: string | null;\n};\n\ntype ResultOptions = {\n  flowToEnd?: string;\n  header?: (string | ResultComponent)[];\n  icon?: string | null;\n  title?: string | null;\n};\n\n// Miscellaneous Types\n\nexport type ApprovalRequest<RequestData extends ApprovalRequestData> = {\n  /**\n   * The ID of the approval request.\n   */\n  id: string;\n\n  /**\n   * The origin of the approval request.\n   */\n  origin: string;\n\n  /**\n   * The time that the request was received, per Date.now().\n   */\n  time: number;\n\n  /**\n   * The type of the approval request.\n   * Unfortunately, not all values will match the `ApprovalType` enum, so we are using `string` here.\n   * TODO: Replace `string` with `ApprovalType` when all `type` values used by the clients can be encompassed by the `ApprovalType` enum.\n   */\n  type: string;\n\n  /**\n   * Additional data associated with the request.\n   */\n  requestData: RequestData;\n\n  /**\n   * Additional mutable state associated with the request\n   */\n  requestState: ApprovalRequestState;\n\n  /**\n   * Whether the request expects a result object to be returned instead of just the approval value.\n   */\n  expectsResult: boolean;\n};\n\nexport type ApprovalFlowState = ApprovalFlow;\n\nexport type ApprovalControllerState = {\n  pendingApprovals: Record<string, ApprovalRequest<Record<string, Json>>>;\n  pendingApprovalCount: number;\n  approvalFlows: ApprovalFlowState[];\n};\n\nexport type ApprovalControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  ApprovalControllerActions,\n  ApprovalControllerEvents,\n  never,\n  never\n>;\n\n// Option Types\n\nexport type ShowApprovalRequest = () => void | Promise<void>;\n\nexport type ResultComponent = {\n  /**\n   * A unique identifier for this instance of the component.\n   */\n  key: string;\n\n  /**\n   * The name of the component to render.\n   */\n  name: string;\n\n  /**\n   * Any properties required by the component.\n   */\n  properties?: Record<string, unknown>;\n\n  /**\n   * Any child components to render inside the component.\n   */\n  children?: string | ResultComponent | (string | ResultComponent)[];\n};\n\nexport type ApprovalControllerOptions = {\n  messenger: ApprovalControllerMessenger;\n  showApprovalRequest: ShowApprovalRequest;\n  state?: Partial<ApprovalControllerState>;\n  typesExcludedFromRateLimiting?: string[];\n};\n\nexport type AddApprovalOptions = {\n  id?: string;\n  origin: string;\n  type: string;\n  requestData?: Record<string, Json>;\n  requestState?: Record<string, Json>;\n  expectsResult?: boolean;\n};\n\nexport type UpdateRequestStateOptions = {\n  id: string;\n  requestState: Record<string, Json>;\n};\n\nexport type AcceptOptions = {\n  /**\n   * Whether to resolve the returned promise only when the request creator indicates the success of the\n   * post-approval logic using the result callbacks.\n   * If false or unspecified, the promise will resolve immediately.\n   */\n  waitForResult?: boolean;\n};\n\nexport type StartFlowOptions = OptionalField<\n  ApprovalFlow,\n  'id' | 'loadingText'\n> & { show?: boolean };\n\nexport type EndFlowOptions = Pick<ApprovalFlow, 'id'>;\n\nexport type SetFlowLoadingTextOptions = ApprovalFlow;\n\nexport type SuccessOptions = ResultOptions & {\n  message?: string | ResultComponent | (string | ResultComponent)[];\n};\n\nexport type ErrorOptions = ResultOptions & {\n  error?: string | ResultComponent | (string | ResultComponent)[];\n};\n\n// Result Types\n\nexport type AcceptResultCallbacks = {\n  /**\n   * Inform the request acceptor that the post-approval logic was successful.\n   *\n   * @param value - An optional value generated by the post-approval logic.\n   */\n  success: (value?: unknown) => void;\n\n  /**\n   * Inform the request acceptor that the post-approval logic failed.\n   *\n   * @param error - The reason for the failure.\n   */\n  error: (error: Error) => void;\n};\n\nexport type AddResult = {\n  /**\n   * An optional value provided by the request acceptor.\n   */\n  value?: unknown;\n\n  /**\n   * Callback functions that must be used to indicate to the request acceptor whether the post-approval logic was successful or not.\n   * Will be undefined if the request acceptor did not specify that they want to wait for a result.\n   */\n  resultCallbacks?: AcceptResultCallbacks;\n};\n\nexport type AcceptResult = {\n  /**\n   * An optional value provided by the request creator when indicating a successful result.\n   */\n  value?: unknown;\n};\n\nexport type ApprovalFlowStartResult = ApprovalFlow;\n\nexport type SuccessResult = Record<string, never>;\n\nexport type ErrorResult = Record<string, never>;\n\n// Event Types\n\nexport type ApprovalStateChange = ControllerStateChangeEvent<\n  typeof controllerName,\n  ApprovalControllerState\n>;\n\nexport type ApprovalControllerEvents = ApprovalStateChange;\n\n// Action Types\n\nexport type GetApprovalsState = ControllerGetStateAction<\n  typeof controllerName,\n  ApprovalControllerState\n>;\n\nexport type ClearApprovalRequests = {\n  type: `${typeof controllerName}:clearRequests`;\n  handler: (error: JsonRpcError<DataWithOptionalCause>) => void;\n};\n\nexport type AddApprovalRequest = {\n  type: `${typeof controllerName}:addRequest`;\n  handler: (\n    opts: AddApprovalOptions,\n    shouldShowRequest: boolean,\n  ) => ReturnType<ApprovalController['add']>;\n};\n\nexport type HasApprovalRequest = {\n  type: `${typeof controllerName}:hasRequest`;\n  handler: ApprovalController['has'];\n};\n\nexport type AcceptRequest = {\n  type: `${typeof controllerName}:acceptRequest`;\n  handler: ApprovalController['accept'];\n};\n\nexport type RejectRequest = {\n  type: `${typeof controllerName}:rejectRequest`;\n  handler: ApprovalController['reject'];\n};\n\nexport type UpdateRequestState = {\n  type: `${typeof controllerName}:updateRequestState`;\n  handler: ApprovalController['updateRequestState'];\n};\n\nexport type StartFlow = {\n  type: `${typeof controllerName}:startFlow`;\n  handler: ApprovalController['startFlow'];\n};\n\nexport type EndFlow = {\n  type: `${typeof controllerName}:endFlow`;\n  handler: ApprovalController['endFlow'];\n};\n\nexport type SetFlowLoadingText = {\n  type: `${typeof controllerName}:setFlowLoadingText`;\n  handler: ApprovalController['setFlowLoadingText'];\n};\n\nexport type ShowSuccess = {\n  type: `${typeof controllerName}:showSuccess`;\n  handler: ApprovalController['success'];\n};\n\nexport type ShowError = {\n  type: `${typeof controllerName}:showError`;\n  handler: ApprovalController['error'];\n};\n\nexport type ApprovalControllerActions =\n  | GetApprovalsState\n  | ClearApprovalRequests\n  | AddApprovalRequest\n  | HasApprovalRequest\n  | AcceptRequest\n  | RejectRequest\n  | UpdateRequestState\n  | StartFlow\n  | EndFlow\n  | SetFlowLoadingText\n  | ShowSuccess\n  | ShowError;\n\n/**\n * Controller for managing requests that require user approval.\n *\n * Enables limiting the number of pending requests by origin and type, counting\n * pending requests, and more.\n *\n * Adding a request returns a promise that resolves or rejects when the request\n * is approved or denied, respectively.\n */\nexport class ApprovalController extends BaseController<\n  typeof controllerName,\n  ApprovalControllerState,\n  ApprovalControllerMessenger\n> {\n  #approvals: Map<string, ApprovalCallbacks>;\n\n  #origins: Map<string, Map<string, number>>;\n\n  #showApprovalRequest: () => void;\n\n  #typesExcludedFromRateLimiting: string[];\n\n  /**\n   * Construct an Approval controller.\n   *\n   * @param options - The controller options.\n   * @param options.showApprovalRequest - Function for opening the UI such that\n   * the request can be displayed to the user.\n   * @param options.messenger - The restricted controller messenger for the Approval controller.\n   * @param options.state - The initial controller state.\n   * @param options.typesExcludedFromRateLimiting - Array of approval types which allow multiple pending approval requests from the same origin.\n   */\n  constructor({\n    messenger,\n    showApprovalRequest,\n    state = {},\n    typesExcludedFromRateLimiting = [],\n  }: ApprovalControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this.#approvals = new Map();\n    this.#origins = new Map();\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.#showApprovalRequest = showApprovalRequest;\n    this.#typesExcludedFromRateLimiting = typesExcludedFromRateLimiting;\n    this.registerMessageHandlers();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system\n   * actions.\n   */\n  private registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:clearRequests` as const,\n      this.clear.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:addRequest` as const,\n      (opts: AddApprovalOptions, shouldShowRequest: boolean) => {\n        if (shouldShowRequest) {\n          return this.addAndShowApprovalRequest(opts);\n        }\n        return this.add(opts);\n      },\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasRequest` as const,\n      this.has.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:acceptRequest` as const,\n      this.accept.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:rejectRequest` as const,\n      this.reject.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateRequestState` as const,\n      this.updateRequestState.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:startFlow` as const,\n      this.startFlow.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:endFlow` as const,\n      this.endFlow.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:setFlowLoadingText` as const,\n      this.setFlowLoadingText.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:showSuccess` as const,\n      this.success.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:showError` as const,\n      this.error.bind(this),\n    );\n  }\n\n  /**\n   * Adds an approval request per the given arguments, calls the show approval\n   * request function, and returns the associated approval promise resolving to\n   * an AddResult object.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * @param opts.requestState - Additional state associated with the request,\n   * if any.\n   * @returns The approval promise resolving to an AddResult object.\n   */\n  addAndShowApprovalRequest(\n    opts: AddApprovalOptions & { expectsResult: true },\n  ): Promise<AddResult>;\n\n  /**\n   * Adds an approval request per the given arguments, calls the show approval\n   * request function, and returns the associated approval promise resolving\n   * to a value provided during acceptance.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * @param opts.requestState - Additional state associated with the request,\n   * if any.\n   * @returns The approval promise resolving to a value provided during acceptance.\n   */\n  addAndShowApprovalRequest(opts: AddApprovalOptions): Promise<unknown>;\n\n  addAndShowApprovalRequest(opts: AddApprovalOptions): Promise<unknown> {\n    const promise = this.#add(\n      opts.origin,\n      opts.type,\n      opts.id,\n      opts.requestData,\n      opts.requestState,\n      opts.expectsResult,\n    );\n    this.#showApprovalRequest();\n    return promise;\n  }\n\n  /**\n   * Adds an approval request per the given arguments and returns the approval\n   * promise resolving to an AddResult object.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * if any.\n   * @returns The approval promise resolving to an AddResult object.\n   */\n  add(opts: AddApprovalOptions & { expectsResult: true }): Promise<AddResult>;\n\n  /**\n   * Adds an approval request per the given arguments and returns the approval\n   * promise resolving to a value provided during acceptance.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * if any.\n   * @returns The approval promise resolving to a value provided during acceptance.\n   */\n  add(opts: AddApprovalOptions): Promise<unknown>;\n\n  add(opts: AddApprovalOptions): Promise<unknown | AddResult> {\n    return this.#add(\n      opts.origin,\n      opts.type,\n      opts.id,\n      opts.requestData,\n      opts.requestState,\n      opts.expectsResult,\n    );\n  }\n\n  /**\n   * Gets the info for the approval request with the given id.\n   *\n   * @param id - The id of the approval request.\n   * @returns The approval request data associated with the id.\n   */\n  get(id: string): ApprovalRequest<ApprovalRequestData> | undefined {\n    return this.state.pendingApprovals[id];\n  }\n\n  /**\n   * Gets the number of pending approvals, by origin and/or type.\n   *\n   * If only `origin` is specified, all approvals for that origin will be\n   * counted, regardless of type.\n   * If only `type` is specified, all approvals for that type will be counted,\n   * regardless of origin.\n   * If both `origin` and `type` are specified, 0 or 1 will be returned.\n   *\n   * @param opts - The approval count options.\n   * @param opts.origin - An approval origin.\n   * @param opts.type - The type of the approval request.\n   * @returns The current approval request count for the given origin and/or\n   * type.\n   */\n  getApprovalCount(opts: { origin?: string; type?: string } = {}): number {\n    if (!opts.origin && !opts.type) {\n      throw new Error('Must specify origin, type, or both.');\n    }\n    const { origin, type: _type } = opts;\n\n    if (origin && _type) {\n      return this.#origins.get(origin)?.get(_type) || 0;\n    }\n\n    if (origin) {\n      return Array.from(\n        (this.#origins.get(origin) || new Map()).values(),\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n      ).reduce((total, value) => total + value, 0);\n    }\n\n    // Only \"type\" was specified\n    let count = 0;\n    for (const approval of Object.values(this.state.pendingApprovals)) {\n      if (approval.type === _type) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the total count of all pending approval requests for all origins.\n   *\n   * @returns The total pending approval request count.\n   */\n  getTotalApprovalCount(): number {\n    return this.state.pendingApprovalCount;\n  }\n\n  /**\n   * Checks if there's a pending approval request per the given parameters.\n   * At least one parameter must be specified. An error will be thrown if the\n   * parameters are invalid.\n   *\n   * If `id` is specified, all other parameters will be ignored.\n   * If `id` is not specified, the method will check for requests that match\n   * all of the specified parameters.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The ID to check for.\n   * @param opts.origin - The origin to check for.\n   * @param opts.type - The type to check for.\n   * @returns `true` if a matching approval is found, and `false` otherwise.\n   */\n  has(opts: { id?: string; origin?: string; type?: string } = {}): boolean {\n    const { id, origin, type: _type } = opts;\n\n    if (id) {\n      if (typeof id !== 'string') {\n        throw new Error('May not specify non-string id.');\n      }\n      return this.#approvals.has(id);\n    }\n\n    if (_type && typeof _type !== 'string') {\n      throw new Error('May not specify non-string type.');\n    }\n\n    if (origin) {\n      if (typeof origin !== 'string') {\n        throw new Error('May not specify non-string origin.');\n      }\n\n      // Check origin and type pair if type also specified\n      if (_type) {\n        return Boolean(this.#origins.get(origin)?.get(_type));\n      }\n      return this.#origins.has(origin);\n    }\n\n    if (_type) {\n      for (const approval of Object.values(this.state.pendingApprovals)) {\n        if (approval.type === _type) {\n          return true;\n        }\n      }\n      return false;\n    }\n    throw new Error(\n      'Must specify a valid combination of id, origin, and type.',\n    );\n  }\n\n  /**\n   * Resolves the promise of the approval with the given id, and deletes the\n   * approval. Throws an error if no such approval exists.\n   *\n   * @param id - The id of the approval request.\n   * @param value - The value to resolve the approval promise with.\n   * @param options - Options bag.\n   * @returns A promise that either resolves once a result is provided by\n   * the creator of the approval request, or immediately if `options.waitForResult`\n   * is `false` or `undefined`.\n   */\n  accept(\n    id: string,\n    value?: unknown,\n    options?: AcceptOptions,\n  ): Promise<AcceptResult> {\n    // Safe to cast as the delete method below will throw if the ID is not found\n    const approval = this.get(id) as ApprovalRequest<ApprovalRequestData>;\n    const requestPromise = this.#deleteApprovalAndGetCallbacks(id);\n\n    return new Promise((resolve, reject) => {\n      const resultCallbacks: AcceptResultCallbacks = {\n        success: (acceptValue?: unknown) => resolve({ value: acceptValue }),\n        error: reject,\n      };\n\n      if (options?.waitForResult && !approval.expectsResult) {\n        reject(new ApprovalRequestNoResultSupportError(id));\n        return;\n      }\n\n      const resultValue = options?.waitForResult ? resultCallbacks : undefined;\n\n      const resolveValue = approval.expectsResult\n        ? { value, resultCallbacks: resultValue }\n        : value;\n\n      requestPromise.resolve(resolveValue);\n\n      if (!options?.waitForResult) {\n        resolve({ value: undefined });\n      }\n    });\n  }\n\n  /**\n   * Rejects the promise of the approval with the given id, and deletes the\n   * approval. Throws an error if no such approval exists.\n   *\n   * @param id - The id of the approval request.\n   * @param error - The error to reject the approval promise with.\n   */\n  reject(id: string, error: unknown): void {\n    this.#deleteApprovalAndGetCallbacks(id).reject(error);\n  }\n\n  /**\n   * Rejects and deletes all approval requests.\n   *\n   * @param rejectionError - The JsonRpcError to reject the approval\n   * requests with.\n   */\n  clear(rejectionError: JsonRpcError<DataWithOptionalCause>): void {\n    for (const id of this.#approvals.keys()) {\n      this.reject(id, rejectionError);\n    }\n    this.#origins.clear();\n    this.update((draftState) => {\n      draftState.pendingApprovals = {};\n      draftState.pendingApprovalCount = 0;\n    });\n  }\n\n  /**\n   * Updates the request state of the approval with the given id.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request.\n   * @param opts.requestState - Additional data associated with the request\n   */\n  updateRequestState(opts: UpdateRequestStateOptions): void {\n    if (!this.state.pendingApprovals[opts.id]) {\n      throw new ApprovalRequestNotFoundError(opts.id);\n    }\n\n    this.update((draftState) => {\n      draftState.pendingApprovals[opts.id].requestState =\n        opts.requestState as never;\n    });\n  }\n\n  /**\n   * Starts a new approval flow.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval flow.\n   * @param opts.loadingText - The loading text that will be associated to the approval flow.\n   * @param opts.show - A flag to determine whether the approval should show to the user.\n   * @returns The object containing the approval flow id.\n   */\n  startFlow(opts: StartFlowOptions = {}): ApprovalFlowStartResult {\n    const id = opts.id ?? nanoid();\n    const loadingText = opts.loadingText ?? null;\n\n    this.update((draftState) => {\n      draftState.approvalFlows.push({ id, loadingText });\n    });\n\n    // By default, if nothing else is specified, we always show the approval.\n    if (opts.show !== false) {\n      this.#showApprovalRequest();\n    }\n\n    return { id, loadingText };\n  }\n\n  /**\n   * Ends the current approval flow.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval flow that will be finished.\n   */\n  endFlow({ id }: EndFlowOptions) {\n    if (!this.state.approvalFlows.length) {\n      throw new NoApprovalFlowsError();\n    }\n\n    const currentFlow = this.state.approvalFlows.slice(-1)[0];\n\n    if (id !== currentFlow.id) {\n      throw new EndInvalidFlowError(\n        id,\n        this.state.approvalFlows.map((flow) => flow.id),\n      );\n    }\n\n    this.update((draftState) => {\n      draftState.approvalFlows.pop();\n    });\n  }\n\n  /**\n   * Sets the loading text for the approval flow.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The approval flow loading text that will be displayed.\n   * @param opts.loadingText - The loading text that will be associated to the approval flow.\n   */\n  setFlowLoadingText({ id, loadingText }: SetFlowLoadingTextOptions) {\n    const flowIndex = this.state.approvalFlows.findIndex(\n      (flow) => flow.id === id,\n    );\n\n    if (flowIndex === -1) {\n      throw new MissingApprovalFlowError(id);\n    }\n\n    this.update((draftState) => {\n      draftState.approvalFlows[flowIndex].loadingText = loadingText;\n    });\n  }\n\n  /**\n   * Show a success page.\n   *\n   * @param opts - Options bag.\n   * @param opts.message - The message text or components to display in the page.\n   * @param opts.header - The text or components to display in the header of the page.\n   * @param opts.flowToEnd - The ID of the approval flow to end once the success page is approved.\n   * @param opts.title - The title to display above the message. Shown by default but can be hidden with `null`.\n   * @param opts.icon - The icon to display in the page. Shown by default but can be hidden with `null`.\n   * @returns Empty object to support future additions.\n   */\n  async success(opts: SuccessOptions = {}): Promise<SuccessResult> {\n    await this.#result(APPROVAL_TYPE_RESULT_SUCCESS, opts, {\n      message: opts.message,\n      header: opts.header,\n      title: opts.title,\n      icon: opts.icon,\n    } as Record<string, Json>);\n\n    return {};\n  }\n\n  /**\n   * Show an error page.\n   *\n   * @param opts - Options bag.\n   * @param opts.message - The message text or components to display in the page.\n   * @param opts.header - The text or components to display in the header of the page.\n   * @param opts.flowToEnd - The ID of the approval flow to end once the error page is approved.\n   * @param opts.title - The title to display above the message. Shown by default but can be hidden with `null`.\n   * @param opts.icon - The icon to display in the page. Shown by default but can be hidden with `null`.\n   * @returns Empty object to support future additions.\n   */\n  async error(opts: ErrorOptions = {}): Promise<ErrorResult> {\n    await this.#result(APPROVAL_TYPE_RESULT_ERROR, opts, {\n      error: opts.error,\n      header: opts.header,\n      title: opts.title,\n      icon: opts.icon,\n    } as Record<string, Json>);\n\n    return {};\n  }\n\n  /**\n   * Implementation of add operation.\n   *\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param id - The id of the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   * @param expectsResult - Whether the approval request expects a result object to be returned.\n   * @returns The approval promise.\n   */\n  #add(\n    origin: string,\n    type: string,\n    id: string = nanoid(),\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n    expectsResult?: boolean,\n  ): Promise<unknown | AddResult> {\n    this.#validateAddParams(id, origin, type, requestData, requestState);\n\n    if (\n      !this.#typesExcludedFromRateLimiting.includes(type) &&\n      this.has({ origin, type })\n    ) {\n      throw rpcErrors.resourceUnavailable(\n        getAlreadyPendingMessage(origin, type),\n      );\n    }\n\n    // add pending approval\n    return new Promise((resolve, reject) => {\n      this.#approvals.set(id, { resolve, reject });\n      this.#addPendingApprovalOrigin(origin, type);\n\n      this.#addToStore(\n        id,\n        origin,\n        type,\n        requestData,\n        requestState,\n        expectsResult,\n      );\n    });\n  }\n\n  /**\n   * Validates parameters to the add method.\n   *\n   * @param id - The id of the approval request.\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   */\n  #validateAddParams(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n  ): void {\n    let errorMessage = null;\n    if (!id || typeof id !== 'string') {\n      errorMessage = 'Must specify non-empty string id.';\n    } else if (this.#approvals.has(id)) {\n      errorMessage = `Approval request with id '${id}' already exists.`;\n    } else if (!origin || typeof origin !== 'string') {\n      errorMessage = 'Must specify non-empty string origin.';\n    } else if (!type || typeof type !== 'string') {\n      errorMessage = 'Must specify non-empty string type.';\n    } else if (\n      requestData &&\n      (typeof requestData !== 'object' || Array.isArray(requestData))\n    ) {\n      errorMessage = 'Request data must be a plain object if specified.';\n    } else if (\n      requestState &&\n      (typeof requestState !== 'object' || Array.isArray(requestState))\n    ) {\n      errorMessage = 'Request state must be a plain object if specified.';\n    }\n\n    if (errorMessage) {\n      throw rpcErrors.internal(errorMessage);\n    }\n  }\n\n  /**\n   * Adds an entry to _origins.\n   * Performs no validation.\n   *\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   */\n  #addPendingApprovalOrigin(origin: string, type: string): void {\n    let originMap = this.#origins.get(origin);\n\n    if (!originMap) {\n      originMap = new Map();\n      this.#origins.set(origin, originMap);\n    }\n\n    const currentValue = originMap.get(type) || 0;\n    originMap.set(type, currentValue + 1);\n  }\n\n  /**\n   * Adds an entry to the store.\n   * Performs no validation.\n   *\n   * @param id - The id of the approval request.\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   * @param expectsResult - Whether the request expects a result object to be returned.\n   */\n  #addToStore(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n    expectsResult?: boolean,\n  ): void {\n    const approval = {\n      id,\n      origin,\n      type,\n      time: Date.now(),\n      requestData: requestData || null,\n      requestState: requestState || null,\n      expectsResult: expectsResult || false,\n    };\n\n    this.update((draftState) => {\n      draftState.pendingApprovals[id] = approval as never;\n\n      draftState.pendingApprovalCount = Object.keys(\n        draftState.pendingApprovals,\n      ).length;\n    });\n  }\n\n  /**\n   * Deletes the approval with the given id. The approval promise must be\n   * resolved or reject before this method is called.\n   * Deletion is an internal operation because approval state is solely\n   * managed by this controller.\n   *\n   * @param id - The id of the approval request to be deleted.\n   */\n  #delete(id: string): void {\n    this.#approvals.delete(id);\n\n    // This method is only called after verifying that the approval with the\n    // specified id exists.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const { origin, type } = this.state.pendingApprovals[id]!;\n\n    const originMap = this.#origins.get(origin) as Map<string, number>;\n    const originTotalCount = this.getApprovalCount({ origin });\n    const originTypeCount = originMap.get(type) as number;\n\n    if (originTotalCount === 1) {\n      this.#origins.delete(origin);\n    } else {\n      originMap.set(type, originTypeCount - 1);\n    }\n\n    this.update((draftState) => {\n      delete draftState.pendingApprovals[id];\n      draftState.pendingApprovalCount = Object.keys(\n        draftState.pendingApprovals,\n      ).length;\n    });\n  }\n\n  /**\n   * Gets the approval callbacks for the given id, deletes the entry, and then\n   * returns the callbacks for promise resolution.\n   * Throws an error if no approval is found for the given id.\n   *\n   * @param id - The id of the approval request.\n   * @returns The promise callbacks associated with the approval request.\n   */\n  #deleteApprovalAndGetCallbacks(id: string): ApprovalCallbacks {\n    const callbacks = this.#approvals.get(id);\n    if (!callbacks) {\n      throw new ApprovalRequestNotFoundError(id);\n    }\n\n    this.#delete(id);\n    return callbacks;\n  }\n\n  async #result(\n    type: string,\n    opts: ResultOptions,\n    requestData: Record<string, Json>,\n  ) {\n    try {\n      await this.addAndShowApprovalRequest({\n        origin: ORIGIN_METAMASK,\n        type,\n        requestData,\n      });\n    } catch (error) {\n      console.info('Failed to display result page', error);\n    } finally {\n      if (opts.flowToEnd) {\n        try {\n          this.endFlow({ id: opts.flowToEnd });\n        } catch (error) {\n          console.info('Failed to end flow', { id: opts.flowToEnd, error });\n        }\n      }\n    }\n  }\n}\n\nexport default ApprovalController;\n"],"mappings":";;;;;;;;;;;;;AACA;AAAA,EACE;AAAA,OAGK;AAEP,SAAS,iBAAiB;AAE1B,SAAS,cAAc;AAahB,IAAM,kBAAkB;AACxB,IAAM,6BAA6B;AACnC,IAAM,+BAA+B;AAE5C,IAAM,iBAAiB;AAEvB,IAAM,gBAAgB;AAAA,EACpB,kBAAkB,EAAE,SAAS,OAAO,WAAW,KAAK;AAAA,EACpD,sBAAsB,EAAE,SAAS,OAAO,WAAW,MAAM;AAAA,EACzD,eAAe,EAAE,SAAS,OAAO,WAAW,MAAM;AACpD;AAEA,IAAM,2BAA2B,CAAC,QAAgB,SAChD,oBAAoB,IAAI,gCAAgC,MAAM;AAEhE,IAAM,kBAAkB,MAA+B;AACrD,SAAO;AAAA,IACL,kBAAkB,CAAC;AAAA,IACnB,sBAAsB;AAAA,IACtB,eAAe,CAAC;AAAA,EAClB;AACF;AA3CA;AAuVO,IAAM,qBAAN,cAAiC,eAItC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA,QAAQ,CAAC;AAAA,IACT,gCAAgC,CAAC;AAAA,EACnC,GAA8B;AAC5B,UAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,MACV;AAAA,MACA,OAAO,EAAE,GAAG,gBAAgB,GAAG,GAAG,MAAM;AAAA,IAC1C,CAAC;AAggBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,uBAAM;AAvtBN;AAEA;AAEA;AAEA;AAyBE,uBAAK,YAAa,oBAAI,IAAI;AAC1B,uBAAK,UAAW,oBAAI,IAAI;AAGxB,uBAAK,sBAAuB;AAC5B,uBAAK,gCAAiC;AACtC,SAAK,wBAAwB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,0BAAgC;AACtC,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,KAAK,MAAM,KAAK,IAAI;AAAA,IACtB;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,CAAC,MAA0B,sBAA+B;AACxD,YAAI,mBAAmB;AACrB,iBAAO,KAAK,0BAA0B,IAAI;AAAA,QAC5C;AACA,eAAO,KAAK,IAAI,IAAI;AAAA,MACtB;AAAA,IACF;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,KAAK,IAAI,KAAK,IAAI;AAAA,IACpB;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,KAAK,OAAO,KAAK,IAAI;AAAA,IACvB;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,KAAK,OAAO,KAAK,IAAI;AAAA,IACvB;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,KAAK,mBAAmB,KAAK,IAAI;AAAA,IACnC;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,KAAK,UAAU,KAAK,IAAI;AAAA,IAC1B;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,KAAK,QAAQ,KAAK,IAAI;AAAA,IACxB;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,KAAK,mBAAmB,KAAK,IAAI;AAAA,IACnC;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,KAAK,QAAQ,KAAK,IAAI;AAAA,IACxB;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,cAAc;AAAA,MACjB,KAAK,MAAM,KAAK,IAAI;AAAA,IACtB;AAAA,EACF;AAAA,EA4CA,0BAA0B,MAA4C;AACpE,UAAM,UAAU,sBAAK,cAAL,WACd,KAAK,QACL,KAAK,MACL,KAAK,IACL,KAAK,aACL,KAAK,cACL,KAAK;AAEP,uBAAK,sBAAL;AACA,WAAO;AAAA,EACT;AAAA,EAsCA,IAAI,MAAwD;AAC1D,WAAO,sBAAK,cAAL,WACL,KAAK,QACL,KAAK,MACL,KAAK,IACL,KAAK,aACL,KAAK,cACL,KAAK;AAAA,EAET;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,IAA8D;AAChE,WAAO,KAAK,MAAM,iBAAiB,EAAE;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,iBAAiB,OAA2C,CAAC,GAAW;AACtE,QAAI,CAAC,KAAK,UAAU,CAAC,KAAK,MAAM;AAC9B,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACvD;AACA,UAAM,EAAE,QAAQ,MAAM,MAAM,IAAI;AAEhC,QAAI,UAAU,OAAO;AACnB,aAAO,mBAAK,UAAS,IAAI,MAAM,GAAG,IAAI,KAAK,KAAK;AAAA,IAClD;AAEA,QAAI,QAAQ;AACV,aAAO,MAAM;AAAA,SACV,mBAAK,UAAS,IAAI,MAAM,KAAK,oBAAI,IAAI,GAAG,OAAO;AAAA;AAAA;AAAA,MAGlD,EAAE,OAAO,CAAC,OAAO,UAAU,QAAQ,OAAO,CAAC;AAAA,IAC7C;AAGA,QAAI,QAAQ;AACZ,eAAW,YAAY,OAAO,OAAO,KAAK,MAAM,gBAAgB,GAAG;AACjE,UAAI,SAAS,SAAS,OAAO;AAC3B,iBAAS;AAAA,MACX;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,wBAAgC;AAC9B,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,IAAI,OAAwD,CAAC,GAAY;AACvE,UAAM,EAAE,IAAI,QAAQ,MAAM,MAAM,IAAI;AAEpC,QAAI,IAAI;AACN,UAAI,OAAO,OAAO,UAAU;AAC1B,cAAM,IAAI,MAAM,gCAAgC;AAAA,MAClD;AACA,aAAO,mBAAK,YAAW,IAAI,EAAE;AAAA,IAC/B;AAEA,QAAI,SAAS,OAAO,UAAU,UAAU;AACtC,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACpD;AAEA,QAAI,QAAQ;AACV,UAAI,OAAO,WAAW,UAAU;AAC9B,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACtD;AAGA,UAAI,OAAO;AACT,eAAO,QAAQ,mBAAK,UAAS,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC;AAAA,MACtD;AACA,aAAO,mBAAK,UAAS,IAAI,MAAM;AAAA,IACjC;AAEA,QAAI,OAAO;AACT,iBAAW,YAAY,OAAO,OAAO,KAAK,MAAM,gBAAgB,GAAG;AACjE,YAAI,SAAS,SAAS,OAAO;AAC3B,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OACE,IACA,OACA,SACuB;AAEvB,UAAM,WAAW,KAAK,IAAI,EAAE;AAC5B,UAAM,iBAAiB,sBAAK,kEAAL,WAAoC;AAE3D,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,kBAAyC;AAAA,QAC7C,SAAS,CAAC,gBAA0B,QAAQ,EAAE,OAAO,YAAY,CAAC;AAAA,QAClE,OAAO;AAAA,MACT;AAEA,UAAI,SAAS,iBAAiB,CAAC,SAAS,eAAe;AACrD,eAAO,IAAI,oCAAoC,EAAE,CAAC;AAClD;AAAA,MACF;AAEA,YAAM,cAAc,SAAS,gBAAgB,kBAAkB;AAE/D,YAAM,eAAe,SAAS,gBAC1B,EAAE,OAAO,iBAAiB,YAAY,IACtC;AAEJ,qBAAe,QAAQ,YAAY;AAEnC,UAAI,CAAC,SAAS,eAAe;AAC3B,gBAAQ,EAAE,OAAO,OAAU,CAAC;AAAA,MAC9B;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,IAAY,OAAsB;AACvC,0BAAK,kEAAL,WAAoC,IAAI,OAAO,KAAK;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,gBAA2D;AAC/D,eAAW,MAAM,mBAAK,YAAW,KAAK,GAAG;AACvC,WAAK,OAAO,IAAI,cAAc;AAAA,IAChC;AACA,uBAAK,UAAS,MAAM;AACpB,SAAK,OAAO,CAAC,eAAe;AAC1B,iBAAW,mBAAmB,CAAC;AAC/B,iBAAW,uBAAuB;AAAA,IACpC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB,MAAuC;AACxD,QAAI,CAAC,KAAK,MAAM,iBAAiB,KAAK,EAAE,GAAG;AACzC,YAAM,IAAI,6BAA6B,KAAK,EAAE;AAAA,IAChD;AAEA,SAAK,OAAO,CAAC,eAAe;AAC1B,iBAAW,iBAAiB,KAAK,EAAE,EAAE,eACnC,KAAK;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,UAAU,OAAyB,CAAC,GAA4B;AAC9D,UAAM,KAAK,KAAK,MAAM,OAAO;AAC7B,UAAM,cAAc,KAAK,eAAe;AAExC,SAAK,OAAO,CAAC,eAAe;AAC1B,iBAAW,cAAc,KAAK,EAAE,IAAI,YAAY,CAAC;AAAA,IACnD,CAAC;AAGD,QAAI,KAAK,SAAS,OAAO;AACvB,yBAAK,sBAAL;AAAA,IACF;AAEA,WAAO,EAAE,IAAI,YAAY;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ,EAAE,GAAG,GAAmB;AAC9B,QAAI,CAAC,KAAK,MAAM,cAAc,QAAQ;AACpC,YAAM,IAAI,qBAAqB;AAAA,IACjC;AAEA,UAAM,cAAc,KAAK,MAAM,cAAc,MAAM,EAAE,EAAE,CAAC;AAExD,QAAI,OAAO,YAAY,IAAI;AACzB,YAAM,IAAI;AAAA,QACR;AAAA,QACA,KAAK,MAAM,cAAc,IAAI,CAAC,SAAS,KAAK,EAAE;AAAA,MAChD;AAAA,IACF;AAEA,SAAK,OAAO,CAAC,eAAe;AAC1B,iBAAW,cAAc,IAAI;AAAA,IAC/B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB,EAAE,IAAI,YAAY,GAA8B;AACjE,UAAM,YAAY,KAAK,MAAM,cAAc;AAAA,MACzC,CAAC,SAAS,KAAK,OAAO;AAAA,IACxB;AAEA,QAAI,cAAc,IAAI;AACpB,YAAM,IAAI,yBAAyB,EAAE;AAAA,IACvC;AAEA,SAAK,OAAO,CAAC,eAAe;AAC1B,iBAAW,cAAc,SAAS,EAAE,cAAc;AAAA,IACpD,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,QAAQ,OAAuB,CAAC,GAA2B;AAC/D,UAAM,sBAAK,oBAAL,WAAa,8BAA8B,MAAM;AAAA,MACrD,SAAS,KAAK;AAAA,MACd,QAAQ,KAAK;AAAA,MACb,OAAO,KAAK;AAAA,MACZ,MAAM,KAAK;AAAA,IACb;AAEA,WAAO,CAAC;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,MAAM,OAAqB,CAAC,GAAyB;AACzD,UAAM,sBAAK,oBAAL,WAAa,4BAA4B,MAAM;AAAA,MACnD,OAAO,KAAK;AAAA,MACZ,QAAQ,KAAK;AAAA,MACb,OAAO,KAAK;AAAA,MACZ,MAAM,KAAK;AAAA,IACb;AAEA,WAAO,CAAC;AAAA,EACV;AA8NF;AA9uBE;AAEA;AAEA;AAEA;AAuhBA;AAAA,SAAI,SACF,QACA,MACA,KAAa,OAAO,GACpB,aACA,cACA,eAC8B;AAC9B,wBAAK,0CAAL,WAAwB,IAAI,QAAQ,MAAM,aAAa;AAEvD,MACE,CAAC,mBAAK,gCAA+B,SAAS,IAAI,KAClD,KAAK,IAAI,EAAE,QAAQ,KAAK,CAAC,GACzB;AACA,UAAM,UAAU;AAAA,MACd,yBAAyB,QAAQ,IAAI;AAAA,IACvC;AAAA,EACF;AAGA,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,uBAAK,YAAW,IAAI,IAAI,EAAE,SAAS,OAAO,CAAC;AAC3C,0BAAK,wDAAL,WAA+B,QAAQ;AAEvC,0BAAK,4BAAL,WACE,IACA,QACA,MACA,aACA,cACA;AAAA,EAEJ,CAAC;AACH;AAWA;AAAA,uBAAkB,SAChB,IACA,QACA,MACA,aACA,cACM;AACN,MAAI,eAAe;AACnB,MAAI,CAAC,MAAM,OAAO,OAAO,UAAU;AACjC,mBAAe;AAAA,EACjB,WAAW,mBAAK,YAAW,IAAI,EAAE,GAAG;AAClC,mBAAe,6BAA6B,EAAE;AAAA,EAChD,WAAW,CAAC,UAAU,OAAO,WAAW,UAAU;AAChD,mBAAe;AAAA,EACjB,WAAW,CAAC,QAAQ,OAAO,SAAS,UAAU;AAC5C,mBAAe;AAAA,EACjB,WACE,gBACC,OAAO,gBAAgB,YAAY,MAAM,QAAQ,WAAW,IAC7D;AACA,mBAAe;AAAA,EACjB,WACE,iBACC,OAAO,iBAAiB,YAAY,MAAM,QAAQ,YAAY,IAC/D;AACA,mBAAe;AAAA,EACjB;AAEA,MAAI,cAAc;AAChB,UAAM,UAAU,SAAS,YAAY;AAAA,EACvC;AACF;AASA;AAAA,8BAAyB,SAAC,QAAgB,MAAoB;AAC5D,MAAI,YAAY,mBAAK,UAAS,IAAI,MAAM;AAExC,MAAI,CAAC,WAAW;AACd,gBAAY,oBAAI,IAAI;AACpB,uBAAK,UAAS,IAAI,QAAQ,SAAS;AAAA,EACrC;AAEA,QAAM,eAAe,UAAU,IAAI,IAAI,KAAK;AAC5C,YAAU,IAAI,MAAM,eAAe,CAAC;AACtC;AAaA;AAAA,gBAAW,SACT,IACA,QACA,MACA,aACA,cACA,eACM;AACN,QAAM,WAAW;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM,KAAK,IAAI;AAAA,IACf,aAAa,eAAe;AAAA,IAC5B,cAAc,gBAAgB;AAAA,IAC9B,eAAe,iBAAiB;AAAA,EAClC;AAEA,OAAK,OAAO,CAAC,eAAe;AAC1B,eAAW,iBAAiB,EAAE,IAAI;AAElC,eAAW,uBAAuB,OAAO;AAAA,MACvC,WAAW;AAAA,IACb,EAAE;AAAA,EACJ,CAAC;AACH;AAUA;AAAA,YAAO,SAAC,IAAkB;AACxB,qBAAK,YAAW,OAAO,EAAE;AAKzB,QAAM,EAAE,QAAQ,KAAK,IAAI,KAAK,MAAM,iBAAiB,EAAE;AAEvD,QAAM,YAAY,mBAAK,UAAS,IAAI,MAAM;AAC1C,QAAM,mBAAmB,KAAK,iBAAiB,EAAE,OAAO,CAAC;AACzD,QAAM,kBAAkB,UAAU,IAAI,IAAI;AAE1C,MAAI,qBAAqB,GAAG;AAC1B,uBAAK,UAAS,OAAO,MAAM;AAAA,EAC7B,OAAO;AACL,cAAU,IAAI,MAAM,kBAAkB,CAAC;AAAA,EACzC;AAEA,OAAK,OAAO,CAAC,eAAe;AAC1B,WAAO,WAAW,iBAAiB,EAAE;AACrC,eAAW,uBAAuB,OAAO;AAAA,MACvC,WAAW;AAAA,IACb,EAAE;AAAA,EACJ,CAAC;AACH;AAUA;AAAA,mCAA8B,SAAC,IAA+B;AAC5D,QAAM,YAAY,mBAAK,YAAW,IAAI,EAAE;AACxC,MAAI,CAAC,WAAW;AACd,UAAM,IAAI,6BAA6B,EAAE;AAAA,EAC3C;AAEA,wBAAK,oBAAL,WAAa;AACb,SAAO;AACT;AAEM;AAAA,YAAO,eACX,MACA,MACA,aACA;AACA,MAAI;AACF,UAAM,KAAK,0BAA0B;AAAA,MACnC,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,KAAK,iCAAiC,KAAK;AAAA,EACrD,UAAE;AACA,QAAI,KAAK,WAAW;AAClB,UAAI;AACF,aAAK,QAAQ,EAAE,IAAI,KAAK,UAAU,CAAC;AAAA,MACrC,SAAS,OAAO;AACd,gBAAQ,KAAK,sBAAsB,EAAE,IAAI,KAAK,WAAW,MAAM,CAAC;AAAA,MAClE;AAAA,IACF;AAAA,EACF;AACF;AAGF,IAAO,6BAAQ;","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/chunk-PMXPCCKS.js.map b/node_modules/@metamask/approval-controller/dist/chunk-PMXPCCKS.js.map
deleted file mode 100644
index 3bf157a..0000000
--- a/node_modules/@metamask/approval-controller/dist/chunk-PMXPCCKS.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/ApprovalController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ControllerGetStateAction } from '@metamask/base-controller';\nimport {\n  BaseController,\n  type ControllerStateChangeEvent,\n  type RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport type { JsonRpcError, DataWithOptionalCause } from '@metamask/rpc-errors';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type { Json, OptionalField } from '@metamask/utils';\nimport { nanoid } from 'nanoid';\n\nimport {\n  ApprovalRequestNotFoundError,\n  ApprovalRequestNoResultSupportError,\n  EndInvalidFlowError,\n  NoApprovalFlowsError,\n  MissingApprovalFlowError,\n} from './errors';\n\n// Constants\n\n// Avoiding dependency on controller-utils\nexport const ORIGIN_METAMASK = 'metamask';\nexport const APPROVAL_TYPE_RESULT_ERROR = 'result_error';\nexport const APPROVAL_TYPE_RESULT_SUCCESS = 'result_success';\n\nconst controllerName = 'ApprovalController';\n\nconst stateMetadata = {\n  pendingApprovals: { persist: false, anonymous: true },\n  pendingApprovalCount: { persist: false, anonymous: false },\n  approvalFlows: { persist: false, anonymous: false },\n};\n\nconst getAlreadyPendingMessage = (origin: string, type: string) =>\n  `Request of type '${type}' already pending for origin ${origin}. Please wait.`;\n\nconst getDefaultState = (): ApprovalControllerState => {\n  return {\n    pendingApprovals: {},\n    pendingApprovalCount: 0,\n    approvalFlows: [],\n  };\n};\n\n// Internal Types\n\ntype ApprovalPromiseResolve = (value?: unknown | AddResult) => void;\n\ntype ApprovalPromiseReject = (error?: unknown) => void;\n\ntype ApprovalRequestData = Record<string, Json> | null;\n\ntype ApprovalRequestState = Record<string, Json> | null;\n\ntype ApprovalCallbacks = {\n  resolve: ApprovalPromiseResolve;\n  reject: ApprovalPromiseReject;\n};\n\ntype ApprovalFlow = {\n  id: string;\n  loadingText: string | null;\n};\n\ntype ResultOptions = {\n  flowToEnd?: string;\n  header?: (string | ResultComponent)[];\n  icon?: string | null;\n  title?: string | null;\n};\n\n// Miscellaneous Types\n\nexport type ApprovalRequest<RequestData extends ApprovalRequestData> = {\n  /**\n   * The ID of the approval request.\n   */\n  id: string;\n\n  /**\n   * The origin of the approval request.\n   */\n  origin: string;\n\n  /**\n   * The time that the request was received, per Date.now().\n   */\n  time: number;\n\n  /**\n   * The type of the approval request.\n   * Unfortunately, not all values will match the `ApprovalType` enum, so we are using `string` here.\n   * TODO: Replace `string` with `ApprovalType` when all `type` values used by the clients can be encompassed by the `ApprovalType` enum.\n   */\n  type: string;\n\n  /**\n   * Additional data associated with the request.\n   */\n  requestData: RequestData;\n\n  /**\n   * Additional mutable state associated with the request\n   */\n  requestState: ApprovalRequestState;\n\n  /**\n   * Whether the request expects a result object to be returned instead of just the approval value.\n   */\n  expectsResult: boolean;\n};\n\nexport type ApprovalFlowState = ApprovalFlow;\n\nexport type ApprovalControllerState = {\n  pendingApprovals: Record<string, ApprovalRequest<Record<string, Json>>>;\n  pendingApprovalCount: number;\n  approvalFlows: ApprovalFlowState[];\n};\n\nexport type ApprovalControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  ApprovalControllerActions,\n  ApprovalControllerEvents,\n  never,\n  never\n>;\n\n// Option Types\n\nexport type ShowApprovalRequest = () => void | Promise<void>;\n\nexport type ResultComponent = {\n  /**\n   * A unique identifier for this instance of the component.\n   */\n  key: string;\n\n  /**\n   * The name of the component to render.\n   */\n  name: string;\n\n  /**\n   * Any properties required by the component.\n   */\n  properties?: Record<string, unknown>;\n\n  /**\n   * Any child components to render inside the component.\n   */\n  children?: string | ResultComponent | (string | ResultComponent)[];\n};\n\nexport type ApprovalControllerOptions = {\n  messenger: ApprovalControllerMessenger;\n  showApprovalRequest: ShowApprovalRequest;\n  state?: Partial<ApprovalControllerState>;\n  typesExcludedFromRateLimiting?: string[];\n};\n\nexport type AddApprovalOptions = {\n  id?: string;\n  origin: string;\n  type: string;\n  requestData?: Record<string, Json>;\n  requestState?: Record<string, Json>;\n  expectsResult?: boolean;\n};\n\nexport type UpdateRequestStateOptions = {\n  id: string;\n  requestState: Record<string, Json>;\n};\n\nexport type AcceptOptions = {\n  /**\n   * Whether to resolve the returned promise only when the request creator indicates the success of the\n   * post-approval logic using the result callbacks.\n   * If false or unspecified, the promise will resolve immediately.\n   */\n  waitForResult?: boolean;\n};\n\nexport type StartFlowOptions = OptionalField<\n  ApprovalFlow,\n  'id' | 'loadingText'\n> & { show?: boolean };\n\nexport type EndFlowOptions = Pick<ApprovalFlow, 'id'>;\n\nexport type SetFlowLoadingTextOptions = ApprovalFlow;\n\nexport type SuccessOptions = ResultOptions & {\n  message?: string | ResultComponent | (string | ResultComponent)[];\n};\n\nexport type ErrorOptions = ResultOptions & {\n  error?: string | ResultComponent | (string | ResultComponent)[];\n};\n\n// Result Types\n\nexport type AcceptResultCallbacks = {\n  /**\n   * Inform the request acceptor that the post-approval logic was successful.\n   *\n   * @param value - An optional value generated by the post-approval logic.\n   */\n  success: (value?: unknown) => void;\n\n  /**\n   * Inform the request acceptor that the post-approval logic failed.\n   *\n   * @param error - The reason for the failure.\n   */\n  error: (error: Error) => void;\n};\n\nexport type AddResult = {\n  /**\n   * An optional value provided by the request acceptor.\n   */\n  value?: unknown;\n\n  /**\n   * Callback functions that must be used to indicate to the request acceptor whether the post-approval logic was successful or not.\n   * Will be undefined if the request acceptor did not specify that they want to wait for a result.\n   */\n  resultCallbacks?: AcceptResultCallbacks;\n};\n\nexport type AcceptResult = {\n  /**\n   * An optional value provided by the request creator when indicating a successful result.\n   */\n  value?: unknown;\n};\n\nexport type ApprovalFlowStartResult = ApprovalFlow;\n\nexport type SuccessResult = Record<string, never>;\n\nexport type ErrorResult = Record<string, never>;\n\n// Event Types\n\nexport type ApprovalStateChange = ControllerStateChangeEvent<\n  typeof controllerName,\n  ApprovalControllerState\n>;\n\nexport type ApprovalControllerEvents = ApprovalStateChange;\n\n// Action Types\n\nexport type GetApprovalsState = ControllerGetStateAction<\n  typeof controllerName,\n  ApprovalControllerState\n>;\n\nexport type ClearApprovalRequests = {\n  type: `${typeof controllerName}:clearRequests`;\n  handler: (error: JsonRpcError<DataWithOptionalCause>) => void;\n};\n\nexport type AddApprovalRequest = {\n  type: `${typeof controllerName}:addRequest`;\n  handler: (\n    opts: AddApprovalOptions,\n    shouldShowRequest: boolean,\n  ) => ReturnType<ApprovalController['add']>;\n};\n\nexport type HasApprovalRequest = {\n  type: `${typeof controllerName}:hasRequest`;\n  handler: ApprovalController['has'];\n};\n\nexport type AcceptRequest = {\n  type: `${typeof controllerName}:acceptRequest`;\n  handler: ApprovalController['accept'];\n};\n\nexport type RejectRequest = {\n  type: `${typeof controllerName}:rejectRequest`;\n  handler: ApprovalController['reject'];\n};\n\nexport type UpdateRequestState = {\n  type: `${typeof controllerName}:updateRequestState`;\n  handler: ApprovalController['updateRequestState'];\n};\n\nexport type StartFlow = {\n  type: `${typeof controllerName}:startFlow`;\n  handler: ApprovalController['startFlow'];\n};\n\nexport type EndFlow = {\n  type: `${typeof controllerName}:endFlow`;\n  handler: ApprovalController['endFlow'];\n};\n\nexport type SetFlowLoadingText = {\n  type: `${typeof controllerName}:setFlowLoadingText`;\n  handler: ApprovalController['setFlowLoadingText'];\n};\n\nexport type ShowSuccess = {\n  type: `${typeof controllerName}:showSuccess`;\n  handler: ApprovalController['success'];\n};\n\nexport type ShowError = {\n  type: `${typeof controllerName}:showError`;\n  handler: ApprovalController['error'];\n};\n\nexport type ApprovalControllerActions =\n  | GetApprovalsState\n  | ClearApprovalRequests\n  | AddApprovalRequest\n  | HasApprovalRequest\n  | AcceptRequest\n  | RejectRequest\n  | UpdateRequestState\n  | StartFlow\n  | EndFlow\n  | SetFlowLoadingText\n  | ShowSuccess\n  | ShowError;\n\n/**\n * Controller for managing requests that require user approval.\n *\n * Enables limiting the number of pending requests by origin and type, counting\n * pending requests, and more.\n *\n * Adding a request returns a promise that resolves or rejects when the request\n * is approved or denied, respectively.\n */\nexport class ApprovalController extends BaseController<\n  typeof controllerName,\n  ApprovalControllerState,\n  ApprovalControllerMessenger\n> {\n  #approvals: Map<string, ApprovalCallbacks>;\n\n  #origins: Map<string, Map<string, number>>;\n\n  #showApprovalRequest: () => void;\n\n  #typesExcludedFromRateLimiting: string[];\n\n  /**\n   * Construct an Approval controller.\n   *\n   * @param options - The controller options.\n   * @param options.showApprovalRequest - Function for opening the UI such that\n   * the request can be displayed to the user.\n   * @param options.messenger - The restricted controller messenger for the Approval controller.\n   * @param options.state - The initial controller state.\n   * @param options.typesExcludedFromRateLimiting - Array of approval types which allow multiple pending approval requests from the same origin.\n   */\n  constructor({\n    messenger,\n    showApprovalRequest,\n    state = {},\n    typesExcludedFromRateLimiting = [],\n  }: ApprovalControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this.#approvals = new Map();\n    this.#origins = new Map();\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.#showApprovalRequest = showApprovalRequest;\n    this.#typesExcludedFromRateLimiting = typesExcludedFromRateLimiting;\n    this.registerMessageHandlers();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system\n   * actions.\n   */\n  private registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:clearRequests` as const,\n      this.clear.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:addRequest` as const,\n      (opts: AddApprovalOptions, shouldShowRequest: boolean) => {\n        if (shouldShowRequest) {\n          return this.addAndShowApprovalRequest(opts);\n        }\n        return this.add(opts);\n      },\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasRequest` as const,\n      this.has.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:acceptRequest` as const,\n      this.accept.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:rejectRequest` as const,\n      this.reject.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateRequestState` as const,\n      this.updateRequestState.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:startFlow` as const,\n      this.startFlow.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:endFlow` as const,\n      this.endFlow.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:setFlowLoadingText` as const,\n      this.setFlowLoadingText.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:showSuccess` as const,\n      this.success.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:showError` as const,\n      this.error.bind(this),\n    );\n  }\n\n  /**\n   * Adds an approval request per the given arguments, calls the show approval\n   * request function, and returns the associated approval promise resolving to\n   * an AddResult object.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * @param opts.requestState - Additional state associated with the request,\n   * if any.\n   * @returns The approval promise resolving to an AddResult object.\n   */\n  addAndShowApprovalRequest(\n    opts: AddApprovalOptions & { expectsResult: true },\n  ): Promise<AddResult>;\n\n  /**\n   * Adds an approval request per the given arguments, calls the show approval\n   * request function, and returns the associated approval promise resolving\n   * to a value provided during acceptance.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * @param opts.requestState - Additional state associated with the request,\n   * if any.\n   * @returns The approval promise resolving to a value provided during acceptance.\n   */\n  addAndShowApprovalRequest(opts: AddApprovalOptions): Promise<unknown>;\n\n  addAndShowApprovalRequest(opts: AddApprovalOptions): Promise<unknown> {\n    const promise = this.#add(\n      opts.origin,\n      opts.type,\n      opts.id,\n      opts.requestData,\n      opts.requestState,\n      opts.expectsResult,\n    );\n    this.#showApprovalRequest();\n    return promise;\n  }\n\n  /**\n   * Adds an approval request per the given arguments and returns the approval\n   * promise resolving to an AddResult object.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * if any.\n   * @returns The approval promise resolving to an AddResult object.\n   */\n  add(opts: AddApprovalOptions & { expectsResult: true }): Promise<AddResult>;\n\n  /**\n   * Adds an approval request per the given arguments and returns the approval\n   * promise resolving to a value provided during acceptance.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * if any.\n   * @returns The approval promise resolving to a value provided during acceptance.\n   */\n  add(opts: AddApprovalOptions): Promise<unknown>;\n\n  add(opts: AddApprovalOptions): Promise<unknown | AddResult> {\n    return this.#add(\n      opts.origin,\n      opts.type,\n      opts.id,\n      opts.requestData,\n      opts.requestState,\n      opts.expectsResult,\n    );\n  }\n\n  /**\n   * Gets the info for the approval request with the given id.\n   *\n   * @param id - The id of the approval request.\n   * @returns The approval request data associated with the id.\n   */\n  get(id: string): ApprovalRequest<ApprovalRequestData> | undefined {\n    return this.state.pendingApprovals[id];\n  }\n\n  /**\n   * Gets the number of pending approvals, by origin and/or type.\n   *\n   * If only `origin` is specified, all approvals for that origin will be\n   * counted, regardless of type.\n   * If only `type` is specified, all approvals for that type will be counted,\n   * regardless of origin.\n   * If both `origin` and `type` are specified, 0 or 1 will be returned.\n   *\n   * @param opts - The approval count options.\n   * @param opts.origin - An approval origin.\n   * @param opts.type - The type of the approval request.\n   * @returns The current approval request count for the given origin and/or\n   * type.\n   */\n  getApprovalCount(opts: { origin?: string; type?: string } = {}): number {\n    if (!opts.origin && !opts.type) {\n      throw new Error('Must specify origin, type, or both.');\n    }\n    const { origin, type: _type } = opts;\n\n    if (origin && _type) {\n      return this.#origins.get(origin)?.get(_type) || 0;\n    }\n\n    if (origin) {\n      return Array.from(\n        (this.#origins.get(origin) || new Map()).values(),\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n      ).reduce((total, value) => total + value, 0);\n    }\n\n    // Only \"type\" was specified\n    let count = 0;\n    for (const approval of Object.values(this.state.pendingApprovals)) {\n      if (approval.type === _type) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the total count of all pending approval requests for all origins.\n   *\n   * @returns The total pending approval request count.\n   */\n  getTotalApprovalCount(): number {\n    return this.state.pendingApprovalCount;\n  }\n\n  /**\n   * Checks if there's a pending approval request per the given parameters.\n   * At least one parameter must be specified. An error will be thrown if the\n   * parameters are invalid.\n   *\n   * If `id` is specified, all other parameters will be ignored.\n   * If `id` is not specified, the method will check for requests that match\n   * all of the specified parameters.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The ID to check for.\n   * @param opts.origin - The origin to check for.\n   * @param opts.type - The type to check for.\n   * @returns `true` if a matching approval is found, and `false` otherwise.\n   */\n  has(opts: { id?: string; origin?: string; type?: string } = {}): boolean {\n    const { id, origin, type: _type } = opts;\n\n    if (id) {\n      if (typeof id !== 'string') {\n        throw new Error('May not specify non-string id.');\n      }\n      return this.#approvals.has(id);\n    }\n\n    if (_type && typeof _type !== 'string') {\n      throw new Error('May not specify non-string type.');\n    }\n\n    if (origin) {\n      if (typeof origin !== 'string') {\n        throw new Error('May not specify non-string origin.');\n      }\n\n      // Check origin and type pair if type also specified\n      if (_type) {\n        return Boolean(this.#origins.get(origin)?.get(_type));\n      }\n      return this.#origins.has(origin);\n    }\n\n    if (_type) {\n      for (const approval of Object.values(this.state.pendingApprovals)) {\n        if (approval.type === _type) {\n          return true;\n        }\n      }\n      return false;\n    }\n    throw new Error(\n      'Must specify a valid combination of id, origin, and type.',\n    );\n  }\n\n  /**\n   * Resolves the promise of the approval with the given id, and deletes the\n   * approval. Throws an error if no such approval exists.\n   *\n   * @param id - The id of the approval request.\n   * @param value - The value to resolve the approval promise with.\n   * @param options - Options bag.\n   * @returns A promise that either resolves once a result is provided by\n   * the creator of the approval request, or immediately if `options.waitForResult`\n   * is `false` or `undefined`.\n   */\n  accept(\n    id: string,\n    value?: unknown,\n    options?: AcceptOptions,\n  ): Promise<AcceptResult> {\n    // Safe to cast as the delete method below will throw if the ID is not found\n    const approval = this.get(id) as ApprovalRequest<ApprovalRequestData>;\n    const requestPromise = this.#deleteApprovalAndGetCallbacks(id);\n\n    return new Promise((resolve, reject) => {\n      const resultCallbacks: AcceptResultCallbacks = {\n        success: (acceptValue?: unknown) => resolve({ value: acceptValue }),\n        error: reject,\n      };\n\n      if (options?.waitForResult && !approval.expectsResult) {\n        reject(new ApprovalRequestNoResultSupportError(id));\n        return;\n      }\n\n      const resultValue = options?.waitForResult ? resultCallbacks : undefined;\n\n      const resolveValue = approval.expectsResult\n        ? { value, resultCallbacks: resultValue }\n        : value;\n\n      requestPromise.resolve(resolveValue);\n\n      if (!options?.waitForResult) {\n        resolve({ value: undefined });\n      }\n    });\n  }\n\n  /**\n   * Rejects the promise of the approval with the given id, and deletes the\n   * approval. Throws an error if no such approval exists.\n   *\n   * @param id - The id of the approval request.\n   * @param error - The error to reject the approval promise with.\n   */\n  reject(id: string, error: unknown): void {\n    this.#deleteApprovalAndGetCallbacks(id).reject(error);\n  }\n\n  /**\n   * Rejects and deletes all approval requests.\n   *\n   * @param rejectionError - The JsonRpcError to reject the approval\n   * requests with.\n   */\n  clear(rejectionError: JsonRpcError<DataWithOptionalCause>): void {\n    for (const id of this.#approvals.keys()) {\n      this.reject(id, rejectionError);\n    }\n    this.#origins.clear();\n    this.update((draftState) => {\n      draftState.pendingApprovals = {};\n      draftState.pendingApprovalCount = 0;\n    });\n  }\n\n  /**\n   * Updates the request state of the approval with the given id.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request.\n   * @param opts.requestState - Additional data associated with the request\n   */\n  updateRequestState(opts: UpdateRequestStateOptions): void {\n    if (!this.state.pendingApprovals[opts.id]) {\n      throw new ApprovalRequestNotFoundError(opts.id);\n    }\n\n    this.update((draftState) => {\n      draftState.pendingApprovals[opts.id].requestState =\n        opts.requestState as never;\n    });\n  }\n\n  /**\n   * Starts a new approval flow.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval flow.\n   * @param opts.loadingText - The loading text that will be associated to the approval flow.\n   * @param opts.show - A flag to determine whether the approval should show to the user.\n   * @returns The object containing the approval flow id.\n   */\n  startFlow(opts: StartFlowOptions = {}): ApprovalFlowStartResult {\n    const id = opts.id ?? nanoid();\n    const loadingText = opts.loadingText ?? null;\n\n    this.update((draftState) => {\n      draftState.approvalFlows.push({ id, loadingText });\n    });\n\n    // By default, if nothing else is specified, we always show the approval.\n    if (opts.show !== false) {\n      this.#showApprovalRequest();\n    }\n\n    return { id, loadingText };\n  }\n\n  /**\n   * Ends the current approval flow.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval flow that will be finished.\n   */\n  endFlow({ id }: EndFlowOptions) {\n    if (!this.state.approvalFlows.length) {\n      throw new NoApprovalFlowsError();\n    }\n\n    const currentFlow = this.state.approvalFlows.slice(-1)[0];\n\n    if (id !== currentFlow.id) {\n      throw new EndInvalidFlowError(\n        id,\n        this.state.approvalFlows.map((flow) => flow.id),\n      );\n    }\n\n    this.update((draftState) => {\n      draftState.approvalFlows.pop();\n    });\n  }\n\n  /**\n   * Sets the loading text for the approval flow.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The approval flow loading text that will be displayed.\n   * @param opts.loadingText - The loading text that will be associated to the approval flow.\n   */\n  setFlowLoadingText({ id, loadingText }: SetFlowLoadingTextOptions) {\n    const flowIndex = this.state.approvalFlows.findIndex(\n      (flow) => flow.id === id,\n    );\n\n    if (flowIndex === -1) {\n      throw new MissingApprovalFlowError(id);\n    }\n\n    this.update((draftState) => {\n      draftState.approvalFlows[flowIndex].loadingText = loadingText;\n    });\n  }\n\n  /**\n   * Show a success page.\n   *\n   * @param opts - Options bag.\n   * @param opts.message - The message text or components to display in the page.\n   * @param opts.header - The text or components to display in the header of the page.\n   * @param opts.flowToEnd - The ID of the approval flow to end once the success page is approved.\n   * @param opts.title - The title to display above the message. Shown by default but can be hidden with `null`.\n   * @param opts.icon - The icon to display in the page. Shown by default but can be hidden with `null`.\n   * @returns Empty object to support future additions.\n   */\n  async success(opts: SuccessOptions = {}): Promise<SuccessResult> {\n    await this.#result(APPROVAL_TYPE_RESULT_SUCCESS, opts, {\n      message: opts.message,\n      header: opts.header,\n      title: opts.title,\n      icon: opts.icon,\n    } as Record<string, Json>);\n\n    return {};\n  }\n\n  /**\n   * Show an error page.\n   *\n   * @param opts - Options bag.\n   * @param opts.message - The message text or components to display in the page.\n   * @param opts.header - The text or components to display in the header of the page.\n   * @param opts.flowToEnd - The ID of the approval flow to end once the error page is approved.\n   * @param opts.title - The title to display above the message. Shown by default but can be hidden with `null`.\n   * @param opts.icon - The icon to display in the page. Shown by default but can be hidden with `null`.\n   * @returns Empty object to support future additions.\n   */\n  async error(opts: ErrorOptions = {}): Promise<ErrorResult> {\n    await this.#result(APPROVAL_TYPE_RESULT_ERROR, opts, {\n      error: opts.error,\n      header: opts.header,\n      title: opts.title,\n      icon: opts.icon,\n    } as Record<string, Json>);\n\n    return {};\n  }\n\n  /**\n   * Implementation of add operation.\n   *\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param id - The id of the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   * @param expectsResult - Whether the approval request expects a result object to be returned.\n   * @returns The approval promise.\n   */\n  #add(\n    origin: string,\n    type: string,\n    id: string = nanoid(),\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n    expectsResult?: boolean,\n  ): Promise<unknown | AddResult> {\n    this.#validateAddParams(id, origin, type, requestData, requestState);\n\n    if (\n      !this.#typesExcludedFromRateLimiting.includes(type) &&\n      this.has({ origin, type })\n    ) {\n      throw rpcErrors.resourceUnavailable(\n        getAlreadyPendingMessage(origin, type),\n      );\n    }\n\n    // add pending approval\n    return new Promise((resolve, reject) => {\n      this.#approvals.set(id, { resolve, reject });\n      this.#addPendingApprovalOrigin(origin, type);\n\n      this.#addToStore(\n        id,\n        origin,\n        type,\n        requestData,\n        requestState,\n        expectsResult,\n      );\n    });\n  }\n\n  /**\n   * Validates parameters to the add method.\n   *\n   * @param id - The id of the approval request.\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   */\n  #validateAddParams(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n  ): void {\n    let errorMessage = null;\n    if (!id || typeof id !== 'string') {\n      errorMessage = 'Must specify non-empty string id.';\n    } else if (this.#approvals.has(id)) {\n      errorMessage = `Approval request with id '${id}' already exists.`;\n    } else if (!origin || typeof origin !== 'string') {\n      errorMessage = 'Must specify non-empty string origin.';\n    } else if (!type || typeof type !== 'string') {\n      errorMessage = 'Must specify non-empty string type.';\n    } else if (\n      requestData &&\n      (typeof requestData !== 'object' || Array.isArray(requestData))\n    ) {\n      errorMessage = 'Request data must be a plain object if specified.';\n    } else if (\n      requestState &&\n      (typeof requestState !== 'object' || Array.isArray(requestState))\n    ) {\n      errorMessage = 'Request state must be a plain object if specified.';\n    }\n\n    if (errorMessage) {\n      throw rpcErrors.internal(errorMessage);\n    }\n  }\n\n  /**\n   * Adds an entry to _origins.\n   * Performs no validation.\n   *\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   */\n  #addPendingApprovalOrigin(origin: string, type: string): void {\n    let originMap = this.#origins.get(origin);\n\n    if (!originMap) {\n      originMap = new Map();\n      this.#origins.set(origin, originMap);\n    }\n\n    const currentValue = originMap.get(type) || 0;\n    originMap.set(type, currentValue + 1);\n  }\n\n  /**\n   * Adds an entry to the store.\n   * Performs no validation.\n   *\n   * @param id - The id of the approval request.\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   * @param expectsResult - Whether the request expects a result object to be returned.\n   */\n  #addToStore(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n    expectsResult?: boolean,\n  ): void {\n    const approval = {\n      id,\n      origin,\n      type,\n      time: Date.now(),\n      requestData: requestData || null,\n      requestState: requestState || null,\n      expectsResult: expectsResult || false,\n    };\n\n    this.update((draftState) => {\n      draftState.pendingApprovals[id] = approval as never;\n\n      draftState.pendingApprovalCount = Object.keys(\n        draftState.pendingApprovals,\n      ).length;\n    });\n  }\n\n  /**\n   * Deletes the approval with the given id. The approval promise must be\n   * resolved or reject before this method is called.\n   * Deletion is an internal operation because approval state is solely\n   * managed by this controller.\n   *\n   * @param id - The id of the approval request to be deleted.\n   */\n  #delete(id: string): void {\n    this.#approvals.delete(id);\n\n    // This method is only called after verifying that the approval with the\n    // specified id exists.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const { origin, type } = this.state.pendingApprovals[id]!;\n\n    const originMap = this.#origins.get(origin) as Map<string, number>;\n    const originTotalCount = this.getApprovalCount({ origin });\n    const originTypeCount = originMap.get(type) as number;\n\n    if (originTotalCount === 1) {\n      this.#origins.delete(origin);\n    } else {\n      originMap.set(type, originTypeCount - 1);\n    }\n\n    this.update((draftState) => {\n      delete draftState.pendingApprovals[id];\n      draftState.pendingApprovalCount = Object.keys(\n        draftState.pendingApprovals,\n      ).length;\n    });\n  }\n\n  /**\n   * Gets the approval callbacks for the given id, deletes the entry, and then\n   * returns the callbacks for promise resolution.\n   * Throws an error if no approval is found for the given id.\n   *\n   * @param id - The id of the approval request.\n   * @returns The promise callbacks associated with the approval request.\n   */\n  #deleteApprovalAndGetCallbacks(id: string): ApprovalCallbacks {\n    const callbacks = this.#approvals.get(id);\n    if (!callbacks) {\n      throw new ApprovalRequestNotFoundError(id);\n    }\n\n    this.#delete(id);\n    return callbacks;\n  }\n\n  async #result(\n    type: string,\n    opts: ResultOptions,\n    requestData: Record<string, Json>,\n  ) {\n    try {\n      await this.addAndShowApprovalRequest({\n        origin: ORIGIN_METAMASK,\n        type,\n        requestData,\n      });\n    } catch (error) {\n      console.info('Failed to display result page', error);\n    } finally {\n      if (opts.flowToEnd) {\n        try {\n          this.endFlow({ id: opts.flowToEnd });\n        } catch (error) {\n          console.info('Failed to end flow', { id: opts.flowToEnd, error });\n        }\n      }\n    }\n  }\n}\n\nexport default ApprovalController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/errors.js.map b/node_modules/@metamask/approval-controller/dist/errors.js.map
deleted file mode 100644
index a464c67..0000000
--- a/node_modules/@metamask/approval-controller/dist/errors.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/errors.mjs.map b/node_modules/@metamask/approval-controller/dist/errors.mjs.map
deleted file mode 100644
index 84c51b2..0000000
--- a/node_modules/@metamask/approval-controller/dist/errors.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/index.js b/node_modules/@metamask/approval-controller/dist/index.js
index 59a39d3..e1c5c4d 100644
--- a/node_modules/@metamask/approval-controller/dist/index.js
+++ b/node_modules/@metamask/approval-controller/dist/index.js
@@ -3,7 +3,7 @@
 
 
 
-var _chunkPMXPCCKSjs = require('./chunk-PMXPCCKS.js');
+var _chunkNONDXCHJjs = require('./chunk-NONDXCHJ.js');
 
 
 
@@ -21,5 +21,5 @@ var _chunkLKCXZAKDjs = require('./chunk-LKCXZAKD.js');
 
 
 
-exports.APPROVAL_TYPE_RESULT_ERROR = _chunkPMXPCCKSjs.APPROVAL_TYPE_RESULT_ERROR; exports.APPROVAL_TYPE_RESULT_SUCCESS = _chunkPMXPCCKSjs.APPROVAL_TYPE_RESULT_SUCCESS; exports.ApprovalController = _chunkPMXPCCKSjs.ApprovalController; exports.ApprovalRequestNoResultSupportError = _chunkLKCXZAKDjs.ApprovalRequestNoResultSupportError; exports.ApprovalRequestNotFoundError = _chunkLKCXZAKDjs.ApprovalRequestNotFoundError; exports.EndInvalidFlowError = _chunkLKCXZAKDjs.EndInvalidFlowError; exports.MissingApprovalFlowError = _chunkLKCXZAKDjs.MissingApprovalFlowError; exports.NoApprovalFlowsError = _chunkLKCXZAKDjs.NoApprovalFlowsError; exports.ORIGIN_METAMASK = _chunkPMXPCCKSjs.ORIGIN_METAMASK;
+exports.APPROVAL_TYPE_RESULT_ERROR = _chunkNONDXCHJjs.APPROVAL_TYPE_RESULT_ERROR; exports.APPROVAL_TYPE_RESULT_SUCCESS = _chunkNONDXCHJjs.APPROVAL_TYPE_RESULT_SUCCESS; exports.ApprovalController = _chunkNONDXCHJjs.ApprovalController; exports.ApprovalRequestNoResultSupportError = _chunkLKCXZAKDjs.ApprovalRequestNoResultSupportError; exports.ApprovalRequestNotFoundError = _chunkLKCXZAKDjs.ApprovalRequestNotFoundError; exports.EndInvalidFlowError = _chunkLKCXZAKDjs.EndInvalidFlowError; exports.MissingApprovalFlowError = _chunkLKCXZAKDjs.MissingApprovalFlowError; exports.NoApprovalFlowsError = _chunkLKCXZAKDjs.NoApprovalFlowsError; exports.ORIGIN_METAMASK = _chunkNONDXCHJjs.ORIGIN_METAMASK;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/index.js.map b/node_modules/@metamask/approval-controller/dist/index.js.map
deleted file mode 100644
index a464c67..0000000
--- a/node_modules/@metamask/approval-controller/dist/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/index.mjs b/node_modules/@metamask/approval-controller/dist/index.mjs
index c1c5b95..c482411 100644
--- a/node_modules/@metamask/approval-controller/dist/index.mjs
+++ b/node_modules/@metamask/approval-controller/dist/index.mjs
@@ -3,7 +3,7 @@ import {
   APPROVAL_TYPE_RESULT_SUCCESS,
   ApprovalController,
   ORIGIN_METAMASK
-} from "./chunk-PIJZDVKC.mjs";
+} from "./chunk-CZANKQ6E.mjs";
 import {
   ApprovalRequestNoResultSupportError,
   ApprovalRequestNotFoundError,
diff --git a/node_modules/@metamask/approval-controller/dist/index.mjs.map b/node_modules/@metamask/approval-controller/dist/index.mjs.map
deleted file mode 100644
index 84c51b2..0000000
--- a/node_modules/@metamask/approval-controller/dist/index.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/approval-controller/dist/types/ApprovalController.d.ts b/node_modules/@metamask/approval-controller/dist/types/ApprovalController.d.ts
index 2b9ad4d..26efec3 100644
--- a/node_modules/@metamask/approval-controller/dist/types/ApprovalController.d.ts
+++ b/node_modules/@metamask/approval-controller/dist/types/ApprovalController.d.ts
@@ -101,6 +101,12 @@ export type AcceptOptions = {
      * If false or unspecified, the promise will resolve immediately.
      */
     waitForResult?: boolean;
+    /**
+     * Patch for #10758
+     * provide the AcceptOptions with extra options which have been used in `engine.acceptPendingApproval()` function in mobile.
+     * the metamask mobile already patch the AprrovalControll.accept() function to accept the extra options.
+     */
+    deleteAfterResult?: boolean;
 };
 export type StartFlowOptions = OptionalField<ApprovalFlow, 'id' | 'loadingText'> & {
     show?: boolean;
