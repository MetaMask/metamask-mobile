diff --git a/node_modules/@metamask/assets-controllers/dist/NftController.cjs b/node_modules/@metamask/assets-controllers/dist/NftController.cjs
index 0f15eb6..96e5a68 100644
--- a/node_modules/@metamask/assets-controllers/dist/NftController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/NftController.cjs
@@ -13,7 +13,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _NftController_instances, _NftController_mutex, _NftController_selectedAccountId, _NftController_chainId, _NftController_ipfsGateway, _NftController_openSeaEnabled, _NftController_useIpfsSubdomains, _NftController_isIpfsGatewayEnabled, _NftController_onNftAdded, _NftController_onNetworkControllerNetworkDidChange, _NftController_onPreferencesControllerStateChange, _NftController_onSelectedAccountChange, _NftController_updateNestedNftState, _NftController_getNftCollectionApi, _NftController_getNftInformationFromApi, _NftController_getNftInformationFromTokenURI, _NftController_getNftURIAndStandard, _NftController_getNftInformation, _NftController_getNftContractInformationFromContract, _NftController_getNftContractInformation, _NftController_addIndividualNft, _NftController_addNftContract, _NftController_removeAndIgnoreIndividualNft, _NftController_removeIndividualNft, _NftController_removeNftContract, _NftController_validateWatchNft, _NftController_getCorrectChainId, _NftController_getAddressOrSelectedAddress, _NftController_updateNftUpdateForAccount;
+var _NftController_instances, _NftController_mutex, _NftController_selectedAccountId, _NftController_chainId, _NftController_ipfsGateway, _NftController_displayNftMedia, _NftController_useIpfsSubdomains, _NftController_isIpfsGatewayEnabled, _NftController_onNftAdded, _NftController_onNetworkControllerNetworkDidChange, _NftController_onPreferencesControllerStateChange, _NftController_onSelectedAccountChange, _NftController_updateNestedNftState, _NftController_getNftCollectionApi, _NftController_getNftInformationFromApi, _NftController_getNftInformationFromTokenURI, _NftController_getNftURIAndStandard, _NftController_getNftInformation, _NftController_getNftContractInformationFromContract, _NftController_getNftContractInformation, _NftController_addIndividualNft, _NftController_addNftContract, _NftController_removeAndIgnoreIndividualNft, _NftController_removeIndividualNft, _NftController_removeNftContract, _NftController_validateWatchNft, _NftController_getCorrectChainId, _NftController_getAddressOrSelectedAddress, _NftController_updateNftUpdateForAccount;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.NftController = exports.getDefaultNftControllerState = void 0;
 const address_1 = require("@ethersproject/address");
@@ -54,7 +54,7 @@ class NftController extends base_controller_1.BaseController {
      * @param options - The controller options.
      * @param options.chainId - The chain ID of the current network.
      * @param options.ipfsGateway - The configured IPFS gateway.
-     * @param options.openSeaEnabled - Controls whether the OpenSea API is used.
+     * @param options.displayNftMedia - Controls whether the OpenSea API is used.
      * @param options.useIpfsSubdomains - Controls whether IPFS subdomains are used.
      * @param options.isIpfsGatewayEnabled - Controls whether IPFS is enabled or not.
      * @param options.onNftAdded - Callback that is called when an NFT is added. Currently used pass data
@@ -62,7 +62,7 @@ class NftController extends base_controller_1.BaseController {
      * @param options.messenger - The messenger.
      * @param options.state - Initial state to set on this controller.
      */
-    constructor({ chainId: initialChainId, ipfsGateway = controller_utils_1.IPFS_DEFAULT_GATEWAY_URL, openSeaEnabled = false, useIpfsSubdomains = true, isIpfsGatewayEnabled = true, onNftAdded, messenger, state = {}, }) {
+    constructor({ chainId: initialChainId, ipfsGateway = controller_utils_1.IPFS_DEFAULT_GATEWAY_URL, displayNftMedia = false, useIpfsSubdomains = true, isIpfsGatewayEnabled = true, onNftAdded, messenger, state = {}, }) {
         super({
             name: controllerName,
             metadata: nftControllerMetadata,
@@ -77,14 +77,14 @@ class NftController extends base_controller_1.BaseController {
         _NftController_selectedAccountId.set(this, void 0);
         _NftController_chainId.set(this, void 0);
         _NftController_ipfsGateway.set(this, void 0);
-        _NftController_openSeaEnabled.set(this, void 0);
+        _NftController_displayNftMedia.set(this, void 0);
         _NftController_useIpfsSubdomains.set(this, void 0);
         _NftController_isIpfsGatewayEnabled.set(this, void 0);
         _NftController_onNftAdded.set(this, void 0);
         __classPrivateFieldSet(this, _NftController_selectedAccountId, this.messagingSystem.call('AccountsController:getSelectedAccount').id, "f");
         __classPrivateFieldSet(this, _NftController_chainId, initialChainId, "f");
         __classPrivateFieldSet(this, _NftController_ipfsGateway, ipfsGateway, "f");
-        __classPrivateFieldSet(this, _NftController_openSeaEnabled, openSeaEnabled, "f");
+        __classPrivateFieldSet(this, _NftController_displayNftMedia, displayNftMedia, "f");
         __classPrivateFieldSet(this, _NftController_useIpfsSubdomains, useIpfsSubdomains, "f");
         __classPrivateFieldSet(this, _NftController_isIpfsGatewayEnabled, isIpfsGatewayEnabled, "f");
         __classPrivateFieldSet(this, _NftController_onNftAdded, onNftAdded, "f");
@@ -597,7 +597,7 @@ class NftController extends base_controller_1.BaseController {
     }
 }
 exports.NftController = NftController;
-_NftController_mutex = new WeakMap(), _NftController_selectedAccountId = new WeakMap(), _NftController_chainId = new WeakMap(), _NftController_ipfsGateway = new WeakMap(), _NftController_openSeaEnabled = new WeakMap(), _NftController_useIpfsSubdomains = new WeakMap(), _NftController_isIpfsGatewayEnabled = new WeakMap(), _NftController_onNftAdded = new WeakMap(), _NftController_instances = new WeakSet(), _NftController_onNetworkControllerNetworkDidChange = function _NftController_onNetworkControllerNetworkDidChange({ selectedNetworkClientId, }) {
+_NftController_mutex = new WeakMap(), _NftController_selectedAccountId = new WeakMap(), _NftController_chainId = new WeakMap(), _NftController_ipfsGateway = new WeakMap(), _NftController_displayNftMedia = new WeakMap(), _NftController_useIpfsSubdomains = new WeakMap(), _NftController_isIpfsGatewayEnabled = new WeakMap(), _NftController_onNftAdded = new WeakMap(), _NftController_instances = new WeakSet(), _NftController_onNetworkControllerNetworkDidChange = function _NftController_onNetworkControllerNetworkDidChange({ selectedNetworkClientId, }) {
     const { configuration: { chainId }, } = this.messagingSystem.call('NetworkController:getNetworkClientById', selectedNetworkClientId);
     __classPrivateFieldSet(this, _NftController_chainId, chainId, "f");
 }, _NftController_onPreferencesControllerStateChange = 
@@ -605,20 +605,20 @@ _NftController_mutex = new WeakMap(), _NftController_selectedAccountId = new Wea
  * Handles the state change of the preference controller.
  * @param preferencesState - The new state of the preference controller.
  * @param preferencesState.ipfsGateway - The configured IPFS gateway.
- * @param preferencesState.openSeaEnabled - Controls whether the OpenSea API is used.
+ * @param preferencesState.displayNftMedia - Controls whether the OpenSea API is used.
  * @param preferencesState.isIpfsGatewayEnabled - Controls whether IPFS is enabled or not.
  */
-async function _NftController_onPreferencesControllerStateChange({ ipfsGateway, openSeaEnabled, isIpfsGatewayEnabled, }) {
+async function _NftController_onPreferencesControllerStateChange({ ipfsGateway, displayNftMedia, isIpfsGatewayEnabled, }) {
     const selectedAccount = this.messagingSystem.call('AccountsController:getSelectedAccount');
     __classPrivateFieldSet(this, _NftController_selectedAccountId, selectedAccount.id, "f");
     // Get current state values
     if (__classPrivateFieldGet(this, _NftController_ipfsGateway, "f") !== ipfsGateway ||
-        __classPrivateFieldGet(this, _NftController_openSeaEnabled, "f") !== openSeaEnabled ||
+        __classPrivateFieldGet(this, _NftController_displayNftMedia, "f") !== displayNftMedia ||
         __classPrivateFieldGet(this, _NftController_isIpfsGatewayEnabled, "f") !== isIpfsGatewayEnabled) {
         __classPrivateFieldSet(this, _NftController_ipfsGateway, ipfsGateway, "f");
-        __classPrivateFieldSet(this, _NftController_openSeaEnabled, openSeaEnabled, "f");
+        __classPrivateFieldSet(this, _NftController_displayNftMedia, displayNftMedia, "f");
         __classPrivateFieldSet(this, _NftController_isIpfsGatewayEnabled, isIpfsGatewayEnabled, "f");
-        const needsUpdateNftMetadata = (isIpfsGatewayEnabled && ipfsGateway !== '') || openSeaEnabled;
+        const needsUpdateNftMetadata = (isIpfsGatewayEnabled && ipfsGateway !== '') || displayNftMedia;
         if (needsUpdateNftMetadata && selectedAccount) {
             await __classPrivateFieldGet(this, _NftController_instances, "m", _NftController_updateNftUpdateForAccount).call(this, selectedAccount);
         }
@@ -632,7 +632,7 @@ async function _NftController_onSelectedAccountChange(internalAccount) {
     const oldSelectedAccountId = __classPrivateFieldGet(this, _NftController_selectedAccountId, "f");
     __classPrivateFieldSet(this, _NftController_selectedAccountId, internalAccount.id, "f");
     const needsUpdateNftMetadata = ((__classPrivateFieldGet(this, _NftController_isIpfsGatewayEnabled, "f") && __classPrivateFieldGet(this, _NftController_ipfsGateway, "f") !== '') ||
-        __classPrivateFieldGet(this, _NftController_openSeaEnabled, "f")) &&
+        __classPrivateFieldGet(this, _NftController_displayNftMedia, "f")) &&
         oldSelectedAccountId !== internalAccount.id;
     if (needsUpdateNftMetadata) {
         await __classPrivateFieldGet(this, _NftController_instances, "m", _NftController_updateNftUpdateForAccount).call(this, internalAccount);
@@ -707,6 +707,7 @@ async function _NftController_getNftInformationFromApi(contractAddress, tokenId)
             description: null,
             image: null,
             standard: null,
+            error: 'Opensea import error',
         };
     }
     // if we've reached this point, we have successfully fetched some data for nftInformation
@@ -749,9 +750,10 @@ async function _NftController_getNftInformationFromTokenURI(contractAddress, tok
             standard: standard || null,
             favorite: false,
             tokenURI: tokenURI ?? null,
+            error: 'URI import error',
         };
     }
-    const isDisplayNFTMediaToggleEnabled = __classPrivateFieldGet(this, _NftController_openSeaEnabled, "f");
+    const isDisplayNFTMediaToggleEnabled = __classPrivateFieldGet(this, _NftController_displayNftMedia, "f");
     if (!hasIpfsTokenURI && !isDisplayNFTMediaToggleEnabled) {
         return {
             image: null,
@@ -760,6 +762,7 @@ async function _NftController_getNftInformationFromTokenURI(contractAddress, tok
             standard: standard || null,
             favorite: false,
             tokenURI: tokenURI ?? null,
+            error: 'URI import error',
         };
     }
     if (hasIpfsTokenURI) {
@@ -853,10 +856,21 @@ async function _NftController_getNftInformation(contractAddress, tokenId, networ
     });
     const [blockchainMetadata, nftApiMetadata] = await Promise.all([
         (0, controller_utils_1.safelyExecute)(() => __classPrivateFieldGet(this, _NftController_instances, "m", _NftController_getNftInformationFromTokenURI).call(this, contractAddress, tokenId, networkClientId)),
-        __classPrivateFieldGet(this, _NftController_openSeaEnabled, "f") && chainId === '0x1'
+        __classPrivateFieldGet(this, _NftController_displayNftMedia, "f") && chainId === '0x1'
             ? (0, controller_utils_1.safelyExecute)(() => __classPrivateFieldGet(this, _NftController_instances, "m", _NftController_getNftInformationFromApi).call(this, contractAddress, tokenId))
             : undefined,
     ]);
+    if (blockchainMetadata?.error && nftApiMetadata?.error) {
+        return {
+            image: null,
+            name: null,
+            description: null,
+            standard: blockchainMetadata.standard ?? null,
+            favorite: false,
+            tokenURI: blockchainMetadata.tokenURI ?? null,
+            error: 'Both import failed',
+        };
+    }
     return {
         ...nftApiMetadata,
         name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,
@@ -998,6 +1012,7 @@ async function _NftController_addIndividualNft(tokenAddress, tokenId, nftMetadat
                 tokenId: tokenId.toString(),
                 standard: nftMetadata.standard,
                 source,
+                tokenURI: nftMetadata.tokenURI
             });
         }
     }
diff --git a/node_modules/@metamask/assets-controllers/dist/NftController.d.cts b/node_modules/@metamask/assets-controllers/dist/NftController.d.cts
index 4384784..e35e71c 100644
--- a/node_modules/@metamask/assets-controllers/dist/NftController.d.cts
+++ b/node_modules/@metamask/assets-controllers/dist/NftController.d.cts
@@ -108,6 +108,7 @@ export type NftMetadata = {
     creator?: string;
     transactionId?: string;
     tokenURI?: string | null;
+    error?: string;
     collection?: Collection;
     address?: string;
     attributes?: Attributes[];
diff --git a/node_modules/@metamask/assets-controllers/dist/TokensController.cjs b/node_modules/@metamask/assets-controllers/dist/TokensController.cjs
index 6da824f..07b1c4b 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokensController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokensController.cjs
@@ -13,7 +13,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _TokensController_instances, _TokensController_mutex, _TokensController_chainId, _TokensController_selectedAccountId, _TokensController_provider, _TokensController_abortController, _TokensController_onNetworkDidChange, _TokensController_onNetworkStateChange, _TokensController_onSelectedAccountChange, _TokensController_fetchTokenMetadata, _TokensController_detectIsERC721, _TokensController_getProvider, _TokensController_createEthersContract, _TokensController_generateRandomId, _TokensController_getNewAllTokensState, _TokensController_getAddressOrSelectedAddress, _TokensController_requestApproval, _TokensController_getSelectedAccount, _TokensController_getSelectedAddress;
+var _TokensController_instances, _TokensController_mutex, _TokensController_selectedAccountId, _TokensController_provider, _TokensController_abortController, _TokensController_onNetworkStateChange, _TokensController_onSelectedAccountChange, _TokensController_fetchTokenMetadata, _TokensController_detectIsERC721, _TokensController_getProvider, _TokensController_createEthersContract, _TokensController_generateRandomId, _TokensController_getNewAllTokensState, _TokensController_getAddressOrSelectedAddress, _TokensController_requestApproval, _TokensController_getSelectedAccount, _TokensController_getSelectedAddress;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TokensController = exports.getDefaultTokensState = void 0;
 const contracts_1 = require("@ethersproject/contracts");
@@ -65,7 +65,7 @@ class TokensController extends base_controller_1.BaseController {
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The messenger.
      */
-    constructor({ chainId: initialChainId, provider, state, messenger, }) {
+    constructor({ provider, state, messenger, }) {
         super({
             name: controllerName,
             metadata,
@@ -77,17 +77,14 @@ class TokensController extends base_controller_1.BaseController {
         });
         _TokensController_instances.add(this);
         _TokensController_mutex.set(this, new async_mutex_1.Mutex());
-        _TokensController_chainId.set(this, void 0);
         _TokensController_selectedAccountId.set(this, void 0);
         _TokensController_provider.set(this, void 0);
         _TokensController_abortController.set(this, void 0);
-        __classPrivateFieldSet(this, _TokensController_chainId, initialChainId, "f");
         __classPrivateFieldSet(this, _TokensController_provider, provider, "f");
         __classPrivateFieldSet(this, _TokensController_selectedAccountId, __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAccount).call(this).id, "f");
         __classPrivateFieldSet(this, _TokensController_abortController, new AbortController(), "f");
         this.messagingSystem.registerActionHandler(`${controllerName}:addDetectedTokens`, this.addDetectedTokens.bind(this));
         this.messagingSystem.subscribe('AccountsController:selectedEvmAccountChange', __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_onSelectedAccountChange).bind(this));
-        this.messagingSystem.subscribe('NetworkController:networkDidChange', __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_onNetworkDidChange).bind(this));
         this.messagingSystem.subscribe('NetworkController:stateChange', __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_onNetworkStateChange).bind(this));
         this.messagingSystem.subscribe('TokenListController:stateChange', ({ tokensChainsCache }) => {
             const { allTokens } = this.state;
@@ -131,37 +128,28 @@ class TokensController extends base_controller_1.BaseController {
      * @returns Current token list.
      */
     async addToken({ address, symbol, decimals, name, image, interactingAddress, networkClientId, }) {
-        // TODO: remove this once this method is fully parameterized by chainId
-        const chainId = __classPrivateFieldGet(this, _TokensController_chainId, "f");
         const releaseLock = await __classPrivateFieldGet(this, _TokensController_mutex, "f").acquire();
         const { allTokens, allIgnoredTokens, allDetectedTokens } = this.state;
-        let currentChainId = chainId;
-        if (networkClientId) {
-            currentChainId = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
-        }
+        const chainIdToUse = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
         const accountAddress = __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getAddressOrSelectedAddress).call(this, interactingAddress);
         try {
             address = (0, controller_utils_1.toChecksumHexAddress)(address);
-            const tokens = allTokens[currentChainId]?.[accountAddress] || [];
-            const ignoredTokens = allIgnoredTokens[currentChainId]?.[accountAddress] || [];
-            const detectedTokens = allDetectedTokens[currentChainId]?.[accountAddress] || [];
+            const tokens = allTokens[chainIdToUse]?.[accountAddress] || [];
+            const ignoredTokens = allIgnoredTokens[chainIdToUse]?.[accountAddress] || [];
+            const detectedTokens = allDetectedTokens[chainIdToUse]?.[accountAddress] || [];
             const newTokens = [...tokens];
             const [isERC721, tokenMetadata] = await Promise.all([
                 __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_detectIsERC721).call(this, address, networkClientId),
                 // TODO parameterize the token metadata fetch by networkClientId
-                __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_fetchTokenMetadata).call(this, address),
+                __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_fetchTokenMetadata).call(this, address, chainIdToUse),
             ]);
-            // TODO remove this once this method is fully parameterized by networkClientId
-            if (!networkClientId && currentChainId !== __classPrivateFieldGet(this, _TokensController_chainId, "f")) {
-                throw new Error('TokensController Error: Switched networks while adding token');
-            }
             const newEntry = {
                 address,
                 symbol,
                 decimals,
                 image: image ||
                     (0, assetsUtil_1.formatIconUrlWithProxy)({
-                        chainId: currentChainId,
+                        chainId: chainIdToUse,
                         tokenAddress: address,
                     }),
                 isERC721,
@@ -182,7 +170,7 @@ class TokensController extends base_controller_1.BaseController {
                 newIgnoredTokens,
                 newDetectedTokens,
                 interactingAddress: accountAddress,
-                interactingChainId: currentChainId,
+                interactingChainId: chainIdToUse,
             });
             const newState = {
                 allTokens: newAllTokens,
@@ -208,10 +196,7 @@ class TokensController extends base_controller_1.BaseController {
         const releaseLock = await __classPrivateFieldGet(this, _TokensController_mutex, "f").acquire();
         const { allTokens, allIgnoredTokens, allDetectedTokens } = this.state;
         const importedTokensMap = {};
-        let interactingChainId = __classPrivateFieldGet(this, _TokensController_chainId, "f");
-        if (networkClientId) {
-            interactingChainId = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
-        }
+        const interactingChainId = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
         // Used later to dedupe imported tokens
         const newTokensMap = [
             ...(allTokens[interactingChainId]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAccount).call(this).address] ||
@@ -238,7 +223,7 @@ class TokensController extends base_controller_1.BaseController {
                 return formattedToken;
             });
             const newTokens = Object.values(newTokensMap);
-            const newIgnoredTokens = allIgnoredTokens[interactingChainId ?? __classPrivateFieldGet(this, _TokensController_chainId, "f")]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)]?.filter((tokenAddress) => !newTokensMap[tokenAddress.toLowerCase()]);
+            const newIgnoredTokens = allIgnoredTokens[interactingChainId]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)]?.filter((tokenAddress) => !newTokensMap[tokenAddress.toLowerCase()]);
             const detectedTokensForGivenChain = interactingChainId
                 ? allDetectedTokens?.[interactingChainId]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)]
                 : [];
@@ -266,16 +251,13 @@ class TokensController extends base_controller_1.BaseController {
      * @param networkClientId - Optional network client ID used to determine interacting chain ID.
      */
     ignoreTokens(tokenAddressesToIgnore, networkClientId) {
-        let interactingChainId = __classPrivateFieldGet(this, _TokensController_chainId, "f");
-        if (networkClientId) {
-            interactingChainId = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
-        }
+        const interactingChainId = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
         const { allTokens, allDetectedTokens, allIgnoredTokens } = this.state;
         const ignoredTokensMap = {};
-        const ignoredTokens = allIgnoredTokens[interactingChainId ?? __classPrivateFieldGet(this, _TokensController_chainId, "f")]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)] || [];
+        const ignoredTokens = allIgnoredTokens[interactingChainId]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)] || [];
         let newIgnoredTokens = [...ignoredTokens];
-        const tokens = allTokens[interactingChainId ?? __classPrivateFieldGet(this, _TokensController_chainId, "f")]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)] || [];
-        const detectedTokens = allDetectedTokens[interactingChainId ?? __classPrivateFieldGet(this, _TokensController_chainId, "f")]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)] || [];
+        const tokens = allTokens[interactingChainId]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)] || [];
+        const detectedTokens = allDetectedTokens[interactingChainId]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)] || [];
         const checksummedTokenAddresses = tokenAddressesToIgnore.map((address) => {
             const checksumAddress = (0, controller_utils_1.toChecksumHexAddress)(address);
             ignoredTokensMap[address.toLowerCase()] = true;
@@ -306,7 +288,7 @@ class TokensController extends base_controller_1.BaseController {
      */
     async addDetectedTokens(incomingDetectedTokens, detectionDetails) {
         const releaseLock = await __classPrivateFieldGet(this, _TokensController_mutex, "f").acquire();
-        const chainId = detectionDetails?.chainId ?? __classPrivateFieldGet(this, _TokensController_chainId, "f");
+        const { chainId } = detectionDetails;
         // Previously selectedAddress could be an empty string. This is to preserve the behaviour
         const accountAddress = detectionDetails?.selectedAddress ?? __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this);
         const { allTokens, allDetectedTokens, allIgnoredTokens } = this.state;
@@ -356,9 +338,9 @@ class TokensController extends base_controller_1.BaseController {
             // We may be detecting tokens on a different chain/account pair than are currently configured.
             // Re-point `tokens` and `detectedTokens` to keep them referencing the current chain/account.
             const selectedAddress = __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this);
-            newTokens = newAllTokens?.[__classPrivateFieldGet(this, _TokensController_chainId, "f")]?.[selectedAddress] || [];
+            newTokens = newAllTokens?.[chainId]?.[selectedAddress] || [];
             newDetectedTokens =
-                newAllDetectedTokens?.[__classPrivateFieldGet(this, _TokensController_chainId, "f")]?.[selectedAddress] || [];
+                newAllDetectedTokens?.[chainId]?.[selectedAddress] || [];
             this.update((state) => {
                 state.allTokens = newAllTokens;
                 state.allDetectedTokens = newAllDetectedTokens;
@@ -373,20 +355,21 @@ class TokensController extends base_controller_1.BaseController {
      * were previously added which do not yet had isERC721 field.
      *
      * @param tokenAddress - The contract address of the token requiring the isERC721 field added.
+     * @param networkClientId - The network client ID of the network on which the token is detected.
      * @returns The new token object with the added isERC721 field.
      */
-    async updateTokenType(tokenAddress) {
-        const isERC721 = await __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_detectIsERC721).call(this, tokenAddress);
-        const chainId = __classPrivateFieldGet(this, _TokensController_chainId, "f");
+    async updateTokenType(tokenAddress, networkClientId) {
+        const chainIdToUse = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
+        const isERC721 = await __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_detectIsERC721).call(this, tokenAddress, networkClientId);
         const accountAddress = __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this);
-        const tokens = [...this.state.allTokens[chainId][accountAddress]];
+        const tokens = [...this.state.allTokens[chainIdToUse][accountAddress]];
         const tokenIndex = tokens.findIndex((token) => {
             return token.address.toLowerCase() === tokenAddress.toLowerCase();
         });
         const updatedToken = { ...tokens[tokenIndex], isERC721 };
         tokens[tokenIndex] = updatedToken;
         this.update((state) => {
-            state.allTokens[chainId][accountAddress] = tokens;
+            state.allTokens[chainIdToUse][accountAddress] = tokens;
         });
         return updatedToken;
     }
@@ -511,13 +494,7 @@ class TokensController extends base_controller_1.BaseController {
     }
 }
 exports.TokensController = TokensController;
-_TokensController_mutex = new WeakMap(), _TokensController_chainId = new WeakMap(), _TokensController_selectedAccountId = new WeakMap(), _TokensController_provider = new WeakMap(), _TokensController_abortController = new WeakMap(), _TokensController_instances = new WeakSet(), _TokensController_onNetworkDidChange = function _TokensController_onNetworkDidChange({ selectedNetworkClientId }) {
-    const selectedNetworkClient = this.messagingSystem.call('NetworkController:getNetworkClientById', selectedNetworkClientId);
-    const { chainId } = selectedNetworkClient.configuration;
-    __classPrivateFieldGet(this, _TokensController_abortController, "f").abort();
-    __classPrivateFieldSet(this, _TokensController_abortController, new AbortController(), "f");
-    __classPrivateFieldSet(this, _TokensController_chainId, chainId, "f");
-}, _TokensController_onNetworkStateChange = function _TokensController_onNetworkStateChange(_, patches) {
+_TokensController_mutex = new WeakMap(), _TokensController_selectedAccountId = new WeakMap(), _TokensController_provider = new WeakMap(), _TokensController_abortController = new WeakMap(), _TokensController_instances = new WeakSet(), _TokensController_onNetworkStateChange = function _TokensController_onNetworkStateChange(_, patches) {
     // Remove state for deleted networks
     for (const patch of patches) {
         if (patch.op === 'remove' &&
@@ -537,11 +514,12 @@ _TokensController_mutex = new WeakMap(), _TokensController_chainId = new WeakMap
  * Fetch metadata for a token.
  *
  * @param tokenAddress - The address of the token.
+ * @param chainId - The chain ID of the network on which the token is detected.
  * @returns The token metadata.
  */
-async function _TokensController_fetchTokenMetadata(tokenAddress) {
+async function _TokensController_fetchTokenMetadata(tokenAddress, chainId) {
     try {
-        const token = await (0, token_service_1.fetchTokenMetadata)(__classPrivateFieldGet(this, _TokensController_chainId, "f"), tokenAddress, __classPrivateFieldGet(this, _TokensController_abortController, "f").signal);
+        const token = await (0, token_service_1.fetchTokenMetadata)(chainId, tokenAddress, __classPrivateFieldGet(this, _TokensController_abortController, "f").signal);
         return token;
     }
     catch (error) {
@@ -595,53 +573,52 @@ async function _TokensController_detectIsERC721(tokenAddress, networkClientId) {
     const { newTokens, newIgnoredTokens, newDetectedTokens, interactingAddress, interactingChainId, } = params;
     const { allTokens, allIgnoredTokens, allDetectedTokens } = this.state;
     const userAddressToAddTokens = __classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getAddressOrSelectedAddress).call(this, interactingAddress);
-    const chainIdToAddTokens = interactingChainId ?? __classPrivateFieldGet(this, _TokensController_chainId, "f");
     let newAllTokens = allTokens;
     if (newTokens?.length ||
         (newTokens &&
             allTokens &&
-            allTokens[chainIdToAddTokens] &&
-            allTokens[chainIdToAddTokens][userAddressToAddTokens])) {
-        const networkTokens = allTokens[chainIdToAddTokens];
+            allTokens[interactingChainId] &&
+            allTokens[interactingChainId][userAddressToAddTokens])) {
+        const networkTokens = allTokens[interactingChainId];
         const newNetworkTokens = {
             ...networkTokens,
             ...{ [userAddressToAddTokens]: newTokens },
         };
         newAllTokens = {
             ...allTokens,
-            ...{ [chainIdToAddTokens]: newNetworkTokens },
+            ...{ [interactingChainId]: newNetworkTokens },
         };
     }
     let newAllIgnoredTokens = allIgnoredTokens;
     if (newIgnoredTokens?.length ||
         (newIgnoredTokens &&
             allIgnoredTokens &&
-            allIgnoredTokens[chainIdToAddTokens] &&
-            allIgnoredTokens[chainIdToAddTokens][userAddressToAddTokens])) {
-        const networkIgnoredTokens = allIgnoredTokens[chainIdToAddTokens];
+            allIgnoredTokens[interactingChainId] &&
+            allIgnoredTokens[interactingChainId][userAddressToAddTokens])) {
+        const networkIgnoredTokens = allIgnoredTokens[interactingChainId];
         const newIgnoredNetworkTokens = {
             ...networkIgnoredTokens,
             ...{ [userAddressToAddTokens]: newIgnoredTokens },
         };
         newAllIgnoredTokens = {
             ...allIgnoredTokens,
-            ...{ [chainIdToAddTokens]: newIgnoredNetworkTokens },
+            ...{ [interactingChainId]: newIgnoredNetworkTokens },
         };
     }
     let newAllDetectedTokens = allDetectedTokens;
     if (newDetectedTokens?.length ||
         (newDetectedTokens &&
             allDetectedTokens &&
-            allDetectedTokens[chainIdToAddTokens] &&
-            allDetectedTokens[chainIdToAddTokens][userAddressToAddTokens])) {
-        const networkDetectedTokens = allDetectedTokens[chainIdToAddTokens];
+            allDetectedTokens[interactingChainId] &&
+            allDetectedTokens[interactingChainId][userAddressToAddTokens])) {
+        const networkDetectedTokens = allDetectedTokens[interactingChainId];
         const newDetectedNetworkTokens = {
             ...networkDetectedTokens,
             ...{ [userAddressToAddTokens]: newDetectedTokens },
         };
         newAllDetectedTokens = {
             ...allDetectedTokens,
-            ...{ [chainIdToAddTokens]: newDetectedNetworkTokens },
+            ...{ [interactingChainId]: newDetectedNetworkTokens },
         };
     }
     return { newAllTokens, newAllIgnoredTokens, newAllDetectedTokens };
