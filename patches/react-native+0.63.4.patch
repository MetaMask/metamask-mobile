diff --git a/node_modules/react-native/Libraries/Blob/URL.js b/node_modules/react-native/Libraries/Blob/URL.js
index f2b6f7f..5251c62 100644
--- a/node_modules/react-native/Libraries/Blob/URL.js
+++ b/node_modules/react-native/Libraries/Blob/URL.js
@@ -105,9 +105,10 @@ export class URLSearchParams {
   }
 }
 
+// Patched regex for security fix - https://github.com/facebook/react-native/commit/ca09ae82715e33c9ac77b3fa55495cf84ba891c7
 function validateBaseUrl(url: string) {
   // from this MIT-licensed gist: https://gist.github.com/dperini/729294
-  return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(
+  return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)*(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/.test(
     url,
   );
 }
diff --git a/node_modules/react-native/ReactAndroid/src/androidTest/js/PickerAndroidTestModule.js b/node_modules/react-native/ReactAndroid/src/androidTest/js/PickerAndroidTestModule.js
index a4e0cc0..4f4c9ea 100644
--- a/node_modules/react-native/ReactAndroid/src/androidTest/js/PickerAndroidTestModule.js
+++ b/node_modules/react-native/ReactAndroid/src/androidTest/js/PickerAndroidTestModule.js
@@ -10,7 +10,8 @@
 'use strict';
 
 const React = require('react');
-const {NativeModules, Picker, View} = require('react-native');
+const {NativeModules, View} = require('react-native');
+const {Picker} = require('@react-native-community/picker');
 const BatchedBridge = require('react-native/Libraries/BatchedBridge/BatchedBridge');
 
 const {Recording: RecordingModule} = NativeModules;
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
index d1783a3..351cce0 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
@@ -29,6 +29,7 @@ import android.view.KeyEvent;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.accessibility.AccessibilityNodeInfo;
+import android.view.inputmethod.BaseInputConnection;
 import android.view.inputmethod.EditorInfo;
 import android.view.inputmethod.InputConnection;
 import android.view.inputmethod.InputMethodManager;
@@ -74,6 +75,16 @@ public class ReactEditText extends AppCompatEditText {
   /** A count of events sent to JS or C++. */
   protected int mNativeEventCount;
 
+  /**
+   * Taken from EditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING We can't use that
+   * value directly as it was only added on Oreo, but we can apply the value
+   * anyway.
+   */
+  private static final int IME_FLAG_NO_PERSONALIZED_LEARNING = 0x1000000;
+  /** Samsung Manufacturer Name */
+  private static final String SAMSUNG_MANUFACTURER_NAME = "samsung";
+  /** Samsung Device Check */
+  private static final Boolean IS_SAMSUNG_DEVICE = Build.MANUFACTURER.equals(SAMSUNG_MANUFACTURER_NAME);
   private static final int UNSET = -1;
 
   private @Nullable ArrayList<TextWatcher> mListeners;
@@ -215,16 +226,31 @@ public class ReactEditText extends AppCompatEditText {
   @Override
   public InputConnection onCreateInputConnection(EditorInfo outAttrs) {
     ReactContext reactContext = getReactContext(this);
-    InputConnection inputConnection = super.onCreateInputConnection(outAttrs);
+
+    InputConnection inputConnection;
+    // Don't apply learning flag on Samsung devices. Samsung Keyboards do not support incognito mode.
+    if (IS_SAMSUNG_DEVICE) {
+    	// Default React-Native implementation
+    	inputConnection = super.onCreateInputConnection(outAttrs);
+    	if (isMultiline() && getBlurOnSubmit()) {
+    		// Remove IME_FLAG_NO_ENTER_ACTION to keep the original IME_OPTION
+			outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;
+    	}
+	} else {
+    	inputConnection = new BaseInputConnection(this, false);
+		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+			outAttrs.imeOptions = EditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING;
+		} else {
+			// Cover OS versions below Oreo
+			outAttrs.imeOptions = IME_FLAG_NO_PERSONALIZED_LEARNING;
+		}
+	}
+
     if (inputConnection != null && mOnKeyPress) {
       inputConnection =
           new ReactEditTextInputConnectionWrapper(inputConnection, reactContext, this);
     }
 
-    if (isMultiline() && getBlurOnSubmit()) {
-      // Remove IME_FLAG_NO_ENTER_ACTION to keep the original IME_OPTION
-      outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;
-    }
     return inputConnection;
   }
 
