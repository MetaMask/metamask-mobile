diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.cjs b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.cjs
index 62e634c..f26677a 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.cjs
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.cjs
@@ -10,25 +10,22 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
     return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
 };
-var _WebViewExecutionService_instances, _WebViewExecutionService_getWebView, _WebViewExecutionService_ensureWebViewLoaded;
+var _WebViewExecutionService_createWebView, _WebViewExecutionService_removeWebView;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.WebViewExecutionService = void 0;
+const AbstractExecutionService_1 = require("../AbstractExecutionService.cjs");
 const ProxyExecutionService_1 = require("../proxy/ProxyExecutionService.cjs");
 const WebViewMessageStream_1 = require("./WebViewMessageStream.cjs");
-class WebViewExecutionService extends ProxyExecutionService_1.ProxyExecutionService {
-    constructor({ messenger, setupSnapProvider, getWebView, }) {
+class WebViewExecutionService extends AbstractExecutionService_1.AbstractExecutionService {
+    constructor({ messenger, setupSnapProvider, createWebView, removeWebView, }) {
         super({
             messenger,
             setupSnapProvider,
-            stream: new WebViewMessageStream_1.WebViewMessageStream({
-                name: 'parent',
-                target: 'child',
-                getWebView,
-            }),
         });
-        _WebViewExecutionService_instances.add(this);
-        _WebViewExecutionService_getWebView.set(this, void 0);
-        __classPrivateFieldSet(this, _WebViewExecutionService_getWebView, getWebView, "f");
+        _WebViewExecutionService_createWebView.set(this, void 0);
+        _WebViewExecutionService_removeWebView.set(this, void 0);
+        __classPrivateFieldSet(this, _WebViewExecutionService_createWebView, createWebView, "f");
+        __classPrivateFieldSet(this, _WebViewExecutionService_removeWebView, removeWebView, "f");
     }
     /**
      * Create a new stream for the specified job. This wraps the runtime stream
@@ -38,17 +35,20 @@ class WebViewExecutionService extends ProxyExecutionService_1.ProxyExecutionServ
      * @returns An object with the worker ID and stream.
      */
     async initEnvStream(jobId) {
-        // Ensure that the WebView has been loaded before we proceed.
-        await __classPrivateFieldGet(this, _WebViewExecutionService_instances, "m", _WebViewExecutionService_ensureWebViewLoaded).call(this);
-        return super.initEnvStream(jobId);
+        console.log("Creating WebView...");
+        const webView = await __classPrivateFieldGet(this, _WebViewExecutionService_createWebView, "f").call(this, jobId);
+        console.log(webView);
+        const stream = new WebViewMessageStream_1.WebViewMessageStream({
+            name: 'parent',
+            target: 'child',
+            getWebView: async () => webView,
+        });
+        return { worker: jobId, stream };
+    }
+    terminateJob(jobWrapper) {
+        __classPrivateFieldGet(this, _WebViewExecutionService_removeWebView, "f").call(this, jobWrapper.id);
     }
 }
 exports.WebViewExecutionService = WebViewExecutionService;
-_WebViewExecutionService_getWebView = new WeakMap(), _WebViewExecutionService_instances = new WeakSet(), _WebViewExecutionService_ensureWebViewLoaded = 
-/**
- * Ensure that the WebView has been loaded by awaiting the getWebView promise.
- */
-async function _WebViewExecutionService_ensureWebViewLoaded() {
-    await __classPrivateFieldGet(this, _WebViewExecutionService_getWebView, "f").call(this);
-};
+_WebViewExecutionService_createWebView = new WeakMap(), _WebViewExecutionService_removeWebView = new WeakMap();
 //# sourceMappingURL=WebViewExecutionService.cjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.cjs.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.cjs.map
index 45ad44b..8972226 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.cjs.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewExecutionService.cjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewExecutionService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,8EAAuE;AAEvE,qEAA8D;AAM9D,MAAa,uBAAwB,SAAQ,6CAAqB;IAGhE,YAAY,EACV,SAAS,EACT,iBAAiB,EACjB,UAAU,GACkB;QAC5B,KAAK,CAAC;YACJ,SAAS;YACT,iBAAiB;YACjB,MAAM,EAAE,IAAI,2CAAoB,CAAC;gBAC/B,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,OAAO;gBACf,UAAU;aACX,CAAC;SACH,CAAC,CAAC;;QAfL,sDAAY;QAgBV,uBAAA,IAAI,uCAAe,UAAU,MAAA,CAAC;IAChC,CAAC;IAED;;;;;;OAMG;IACO,KAAK,CAAC,aAAa,CAAC,KAAa;QACzC,6DAA6D;QAC7D,MAAM,uBAAA,IAAI,wFAAqB,MAAzB,IAAI,CAAuB,CAAC;QAElC,OAAO,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;CAQF;AAxCD,0DAwCC;;AANC;;GAEG;AACH,KAAK;IACH,MAAM,uBAAA,IAAI,2CAAY,MAAhB,IAAI,CAAc,CAAC;AAC3B,CAAC","sourcesContent":["import type { ExecutionServiceArgs } from '../AbstractExecutionService';\nimport { ProxyExecutionService } from '../proxy/ProxyExecutionService';\nimport type { WebViewInterface } from './WebViewMessageStream';\nimport { WebViewMessageStream } from './WebViewMessageStream';\n\nexport type WebViewExecutionServiceArgs = ExecutionServiceArgs & {\n  getWebView: () => Promise<WebViewInterface>;\n};\n\nexport class WebViewExecutionService extends ProxyExecutionService {\n  #getWebView;\n\n  constructor({\n    messenger,\n    setupSnapProvider,\n    getWebView,\n  }: WebViewExecutionServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n      stream: new WebViewMessageStream({\n        name: 'parent',\n        target: 'child',\n        getWebView,\n      }),\n    });\n    this.#getWebView = getWebView;\n  }\n\n  /**\n   * Create a new stream for the specified job. This wraps the runtime stream\n   * in a stream specific to the job.\n   *\n   * @param jobId - The job ID.\n   * @returns An object with the worker ID and stream.\n   */\n  protected async initEnvStream(jobId: string) {\n    // Ensure that the WebView has been loaded before we proceed.\n    await this.#ensureWebViewLoaded();\n\n    return super.initEnvStream(jobId);\n  }\n\n  /**\n   * Ensure that the WebView has been loaded by awaiting the getWebView promise.\n   */\n  async #ensureWebViewLoaded() {\n    await this.#getWebView();\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"WebViewExecutionService.cjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewExecutionService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,8EAAoH;AACpH,8EAAuE;AAEvE,qEAA8D;AAO9D,MAAa,uBAAwB,SAAQ,mDAAgC;IAK3E,YAAY,EACV,SAAS,EACT,iBAAiB,EACjB,aAAa,EACb,aAAa,GACe;QAC5B,KAAK,CAAC;YACJ,SAAS;YACT,iBAAiB;SAClB,CAAC,CAAC;QAbL,yDAAe;QAEf,yDAAe;QAYb,uBAAA,IAAI,0CAAkB,aAAa,MAAA,CAAC;QACpC,uBAAA,IAAI,0CAAkB,aAAa,MAAA,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IACO,KAAK,CAAC,aAAa,CAAC,KAAa;QACzC,MAAM,OAAO,GAAG,MAAM,uBAAA,IAAI,8CAAe,MAAnB,IAAI,EAAgB,KAAK,CAAC,CAAC;QAEjD,MAAM,MAAM,GAAG,IAAI,2CAAoB,CAAC;YACtC,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,OAAO;YACf,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC,OAAO;SAChC,CAAC,CAAA;QAEF,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;IACnC,CAAC;IAES,YAAY,CAAC,UAAoC;QACzD,uBAAA,IAAI,8CAAe,MAAnB,IAAI,EAAgB,UAAU,CAAC,EAAE,CAAC,CAAC;IACrC,CAAC;CACF;AAzCD,0DAyCC","sourcesContent":["import { AbstractExecutionService, TerminateJobArgs, type ExecutionServiceArgs } from '../AbstractExecutionService';\nimport { ProxyExecutionService } from '../proxy/ProxyExecutionService';\nimport type { WebViewInterface } from './WebViewMessageStream';\nimport { WebViewMessageStream } from './WebViewMessageStream';\n\nexport type WebViewExecutionServiceArgs = ExecutionServiceArgs & {\n  createWebView: (jobId: string) => Promise<WebViewInterface>;\n  removeWebView: (jobId: string) => void;\n};\n\nexport class WebViewExecutionService extends AbstractExecutionService<string> {\n  #createWebView;\n\n  #removeWebView;\n\n  constructor({\n    messenger,\n    setupSnapProvider,\n    createWebView,\n    removeWebView,\n  }: WebViewExecutionServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n    });\n    this.#createWebView = createWebView;\n    this.#removeWebView = removeWebView;\n  }\n\n  /**\n   * Create a new stream for the specified job. This wraps the runtime stream\n   * in a stream specific to the job.\n   *\n   * @param jobId - The job ID.\n   * @returns An object with the worker ID and stream.\n   */\n  protected async initEnvStream(jobId: string) {\n    const webView = await this.#createWebView(jobId);\n\n    const stream = new WebViewMessageStream({\n      name: 'parent',\n      target: 'child',\n      getWebView: async () => webView,\n    })\n\n    return { worker: jobId, stream };\n  }\n\n  protected terminateJob(jobWrapper: TerminateJobArgs<string>): void {\n    this.#removeWebView(jobWrapper.id);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.cts b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.cts
index 8946c4e..dc59f9d 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.cts
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.cts
@@ -1,12 +1,13 @@
-import type { ExecutionServiceArgs } from "../AbstractExecutionService.cjs";
-import { ProxyExecutionService } from "../proxy/ProxyExecutionService.cjs";
+import { AbstractExecutionService, TerminateJobArgs, type ExecutionServiceArgs } from "../AbstractExecutionService.cjs";
 import type { WebViewInterface } from "./WebViewMessageStream.cjs";
+import { WebViewMessageStream } from "./WebViewMessageStream.cjs";
 export type WebViewExecutionServiceArgs = ExecutionServiceArgs & {
-    getWebView: () => Promise<WebViewInterface>;
+    createWebView: (jobId: string) => Promise<WebViewInterface>;
+    removeWebView: (jobId: string) => void;
 };
-export declare class WebViewExecutionService extends ProxyExecutionService {
+export declare class WebViewExecutionService extends AbstractExecutionService<string> {
     #private;
-    constructor({ messenger, setupSnapProvider, getWebView, }: WebViewExecutionServiceArgs);
+    constructor({ messenger, setupSnapProvider, createWebView, removeWebView, }: WebViewExecutionServiceArgs);
     /**
      * Create a new stream for the specified job. This wraps the runtime stream
      * in a stream specific to the job.
@@ -16,7 +17,8 @@ export declare class WebViewExecutionService extends ProxyExecutionService {
      */
     protected initEnvStream(jobId: string): Promise<{
         worker: string;
-        stream: import("../index.cjs").ProxyPostMessageStream;
+        stream: WebViewMessageStream;
     }>;
+    protected terminateJob(jobWrapper: TerminateJobArgs<string>): void;
 }
 //# sourceMappingURL=WebViewExecutionService.d.cts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.cts.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.cts.map
index c479672..6be3009 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.cts.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewExecutionService.d.cts","sourceRoot":"","sources":["../../../src/services/webview/WebViewExecutionService.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,oBAAoB,EAAE,wCAAoC;AACxE,OAAO,EAAE,qBAAqB,EAAE,2CAAuC;AACvE,OAAO,KAAK,EAAE,gBAAgB,EAAE,mCAA+B;AAG/D,MAAM,MAAM,2BAA2B,GAAG,oBAAoB,GAAG;IAC/D,UAAU,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;CAC7C,CAAC;AAEF,qBAAa,uBAAwB,SAAQ,qBAAqB;;gBAGpD,EACV,SAAS,EACT,iBAAiB,EACjB,UAAU,GACX,EAAE,2BAA2B;IAa9B;;;;;;OAMG;cACa,aAAa,CAAC,KAAK,EAAE,MAAM;;;;CAa5C"}
\ No newline at end of file
+{"version":3,"file":"WebViewExecutionService.d.cts","sourceRoot":"","sources":["../../../src/services/webview/WebViewExecutionService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,gBAAgB,EAAE,KAAK,oBAAoB,EAAE,wCAAoC;AAEpH,OAAO,KAAK,EAAE,gBAAgB,EAAE,mCAA+B;AAC/D,OAAO,EAAE,oBAAoB,EAAE,mCAA+B;AAE9D,MAAM,MAAM,2BAA2B,GAAG,oBAAoB,GAAG;IAC/D,aAAa,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC5D,aAAa,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;CACxC,CAAC;AAEF,qBAAa,uBAAwB,SAAQ,wBAAwB,CAAC,MAAM,CAAC;;gBAK/D,EACV,SAAS,EACT,iBAAiB,EACjB,aAAa,EACb,aAAa,GACd,EAAE,2BAA2B;IAS9B;;;;;;OAMG;cACa,aAAa,CAAC,KAAK,EAAE,MAAM;;;;IAY3C,SAAS,CAAC,YAAY,CAAC,UAAU,EAAE,gBAAgB,CAAC,MAAM,CAAC,GAAG,IAAI;CAGnE"}
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.mts b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.mts
index c02c2ab..f807def 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.mts
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.mts
@@ -1,12 +1,13 @@
-import type { ExecutionServiceArgs } from "../AbstractExecutionService.mjs";
-import { ProxyExecutionService } from "../proxy/ProxyExecutionService.mjs";
+import { AbstractExecutionService, TerminateJobArgs, type ExecutionServiceArgs } from "../AbstractExecutionService.mjs";
 import type { WebViewInterface } from "./WebViewMessageStream.mjs";
+import { WebViewMessageStream } from "./WebViewMessageStream.mjs";
 export type WebViewExecutionServiceArgs = ExecutionServiceArgs & {
-    getWebView: () => Promise<WebViewInterface>;
+    createWebView: (jobId: string) => Promise<WebViewInterface>;
+    removeWebView: (jobId: string) => void;
 };
-export declare class WebViewExecutionService extends ProxyExecutionService {
+export declare class WebViewExecutionService extends AbstractExecutionService<string> {
     #private;
-    constructor({ messenger, setupSnapProvider, getWebView, }: WebViewExecutionServiceArgs);
+    constructor({ messenger, setupSnapProvider, createWebView, removeWebView, }: WebViewExecutionServiceArgs);
     /**
      * Create a new stream for the specified job. This wraps the runtime stream
      * in a stream specific to the job.
@@ -16,7 +17,8 @@ export declare class WebViewExecutionService extends ProxyExecutionService {
      */
     protected initEnvStream(jobId: string): Promise<{
         worker: string;
-        stream: import("../index.mjs").ProxyPostMessageStream;
+        stream: WebViewMessageStream;
     }>;
+    protected terminateJob(jobWrapper: TerminateJobArgs<string>): void;
 }
 //# sourceMappingURL=WebViewExecutionService.d.mts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.mts.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.mts.map
index 19e033b..a88b041 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.mts.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewExecutionService.d.mts","sourceRoot":"","sources":["../../../src/services/webview/WebViewExecutionService.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,oBAAoB,EAAE,wCAAoC;AACxE,OAAO,EAAE,qBAAqB,EAAE,2CAAuC;AACvE,OAAO,KAAK,EAAE,gBAAgB,EAAE,mCAA+B;AAG/D,MAAM,MAAM,2BAA2B,GAAG,oBAAoB,GAAG;IAC/D,UAAU,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;CAC7C,CAAC;AAEF,qBAAa,uBAAwB,SAAQ,qBAAqB;;gBAGpD,EACV,SAAS,EACT,iBAAiB,EACjB,UAAU,GACX,EAAE,2BAA2B;IAa9B;;;;;;OAMG;cACa,aAAa,CAAC,KAAK,EAAE,MAAM;;;;CAa5C"}
\ No newline at end of file
+{"version":3,"file":"WebViewExecutionService.d.mts","sourceRoot":"","sources":["../../../src/services/webview/WebViewExecutionService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,gBAAgB,EAAE,KAAK,oBAAoB,EAAE,wCAAoC;AAEpH,OAAO,KAAK,EAAE,gBAAgB,EAAE,mCAA+B;AAC/D,OAAO,EAAE,oBAAoB,EAAE,mCAA+B;AAE9D,MAAM,MAAM,2BAA2B,GAAG,oBAAoB,GAAG;IAC/D,aAAa,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC5D,aAAa,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;CACxC,CAAC;AAEF,qBAAa,uBAAwB,SAAQ,wBAAwB,CAAC,MAAM,CAAC;;gBAK/D,EACV,SAAS,EACT,iBAAiB,EACjB,aAAa,EACb,aAAa,GACd,EAAE,2BAA2B;IAS9B;;;;;;OAMG;cACa,aAAa,CAAC,KAAK,EAAE,MAAM;;;;IAY3C,SAAS,CAAC,YAAY,CAAC,UAAU,EAAE,gBAAgB,CAAC,MAAM,CAAC,GAAG,IAAI;CAGnE"}
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.mjs b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.mjs
index 3eaf709..78ef20e 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.mjs
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.mjs
@@ -9,23 +9,20 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
     return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
 };
-var _WebViewExecutionService_instances, _WebViewExecutionService_getWebView, _WebViewExecutionService_ensureWebViewLoaded;
+var _WebViewExecutionService_createWebView, _WebViewExecutionService_removeWebView;
+import { AbstractExecutionService, TerminateJobArgs } from "../AbstractExecutionService.mjs";
 import { ProxyExecutionService } from "../proxy/ProxyExecutionService.mjs";
 import { WebViewMessageStream } from "./WebViewMessageStream.mjs";
-export class WebViewExecutionService extends ProxyExecutionService {
-    constructor({ messenger, setupSnapProvider, getWebView, }) {
+export class WebViewExecutionService extends AbstractExecutionService {
+    constructor({ messenger, setupSnapProvider, createWebView, removeWebView, }) {
         super({
             messenger,
             setupSnapProvider,
-            stream: new WebViewMessageStream({
-                name: 'parent',
-                target: 'child',
-                getWebView,
-            }),
         });
-        _WebViewExecutionService_instances.add(this);
-        _WebViewExecutionService_getWebView.set(this, void 0);
-        __classPrivateFieldSet(this, _WebViewExecutionService_getWebView, getWebView, "f");
+        _WebViewExecutionService_createWebView.set(this, void 0);
+        _WebViewExecutionService_removeWebView.set(this, void 0);
+        __classPrivateFieldSet(this, _WebViewExecutionService_createWebView, createWebView, "f");
+        __classPrivateFieldSet(this, _WebViewExecutionService_removeWebView, removeWebView, "f");
     }
     /**
      * Create a new stream for the specified job. This wraps the runtime stream
@@ -35,16 +32,17 @@ export class WebViewExecutionService extends ProxyExecutionService {
      * @returns An object with the worker ID and stream.
      */
     async initEnvStream(jobId) {
-        // Ensure that the WebView has been loaded before we proceed.
-        await __classPrivateFieldGet(this, _WebViewExecutionService_instances, "m", _WebViewExecutionService_ensureWebViewLoaded).call(this);
-        return super.initEnvStream(jobId);
+        const webView = await __classPrivateFieldGet(this, _WebViewExecutionService_createWebView, "f").call(this, jobId);
+        const stream = new WebViewMessageStream({
+            name: 'parent',
+            target: 'child',
+            getWebView: async () => webView,
+        });
+        return { worker: jobId, stream };
+    }
+    terminateJob(jobWrapper) {
+        __classPrivateFieldGet(this, _WebViewExecutionService_removeWebView, "f").call(this, jobWrapper.id);
     }
 }
-_WebViewExecutionService_getWebView = new WeakMap(), _WebViewExecutionService_instances = new WeakSet(), _WebViewExecutionService_ensureWebViewLoaded = 
-/**
- * Ensure that the WebView has been loaded by awaiting the getWebView promise.
- */
-async function _WebViewExecutionService_ensureWebViewLoaded() {
-    await __classPrivateFieldGet(this, _WebViewExecutionService_getWebView, "f").call(this);
-};
+_WebViewExecutionService_createWebView = new WeakMap(), _WebViewExecutionService_removeWebView = new WeakMap();
 //# sourceMappingURL=WebViewExecutionService.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.mjs.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.mjs.map
index 7dde486..2649c55 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.mjs.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewExecutionService.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewExecutionService.mjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewExecutionService.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,OAAO,EAAE,qBAAqB,EAAE,2CAAuC;AAEvE,OAAO,EAAE,oBAAoB,EAAE,mCAA+B;AAM9D,MAAM,OAAO,uBAAwB,SAAQ,qBAAqB;IAGhE,YAAY,EACV,SAAS,EACT,iBAAiB,EACjB,UAAU,GACkB;QAC5B,KAAK,CAAC;YACJ,SAAS;YACT,iBAAiB;YACjB,MAAM,EAAE,IAAI,oBAAoB,CAAC;gBAC/B,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,OAAO;gBACf,UAAU;aACX,CAAC;SACH,CAAC,CAAC;;QAfL,sDAAY;QAgBV,uBAAA,IAAI,uCAAe,UAAU,MAAA,CAAC;IAChC,CAAC;IAED;;;;;;OAMG;IACO,KAAK,CAAC,aAAa,CAAC,KAAa;QACzC,6DAA6D;QAC7D,MAAM,uBAAA,IAAI,wFAAqB,MAAzB,IAAI,CAAuB,CAAC;QAElC,OAAO,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;CAQF;;AANC;;GAEG;AACH,KAAK;IACH,MAAM,uBAAA,IAAI,2CAAY,MAAhB,IAAI,CAAc,CAAC;AAC3B,CAAC","sourcesContent":["import type { ExecutionServiceArgs } from '../AbstractExecutionService';\nimport { ProxyExecutionService } from '../proxy/ProxyExecutionService';\nimport type { WebViewInterface } from './WebViewMessageStream';\nimport { WebViewMessageStream } from './WebViewMessageStream';\n\nexport type WebViewExecutionServiceArgs = ExecutionServiceArgs & {\n  getWebView: () => Promise<WebViewInterface>;\n};\n\nexport class WebViewExecutionService extends ProxyExecutionService {\n  #getWebView;\n\n  constructor({\n    messenger,\n    setupSnapProvider,\n    getWebView,\n  }: WebViewExecutionServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n      stream: new WebViewMessageStream({\n        name: 'parent',\n        target: 'child',\n        getWebView,\n      }),\n    });\n    this.#getWebView = getWebView;\n  }\n\n  /**\n   * Create a new stream for the specified job. This wraps the runtime stream\n   * in a stream specific to the job.\n   *\n   * @param jobId - The job ID.\n   * @returns An object with the worker ID and stream.\n   */\n  protected async initEnvStream(jobId: string) {\n    // Ensure that the WebView has been loaded before we proceed.\n    await this.#ensureWebViewLoaded();\n\n    return super.initEnvStream(jobId);\n  }\n\n  /**\n   * Ensure that the WebView has been loaded by awaiting the getWebView promise.\n   */\n  async #ensureWebViewLoaded() {\n    await this.#getWebView();\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"WebViewExecutionService.mjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewExecutionService.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,wBAAwB,EAAE,gBAAgB,EAA6B,wCAAoC;AACpH,OAAO,EAAE,qBAAqB,EAAE,2CAAuC;AAEvE,OAAO,EAAE,oBAAoB,EAAE,mCAA+B;AAO9D,MAAM,OAAO,uBAAwB,SAAQ,wBAAgC;IAK3E,YAAY,EACV,SAAS,EACT,iBAAiB,EACjB,aAAa,EACb,aAAa,GACe;QAC5B,KAAK,CAAC;YACJ,SAAS;YACT,iBAAiB;SAClB,CAAC,CAAC;QAbL,yDAAe;QAEf,yDAAe;QAYb,uBAAA,IAAI,0CAAkB,aAAa,MAAA,CAAC;QACpC,uBAAA,IAAI,0CAAkB,aAAa,MAAA,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IACO,KAAK,CAAC,aAAa,CAAC,KAAa;QACzC,MAAM,OAAO,GAAG,MAAM,uBAAA,IAAI,8CAAe,MAAnB,IAAI,EAAgB,KAAK,CAAC,CAAC;QAEjD,MAAM,MAAM,GAAG,IAAI,oBAAoB,CAAC;YACtC,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,OAAO;YACf,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC,OAAO;SAChC,CAAC,CAAA;QAEF,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;IACnC,CAAC;IAES,YAAY,CAAC,UAAoC;QACzD,uBAAA,IAAI,8CAAe,MAAnB,IAAI,EAAgB,UAAU,CAAC,EAAE,CAAC,CAAC;IACrC,CAAC;CACF","sourcesContent":["import { AbstractExecutionService, TerminateJobArgs, type ExecutionServiceArgs } from '../AbstractExecutionService';\nimport { ProxyExecutionService } from '../proxy/ProxyExecutionService';\nimport type { WebViewInterface } from './WebViewMessageStream';\nimport { WebViewMessageStream } from './WebViewMessageStream';\n\nexport type WebViewExecutionServiceArgs = ExecutionServiceArgs & {\n  createWebView: (jobId: string) => Promise<WebViewInterface>;\n  removeWebView: (jobId: string) => void;\n};\n\nexport class WebViewExecutionService extends AbstractExecutionService<string> {\n  #createWebView;\n\n  #removeWebView;\n\n  constructor({\n    messenger,\n    setupSnapProvider,\n    createWebView,\n    removeWebView,\n  }: WebViewExecutionServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n    });\n    this.#createWebView = createWebView;\n    this.#removeWebView = removeWebView;\n  }\n\n  /**\n   * Create a new stream for the specified job. This wraps the runtime stream\n   * in a stream specific to the job.\n   *\n   * @param jobId - The job ID.\n   * @returns An object with the worker ID and stream.\n   */\n  protected async initEnvStream(jobId: string) {\n    const webView = await this.#createWebView(jobId);\n\n    const stream = new WebViewMessageStream({\n      name: 'parent',\n      target: 'child',\n      getWebView: async () => webView,\n    })\n\n    return { worker: jobId, stream };\n  }\n\n  protected terminateJob(jobWrapper: TerminateJobArgs<string>): void {\n    this.#removeWebView(jobWrapper.id);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs
index f3a4420..9f33415 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs
@@ -58,12 +58,10 @@ class WebViewMessageStream extends post_message_stream_1.BasePostMessageStream {
             target: __classPrivateFieldGet(this, _WebViewMessageStream_target, "f"),
             data,
         });
-        // To prevent XSS, we base64 encode the message before injecting it.
-        // This adds significant performance overhead.
-        // TODO: Should we use mobile native base64 here?
-        const bytes = (0, utils_2.stringToBytes)(json);
-        const base64 = (0, utils_2.bytesToBase64)(bytes);
-        __classPrivateFieldGet(this, _WebViewMessageStream_webView, "f").injectJavaScript(`window.postMessage('${base64}')`);
+        // To prevent XSS, we encode the message before injecting it.
+        // This adds significant performance overhead for larger messages.
+        const bytes = new Uint8Array((0, utils_2.stringToBytes)(json));
+        __classPrivateFieldGet(this, _WebViewMessageStream_webView, "f").injectJavaScript(`window.postMessage([${bytes.toString()}])`);
     }
     _onMessage(event) {
         if (typeof event.data !== 'string') {
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs.map
index fe8c118..51c3bed 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewMessageStream.cjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,uEAAsE;AACtE,uEAAgF;AAChF,uDAAiD;AACjD,2CAAuE;AAcvE;;GAEG;AACH,MAAa,oBAAqB,SAAQ,2CAAqB;IAO7D;;;;;;;;OAQG;IACH,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAqB;QACzD,KAAK,EAAE,CAAC;QAhBV,6CAAM;QAEN,+CAAQ;QAER,gDAAuC;QAcrC,uBAAA,IAAI,8BAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,gCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,0DAA0D;QAC1D,yFAAyF;QACzF,UAAU,EAAE;aACT,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,uBAAA,IAAI,iCAAY,OAAO,MAAA,CAAC;YACxB,gCAAgC;YAChC,6DAA6D;YAC7D,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,IAAA,sBAAQ,EAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,IAAA,cAAM,EAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1B,MAAM,EAAE,uBAAA,IAAI,oCAAQ;YACpB,IAAI;SACL,CAAC,CAAC;QAEH,oEAAoE;QACpE,8CAA8C;QAC9C,iDAAiD;QACjD,MAAM,KAAK,GAAG,IAAA,qBAAa,EAAC,IAAI,CAAC,CAAC;QAClC,MAAM,MAAM,GAAG,IAAA,qBAAa,EAAC,KAAK,CAAC,CAAC;QACpC,uBAAA,IAAI,qCAAS,CAAC,gBAAgB,CAAC,uBAAuB,MAAM,IAAI,CAAC,CAAC;IACpE,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEvC,gEAAgE;QAChE,0CAA0C;QAC1C,IAAI,CAAC,IAAA,4BAAoB,EAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,uBAAA,IAAI,kCAAM,EAAE,CAAC;YACpE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ;QACN,IAAA,cAAM,EAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,gCAAgC;QAChC,6DAA6D;QAC7D,uBAAA,IAAI,qCAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;CACF;AA5ED,oDA4EC","sourcesContent":["import type { PostMessageEvent } from '@metamask/post-message-stream';\nimport { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { isValidStreamMessage } from '@metamask/post-message-stream/dist/utils';\nimport { logError } from '@metamask/snaps-utils';\nimport { assert, bytesToBase64, stringToBytes } from '@metamask/utils';\n\nexport type WebViewInterface = {\n  injectJavaScript(js: string): void;\n  registerMessageListener(listener: (event: PostMessageEvent) => void): void;\n  unregisterMessageListener(listener: (event: PostMessageEvent) => void): void;\n};\n\nexport type WebViewStreamArgs = {\n  name: string;\n  target: string;\n  getWebView: () => Promise<WebViewInterface>;\n};\n\n/**\n * A special postMessage stream used to interface with a WebView.\n */\nexport class WebViewMessageStream extends BasePostMessageStream {\n  #name;\n\n  #target;\n\n  #webView: WebViewInterface | undefined;\n\n  /**\n   * Creates a stream for communicating with other streams inside a WebView.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.getWebView - A asynchronous getter for the webview.\n   */\n  constructor({ name, target, getWebView }: WebViewStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n\n    this._onMessage = this._onMessage.bind(this);\n\n    // This is a bit atypical from other post-message streams.\n    // We have to wait for the WebView to fully load before we can continue using the stream.\n    getWebView()\n      .then((webView) => {\n        this.#webView = webView;\n        // This method is already bound.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        webView.registerMessageListener(this._onMessage);\n        this._handshake();\n      })\n      .catch((error) => {\n        logError(error);\n      });\n  }\n\n  protected _postMessage(data: unknown): void {\n    assert(this.#webView);\n    const json = JSON.stringify({\n      target: this.#target,\n      data,\n    });\n\n    // To prevent XSS, we base64 encode the message before injecting it.\n    // This adds significant performance overhead.\n    // TODO: Should we use mobile native base64 here?\n    const bytes = stringToBytes(json);\n    const base64 = bytesToBase64(bytes);\n    this.#webView.injectJavaScript(`window.postMessage('${base64}')`);\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    const message = JSON.parse(event.data);\n\n    // Notice that we don't check targetWindow or targetOrigin here.\n    // This doesn't seem possible to do in RN.\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    assert(this.#webView);\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.#webView.unregisterMessageListener(this._onMessage);\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"WebViewMessageStream.cjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,uEAAsE;AACtE,uEAAgF;AAChF,uDAAiD;AACjD,2CAAwD;AAcxD;;GAEG;AACH,MAAa,oBAAqB,SAAQ,2CAAqB;IAO7D;;;;;;;;OAQG;IACH,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAqB;QACzD,KAAK,EAAE,CAAC;QAhBV,6CAAM;QAEN,+CAAQ;QAER,gDAAuC;QAcrC,uBAAA,IAAI,8BAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,gCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,0DAA0D;QAC1D,yFAAyF;QACzF,UAAU,EAAE;aACT,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,uBAAA,IAAI,iCAAY,OAAO,MAAA,CAAC;YACxB,gCAAgC;YAChC,6DAA6D;YAC7D,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,IAAA,sBAAQ,EAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,IAAA,cAAM,EAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1B,MAAM,EAAE,uBAAA,IAAI,oCAAQ;YACpB,IAAI;SACL,CAAC,CAAC;QAEH,6DAA6D;QAC7D,kEAAkE;QAClE,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,IAAA,qBAAa,EAAC,IAAI,CAAC,CAAC,CAAC;QAElD,uBAAA,IAAI,qCAAS,CAAC,gBAAgB,CAAC,uBAAuB,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC9E,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEvC,gEAAgE;QAChE,0CAA0C;QAC1C,IAAI,CAAC,IAAA,4BAAoB,EAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,uBAAA,IAAI,kCAAM,EAAE,CAAC;YACpE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ;QACN,IAAA,cAAM,EAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,gCAAgC;QAChC,6DAA6D;QAC7D,uBAAA,IAAI,qCAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;CACF;AA3ED,oDA2EC","sourcesContent":["import type { PostMessageEvent } from '@metamask/post-message-stream';\nimport { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { isValidStreamMessage } from '@metamask/post-message-stream/dist/utils';\nimport { logError } from '@metamask/snaps-utils';\nimport { assert, stringToBytes } from '@metamask/utils';\n\nexport type WebViewInterface = {\n  injectJavaScript(js: string): void;\n  registerMessageListener(listener: (event: PostMessageEvent) => void): void;\n  unregisterMessageListener(listener: (event: PostMessageEvent) => void): void;\n};\n\nexport type WebViewStreamArgs = {\n  name: string;\n  target: string;\n  getWebView: () => Promise<WebViewInterface>;\n};\n\n/**\n * A special postMessage stream used to interface with a WebView.\n */\nexport class WebViewMessageStream extends BasePostMessageStream {\n  #name;\n\n  #target;\n\n  #webView: WebViewInterface | undefined;\n\n  /**\n   * Creates a stream for communicating with other streams inside a WebView.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.getWebView - A asynchronous getter for the webview.\n   */\n  constructor({ name, target, getWebView }: WebViewStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n\n    this._onMessage = this._onMessage.bind(this);\n\n    // This is a bit atypical from other post-message streams.\n    // We have to wait for the WebView to fully load before we can continue using the stream.\n    getWebView()\n      .then((webView) => {\n        this.#webView = webView;\n        // This method is already bound.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        webView.registerMessageListener(this._onMessage);\n        this._handshake();\n      })\n      .catch((error) => {\n        logError(error);\n      });\n  }\n\n  protected _postMessage(data: unknown): void {\n    assert(this.#webView);\n    const json = JSON.stringify({\n      target: this.#target,\n      data,\n    });\n\n    // To prevent XSS, we encode the message before injecting it.\n    // This adds significant performance overhead for larger messages.\n    const bytes = new Uint8Array(stringToBytes(json));\n\n    this.#webView.injectJavaScript(`window.postMessage([${bytes.toString()}])`);\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    const message = JSON.parse(event.data);\n\n    // Notice that we don't check targetWindow or targetOrigin here.\n    // This doesn't seem possible to do in RN.\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    assert(this.#webView);\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.#webView.unregisterMessageListener(this._onMessage);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.cts.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.cts.map
index fa9f2e2..140252a 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.cts.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewMessageStream.d.cts","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gBAAgB,EAAE,sCAAsC;AACtE,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AAKtE,MAAM,MAAM,gBAAgB,GAAG;IAC7B,gBAAgB,CAAC,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC;IACnC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;IAC3E,yBAAyB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;CAC9E,CAAC;AAEF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,qBAAa,oBAAqB,SAAQ,qBAAqB;;IAO7D;;;;;;;;OAQG;gBACS,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,iBAAiB;IAuB3D,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,GAAG,IAAI;IAe3C,OAAO,CAAC,UAAU;IAgBlB,QAAQ;CAMT"}
\ No newline at end of file
+{"version":3,"file":"WebViewMessageStream.d.cts","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gBAAgB,EAAE,sCAAsC;AACtE,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AAKtE,MAAM,MAAM,gBAAgB,GAAG;IAC7B,gBAAgB,CAAC,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC;IACnC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;IAC3E,yBAAyB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;CAC9E,CAAC;AAEF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,qBAAa,oBAAqB,SAAQ,qBAAqB;;IAO7D;;;;;;;;OAQG;gBACS,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,iBAAiB;IAuB3D,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,GAAG,IAAI;IAc3C,OAAO,CAAC,UAAU;IAgBlB,QAAQ;CAMT"}
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.mts.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.mts.map
index fdbb752..042e6c9 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.mts.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewMessageStream.d.mts","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gBAAgB,EAAE,sCAAsC;AACtE,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AAKtE,MAAM,MAAM,gBAAgB,GAAG;IAC7B,gBAAgB,CAAC,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC;IACnC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;IAC3E,yBAAyB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;CAC9E,CAAC;AAEF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,qBAAa,oBAAqB,SAAQ,qBAAqB;;IAO7D;;;;;;;;OAQG;gBACS,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,iBAAiB;IAuB3D,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,GAAG,IAAI;IAe3C,OAAO,CAAC,UAAU;IAgBlB,QAAQ;CAMT"}
\ No newline at end of file
+{"version":3,"file":"WebViewMessageStream.d.mts","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gBAAgB,EAAE,sCAAsC;AACtE,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AAKtE,MAAM,MAAM,gBAAgB,GAAG;IAC7B,gBAAgB,CAAC,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC;IACnC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;IAC3E,yBAAyB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;CAC9E,CAAC;AAEF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,qBAAa,oBAAqB,SAAQ,qBAAqB;;IAO7D;;;;;;;;OAQG;gBACS,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,iBAAiB;IAuB3D,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,GAAG,IAAI;IAc3C,OAAO,CAAC,UAAU;IAgBlB,QAAQ;CAMT"}
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs
index 08dc415..607a513 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs
@@ -13,7 +13,7 @@ var _WebViewMessageStream_name, _WebViewMessageStream_target, _WebViewMessageStr
 import { BasePostMessageStream } from "@metamask/post-message-stream";
 import { isValidStreamMessage } from "@metamask/post-message-stream/dist/utils.js";
 import { logError } from "@metamask/snaps-utils";
-import { assert, bytesToBase64, stringToBytes } from "@metamask/utils";
+import { assert, stringToBytes } from "@metamask/utils";
 /**
  * A special postMessage stream used to interface with a WebView.
  */
@@ -55,12 +55,10 @@ export class WebViewMessageStream extends BasePostMessageStream {
             target: __classPrivateFieldGet(this, _WebViewMessageStream_target, "f"),
             data,
         });
-        // To prevent XSS, we base64 encode the message before injecting it.
-        // This adds significant performance overhead.
-        // TODO: Should we use mobile native base64 here?
-        const bytes = stringToBytes(json);
-        const base64 = bytesToBase64(bytes);
-        __classPrivateFieldGet(this, _WebViewMessageStream_webView, "f").injectJavaScript(`window.postMessage('${base64}')`);
+        // To prevent XSS, we encode the message before injecting it.
+        // This adds significant performance overhead for larger messages.
+        const bytes = new Uint8Array(stringToBytes(json));
+        __classPrivateFieldGet(this, _WebViewMessageStream_webView, "f").injectJavaScript(`window.postMessage([${bytes.toString()}])`);
     }
     _onMessage(event) {
         if (typeof event.data !== 'string') {
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs.map
index fc68cf5..1c44637 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewMessageStream.mjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AACtE,OAAO,EAAE,oBAAoB,EAAE,oDAAiD;AAChF,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,aAAa,EAAE,wBAAwB;AAcvE;;GAEG;AACH,MAAM,OAAO,oBAAqB,SAAQ,qBAAqB;IAO7D;;;;;;;;OAQG;IACH,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAqB;QACzD,KAAK,EAAE,CAAC;QAhBV,6CAAM;QAEN,+CAAQ;QAER,gDAAuC;QAcrC,uBAAA,IAAI,8BAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,gCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,0DAA0D;QAC1D,yFAAyF;QACzF,UAAU,EAAE;aACT,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,uBAAA,IAAI,iCAAY,OAAO,MAAA,CAAC;YACxB,gCAAgC;YAChC,6DAA6D;YAC7D,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,MAAM,CAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1B,MAAM,EAAE,uBAAA,IAAI,oCAAQ;YACpB,IAAI;SACL,CAAC,CAAC;QAEH,oEAAoE;QACpE,8CAA8C;QAC9C,iDAAiD;QACjD,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;QAClC,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;QACpC,uBAAA,IAAI,qCAAS,CAAC,gBAAgB,CAAC,uBAAuB,MAAM,IAAI,CAAC,CAAC;IACpE,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEvC,gEAAgE;QAChE,0CAA0C;QAC1C,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,uBAAA,IAAI,kCAAM,EAAE,CAAC;YACpE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ;QACN,MAAM,CAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,gCAAgC;QAChC,6DAA6D;QAC7D,uBAAA,IAAI,qCAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;CACF","sourcesContent":["import type { PostMessageEvent } from '@metamask/post-message-stream';\nimport { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { isValidStreamMessage } from '@metamask/post-message-stream/dist/utils';\nimport { logError } from '@metamask/snaps-utils';\nimport { assert, bytesToBase64, stringToBytes } from '@metamask/utils';\n\nexport type WebViewInterface = {\n  injectJavaScript(js: string): void;\n  registerMessageListener(listener: (event: PostMessageEvent) => void): void;\n  unregisterMessageListener(listener: (event: PostMessageEvent) => void): void;\n};\n\nexport type WebViewStreamArgs = {\n  name: string;\n  target: string;\n  getWebView: () => Promise<WebViewInterface>;\n};\n\n/**\n * A special postMessage stream used to interface with a WebView.\n */\nexport class WebViewMessageStream extends BasePostMessageStream {\n  #name;\n\n  #target;\n\n  #webView: WebViewInterface | undefined;\n\n  /**\n   * Creates a stream for communicating with other streams inside a WebView.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.getWebView - A asynchronous getter for the webview.\n   */\n  constructor({ name, target, getWebView }: WebViewStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n\n    this._onMessage = this._onMessage.bind(this);\n\n    // This is a bit atypical from other post-message streams.\n    // We have to wait for the WebView to fully load before we can continue using the stream.\n    getWebView()\n      .then((webView) => {\n        this.#webView = webView;\n        // This method is already bound.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        webView.registerMessageListener(this._onMessage);\n        this._handshake();\n      })\n      .catch((error) => {\n        logError(error);\n      });\n  }\n\n  protected _postMessage(data: unknown): void {\n    assert(this.#webView);\n    const json = JSON.stringify({\n      target: this.#target,\n      data,\n    });\n\n    // To prevent XSS, we base64 encode the message before injecting it.\n    // This adds significant performance overhead.\n    // TODO: Should we use mobile native base64 here?\n    const bytes = stringToBytes(json);\n    const base64 = bytesToBase64(bytes);\n    this.#webView.injectJavaScript(`window.postMessage('${base64}')`);\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    const message = JSON.parse(event.data);\n\n    // Notice that we don't check targetWindow or targetOrigin here.\n    // This doesn't seem possible to do in RN.\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    assert(this.#webView);\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.#webView.unregisterMessageListener(this._onMessage);\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"WebViewMessageStream.mjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AACtE,OAAO,EAAE,oBAAoB,EAAE,oDAAiD;AAChF,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,wBAAwB;AAcxD;;GAEG;AACH,MAAM,OAAO,oBAAqB,SAAQ,qBAAqB;IAO7D;;;;;;;;OAQG;IACH,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAqB;QACzD,KAAK,EAAE,CAAC;QAhBV,6CAAM;QAEN,+CAAQ;QAER,gDAAuC;QAcrC,uBAAA,IAAI,8BAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,gCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,0DAA0D;QAC1D,yFAAyF;QACzF,UAAU,EAAE;aACT,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,uBAAA,IAAI,iCAAY,OAAO,MAAA,CAAC;YACxB,gCAAgC;YAChC,6DAA6D;YAC7D,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,MAAM,CAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1B,MAAM,EAAE,uBAAA,IAAI,oCAAQ;YACpB,IAAI;SACL,CAAC,CAAC;QAEH,6DAA6D;QAC7D,kEAAkE;QAClE,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QAElD,uBAAA,IAAI,qCAAS,CAAC,gBAAgB,CAAC,uBAAuB,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC9E,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEvC,gEAAgE;QAChE,0CAA0C;QAC1C,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,uBAAA,IAAI,kCAAM,EAAE,CAAC;YACpE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ;QACN,MAAM,CAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,gCAAgC;QAChC,6DAA6D;QAC7D,uBAAA,IAAI,qCAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;CACF","sourcesContent":["import type { PostMessageEvent } from '@metamask/post-message-stream';\nimport { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { isValidStreamMessage } from '@metamask/post-message-stream/dist/utils';\nimport { logError } from '@metamask/snaps-utils';\nimport { assert, stringToBytes } from '@metamask/utils';\n\nexport type WebViewInterface = {\n  injectJavaScript(js: string): void;\n  registerMessageListener(listener: (event: PostMessageEvent) => void): void;\n  unregisterMessageListener(listener: (event: PostMessageEvent) => void): void;\n};\n\nexport type WebViewStreamArgs = {\n  name: string;\n  target: string;\n  getWebView: () => Promise<WebViewInterface>;\n};\n\n/**\n * A special postMessage stream used to interface with a WebView.\n */\nexport class WebViewMessageStream extends BasePostMessageStream {\n  #name;\n\n  #target;\n\n  #webView: WebViewInterface | undefined;\n\n  /**\n   * Creates a stream for communicating with other streams inside a WebView.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.getWebView - A asynchronous getter for the webview.\n   */\n  constructor({ name, target, getWebView }: WebViewStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n\n    this._onMessage = this._onMessage.bind(this);\n\n    // This is a bit atypical from other post-message streams.\n    // We have to wait for the WebView to fully load before we can continue using the stream.\n    getWebView()\n      .then((webView) => {\n        this.#webView = webView;\n        // This method is already bound.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        webView.registerMessageListener(this._onMessage);\n        this._handshake();\n      })\n      .catch((error) => {\n        logError(error);\n      });\n  }\n\n  protected _postMessage(data: unknown): void {\n    assert(this.#webView);\n    const json = JSON.stringify({\n      target: this.#target,\n      data,\n    });\n\n    // To prevent XSS, we encode the message before injecting it.\n    // This adds significant performance overhead for larger messages.\n    const bytes = new Uint8Array(stringToBytes(json));\n\n    this.#webView.injectJavaScript(`window.postMessage([${bytes.toString()}])`);\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    const message = JSON.parse(event.data);\n\n    // Notice that we don't check targetWindow or targetOrigin here.\n    // This doesn't seem possible to do in RN.\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    assert(this.#webView);\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.#webView.unregisterMessageListener(this._onMessage);\n  }\n}\n"]}
\ No newline at end of file
