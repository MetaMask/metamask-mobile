diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs
index f3a4420..0b7ca60 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs
@@ -58,12 +58,8 @@ class WebViewMessageStream extends post_message_stream_1.BasePostMessageStream {
             target: __classPrivateFieldGet(this, _WebViewMessageStream_target, "f"),
             data,
         });
-        // To prevent XSS, we base64 encode the message before injecting it.
-        // This adds significant performance overhead.
-        // TODO: Should we use mobile native base64 here?
-        const bytes = (0, utils_2.stringToBytes)(json);
-        const base64 = (0, utils_2.bytesToBase64)(bytes);
-        __classPrivateFieldGet(this, _WebViewMessageStream_webView, "f").injectJavaScript(`window.postMessage('${base64}')`);
+        const bytes = new Uint8Array((0, utils_2.stringToBytes)(json));
+        __classPrivateFieldGet(this, _WebViewMessageStream_webView, "f").injectJavaScript(`window.postMessage([${bytes.toString()}])`);
     }
     _onMessage(event) {
         if (typeof event.data !== 'string') {
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs.map
index fe8c118..9a338ed 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewMessageStream.cjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,uEAAsE;AACtE,uEAAgF;AAChF,uDAAiD;AACjD,2CAAuE;AAcvE;;GAEG;AACH,MAAa,oBAAqB,SAAQ,2CAAqB;IAO7D;;;;;;;;OAQG;IACH,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAqB;QACzD,KAAK,EAAE,CAAC;QAhBV,6CAAM;QAEN,+CAAQ;QAER,gDAAuC;QAcrC,uBAAA,IAAI,8BAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,gCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,0DAA0D;QAC1D,yFAAyF;QACzF,UAAU,EAAE;aACT,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,uBAAA,IAAI,iCAAY,OAAO,MAAA,CAAC;YACxB,gCAAgC;YAChC,6DAA6D;YAC7D,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,IAAA,sBAAQ,EAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,IAAA,cAAM,EAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1B,MAAM,EAAE,uBAAA,IAAI,oCAAQ;YACpB,IAAI;SACL,CAAC,CAAC;QAEH,oEAAoE;QACpE,8CAA8C;QAC9C,iDAAiD;QACjD,MAAM,KAAK,GAAG,IAAA,qBAAa,EAAC,IAAI,CAAC,CAAC;QAClC,MAAM,MAAM,GAAG,IAAA,qBAAa,EAAC,KAAK,CAAC,CAAC;QACpC,uBAAA,IAAI,qCAAS,CAAC,gBAAgB,CAAC,uBAAuB,MAAM,IAAI,CAAC,CAAC;IACpE,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEvC,gEAAgE;QAChE,0CAA0C;QAC1C,IAAI,CAAC,IAAA,4BAAoB,EAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,uBAAA,IAAI,kCAAM,EAAE,CAAC;YACpE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ;QACN,IAAA,cAAM,EAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,gCAAgC;QAChC,6DAA6D;QAC7D,uBAAA,IAAI,qCAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;CACF;AA5ED,oDA4EC","sourcesContent":["import type { PostMessageEvent } from '@metamask/post-message-stream';\nimport { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { isValidStreamMessage } from '@metamask/post-message-stream/dist/utils';\nimport { logError } from '@metamask/snaps-utils';\nimport { assert, bytesToBase64, stringToBytes } from '@metamask/utils';\n\nexport type WebViewInterface = {\n  injectJavaScript(js: string): void;\n  registerMessageListener(listener: (event: PostMessageEvent) => void): void;\n  unregisterMessageListener(listener: (event: PostMessageEvent) => void): void;\n};\n\nexport type WebViewStreamArgs = {\n  name: string;\n  target: string;\n  getWebView: () => Promise<WebViewInterface>;\n};\n\n/**\n * A special postMessage stream used to interface with a WebView.\n */\nexport class WebViewMessageStream extends BasePostMessageStream {\n  #name;\n\n  #target;\n\n  #webView: WebViewInterface | undefined;\n\n  /**\n   * Creates a stream for communicating with other streams inside a WebView.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.getWebView - A asynchronous getter for the webview.\n   */\n  constructor({ name, target, getWebView }: WebViewStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n\n    this._onMessage = this._onMessage.bind(this);\n\n    // This is a bit atypical from other post-message streams.\n    // We have to wait for the WebView to fully load before we can continue using the stream.\n    getWebView()\n      .then((webView) => {\n        this.#webView = webView;\n        // This method is already bound.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        webView.registerMessageListener(this._onMessage);\n        this._handshake();\n      })\n      .catch((error) => {\n        logError(error);\n      });\n  }\n\n  protected _postMessage(data: unknown): void {\n    assert(this.#webView);\n    const json = JSON.stringify({\n      target: this.#target,\n      data,\n    });\n\n    // To prevent XSS, we base64 encode the message before injecting it.\n    // This adds significant performance overhead.\n    // TODO: Should we use mobile native base64 here?\n    const bytes = stringToBytes(json);\n    const base64 = bytesToBase64(bytes);\n    this.#webView.injectJavaScript(`window.postMessage('${base64}')`);\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    const message = JSON.parse(event.data);\n\n    // Notice that we don't check targetWindow or targetOrigin here.\n    // This doesn't seem possible to do in RN.\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    assert(this.#webView);\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.#webView.unregisterMessageListener(this._onMessage);\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"WebViewMessageStream.cjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,uEAAsE;AACtE,uEAAgF;AAChF,uDAAiD;AACjD,2CAAwD;AAcxD;;GAEG;AACH,MAAa,oBAAqB,SAAQ,2CAAqB;IAO7D;;;;;;;;OAQG;IACH,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAqB;QACzD,KAAK,EAAE,CAAC;QAhBV,6CAAM;QAEN,+CAAQ;QAER,gDAAuC;QAcrC,uBAAA,IAAI,8BAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,gCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,0DAA0D;QAC1D,yFAAyF;QACzF,UAAU,EAAE;aACT,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,uBAAA,IAAI,iCAAY,OAAO,MAAA,CAAC;YACxB,gCAAgC;YAChC,6DAA6D;YAC7D,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,IAAA,sBAAQ,EAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,IAAA,cAAM,EAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1B,MAAM,EAAE,uBAAA,IAAI,oCAAQ;YACpB,IAAI;SACL,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,IAAA,qBAAa,EAAC,IAAI,CAAC,CAAC,CAAC;QAElD,uBAAA,IAAI,qCAAS,CAAC,gBAAgB,CAAC,uBAAuB,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC9E,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEvC,gEAAgE;QAChE,0CAA0C;QAC1C,IAAI,CAAC,IAAA,4BAAoB,EAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,uBAAA,IAAI,kCAAM,EAAE,CAAC;YACpE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ;QACN,IAAA,cAAM,EAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,gCAAgC;QAChC,6DAA6D;QAC7D,uBAAA,IAAI,qCAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;CACF;AAzED,oDAyEC","sourcesContent":["import type { PostMessageEvent } from '@metamask/post-message-stream';\nimport { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { isValidStreamMessage } from '@metamask/post-message-stream/dist/utils';\nimport { logError } from '@metamask/snaps-utils';\nimport { assert, stringToBytes } from '@metamask/utils';\n\nexport type WebViewInterface = {\n  injectJavaScript(js: string): void;\n  registerMessageListener(listener: (event: PostMessageEvent) => void): void;\n  unregisterMessageListener(listener: (event: PostMessageEvent) => void): void;\n};\n\nexport type WebViewStreamArgs = {\n  name: string;\n  target: string;\n  getWebView: () => Promise<WebViewInterface>;\n};\n\n/**\n * A special postMessage stream used to interface with a WebView.\n */\nexport class WebViewMessageStream extends BasePostMessageStream {\n  #name;\n\n  #target;\n\n  #webView: WebViewInterface | undefined;\n\n  /**\n   * Creates a stream for communicating with other streams inside a WebView.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.getWebView - A asynchronous getter for the webview.\n   */\n  constructor({ name, target, getWebView }: WebViewStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n\n    this._onMessage = this._onMessage.bind(this);\n\n    // This is a bit atypical from other post-message streams.\n    // We have to wait for the WebView to fully load before we can continue using the stream.\n    getWebView()\n      .then((webView) => {\n        this.#webView = webView;\n        // This method is already bound.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        webView.registerMessageListener(this._onMessage);\n        this._handshake();\n      })\n      .catch((error) => {\n        logError(error);\n      });\n  }\n\n  protected _postMessage(data: unknown): void {\n    assert(this.#webView);\n    const json = JSON.stringify({\n      target: this.#target,\n      data,\n    });\n\n    const bytes = new Uint8Array(stringToBytes(json));\n\n    this.#webView.injectJavaScript(`window.postMessage([${bytes.toString()}])`);\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    const message = JSON.parse(event.data);\n\n    // Notice that we don't check targetWindow or targetOrigin here.\n    // This doesn't seem possible to do in RN.\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    assert(this.#webView);\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.#webView.unregisterMessageListener(this._onMessage);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.cts.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.cts.map
index fa9f2e2..13a1199 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.cts.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewMessageStream.d.cts","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gBAAgB,EAAE,sCAAsC;AACtE,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AAKtE,MAAM,MAAM,gBAAgB,GAAG;IAC7B,gBAAgB,CAAC,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC;IACnC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;IAC3E,yBAAyB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;CAC9E,CAAC;AAEF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,qBAAa,oBAAqB,SAAQ,qBAAqB;;IAO7D;;;;;;;;OAQG;gBACS,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,iBAAiB;IAuB3D,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,GAAG,IAAI;IAe3C,OAAO,CAAC,UAAU;IAgBlB,QAAQ;CAMT"}
\ No newline at end of file
+{"version":3,"file":"WebViewMessageStream.d.cts","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gBAAgB,EAAE,sCAAsC;AACtE,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AAKtE,MAAM,MAAM,gBAAgB,GAAG;IAC7B,gBAAgB,CAAC,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC;IACnC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;IAC3E,yBAAyB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;CAC9E,CAAC;AAEF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,qBAAa,oBAAqB,SAAQ,qBAAqB;;IAO7D;;;;;;;;OAQG;gBACS,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,iBAAiB;IAuB3D,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,GAAG,IAAI;IAY3C,OAAO,CAAC,UAAU;IAgBlB,QAAQ;CAMT"}
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.mts.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.mts.map
index fdbb752..b8e8498 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.mts.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewMessageStream.d.mts","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gBAAgB,EAAE,sCAAsC;AACtE,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AAKtE,MAAM,MAAM,gBAAgB,GAAG;IAC7B,gBAAgB,CAAC,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC;IACnC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;IAC3E,yBAAyB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;CAC9E,CAAC;AAEF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,qBAAa,oBAAqB,SAAQ,qBAAqB;;IAO7D;;;;;;;;OAQG;gBACS,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,iBAAiB;IAuB3D,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,GAAG,IAAI;IAe3C,OAAO,CAAC,UAAU;IAgBlB,QAAQ;CAMT"}
\ No newline at end of file
+{"version":3,"file":"WebViewMessageStream.d.mts","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gBAAgB,EAAE,sCAAsC;AACtE,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AAKtE,MAAM,MAAM,gBAAgB,GAAG;IAC7B,gBAAgB,CAAC,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC;IACnC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;IAC3E,yBAAyB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;CAC9E,CAAC;AAEF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,qBAAa,oBAAqB,SAAQ,qBAAqB;;IAO7D;;;;;;;;OAQG;gBACS,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,iBAAiB;IAuB3D,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,GAAG,IAAI;IAY3C,OAAO,CAAC,UAAU;IAgBlB,QAAQ;CAMT"}
\ No newline at end of file
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs
index 08dc415..93daafc 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs
@@ -13,7 +13,7 @@ var _WebViewMessageStream_name, _WebViewMessageStream_target, _WebViewMessageStr
 import { BasePostMessageStream } from "@metamask/post-message-stream";
 import { isValidStreamMessage } from "@metamask/post-message-stream/dist/utils.js";
 import { logError } from "@metamask/snaps-utils";
-import { assert, bytesToBase64, stringToBytes } from "@metamask/utils";
+import { assert, stringToBytes } from "@metamask/utils";
 /**
  * A special postMessage stream used to interface with a WebView.
  */
@@ -55,12 +55,8 @@ export class WebViewMessageStream extends BasePostMessageStream {
             target: __classPrivateFieldGet(this, _WebViewMessageStream_target, "f"),
             data,
         });
-        // To prevent XSS, we base64 encode the message before injecting it.
-        // This adds significant performance overhead.
-        // TODO: Should we use mobile native base64 here?
-        const bytes = stringToBytes(json);
-        const base64 = bytesToBase64(bytes);
-        __classPrivateFieldGet(this, _WebViewMessageStream_webView, "f").injectJavaScript(`window.postMessage('${base64}')`);
+        const bytes = new Uint8Array(stringToBytes(json));
+        __classPrivateFieldGet(this, _WebViewMessageStream_webView, "f").injectJavaScript(`window.postMessage([${bytes.toString()}])`);
     }
     _onMessage(event) {
         if (typeof event.data !== 'string') {
diff --git a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs.map b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs.map
index fc68cf5..ce575ae 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs.map
+++ b/node_modules/@metamask/snaps-controllers/dist/services/webview/WebViewMessageStream.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"WebViewMessageStream.mjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AACtE,OAAO,EAAE,oBAAoB,EAAE,oDAAiD;AAChF,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,aAAa,EAAE,wBAAwB;AAcvE;;GAEG;AACH,MAAM,OAAO,oBAAqB,SAAQ,qBAAqB;IAO7D;;;;;;;;OAQG;IACH,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAqB;QACzD,KAAK,EAAE,CAAC;QAhBV,6CAAM;QAEN,+CAAQ;QAER,gDAAuC;QAcrC,uBAAA,IAAI,8BAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,gCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,0DAA0D;QAC1D,yFAAyF;QACzF,UAAU,EAAE;aACT,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,uBAAA,IAAI,iCAAY,OAAO,MAAA,CAAC;YACxB,gCAAgC;YAChC,6DAA6D;YAC7D,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,MAAM,CAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1B,MAAM,EAAE,uBAAA,IAAI,oCAAQ;YACpB,IAAI;SACL,CAAC,CAAC;QAEH,oEAAoE;QACpE,8CAA8C;QAC9C,iDAAiD;QACjD,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;QAClC,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;QACpC,uBAAA,IAAI,qCAAS,CAAC,gBAAgB,CAAC,uBAAuB,MAAM,IAAI,CAAC,CAAC;IACpE,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEvC,gEAAgE;QAChE,0CAA0C;QAC1C,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,uBAAA,IAAI,kCAAM,EAAE,CAAC;YACpE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ;QACN,MAAM,CAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,gCAAgC;QAChC,6DAA6D;QAC7D,uBAAA,IAAI,qCAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;CACF","sourcesContent":["import type { PostMessageEvent } from '@metamask/post-message-stream';\nimport { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { isValidStreamMessage } from '@metamask/post-message-stream/dist/utils';\nimport { logError } from '@metamask/snaps-utils';\nimport { assert, bytesToBase64, stringToBytes } from '@metamask/utils';\n\nexport type WebViewInterface = {\n  injectJavaScript(js: string): void;\n  registerMessageListener(listener: (event: PostMessageEvent) => void): void;\n  unregisterMessageListener(listener: (event: PostMessageEvent) => void): void;\n};\n\nexport type WebViewStreamArgs = {\n  name: string;\n  target: string;\n  getWebView: () => Promise<WebViewInterface>;\n};\n\n/**\n * A special postMessage stream used to interface with a WebView.\n */\nexport class WebViewMessageStream extends BasePostMessageStream {\n  #name;\n\n  #target;\n\n  #webView: WebViewInterface | undefined;\n\n  /**\n   * Creates a stream for communicating with other streams inside a WebView.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.getWebView - A asynchronous getter for the webview.\n   */\n  constructor({ name, target, getWebView }: WebViewStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n\n    this._onMessage = this._onMessage.bind(this);\n\n    // This is a bit atypical from other post-message streams.\n    // We have to wait for the WebView to fully load before we can continue using the stream.\n    getWebView()\n      .then((webView) => {\n        this.#webView = webView;\n        // This method is already bound.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        webView.registerMessageListener(this._onMessage);\n        this._handshake();\n      })\n      .catch((error) => {\n        logError(error);\n      });\n  }\n\n  protected _postMessage(data: unknown): void {\n    assert(this.#webView);\n    const json = JSON.stringify({\n      target: this.#target,\n      data,\n    });\n\n    // To prevent XSS, we base64 encode the message before injecting it.\n    // This adds significant performance overhead.\n    // TODO: Should we use mobile native base64 here?\n    const bytes = stringToBytes(json);\n    const base64 = bytesToBase64(bytes);\n    this.#webView.injectJavaScript(`window.postMessage('${base64}')`);\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    const message = JSON.parse(event.data);\n\n    // Notice that we don't check targetWindow or targetOrigin here.\n    // This doesn't seem possible to do in RN.\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    assert(this.#webView);\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.#webView.unregisterMessageListener(this._onMessage);\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"WebViewMessageStream.mjs","sourceRoot":"","sources":["../../../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,OAAO,EAAE,qBAAqB,EAAE,sCAAsC;AACtE,OAAO,EAAE,oBAAoB,EAAE,oDAAiD;AAChF,OAAO,EAAE,QAAQ,EAAE,8BAA8B;AACjD,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,wBAAwB;AAcxD;;GAEG;AACH,MAAM,OAAO,oBAAqB,SAAQ,qBAAqB;IAO7D;;;;;;;;OAQG;IACH,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAqB;QACzD,KAAK,EAAE,CAAC;QAhBV,6CAAM;QAEN,+CAAQ;QAER,gDAAuC;QAcrC,uBAAA,IAAI,8BAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,gCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,0DAA0D;QAC1D,yFAAyF;QACzF,UAAU,EAAE;aACT,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,uBAAA,IAAI,iCAAY,OAAO,MAAA,CAAC;YACxB,gCAAgC;YAChC,6DAA6D;YAC7D,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,MAAM,CAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1B,MAAM,EAAE,uBAAA,IAAI,oCAAQ;YACpB,IAAI;SACL,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QAElD,uBAAA,IAAI,qCAAS,CAAC,gBAAgB,CAAC,uBAAuB,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC9E,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEvC,gEAAgE;QAChE,0CAA0C;QAC1C,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,uBAAA,IAAI,kCAAM,EAAE,CAAC;YACpE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ;QACN,MAAM,CAAC,uBAAA,IAAI,qCAAS,CAAC,CAAC;QACtB,gCAAgC;QAChC,6DAA6D;QAC7D,uBAAA,IAAI,qCAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;CACF","sourcesContent":["import type { PostMessageEvent } from '@metamask/post-message-stream';\nimport { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { isValidStreamMessage } from '@metamask/post-message-stream/dist/utils';\nimport { logError } from '@metamask/snaps-utils';\nimport { assert, stringToBytes } from '@metamask/utils';\n\nexport type WebViewInterface = {\n  injectJavaScript(js: string): void;\n  registerMessageListener(listener: (event: PostMessageEvent) => void): void;\n  unregisterMessageListener(listener: (event: PostMessageEvent) => void): void;\n};\n\nexport type WebViewStreamArgs = {\n  name: string;\n  target: string;\n  getWebView: () => Promise<WebViewInterface>;\n};\n\n/**\n * A special postMessage stream used to interface with a WebView.\n */\nexport class WebViewMessageStream extends BasePostMessageStream {\n  #name;\n\n  #target;\n\n  #webView: WebViewInterface | undefined;\n\n  /**\n   * Creates a stream for communicating with other streams inside a WebView.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.getWebView - A asynchronous getter for the webview.\n   */\n  constructor({ name, target, getWebView }: WebViewStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n\n    this._onMessage = this._onMessage.bind(this);\n\n    // This is a bit atypical from other post-message streams.\n    // We have to wait for the WebView to fully load before we can continue using the stream.\n    getWebView()\n      .then((webView) => {\n        this.#webView = webView;\n        // This method is already bound.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        webView.registerMessageListener(this._onMessage);\n        this._handshake();\n      })\n      .catch((error) => {\n        logError(error);\n      });\n  }\n\n  protected _postMessage(data: unknown): void {\n    assert(this.#webView);\n    const json = JSON.stringify({\n      target: this.#target,\n      data,\n    });\n\n    const bytes = new Uint8Array(stringToBytes(json));\n\n    this.#webView.injectJavaScript(`window.postMessage([${bytes.toString()}])`);\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    const message = JSON.parse(event.data);\n\n    // Notice that we don't check targetWindow or targetOrigin here.\n    // This doesn't seem possible to do in RN.\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    assert(this.#webView);\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.#webView.unregisterMessageListener(this._onMessage);\n  }\n}\n"]}
\ No newline at end of file
