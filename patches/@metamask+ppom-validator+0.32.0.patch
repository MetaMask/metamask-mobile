diff --git a/node_modules/@metamask/ppom-validator/dist/ppom-controller.js b/node_modules/@metamask/ppom-validator/dist/ppom-controller.js
index 9cf1502..b74a350 100644
--- a/node_modules/@metamask/ppom-validator/dist/ppom-controller.js
+++ b/node_modules/@metamask/ppom-validator/dist/ppom-controller.js
@@ -84,7 +84,7 @@ class PPOMController extends base_controller_1.BaseControllerV2 {
      * This is useful to leverage faster native crypto implementation on devices.
      * @returns The PPOMController instance.
      */
-    constructor({ chainId, messenger, provider, storageBackend, securityAlertsEnabled, onPreferencesChange, ppomProvider, cdnBaseUrl, providerRequestLimit, state, blockaidPublicKey, nativeCrypto, }) {
+    constructor({ chainId, messenger, provider, storageBackend, securityAlertsEnabled, onPreferencesChange, ppomProvider, cdnBaseUrl, providerRequestLimit, state, blockaidPublicKey, nativeCrypto, getNetworkClientById}) {
         const initialState = {
             versionInfo: state?.versionInfo ?? [],
             storageMetadata: state?.storageMetadata ?? [],
@@ -120,6 +120,10 @@ class PPOMController extends base_controller_1.BaseControllerV2 {
         _PPOMController_blockaidPublicKey.set(this, void 0);
         _PPOMController_ppomInitialised.set(this, false);
         _PPOMController_nativeCrypto.set(this, undefined);
+
+        // _PPOMController_getNetworkClientById.set(this, undefined);
+
+
         __classPrivateFieldSet(this, _PPOMController_chainId, (0, util_1.addHexPrefix)(chainId), "f");
         __classPrivateFieldSet(this, _PPOMController_provider, provider, "f");
         __classPrivateFieldSet(this, _PPOMController_ppomProvider, ppomProvider, "f");
@@ -140,6 +144,13 @@ class PPOMController extends base_controller_1.BaseControllerV2 {
         __classPrivateFieldSet(this, _PPOMController_securityAlertsEnabled, securityAlertsEnabled, "f");
         __classPrivateFieldSet(this, _PPOMController_blockaidPublicKey, blockaidPublicKey, "f");
         __classPrivateFieldSet(this, _PPOMController_nativeCrypto, nativeCrypto, "f");
+
+
+
+        // __classPrivateFieldSet(this, _PPOMController_getNetworkClientById, getNetworkClientById, "f");
+
+
+
         // enable / disable PPOM validations as user changes preferences
         onPreferencesChange(__classPrivateFieldGet(this, _PPOMController_instances, "m", _PPOMController_onPreferenceChange).bind(this));
         // register message handlers
@@ -177,6 +188,18 @@ class PPOMController extends base_controller_1.BaseControllerV2 {
     }
 }
 exports.PPOMController = PPOMController;
+const getCurrentNetwork = (networkControllerState) => {
+      const configurations = Object.values(networkControllerState.networkConfigurations);
+      if (configurations.length === 0) {
+          console.warn("No network configurations available.");
+      } else {
+          const currentNetwork = getCurrentNetwork(networkControllerState);
+          if (currentNetwork && currentNetwork.chainId) {
+          } else {
+              console.error("Current network or chainId is undefined.");
+          }
+      }
+    };
 _PPOMController_ppom = new WeakMap(), _PPOMController_provider = new WeakMap(), _PPOMController_storage = new WeakMap(), _PPOMController_ppomMutex = new WeakMap(), _PPOMController_ppomProvider = new WeakMap(), _PPOMController_cdnBaseUrl = new WeakMap(), _PPOMController_providerRequestLimit = new WeakMap(), _PPOMController_providerRequests = new WeakMap(), _PPOMController_chainId = new WeakMap(), _PPOMController_securityAlertsEnabled = new WeakMap(), _PPOMController_providerRequestsCount = new WeakMap(), _PPOMController_blockaidPublicKey = new WeakMap(), _PPOMController_ppomInitialised = new WeakMap(), _PPOMController_nativeCrypto = new WeakMap(), _PPOMController_instances = new WeakSet(), _PPOMController_initialisePPOM =
 /*
  * Initialise PPOM loading wasm file.
@@ -203,7 +226,10 @@ async function _PPOMController_initialisePPOM() {
         console.error(`Error in deleting files: ${error.message}`);
     });
 }, _PPOMController_onNetworkChange = function _PPOMController_onNetworkChange(networkControllerState) {
-    const id = (0, util_1.addHexPrefix)(networkControllerState.providerConfig.chainId);
+  const selectedNetworkClient = this.messagingSystem.call('NetworkController:getNetworkClientById', networkControllerState.selectedNetworkClientId);
+  const { chainId } = selectedNetworkClient.configuration;
+
+  const id = (0, util_1.addHexPrefix)(chainId);
     if (id === __classPrivateFieldGet(this, _PPOMController_chainId, "f")) {
         return;
     }
