diff --git a/node_modules/@metamask/transaction-controller/dist/.patch.txt b/node_modules/@metamask/transaction-controller/dist/.patch.txt
new file mode 100644
index 0000000..550de56
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/.patch.txt
@@ -0,0 +1,7 @@
+PATCH GENERATED FROM MetaMask/core branch: patch/mobile-transaction-controller-13-0-0-smart-transactions
+This patch backports various transaction controller features from the main branch of MetaMask/core
+Steps to update patch:
+* Create a new core branch from: patch/mobile-transaction-controller-13-0-0-smart-transactions
+* Run "yarn build" in the core monorepo
+* Run "yarn patch:tx <core-directory>" in the mobile repo
+* Once the new patch is merged, add your changes to: patch/mobile-transaction-controller-13-0-0-smart-transactions
diff --git a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts.map b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts.map
deleted file mode 100644
index 9a28bf5..0000000
--- a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"EtherscanRemoteTransactionSource.d.ts","sourceRoot":"","sources":["../src/EtherscanRemoteTransactionSource.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAiB3C,OAAO,KAAK,EACV,uBAAuB,EACvB,8BAA8B,EAC9B,eAAe,EAChB,MAAM,SAAS,CAAC;AAGjB;;GAEG;AACH,qBAAa,gCACX,YAAW,uBAAuB;;gBAMtB,EACV,qBAAqB,GACtB,GAAE;QAAE,qBAAqB,CAAC,EAAE,OAAO,CAAA;KAAO;IAK3C,kBAAkB,CAAC,OAAO,EAAE,GAAG,GAAG,OAAO;IAIzC,sBAAsB,IAAI,MAAM,EAAE;IAI5B,iBAAiB,CACrB,OAAO,EAAE,8BAA8B,GACtC,OAAO,CAAC,eAAe,EAAE,CAAC;CAkI9B"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js
deleted file mode 100644
index c03d191..0000000
--- a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js
+++ /dev/null
@@ -1,122 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _EtherscanRemoteTransactionSource_instances, _EtherscanRemoteTransactionSource_includeTokenTransfers, _EtherscanRemoteTransactionSource_isTokenRequestPending, _EtherscanRemoteTransactionSource_fetchNormalTransactions, _EtherscanRemoteTransactionSource_fetchTokenTransactions, _EtherscanRemoteTransactionSource_getResponseTransactions, _EtherscanRemoteTransactionSource_normalizeTransaction, _EtherscanRemoteTransactionSource_normalizeTokenTransaction, _EtherscanRemoteTransactionSource_normalizeTransactionBase;
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.EtherscanRemoteTransactionSource = void 0;
-const controller_utils_1 = require("@metamask/controller-utils");
-const ethereumjs_util_1 = require("ethereumjs-util");
-const uuid_1 = require("uuid");
-const constants_1 = require("./constants");
-const etherscan_1 = require("./etherscan");
-const logger_1 = require("./logger");
-const types_1 = require("./types");
-/**
- * A RemoteTransactionSource that fetches transaction data from Etherscan.
- */
-class EtherscanRemoteTransactionSource {
-    constructor({ includeTokenTransfers, } = {}) {
-        _EtherscanRemoteTransactionSource_instances.add(this);
-        _EtherscanRemoteTransactionSource_includeTokenTransfers.set(this, void 0);
-        _EtherscanRemoteTransactionSource_isTokenRequestPending.set(this, void 0);
-        _EtherscanRemoteTransactionSource_fetchNormalTransactions.set(this, (request, etherscanRequest) => __awaiter(this, void 0, void 0, function* () {
-            const { currentChainId } = request;
-            const etherscanTransactions = yield (0, etherscan_1.fetchEtherscanTransactions)(etherscanRequest);
-            return __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_getResponseTransactions).call(this, etherscanTransactions).map((tx) => __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransaction).call(this, tx, currentChainId));
-        }));
-        _EtherscanRemoteTransactionSource_fetchTokenTransactions.set(this, (request, etherscanRequest) => __awaiter(this, void 0, void 0, function* () {
-            const { currentChainId } = request;
-            const etherscanTransactions = yield (0, etherscan_1.fetchEtherscanTokenTransactions)(etherscanRequest);
-            return __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_getResponseTransactions).call(this, etherscanTransactions).map((tx) => __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTokenTransaction).call(this, tx, currentChainId));
-        }));
-        __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_includeTokenTransfers, includeTokenTransfers !== null && includeTokenTransfers !== void 0 ? includeTokenTransfers : true, "f");
-        __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, false, "f");
-    }
-    isSupportedNetwork(chainId) {
-        return Object.keys(constants_1.ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);
-    }
-    getLastBlockVariations() {
-        return [__classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f") ? 'token' : 'normal'];
-    }
-    fetchTransactions(request) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const etherscanRequest = Object.assign(Object.assign({}, request), { chainId: request.currentChainId });
-            const transactions = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f")
-                ? yield __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_fetchTokenTransactions, "f").call(this, request, etherscanRequest)
-                : yield __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_fetchNormalTransactions, "f").call(this, request, etherscanRequest);
-            if (__classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_includeTokenTransfers, "f")) {
-                __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, !__classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f"), "f");
-            }
-            return transactions;
-        });
-    }
-}
-exports.EtherscanRemoteTransactionSource = EtherscanRemoteTransactionSource;
-_EtherscanRemoteTransactionSource_includeTokenTransfers = new WeakMap(), _EtherscanRemoteTransactionSource_isTokenRequestPending = new WeakMap(), _EtherscanRemoteTransactionSource_fetchNormalTransactions = new WeakMap(), _EtherscanRemoteTransactionSource_fetchTokenTransactions = new WeakMap(), _EtherscanRemoteTransactionSource_instances = new WeakSet(), _EtherscanRemoteTransactionSource_getResponseTransactions = function _EtherscanRemoteTransactionSource_getResponseTransactions(response) {
-    let result = response.result;
-    if (response.status === '0') {
-        result = [];
-        if (response.result.length) {
-            (0, logger_1.incomingTransactionsLogger)('Ignored Etherscan request error', {
-                message: response.result,
-                type: __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f") ? 'token' : 'normal',
-            });
-        }
-    }
-    return result;
-}, _EtherscanRemoteTransactionSource_normalizeTransaction = function _EtherscanRemoteTransactionSource_normalizeTransaction(txMeta, currentChainId) {
-    const base = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransactionBase).call(this, txMeta, currentChainId);
-    return Object.assign(Object.assign(Object.assign({}, base), { txParams: Object.assign(Object.assign({}, base.txParams), { data: txMeta.input }) }), (txMeta.isError === '0'
-        ? { status: types_1.TransactionStatus.confirmed }
-        : {
-            error: new Error('Transaction failed'),
-            status: types_1.TransactionStatus.failed,
-        }));
-}, _EtherscanRemoteTransactionSource_normalizeTokenTransaction = function _EtherscanRemoteTransactionSource_normalizeTokenTransaction(txMeta, currentChainId) {
-    const base = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransactionBase).call(this, txMeta, currentChainId);
-    return Object.assign(Object.assign({}, base), { isTransfer: true, transferInformation: {
-            contractAddress: txMeta.contractAddress,
-            decimals: Number(txMeta.tokenDecimal),
-            symbol: txMeta.tokenSymbol,
-        } });
-}, _EtherscanRemoteTransactionSource_normalizeTransactionBase = function _EtherscanRemoteTransactionSource_normalizeTransactionBase(txMeta, currentChainId) {
-    const time = parseInt(txMeta.timeStamp, 10) * 1000;
-    return {
-        blockNumber: txMeta.blockNumber,
-        chainId: currentChainId,
-        hash: txMeta.hash,
-        id: (0, uuid_1.v1)({ msecs: time }),
-        status: types_1.TransactionStatus.confirmed,
-        time,
-        txParams: {
-            chainId: currentChainId,
-            from: txMeta.from,
-            gas: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gas)),
-            gasPrice: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasPrice)),
-            gasUsed: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasUsed)),
-            nonce: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.nonce)),
-            to: txMeta.to,
-            value: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.value)),
-        },
-        verifiedOnBlockchain: false,
-    };
-};
-//# sourceMappingURL=EtherscanRemoteTransactionSource.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js.map b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js.map
deleted file mode 100644
index 4b10444..0000000
--- a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"EtherscanRemoteTransactionSource.js","sourceRoot":"","sources":["../src/EtherscanRemoteTransactionSource.ts"],"names":[],"mappings":"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","sourcesContent":["import { BNToHex } from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\nimport { BN } from 'ethereumjs-util';\nimport { v1 as random } from 'uuid';\n\nimport { ETHERSCAN_SUPPORTED_NETWORKS } from './constants';\nimport type {\n  EtherscanTokenTransactionMeta,\n  EtherscanTransactionMeta,\n  EtherscanTransactionMetaBase,\n  EtherscanTransactionRequest,\n  EtherscanTransactionResponse,\n} from './etherscan';\nimport {\n  fetchEtherscanTokenTransactions,\n  fetchEtherscanTransactions,\n} from './etherscan';\nimport { incomingTransactionsLogger as log } from './logger';\nimport type {\n  RemoteTransactionSource,\n  RemoteTransactionSourceRequest,\n  TransactionMeta,\n} from './types';\nimport { TransactionStatus } from './types';\n\n/**\n * A RemoteTransactionSource that fetches transaction data from Etherscan.\n */\nexport class EtherscanRemoteTransactionSource\n  implements RemoteTransactionSource\n{\n  #includeTokenTransfers: boolean;\n\n  #isTokenRequestPending: boolean;\n\n  constructor({\n    includeTokenTransfers,\n  }: { includeTokenTransfers?: boolean } = {}) {\n    this.#includeTokenTransfers = includeTokenTransfers ?? true;\n    this.#isTokenRequestPending = false;\n  }\n\n  isSupportedNetwork(chainId: Hex): boolean {\n    return Object.keys(ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);\n  }\n\n  getLastBlockVariations(): string[] {\n    return [this.#isTokenRequestPending ? 'token' : 'normal'];\n  }\n\n  async fetchTransactions(\n    request: RemoteTransactionSourceRequest,\n  ): Promise<TransactionMeta[]> {\n    const etherscanRequest: EtherscanTransactionRequest = {\n      ...request,\n      chainId: request.currentChainId,\n    };\n\n    const transactions = this.#isTokenRequestPending\n      ? await this.#fetchTokenTransactions(request, etherscanRequest)\n      : await this.#fetchNormalTransactions(request, etherscanRequest);\n\n    if (this.#includeTokenTransfers) {\n      this.#isTokenRequestPending = !this.#isTokenRequestPending;\n    }\n\n    return transactions;\n  }\n\n  #fetchNormalTransactions = async (\n    request: RemoteTransactionSourceRequest,\n    etherscanRequest: EtherscanTransactionRequest,\n  ) => {\n    const { currentChainId } = request;\n\n    const etherscanTransactions = await fetchEtherscanTransactions(\n      etherscanRequest,\n    );\n\n    return this.#getResponseTransactions(etherscanTransactions).map((tx) =>\n      this.#normalizeTransaction(tx, currentChainId),\n    );\n  };\n\n  #fetchTokenTransactions = async (\n    request: RemoteTransactionSourceRequest,\n    etherscanRequest: EtherscanTransactionRequest,\n  ) => {\n    const { currentChainId } = request;\n\n    const etherscanTransactions = await fetchEtherscanTokenTransactions(\n      etherscanRequest,\n    );\n\n    return this.#getResponseTransactions(etherscanTransactions).map((tx) =>\n      this.#normalizeTokenTransaction(tx, currentChainId),\n    );\n  };\n\n  #getResponseTransactions<T extends EtherscanTransactionMetaBase>(\n    response: EtherscanTransactionResponse<T>,\n  ): T[] {\n    let result = response.result as T[];\n\n    if (response.status === '0') {\n      result = [];\n\n      if (response.result.length) {\n        log('Ignored Etherscan request error', {\n          message: response.result,\n          type: this.#isTokenRequestPending ? 'token' : 'normal',\n        });\n      }\n    }\n\n    return result;\n  }\n\n  #normalizeTransaction(\n    txMeta: EtherscanTransactionMeta,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const base = this.#normalizeTransactionBase(txMeta, currentChainId);\n\n    return {\n      ...base,\n      txParams: {\n        ...base.txParams,\n        data: txMeta.input,\n      },\n      ...(txMeta.isError === '0'\n        ? { status: TransactionStatus.confirmed }\n        : {\n            error: new Error('Transaction failed'),\n            status: TransactionStatus.failed,\n          }),\n    };\n  }\n\n  #normalizeTokenTransaction(\n    txMeta: EtherscanTokenTransactionMeta,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const base = this.#normalizeTransactionBase(txMeta, currentChainId);\n\n    return {\n      ...base,\n      isTransfer: true,\n      transferInformation: {\n        contractAddress: txMeta.contractAddress,\n        decimals: Number(txMeta.tokenDecimal),\n        symbol: txMeta.tokenSymbol,\n      },\n    };\n  }\n\n  #normalizeTransactionBase(\n    txMeta: EtherscanTransactionMetaBase,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const time = parseInt(txMeta.timeStamp, 10) * 1000;\n\n    return {\n      blockNumber: txMeta.blockNumber,\n      chainId: currentChainId,\n      hash: txMeta.hash,\n      id: random({ msecs: time }),\n      status: TransactionStatus.confirmed,\n      time,\n      txParams: {\n        chainId: currentChainId,\n        from: txMeta.from,\n        gas: BNToHex(new BN(txMeta.gas)),\n        gasPrice: BNToHex(new BN(txMeta.gasPrice)),\n        gasUsed: BNToHex(new BN(txMeta.gasUsed)),\n        nonce: BNToHex(new BN(txMeta.nonce)),\n        to: txMeta.to,\n        value: BNToHex(new BN(txMeta.value)),\n      },\n      verifiedOnBlockchain: false,\n    };\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts
deleted file mode 100644
index 076111c..0000000
--- a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-/// <reference types="node" />
-import type { BlockTracker, NetworkState } from '@metamask/network-controller';
-import type { Hex } from '@metamask/utils';
-import EventEmitter from 'events';
-import type { RemoteTransactionSource, TransactionMeta } from './types';
-export declare class IncomingTransactionHelper {
-    #private;
-    hub: EventEmitter;
-    constructor({ blockTracker, getCurrentAccount, getLastFetchedBlockNumbers, getLocalTransactions, getNetworkState, isEnabled, queryEntireHistory, remoteTransactionSource, transactionLimit, updateTransactions, }: {
-        blockTracker: BlockTracker;
-        getCurrentAccount: () => string;
-        getLastFetchedBlockNumbers: () => Record<string, number>;
-        getLocalTransactions?: () => TransactionMeta[];
-        getNetworkState: () => NetworkState;
-        isEnabled?: () => boolean;
-        queryEntireHistory?: boolean;
-        remoteTransactionSource: RemoteTransactionSource;
-        transactionLimit?: number;
-        updateTransactions?: boolean;
-    });
-    start(): void;
-    stop(): void;
-    update(latestBlockNumberHex?: Hex): Promise<void>;
-}
-//# sourceMappingURL=IncomingTransactionHelper.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts.map b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts.map
deleted file mode 100644
index 5d3ae50..0000000
--- a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"IncomingTransactionHelper.d.ts","sourceRoot":"","sources":["../src/IncomingTransactionHelper.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC/E,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAE3C,OAAO,YAAY,MAAM,QAAQ,CAAC;AAGlC,OAAO,KAAK,EAAE,uBAAuB,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AASxE,qBAAa,yBAAyB;;IACpC,GAAG,EAAE,YAAY,CAAC;gBA4BN,EACV,YAAY,EACZ,iBAAiB,EACjB,0BAA0B,EAC1B,oBAAoB,EACpB,eAAe,EACf,SAAS,EACT,kBAAkB,EAClB,uBAAuB,EACvB,gBAAgB,EAChB,kBAAkB,GACnB,EAAE;QACD,YAAY,EAAE,YAAY,CAAC;QAC3B,iBAAiB,EAAE,MAAM,MAAM,CAAC;QAChC,0BAA0B,EAAE,MAAM,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACzD,oBAAoB,CAAC,EAAE,MAAM,eAAe,EAAE,CAAC;QAC/C,eAAe,EAAE,MAAM,YAAY,CAAC;QACpC,SAAS,CAAC,EAAE,MAAM,OAAO,CAAC;QAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;QAC7B,uBAAuB,EAAE,uBAAuB,CAAC;QACjD,gBAAgB,CAAC,EAAE,MAAM,CAAC;QAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;KAC9B;IA0BD,KAAK;IAaL,IAAI;IAKE,MAAM,CAAC,oBAAoB,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;CAmMxD"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js
deleted file mode 100644
index 4bf34b7..0000000
--- a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js
+++ /dev/null
@@ -1,198 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-var _IncomingTransactionHelper_instances, _IncomingTransactionHelper_blockTracker, _IncomingTransactionHelper_getCurrentAccount, _IncomingTransactionHelper_getLastFetchedBlockNumbers, _IncomingTransactionHelper_getLocalTransactions, _IncomingTransactionHelper_getNetworkState, _IncomingTransactionHelper_isEnabled, _IncomingTransactionHelper_isRunning, _IncomingTransactionHelper_mutex, _IncomingTransactionHelper_onLatestBlock, _IncomingTransactionHelper_queryEntireHistory, _IncomingTransactionHelper_remoteTransactionSource, _IncomingTransactionHelper_transactionLimit, _IncomingTransactionHelper_updateTransactions, _IncomingTransactionHelper_sortTransactionsByTime, _IncomingTransactionHelper_getNewTransactions, _IncomingTransactionHelper_getUpdatedTransactions, _IncomingTransactionHelper_isTransactionOutdated, _IncomingTransactionHelper_getFromBlock, _IncomingTransactionHelper_updateLastFetchedBlockNumber, _IncomingTransactionHelper_getBlockNumberKey, _IncomingTransactionHelper_canStart, _IncomingTransactionHelper_getCurrentChainId;
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.IncomingTransactionHelper = void 0;
-const async_mutex_1 = require("async-mutex");
-const events_1 = __importDefault(require("events"));
-const logger_1 = require("./logger");
-const RECENT_HISTORY_BLOCK_RANGE = 10;
-const UPDATE_CHECKS = [
-    (txMeta) => txMeta.status,
-    (txMeta) => txMeta.txParams.gasUsed,
-];
-class IncomingTransactionHelper {
-    constructor({ blockTracker, getCurrentAccount, getLastFetchedBlockNumbers, getLocalTransactions, getNetworkState, isEnabled, queryEntireHistory, remoteTransactionSource, transactionLimit, updateTransactions, }) {
-        _IncomingTransactionHelper_instances.add(this);
-        _IncomingTransactionHelper_blockTracker.set(this, void 0);
-        _IncomingTransactionHelper_getCurrentAccount.set(this, void 0);
-        _IncomingTransactionHelper_getLastFetchedBlockNumbers.set(this, void 0);
-        _IncomingTransactionHelper_getLocalTransactions.set(this, void 0);
-        _IncomingTransactionHelper_getNetworkState.set(this, void 0);
-        _IncomingTransactionHelper_isEnabled.set(this, void 0);
-        _IncomingTransactionHelper_isRunning.set(this, void 0);
-        _IncomingTransactionHelper_mutex.set(this, new async_mutex_1.Mutex());
-        _IncomingTransactionHelper_onLatestBlock.set(this, void 0);
-        _IncomingTransactionHelper_queryEntireHistory.set(this, void 0);
-        _IncomingTransactionHelper_remoteTransactionSource.set(this, void 0);
-        _IncomingTransactionHelper_transactionLimit.set(this, void 0);
-        _IncomingTransactionHelper_updateTransactions.set(this, void 0);
-        this.hub = new events_1.default();
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_blockTracker, blockTracker, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_getCurrentAccount, getCurrentAccount, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, getLastFetchedBlockNumbers, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_getLocalTransactions, getLocalTransactions || (() => []), "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_getNetworkState, getNetworkState, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_isEnabled, isEnabled !== null && isEnabled !== void 0 ? isEnabled : (() => true), "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, false, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_queryEntireHistory, queryEntireHistory !== null && queryEntireHistory !== void 0 ? queryEntireHistory : true, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_remoteTransactionSource, remoteTransactionSource, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_transactionLimit, transactionLimit, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_updateTransactions, updateTransactions !== null && updateTransactions !== void 0 ? updateTransactions : false, "f");
-        // Using a property instead of a method to provide a listener reference
-        // with the correct scope that we can remove later if stopped.
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_onLatestBlock, (blockNumberHex) => __awaiter(this, void 0, void 0, function* () {
-            try {
-                yield this.update(blockNumberHex);
-            }
-            catch (error) {
-                console.error('Error while checking incoming transactions', error);
-            }
-        }), "f");
-    }
-    start() {
-        if (__classPrivateFieldGet(this, _IncomingTransactionHelper_isRunning, "f")) {
-            return;
-        }
-        if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_canStart).call(this)) {
-            return;
-        }
-        __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").addListener('latest', __classPrivateFieldGet(this, _IncomingTransactionHelper_onLatestBlock, "f"));
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, true, "f");
-    }
-    stop() {
-        __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").removeListener('latest', __classPrivateFieldGet(this, _IncomingTransactionHelper_onLatestBlock, "f"));
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, false, "f");
-    }
-    update(latestBlockNumberHex) {
-        var _a, _b, _c;
-        return __awaiter(this, void 0, void 0, function* () {
-            const releaseLock = yield __classPrivateFieldGet(this, _IncomingTransactionHelper_mutex, "f").acquire();
-            (0, logger_1.incomingTransactionsLogger)('Checking for incoming transactions');
-            try {
-                if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_canStart).call(this)) {
-                    return;
-                }
-                const latestBlockNumber = parseInt(latestBlockNumberHex || (yield __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").getLatestBlock()), 16);
-                const additionalLastFetchedKeys = (_c = (_b = (_a = __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f")).getLastBlockVariations) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];
-                const fromBlock = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getFromBlock).call(this, latestBlockNumber, additionalLastFetchedKeys);
-                const address = __classPrivateFieldGet(this, _IncomingTransactionHelper_getCurrentAccount, "f").call(this);
-                const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
-                let remoteTransactions = [];
-                try {
-                    remoteTransactions =
-                        yield __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f").fetchTransactions({
-                            address,
-                            currentChainId,
-                            fromBlock,
-                            limit: __classPrivateFieldGet(this, _IncomingTransactionHelper_transactionLimit, "f"),
-                        });
-                }
-                catch (error) {
-                    (0, logger_1.incomingTransactionsLogger)('Error while fetching remote transactions', error);
-                    return;
-                }
-                if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_updateTransactions, "f")) {
-                    remoteTransactions = remoteTransactions.filter((tx) => { var _a; return ((_a = tx.txParams.to) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === address.toLowerCase(); });
-                }
-                const localTransactions = !__classPrivateFieldGet(this, _IncomingTransactionHelper_updateTransactions, "f")
-                    ? []
-                    : __classPrivateFieldGet(this, _IncomingTransactionHelper_getLocalTransactions, "f").call(this);
-                const newTransactions = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getNewTransactions).call(this, remoteTransactions, localTransactions);
-                const updatedTransactions = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getUpdatedTransactions).call(this, remoteTransactions, localTransactions);
-                if (newTransactions.length > 0 || updatedTransactions.length > 0) {
-                    __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_sortTransactionsByTime).call(this, newTransactions);
-                    __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_sortTransactionsByTime).call(this, updatedTransactions);
-                    (0, logger_1.incomingTransactionsLogger)('Found incoming transactions', {
-                        new: newTransactions,
-                        updated: updatedTransactions,
-                    });
-                    this.hub.emit('transactions', {
-                        added: newTransactions,
-                        updated: updatedTransactions,
-                    });
-                }
-                __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_updateLastFetchedBlockNumber).call(this, remoteTransactions, additionalLastFetchedKeys);
-            }
-            finally {
-                releaseLock();
-            }
-        });
-    }
-}
-exports.IncomingTransactionHelper = IncomingTransactionHelper;
-_IncomingTransactionHelper_blockTracker = new WeakMap(), _IncomingTransactionHelper_getCurrentAccount = new WeakMap(), _IncomingTransactionHelper_getLastFetchedBlockNumbers = new WeakMap(), _IncomingTransactionHelper_getLocalTransactions = new WeakMap(), _IncomingTransactionHelper_getNetworkState = new WeakMap(), _IncomingTransactionHelper_isEnabled = new WeakMap(), _IncomingTransactionHelper_isRunning = new WeakMap(), _IncomingTransactionHelper_mutex = new WeakMap(), _IncomingTransactionHelper_onLatestBlock = new WeakMap(), _IncomingTransactionHelper_queryEntireHistory = new WeakMap(), _IncomingTransactionHelper_remoteTransactionSource = new WeakMap(), _IncomingTransactionHelper_transactionLimit = new WeakMap(), _IncomingTransactionHelper_updateTransactions = new WeakMap(), _IncomingTransactionHelper_instances = new WeakSet(), _IncomingTransactionHelper_sortTransactionsByTime = function _IncomingTransactionHelper_sortTransactionsByTime(transactions) {
-    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));
-}, _IncomingTransactionHelper_getNewTransactions = function _IncomingTransactionHelper_getNewTransactions(remoteTxs, localTxs) {
-    return remoteTxs.filter((tx) => !localTxs.some(({ hash }) => hash === tx.hash));
-}, _IncomingTransactionHelper_getUpdatedTransactions = function _IncomingTransactionHelper_getUpdatedTransactions(remoteTxs, localTxs) {
-    return remoteTxs.filter((remoteTx) => localTxs.some((localTx) => remoteTx.hash === localTx.hash &&
-        __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_isTransactionOutdated).call(this, remoteTx, localTx)));
-}, _IncomingTransactionHelper_isTransactionOutdated = function _IncomingTransactionHelper_isTransactionOutdated(remoteTx, localTx) {
-    return UPDATE_CHECKS.some((getValue) => getValue(remoteTx) !== getValue(localTx));
-}, _IncomingTransactionHelper_getFromBlock = function _IncomingTransactionHelper_getFromBlock(latestBlockNumber, additionalKeys) {
-    const lastFetchedKey = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getBlockNumberKey).call(this, additionalKeys);
-    const lastFetchedBlockNumber = __classPrivateFieldGet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, "f").call(this)[lastFetchedKey];
-    if (lastFetchedBlockNumber) {
-        return lastFetchedBlockNumber + 1;
-    }
-    return __classPrivateFieldGet(this, _IncomingTransactionHelper_queryEntireHistory, "f")
-        ? undefined
-        : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;
-}, _IncomingTransactionHelper_updateLastFetchedBlockNumber = function _IncomingTransactionHelper_updateLastFetchedBlockNumber(remoteTxs, additionalKeys) {
-    let lastFetchedBlockNumber = -1;
-    for (const tx of remoteTxs) {
-        const currentBlockNumberValue = tx.blockNumber
-            ? parseInt(tx.blockNumber, 10)
-            : -1;
-        lastFetchedBlockNumber = Math.max(lastFetchedBlockNumber, currentBlockNumberValue);
-    }
-    if (lastFetchedBlockNumber === -1) {
-        return;
-    }
-    const lastFetchedKey = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getBlockNumberKey).call(this, additionalKeys);
-    const lastFetchedBlockNumbers = __classPrivateFieldGet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, "f").call(this);
-    const previousValue = lastFetchedBlockNumbers[lastFetchedKey];
-    if (previousValue >= lastFetchedBlockNumber) {
-        return;
-    }
-    lastFetchedBlockNumbers[lastFetchedKey] = lastFetchedBlockNumber;
-    this.hub.emit('updatedLastFetchedBlockNumbers', {
-        lastFetchedBlockNumbers,
-        blockNumber: lastFetchedBlockNumber,
-    });
-}, _IncomingTransactionHelper_getBlockNumberKey = function _IncomingTransactionHelper_getBlockNumberKey(additionalKeys) {
-    const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
-    const currentAccount = __classPrivateFieldGet(this, _IncomingTransactionHelper_getCurrentAccount, "f").call(this).toLowerCase();
-    return [currentChainId, currentAccount, ...additionalKeys].join('#');
-}, _IncomingTransactionHelper_canStart = function _IncomingTransactionHelper_canStart() {
-    const isEnabled = __classPrivateFieldGet(this, _IncomingTransactionHelper_isEnabled, "f").call(this);
-    const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
-    const isSupportedNetwork = __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f").isSupportedNetwork(currentChainId);
-    return isEnabled && isSupportedNetwork;
-}, _IncomingTransactionHelper_getCurrentChainId = function _IncomingTransactionHelper_getCurrentChainId() {
-    return __classPrivateFieldGet(this, _IncomingTransactionHelper_getNetworkState, "f").call(this).providerConfig.chainId;
-};
-//# sourceMappingURL=IncomingTransactionHelper.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js.map b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js.map
deleted file mode 100644
index a45b30c..0000000
--- a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"IncomingTransactionHelper.js","sourceRoot":"","sources":["../src/IncomingTransactionHelper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,6CAAoC;AACpC,oDAAkC;AAElC,qCAA6D;AAG7D,MAAM,0BAA0B,GAAG,EAAE,CAAC;AAEtC,MAAM,aAAa,GAAyC;IAC1D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM;IACzB,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO;CACpC,CAAC;AAEF,MAAa,yBAAyB;IA6BpC,YAAY,EACV,YAAY,EACZ,iBAAiB,EACjB,0BAA0B,EAC1B,oBAAoB,EACpB,eAAe,EACf,SAAS,EACT,kBAAkB,EAClB,uBAAuB,EACvB,gBAAgB,EAChB,kBAAkB,GAYnB;;QAhDD,0DAA4B;QAE5B,+DAAiC;QAEjC,wEAA0D;QAE1D,kEAA+C;QAE/C,6DAAqC;QAErC,uDAA0B;QAE1B,uDAAoB;QAEpB,2CAAS,IAAI,mBAAK,EAAE,EAAC;QAErB,2DAAuD;QAEvD,gEAA6B;QAE7B,qEAAkD;QAElD,8DAA2B;QAE3B,gEAA6B;QAyB3B,IAAI,CAAC,GAAG,GAAG,IAAI,gBAAY,EAAE,CAAC;QAE9B,uBAAA,IAAI,2CAAiB,YAAY,MAAA,CAAC;QAClC,uBAAA,IAAI,gDAAsB,iBAAiB,MAAA,CAAC;QAC5C,uBAAA,IAAI,yDAA+B,0BAA0B,MAAA,CAAC;QAC9D,uBAAA,IAAI,mDAAyB,oBAAoB,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,MAAA,CAAC;QAChE,uBAAA,IAAI,8CAAoB,eAAe,MAAA,CAAC;QACxC,uBAAA,IAAI,wCAAc,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAA,CAAC;QAC5C,uBAAA,IAAI,wCAAc,KAAK,MAAA,CAAC;QACxB,uBAAA,IAAI,iDAAuB,kBAAkB,aAAlB,kBAAkB,cAAlB,kBAAkB,GAAI,IAAI,MAAA,CAAC;QACtD,uBAAA,IAAI,sDAA4B,uBAAuB,MAAA,CAAC;QACxD,uBAAA,IAAI,+CAAqB,gBAAgB,MAAA,CAAC;QAC1C,uBAAA,IAAI,iDAAuB,kBAAkB,aAAlB,kBAAkB,cAAlB,kBAAkB,GAAI,KAAK,MAAA,CAAC;QAEvD,uEAAuE;QACvE,8DAA8D;QAC9D,uBAAA,IAAI,4CAAkB,CAAO,cAAmB,EAAE,EAAE;YAClD,IAAI;gBACF,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;aACnC;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;aACpE;QACH,CAAC,CAAA,MAAA,CAAC;IACJ,CAAC;IAED,KAAK;QACH,IAAI,uBAAA,IAAI,4CAAW,EAAE;YACnB,OAAO;SACR;QAED,IAAI,CAAC,uBAAA,IAAI,iFAAU,MAAd,IAAI,CAAY,EAAE;YACrB,OAAO;SACR;QAED,uBAAA,IAAI,+CAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,uBAAA,IAAI,gDAAe,CAAC,CAAC;QAC9D,uBAAA,IAAI,wCAAc,IAAI,MAAA,CAAC;IACzB,CAAC;IAED,IAAI;QACF,uBAAA,IAAI,+CAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,uBAAA,IAAI,gDAAe,CAAC,CAAC;QACjE,uBAAA,IAAI,wCAAc,KAAK,MAAA,CAAC;IAC1B,CAAC;IAEK,MAAM,CAAC,oBAA0B;;;YACrC,MAAM,WAAW,GAAG,MAAM,uBAAA,IAAI,wCAAO,CAAC,OAAO,EAAE,CAAC;YAEhD,IAAA,mCAAG,EAAC,oCAAoC,CAAC,CAAC;YAE1C,IAAI;gBACF,IAAI,CAAC,uBAAA,IAAI,iFAAU,MAAd,IAAI,CAAY,EAAE;oBACrB,OAAO;iBACR;gBAED,MAAM,iBAAiB,GAAG,QAAQ,CAChC,oBAAoB,IAAI,CAAC,MAAM,uBAAA,IAAI,+CAAc,CAAC,cAAc,EAAE,CAAC,EACnE,EAAE,CACH,CAAC;gBAEF,MAAM,yBAAyB,GAC7B,MAAA,MAAA,MAAA,uBAAA,IAAI,0DAAyB,EAAC,sBAAsB,kDAAI,mCAAI,EAAE,CAAC;gBAEjE,MAAM,SAAS,GAAG,uBAAA,IAAI,qFAAc,MAAlB,IAAI,EACpB,iBAAiB,EACjB,yBAAyB,CAC1B,CAAC;gBAEF,MAAM,OAAO,GAAG,uBAAA,IAAI,oDAAmB,MAAvB,IAAI,CAAqB,CAAC;gBAC1C,MAAM,cAAc,GAAG,uBAAA,IAAI,0FAAmB,MAAvB,IAAI,CAAqB,CAAC;gBAEjD,IAAI,kBAAkB,GAAG,EAAE,CAAC;gBAE5B,IAAI;oBACF,kBAAkB;wBAChB,MAAM,uBAAA,IAAI,0DAAyB,CAAC,iBAAiB,CAAC;4BACpD,OAAO;4BACP,cAAc;4BACd,SAAS;4BACT,KAAK,EAAE,uBAAA,IAAI,mDAAkB;yBAC9B,CAAC,CAAC;iBACN;gBAAC,OAAO,KAAU,EAAE;oBACnB,IAAA,mCAAG,EAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;oBACvD,OAAO;iBACR;gBAED,IAAI,CAAC,uBAAA,IAAI,qDAAoB,EAAE;oBAC7B,kBAAkB,GAAG,kBAAkB,CAAC,MAAM,CAC5C,CAAC,EAAE,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,EAAE,CAAC,QAAQ,CAAC,EAAE,0CAAE,WAAW,EAAE,MAAK,OAAO,CAAC,WAAW,EAAE,CAAA,EAAA,CAChE,CAAC;iBACH;gBAED,MAAM,iBAAiB,GAAG,CAAC,uBAAA,IAAI,qDAAoB;oBACjD,CAAC,CAAC,EAAE;oBACJ,CAAC,CAAC,uBAAA,IAAI,uDAAsB,MAA1B,IAAI,CAAwB,CAAC;gBAEjC,MAAM,eAAe,GAAG,uBAAA,IAAI,2FAAoB,MAAxB,IAAI,EAC1B,kBAAkB,EAClB,iBAAiB,CAClB,CAAC;gBAEF,MAAM,mBAAmB,GAAG,uBAAA,IAAI,+FAAwB,MAA5B,IAAI,EAC9B,kBAAkB,EAClB,iBAAiB,CAClB,CAAC;gBAEF,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;oBAChE,uBAAA,IAAI,+FAAwB,MAA5B,IAAI,EAAyB,eAAe,CAAC,CAAC;oBAC9C,uBAAA,IAAI,+FAAwB,MAA5B,IAAI,EAAyB,mBAAmB,CAAC,CAAC;oBAElD,IAAA,mCAAG,EAAC,6BAA6B,EAAE;wBACjC,GAAG,EAAE,eAAe;wBACpB,OAAO,EAAE,mBAAmB;qBAC7B,CAAC,CAAC;oBAEH,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE;wBAC5B,KAAK,EAAE,eAAe;wBACtB,OAAO,EAAE,mBAAmB;qBAC7B,CAAC,CAAC;iBACJ;gBAED,uBAAA,IAAI,qGAA8B,MAAlC,IAAI,EACF,kBAAkB,EAClB,yBAAyB,CAC1B,CAAC;aACH;oBAAS;gBACR,WAAW,EAAE,CAAC;aACf;;KACF;CAgHF;AAlSD,8DAkSC;u7BA9GyB,YAA+B;IACrD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,yGAGC,SAA4B,EAC5B,QAA2B;IAE3B,OAAO,SAAS,CAAC,MAAM,CACrB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,CAAC,CACvD,CAAC;AACJ,CAAC,iHAGC,SAA4B,EAC5B,QAA2B;IAE3B,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CACnC,QAAQ,CAAC,IAAI,CACX,CAAC,OAAO,EAAE,EAAE,CACV,QAAQ,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI;QAC9B,uBAAA,IAAI,8FAAuB,MAA3B,IAAI,EAAwB,QAAQ,EAAE,OAAO,CAAC,CACjD,CACF,CAAC;AACJ,CAAC,+GAGC,QAAyB,EACzB,OAAwB;IAExB,OAAO,aAAa,CAAC,IAAI,CACvB,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,OAAO,CAAC,CACvD,CAAC;AACJ,CAAC,6FAGC,iBAAyB,EACzB,cAAwB;IAExB,MAAM,cAAc,GAAG,uBAAA,IAAI,0FAAmB,MAAvB,IAAI,EAAoB,cAAc,CAAC,CAAC;IAE/D,MAAM,sBAAsB,GAC1B,uBAAA,IAAI,6DAA4B,MAAhC,IAAI,CAA8B,CAAC,cAAc,CAAC,CAAC;IAErD,IAAI,sBAAsB,EAAE;QAC1B,OAAO,sBAAsB,GAAG,CAAC,CAAC;KACnC;IAED,OAAO,uBAAA,IAAI,qDAAoB;QAC7B,CAAC,CAAC,SAAS;QACX,CAAC,CAAC,iBAAiB,GAAG,0BAA0B,CAAC;AACrD,CAAC,6HAGC,SAA4B,EAC5B,cAAwB;IAExB,IAAI,sBAAsB,GAAG,CAAC,CAAC,CAAC;IAEhC,KAAK,MAAM,EAAE,IAAI,SAAS,EAAE;QAC1B,MAAM,uBAAuB,GAAG,EAAE,CAAC,WAAW;YAC5C,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC;YAC9B,CAAC,CAAC,CAAC,CAAC,CAAC;QAEP,sBAAsB,GAAG,IAAI,CAAC,GAAG,CAC/B,sBAAsB,EACtB,uBAAuB,CACxB,CAAC;KACH;IAED,IAAI,sBAAsB,KAAK,CAAC,CAAC,EAAE;QACjC,OAAO;KACR;IAED,MAAM,cAAc,GAAG,uBAAA,IAAI,0FAAmB,MAAvB,IAAI,EAAoB,cAAc,CAAC,CAAC;IAC/D,MAAM,uBAAuB,GAAG,uBAAA,IAAI,6DAA4B,MAAhC,IAAI,CAA8B,CAAC;IACnE,MAAM,aAAa,GAAG,uBAAuB,CAAC,cAAc,CAAC,CAAC;IAE9D,IAAI,aAAa,IAAI,sBAAsB,EAAE;QAC3C,OAAO;KACR;IAED,uBAAuB,CAAC,cAAc,CAAC,GAAG,sBAAsB,CAAC;IAEjE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,gCAAgC,EAAE;QAC9C,uBAAuB;QACvB,WAAW,EAAE,sBAAsB;KACpC,CAAC,CAAC;AACL,CAAC,uGAEkB,cAAwB;IACzC,MAAM,cAAc,GAAG,uBAAA,IAAI,0FAAmB,MAAvB,IAAI,CAAqB,CAAC;IACjD,MAAM,cAAc,GAAG,uBAAA,IAAI,oDAAmB,MAAvB,IAAI,CAAqB,CAAC,WAAW,EAAE,CAAC;IAE/D,OAAO,CAAC,cAAc,EAAE,cAAc,EAAE,GAAG,cAAc,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvE,CAAC;IAGC,MAAM,SAAS,GAAG,uBAAA,IAAI,4CAAW,MAAf,IAAI,CAAa,CAAC;IACpC,MAAM,cAAc,GAAG,uBAAA,IAAI,0FAAmB,MAAvB,IAAI,CAAqB,CAAC;IAEjD,MAAM,kBAAkB,GACtB,uBAAA,IAAI,0DAAyB,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;IAEnE,OAAO,SAAS,IAAI,kBAAkB,CAAC;AACzC,CAAC;IAGC,OAAO,uBAAA,IAAI,kDAAiB,MAArB,IAAI,CAAmB,CAAC,cAAc,CAAC,OAAO,CAAC;AACxD,CAAC","sourcesContent":["import type { BlockTracker, NetworkState } from '@metamask/network-controller';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport EventEmitter from 'events';\n\nimport { incomingTransactionsLogger as log } from './logger';\nimport type { RemoteTransactionSource, TransactionMeta } from './types';\n\nconst RECENT_HISTORY_BLOCK_RANGE = 10;\n\nconst UPDATE_CHECKS: ((txMeta: TransactionMeta) => any)[] = [\n  (txMeta) => txMeta.status,\n  (txMeta) => txMeta.txParams.gasUsed,\n];\n\nexport class IncomingTransactionHelper {\n  hub: EventEmitter;\n\n  #blockTracker: BlockTracker;\n\n  #getCurrentAccount: () => string;\n\n  #getLastFetchedBlockNumbers: () => Record<string, number>;\n\n  #getLocalTransactions: () => TransactionMeta[];\n\n  #getNetworkState: () => NetworkState;\n\n  #isEnabled: () => boolean;\n\n  #isRunning: boolean;\n\n  #mutex = new Mutex();\n\n  #onLatestBlock: (blockNumberHex: Hex) => Promise<void>;\n\n  #queryEntireHistory: boolean;\n\n  #remoteTransactionSource: RemoteTransactionSource;\n\n  #transactionLimit?: number;\n\n  #updateTransactions: boolean;\n\n  constructor({\n    blockTracker,\n    getCurrentAccount,\n    getLastFetchedBlockNumbers,\n    getLocalTransactions,\n    getNetworkState,\n    isEnabled,\n    queryEntireHistory,\n    remoteTransactionSource,\n    transactionLimit,\n    updateTransactions,\n  }: {\n    blockTracker: BlockTracker;\n    getCurrentAccount: () => string;\n    getLastFetchedBlockNumbers: () => Record<string, number>;\n    getLocalTransactions?: () => TransactionMeta[];\n    getNetworkState: () => NetworkState;\n    isEnabled?: () => boolean;\n    queryEntireHistory?: boolean;\n    remoteTransactionSource: RemoteTransactionSource;\n    transactionLimit?: number;\n    updateTransactions?: boolean;\n  }) {\n    this.hub = new EventEmitter();\n\n    this.#blockTracker = blockTracker;\n    this.#getCurrentAccount = getCurrentAccount;\n    this.#getLastFetchedBlockNumbers = getLastFetchedBlockNumbers;\n    this.#getLocalTransactions = getLocalTransactions || (() => []);\n    this.#getNetworkState = getNetworkState;\n    this.#isEnabled = isEnabled ?? (() => true);\n    this.#isRunning = false;\n    this.#queryEntireHistory = queryEntireHistory ?? true;\n    this.#remoteTransactionSource = remoteTransactionSource;\n    this.#transactionLimit = transactionLimit;\n    this.#updateTransactions = updateTransactions ?? false;\n\n    // Using a property instead of a method to provide a listener reference\n    // with the correct scope that we can remove later if stopped.\n    this.#onLatestBlock = async (blockNumberHex: Hex) => {\n      try {\n        await this.update(blockNumberHex);\n      } catch (error) {\n        console.error('Error while checking incoming transactions', error);\n      }\n    };\n  }\n\n  start() {\n    if (this.#isRunning) {\n      return;\n    }\n\n    if (!this.#canStart()) {\n      return;\n    }\n\n    this.#blockTracker.addListener('latest', this.#onLatestBlock);\n    this.#isRunning = true;\n  }\n\n  stop() {\n    this.#blockTracker.removeListener('latest', this.#onLatestBlock);\n    this.#isRunning = false;\n  }\n\n  async update(latestBlockNumberHex?: Hex): Promise<void> {\n    const releaseLock = await this.#mutex.acquire();\n\n    log('Checking for incoming transactions');\n\n    try {\n      if (!this.#canStart()) {\n        return;\n      }\n\n      const latestBlockNumber = parseInt(\n        latestBlockNumberHex || (await this.#blockTracker.getLatestBlock()),\n        16,\n      );\n\n      const additionalLastFetchedKeys =\n        this.#remoteTransactionSource.getLastBlockVariations?.() ?? [];\n\n      const fromBlock = this.#getFromBlock(\n        latestBlockNumber,\n        additionalLastFetchedKeys,\n      );\n\n      const address = this.#getCurrentAccount();\n      const currentChainId = this.#getCurrentChainId();\n\n      let remoteTransactions = [];\n\n      try {\n        remoteTransactions =\n          await this.#remoteTransactionSource.fetchTransactions({\n            address,\n            currentChainId,\n            fromBlock,\n            limit: this.#transactionLimit,\n          });\n      } catch (error: any) {\n        log('Error while fetching remote transactions', error);\n        return;\n      }\n\n      if (!this.#updateTransactions) {\n        remoteTransactions = remoteTransactions.filter(\n          (tx) => tx.txParams.to?.toLowerCase() === address.toLowerCase(),\n        );\n      }\n\n      const localTransactions = !this.#updateTransactions\n        ? []\n        : this.#getLocalTransactions();\n\n      const newTransactions = this.#getNewTransactions(\n        remoteTransactions,\n        localTransactions,\n      );\n\n      const updatedTransactions = this.#getUpdatedTransactions(\n        remoteTransactions,\n        localTransactions,\n      );\n\n      if (newTransactions.length > 0 || updatedTransactions.length > 0) {\n        this.#sortTransactionsByTime(newTransactions);\n        this.#sortTransactionsByTime(updatedTransactions);\n\n        log('Found incoming transactions', {\n          new: newTransactions,\n          updated: updatedTransactions,\n        });\n\n        this.hub.emit('transactions', {\n          added: newTransactions,\n          updated: updatedTransactions,\n        });\n      }\n\n      this.#updateLastFetchedBlockNumber(\n        remoteTransactions,\n        additionalLastFetchedKeys,\n      );\n    } finally {\n      releaseLock();\n    }\n  }\n\n  #sortTransactionsByTime(transactions: TransactionMeta[]) {\n    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));\n  }\n\n  #getNewTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter(\n      (tx) => !localTxs.some(({ hash }) => hash === tx.hash),\n    );\n  }\n\n  #getUpdatedTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((remoteTx) =>\n      localTxs.some(\n        (localTx) =>\n          remoteTx.hash === localTx.hash &&\n          this.#isTransactionOutdated(remoteTx, localTx),\n      ),\n    );\n  }\n\n  #isTransactionOutdated(\n    remoteTx: TransactionMeta,\n    localTx: TransactionMeta,\n  ): boolean {\n    return UPDATE_CHECKS.some(\n      (getValue) => getValue(remoteTx) !== getValue(localTx),\n    );\n  }\n\n  #getFromBlock(\n    latestBlockNumber: number,\n    additionalKeys: string[],\n  ): number | undefined {\n    const lastFetchedKey = this.#getBlockNumberKey(additionalKeys);\n\n    const lastFetchedBlockNumber =\n      this.#getLastFetchedBlockNumbers()[lastFetchedKey];\n\n    if (lastFetchedBlockNumber) {\n      return lastFetchedBlockNumber + 1;\n    }\n\n    return this.#queryEntireHistory\n      ? undefined\n      : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;\n  }\n\n  #updateLastFetchedBlockNumber(\n    remoteTxs: TransactionMeta[],\n    additionalKeys: string[],\n  ) {\n    let lastFetchedBlockNumber = -1;\n\n    for (const tx of remoteTxs) {\n      const currentBlockNumberValue = tx.blockNumber\n        ? parseInt(tx.blockNumber, 10)\n        : -1;\n\n      lastFetchedBlockNumber = Math.max(\n        lastFetchedBlockNumber,\n        currentBlockNumberValue,\n      );\n    }\n\n    if (lastFetchedBlockNumber === -1) {\n      return;\n    }\n\n    const lastFetchedKey = this.#getBlockNumberKey(additionalKeys);\n    const lastFetchedBlockNumbers = this.#getLastFetchedBlockNumbers();\n    const previousValue = lastFetchedBlockNumbers[lastFetchedKey];\n\n    if (previousValue >= lastFetchedBlockNumber) {\n      return;\n    }\n\n    lastFetchedBlockNumbers[lastFetchedKey] = lastFetchedBlockNumber;\n\n    this.hub.emit('updatedLastFetchedBlockNumbers', {\n      lastFetchedBlockNumbers,\n      blockNumber: lastFetchedBlockNumber,\n    });\n  }\n\n  #getBlockNumberKey(additionalKeys: string[]): string {\n    const currentChainId = this.#getCurrentChainId();\n    const currentAccount = this.#getCurrentAccount().toLowerCase();\n\n    return [currentChainId, currentAccount, ...additionalKeys].join('#');\n  }\n\n  #canStart(): boolean {\n    const isEnabled = this.#isEnabled();\n    const currentChainId = this.#getCurrentChainId();\n\n    const isSupportedNetwork =\n      this.#remoteTransactionSource.isSupportedNetwork(currentChainId);\n\n    return isEnabled && isSupportedNetwork;\n  }\n\n  #getCurrentChainId(): Hex {\n    return this.#getNetworkState().providerConfig.chainId;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.d.ts b/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.d.ts
deleted file mode 100644
index 2ecc06f..0000000
--- a/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.d.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-/// <reference types="node" />
-import type EthQuery from '@metamask/eth-query';
-import type { BlockTracker } from '@metamask/network-controller';
-import EventEmitter from 'events';
-import type { TransactionMeta } from './types';
-export declare class PendingTransactionTracker {
-    #private;
-    hub: EventEmitter;
-    constructor({ blockTracker, failTransaction, getChainId, getEthQuery, getTransactions, }: {
-        blockTracker: BlockTracker;
-        failTransaction: (txMeta: TransactionMeta, error: Error) => void;
-        getChainId: () => string;
-        getEthQuery: () => EthQuery;
-        getTransactions: () => TransactionMeta[];
-    });
-    start(): void;
-}
-//# sourceMappingURL=PendingTransactionTracker.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.d.ts.map b/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.d.ts.map
deleted file mode 100644
index 0213e68..0000000
--- a/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"PendingTransactionTracker.d.ts","sourceRoot":"","sources":["../src/PendingTransactionTracker.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAChD,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AACjE,OAAO,YAAY,MAAM,QAAQ,CAAC;AAGlC,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAG/C,qBAAa,yBAAyB;;IACpC,GAAG,EAAE,YAAY,CAAC;gBAYN,EACV,YAAY,EACZ,eAAe,EACf,UAAU,EACV,WAAW,EACX,eAAe,GAChB,EAAE;QACD,YAAY,EAAE,YAAY,CAAC;QAC3B,eAAe,EAAE,CAAC,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,KAAK,IAAI,CAAC;QACjE,UAAU,EAAE,MAAM,MAAM,CAAC;QACzB,WAAW,EAAE,MAAM,QAAQ,CAAC;QAC5B,eAAe,EAAE,MAAM,eAAe,EAAE,CAAC;KAC1C;IAUD,KAAK;CA4JN"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.js b/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.js
deleted file mode 100644
index fcb98e5..0000000
--- a/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.js
+++ /dev/null
@@ -1,144 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-var _PendingTransactionTracker_instances, _PendingTransactionTracker_blockTracker, _PendingTransactionTracker_failTransaction, _PendingTransactionTracker_getChainId, _PendingTransactionTracker_getEthQuery, _PendingTransactionTracker_getTransactions, _PendingTransactionTracker_onLatestBlock, _PendingTransactionTracker_blockchainTransactionStateReconciler, _PendingTransactionTracker_checkTxReceiptStatusIsFailed;
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.PendingTransactionTracker = void 0;
-const controller_utils_1 = require("@metamask/controller-utils");
-const events_1 = __importDefault(require("events"));
-const logger_1 = require("./logger");
-const types_1 = require("./types");
-class PendingTransactionTracker {
-    constructor({ blockTracker, failTransaction, getChainId, getEthQuery, getTransactions, }) {
-        _PendingTransactionTracker_instances.add(this);
-        _PendingTransactionTracker_blockTracker.set(this, void 0);
-        _PendingTransactionTracker_failTransaction.set(this, void 0);
-        _PendingTransactionTracker_getChainId.set(this, void 0);
-        _PendingTransactionTracker_getEthQuery.set(this, void 0);
-        _PendingTransactionTracker_getTransactions.set(this, void 0);
-        this.hub = new events_1.default();
-        __classPrivateFieldSet(this, _PendingTransactionTracker_blockTracker, blockTracker, "f");
-        __classPrivateFieldSet(this, _PendingTransactionTracker_failTransaction, failTransaction, "f");
-        __classPrivateFieldSet(this, _PendingTransactionTracker_getChainId, getChainId, "f");
-        __classPrivateFieldSet(this, _PendingTransactionTracker_getEthQuery, getEthQuery, "f");
-        __classPrivateFieldSet(this, _PendingTransactionTracker_getTransactions, getTransactions, "f");
-    }
-    start() {
-        // eslint-disable-next-line @typescript-eslint/no-misused-promises
-        __classPrivateFieldGet(this, _PendingTransactionTracker_blockTracker, "f").addListener('latest', () => __awaiter(this, void 0, void 0, function* () {
-            yield (0, controller_utils_1.safelyExecute)(() => __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_onLatestBlock).call(this));
-        }));
-    }
-}
-exports.PendingTransactionTracker = PendingTransactionTracker;
-_PendingTransactionTracker_blockTracker = new WeakMap(), _PendingTransactionTracker_failTransaction = new WeakMap(), _PendingTransactionTracker_getChainId = new WeakMap(), _PendingTransactionTracker_getEthQuery = new WeakMap(), _PendingTransactionTracker_getTransactions = new WeakMap(), _PendingTransactionTracker_instances = new WeakSet(), _PendingTransactionTracker_onLatestBlock = function _PendingTransactionTracker_onLatestBlock() {
-    return __awaiter(this, void 0, void 0, function* () {
-        (0, logger_1.pendingTransactionsLogger)('Checking transactions');
-        const transactions = __classPrivateFieldGet(this, _PendingTransactionTracker_getTransactions, "f").call(this);
-        const currentChainId = __classPrivateFieldGet(this, _PendingTransactionTracker_getChainId, "f").call(this);
-        let gotUpdates = false;
-        yield (0, controller_utils_1.safelyExecute)(() => Promise.all(transactions.map((meta, index) => __awaiter(this, void 0, void 0, function* () {
-            if (!meta.verifiedOnBlockchain && meta.chainId === currentChainId) {
-                const [reconciledTx, updateRequired] = yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_blockchainTransactionStateReconciler).call(this, meta);
-                if (updateRequired) {
-                    transactions[index] = reconciledTx;
-                    gotUpdates = updateRequired;
-                }
-            }
-        }))));
-        /* istanbul ignore else */
-        if (gotUpdates) {
-            this.hub.emit('transactions', transactions);
-        }
-    });
-}, _PendingTransactionTracker_blockchainTransactionStateReconciler = function _PendingTransactionTracker_blockchainTransactionStateReconciler(meta) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const { status, hash, id, chainId, txParams: { to }, } = meta;
-        switch (status) {
-            case types_1.TransactionStatus.confirmed:
-                (0, logger_1.pendingTransactionsLogger)('Checking confirmed transaction', {
-                    id,
-                    chainId,
-                    to,
-                });
-                const txReceipt = yield (0, controller_utils_1.query)(__classPrivateFieldGet(this, _PendingTransactionTracker_getEthQuery, "f").call(this), 'getTransactionReceipt', [hash]);
-                if (!txReceipt) {
-                    return [meta, false];
-                }
-                const txBlock = yield (0, controller_utils_1.query)(__classPrivateFieldGet(this, _PendingTransactionTracker_getEthQuery, "f").call(this), 'getBlockByHash', [
-                    txReceipt.blockHash,
-                ]);
-                meta.verifiedOnBlockchain = true;
-                meta.txParams.gasUsed = txReceipt.gasUsed;
-                meta.txReceipt = txReceipt;
-                meta.baseFeePerGas = txBlock === null || txBlock === void 0 ? void 0 : txBlock.baseFeePerGas;
-                meta.blockTimestamp = txBlock === null || txBlock === void 0 ? void 0 : txBlock.timestamp;
-                // According to the Web3 docs:
-                // TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.
-                if (Number(txReceipt.status) === 0) {
-                    const error = new Error('Transaction failed. The transaction was reversed');
-                    __classPrivateFieldGet(this, _PendingTransactionTracker_failTransaction, "f").call(this, meta, error);
-                    return [meta, false];
-                }
-                return [meta, true];
-            case types_1.TransactionStatus.submitted:
-                (0, logger_1.pendingTransactionsLogger)('Checking submitted transaction', {
-                    id,
-                    chainId,
-                    to,
-                });
-                const txObj = yield (0, controller_utils_1.query)(__classPrivateFieldGet(this, _PendingTransactionTracker_getEthQuery, "f").call(this), 'getTransactionByHash', [
-                    hash,
-                ]);
-                if (!txObj) {
-                    const receiptShowsFailedStatus = yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_checkTxReceiptStatusIsFailed).call(this, hash);
-                    // Case the txObj is evaluated as false, a second check will
-                    // determine if the tx failed or it is pending or confirmed
-                    if (receiptShowsFailedStatus) {
-                        const error = new Error('Transaction failed. The transaction was dropped or replaced by a new one');
-                        __classPrivateFieldGet(this, _PendingTransactionTracker_failTransaction, "f").call(this, meta, error);
-                    }
-                }
-                /* istanbul ignore next */
-                if (txObj === null || txObj === void 0 ? void 0 : txObj.blockNumber) {
-                    meta.status = types_1.TransactionStatus.confirmed;
-                    this.hub.emit('transaction-confirmed', meta);
-                    return [meta, true];
-                }
-                return [meta, false];
-            default:
-                return [meta, false];
-        }
-    });
-}, _PendingTransactionTracker_checkTxReceiptStatusIsFailed = function _PendingTransactionTracker_checkTxReceiptStatusIsFailed(txHash) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const txReceipt = yield (0, controller_utils_1.query)(__classPrivateFieldGet(this, _PendingTransactionTracker_getEthQuery, "f").call(this), 'getTransactionReceipt', [txHash]);
-        if (!txReceipt) {
-            // Transaction is pending
-            return false;
-        }
-        return Number(txReceipt.status) === 0;
-    });
-};
-//# sourceMappingURL=PendingTransactionTracker.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.js.map b/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.js.map
deleted file mode 100644
index cac9ea3..0000000
--- a/node_modules/@metamask/transaction-controller/dist/PendingTransactionTracker.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"PendingTransactionTracker.js","sourceRoot":"","sources":["../src/PendingTransactionTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import { query, safelyExecute } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport type { BlockTracker } from '@metamask/network-controller';\nimport EventEmitter from 'events';\n\nimport { pendingTransactionsLogger as log } from './logger';\nimport type { TransactionMeta } from './types';\nimport { TransactionStatus } from './types';\n\nexport class PendingTransactionTracker {\n  hub: EventEmitter;\n\n  #blockTracker: BlockTracker;\n\n  #failTransaction: (txMeta: TransactionMeta, error: Error) => void;\n\n  #getChainId: () => string;\n\n  #getEthQuery: () => EthQuery;\n\n  #getTransactions: () => TransactionMeta[];\n\n  constructor({\n    blockTracker,\n    failTransaction,\n    getChainId,\n    getEthQuery,\n    getTransactions,\n  }: {\n    blockTracker: BlockTracker;\n    failTransaction: (txMeta: TransactionMeta, error: Error) => void;\n    getChainId: () => string;\n    getEthQuery: () => EthQuery;\n    getTransactions: () => TransactionMeta[];\n  }) {\n    this.hub = new EventEmitter();\n\n    this.#blockTracker = blockTracker;\n    this.#failTransaction = failTransaction;\n    this.#getChainId = getChainId;\n    this.#getEthQuery = getEthQuery;\n    this.#getTransactions = getTransactions;\n  }\n\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.#blockTracker.addListener('latest', async () => {\n      await safelyExecute(() => this.#onLatestBlock());\n    });\n  }\n\n  /**\n   * Check the status of submitted transactions on the network to determine whether they have\n   * been included in a block. Any that have been included in a block are marked as confirmed.\n   */\n  async #onLatestBlock() {\n    log('Checking transactions');\n\n    const transactions = this.#getTransactions();\n    const currentChainId = this.#getChainId();\n    let gotUpdates = false;\n\n    await safelyExecute(() =>\n      Promise.all(\n        transactions.map(async (meta, index) => {\n          if (!meta.verifiedOnBlockchain && meta.chainId === currentChainId) {\n            const [reconciledTx, updateRequired] =\n              await this.#blockchainTransactionStateReconciler(meta);\n            if (updateRequired) {\n              transactions[index] = reconciledTx;\n              gotUpdates = updateRequired;\n            }\n          }\n        }),\n      ),\n    );\n\n    /* istanbul ignore else */\n    if (gotUpdates) {\n      this.hub.emit('transactions', transactions);\n    }\n  }\n\n  /**\n   * Method to verify the state of a transaction using the Blockchain as a source of truth.\n   *\n   * @param meta - The local transaction to verify on the blockchain.\n   * @returns A tuple containing the updated transaction, and whether or not an update was required.\n   */\n  async #blockchainTransactionStateReconciler(\n    meta: TransactionMeta,\n  ): Promise<[TransactionMeta, boolean]> {\n    const {\n      status,\n      hash,\n      id,\n      chainId,\n      txParams: { to },\n    } = meta;\n\n    switch (status) {\n      case TransactionStatus.confirmed:\n        log('Checking confirmed transaction', {\n          id,\n          chainId,\n          to,\n        });\n\n        const txReceipt = await query(\n          this.#getEthQuery(),\n          'getTransactionReceipt',\n          [hash],\n        );\n\n        if (!txReceipt) {\n          return [meta, false];\n        }\n\n        const txBlock = await query(this.#getEthQuery(), 'getBlockByHash', [\n          txReceipt.blockHash,\n        ]);\n\n        meta.verifiedOnBlockchain = true;\n        meta.txParams.gasUsed = txReceipt.gasUsed;\n        meta.txReceipt = txReceipt;\n        meta.baseFeePerGas = txBlock?.baseFeePerGas;\n        meta.blockTimestamp = txBlock?.timestamp;\n\n        // According to the Web3 docs:\n        // TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n        if (Number(txReceipt.status) === 0) {\n          const error: Error = new Error(\n            'Transaction failed. The transaction was reversed',\n          );\n          this.#failTransaction(meta, error);\n          return [meta, false];\n        }\n\n        return [meta, true];\n      case TransactionStatus.submitted:\n        log('Checking submitted transaction', {\n          id,\n          chainId,\n          to,\n        });\n\n        const txObj = await query(this.#getEthQuery(), 'getTransactionByHash', [\n          hash,\n        ]);\n\n        if (!txObj) {\n          const receiptShowsFailedStatus =\n            await this.#checkTxReceiptStatusIsFailed(hash);\n\n          // Case the txObj is evaluated as false, a second check will\n          // determine if the tx failed or it is pending or confirmed\n          if (receiptShowsFailedStatus) {\n            const error: Error = new Error(\n              'Transaction failed. The transaction was dropped or replaced by a new one',\n            );\n            this.#failTransaction(meta, error);\n          }\n        }\n\n        /* istanbul ignore next */\n        if (txObj?.blockNumber) {\n          meta.status = TransactionStatus.confirmed;\n          this.hub.emit('transaction-confirmed', meta);\n          return [meta, true];\n        }\n\n        return [meta, false];\n      default:\n        return [meta, false];\n    }\n  }\n\n  /**\n   * Method to check if a tx has failed according to their receipt\n   * According to the Web3 docs:\n   * TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n   * The receipt is not available for pending transactions and returns null.\n   *\n   * @param txHash - The transaction hash.\n   * @returns Whether the transaction has failed.\n   */\n  async #checkTxReceiptStatusIsFailed(\n    txHash: string | undefined,\n  ): Promise<boolean> {\n    const txReceipt = await query(\n      this.#getEthQuery(),\n      'getTransactionReceipt',\n      [txHash],\n    );\n    if (!txReceipt) {\n      // Transaction is pending\n      return false;\n    }\n    return Number(txReceipt.status) === 0;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts b/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts
deleted file mode 100644
index 899fb5d..0000000
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts
+++ /dev/null
@@ -1,417 +0,0 @@
-/// <reference types="node" />
-import { Hardfork } from '@ethereumjs/common';
-import type { TypedTransaction } from '@ethereumjs/tx';
-import type { AddApprovalRequest } from '@metamask/approval-controller';
-import type { BaseConfig, BaseState, RestrictedControllerMessenger } from '@metamask/base-controller';
-import { BaseController } from '@metamask/base-controller';
-import type { BlockTracker, NetworkState, Provider } from '@metamask/network-controller';
-import type { Hex } from '@metamask/utils';
-import { EventEmitter } from 'events';
-import type { TransactionParams, TransactionMeta, TransactionReceipt, SecurityProviderRequest, SendFlowHistoryEntry, WalletDevice } from './types';
-import { TransactionType } from './types';
-export declare const HARDFORK = Hardfork.London;
-/**
- * @type Result
- * @property result - Promise resolving to a new transaction hash
- * @property transactionMeta - Meta information about this new transaction
- */
-export interface Result {
-    result: Promise<string>;
-    transactionMeta: TransactionMeta;
-}
-export interface GasPriceValue {
-    gasPrice: string;
-}
-export interface FeeMarketEIP1559Values {
-    maxFeePerGas: string;
-    maxPriorityFeePerGas: string;
-}
-/**
- * @type TransactionConfig
- *
- * Transaction controller configuration
- * @property provider - Provider used to create a new underlying EthQuery instance
- * @property sign - Method used to sign transactions
- */
-export interface TransactionConfig extends BaseConfig {
-    sign?: (txParams: TransactionParams, from: string) => Promise<any>;
-    txHistoryLimit: number;
-}
-/**
- * @type MethodData
- *
- * Method data registry object
- * @property registryMethod - Registry method raw string
- * @property parsedRegistryMethod - Registry method object, containing name and method arguments
- */
-export interface MethodData {
-    registryMethod: string;
-    parsedRegistryMethod: Record<string, unknown>;
-}
-/**
- * @type TransactionState
- *
- * Transaction controller state
- * @property transactions - A list of TransactionMeta objects
- * @property methodData - Object containing all known method data information
- */
-export interface TransactionState extends BaseState {
-    transactions: TransactionMeta[];
-    methodData: {
-        [key: string]: MethodData;
-    };
-    lastFetchedBlockNumbers: {
-        [key: string]: number;
-    };
-}
-/**
- * Multiplier used to determine a transaction's increased gas fee during cancellation
- */
-export declare const CANCEL_RATE = 1.5;
-/**
- * Multiplier used to determine a transaction's increased gas fee during speed up
- */
-export declare const SPEED_UP_RATE = 1.1;
-/**
- * The name of the {@link TransactionController}.
- */
-declare const controllerName = "TransactionController";
-/**
- * The external actions available to the {@link TransactionController}.
- */
-declare type AllowedActions = AddApprovalRequest;
-/**
- * The messenger of the {@link TransactionController}.
- */
-export declare type TransactionControllerMessenger = RestrictedControllerMessenger<typeof controllerName, AllowedActions, never, AllowedActions['type'], never>;
-/**
- * Controller responsible for submitting and managing transactions.
- */
-export declare class TransactionController extends BaseController<TransactionConfig, TransactionState> {
-    private ethQuery;
-    private readonly isHistoryDisabled;
-    private readonly isSendFlowHistoryDisabled;
-    private readonly nonceTracker;
-    private registry;
-    private readonly provider;
-    private readonly handle?;
-    private readonly mutex;
-    private readonly getNetworkState;
-    private readonly getCurrentAccountEIP1559Compatibility;
-    private readonly getCurrentNetworkEIP1559Compatibility;
-    private readonly getPermittedAccounts;
-    private readonly getSelectedAddress;
-    private readonly messagingSystem;
-    private readonly incomingTransactionHelper;
-    private readonly securityProviderRequest?;
-    private readonly pendingTransactionTracker;
-    private failTransaction;
-    private registryLookup;
-    /**
-     * EventEmitter instance used to listen to specific transactional events
-     */
-    hub: EventEmitter;
-    /**
-     * Name of this controller used during composition
-     */
-    name: string;
-    /**
-     * Method used to sign transactions
-     */
-    sign?: (transaction: TypedTransaction, from: string) => Promise<TypedTransaction>;
-    /**
-     * Creates a TransactionController instance.
-     *
-     * @param options - The controller options.
-     * @param options.blockTracker - The block tracker used to poll for new blocks data.
-     * @param options.disableHistory - Whether to disable storing history in transaction metadata.
-     * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.
-     * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.
-     * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.
-     * @param options.getNetworkState - Gets the state of the network controller.
-     * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.
-     * @param options.getSelectedAddress - Gets the address of the currently selected account.
-     * @param options.incomingTransactions - Configuration options for incoming transaction support.
-     * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.
-     * @param options.incomingTransactions.isEnabled - Whether or not incoming transaction retrieval is enabled.
-     * @param options.incomingTransactions.queryEntireHistory - Whether to initially query the entire transaction history or only recent blocks.
-     * @param options.incomingTransactions.updateTransactions - Whether to update local transactions using remote transaction data.
-     * @param options.messenger - The controller messenger.
-     * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
-     * @param options.provider - The provider used to create the underlying EthQuery instance.
-     * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.
-     * @param config - Initial options used to configure this controller.
-     * @param state - Initial state to set on this controller.
-     */
-    constructor({ blockTracker, disableHistory, disableSendFlowHistory, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getNetworkState, getPermittedAccounts, getSelectedAddress, incomingTransactions, messenger, onNetworkStateChange, provider, securityProviderRequest, }: {
-        blockTracker: BlockTracker;
-        disableHistory: boolean;
-        disableSendFlowHistory: boolean;
-        getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;
-        getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;
-        getNetworkState: () => NetworkState;
-        getPermittedAccounts: (origin?: string) => Promise<string[]>;
-        getSelectedAddress: () => string;
-        incomingTransactions: {
-            includeTokenTransfers?: boolean;
-            isEnabled?: () => boolean;
-            queryEntireHistory?: boolean;
-            updateTransactions?: boolean;
-        };
-        messenger: TransactionControllerMessenger;
-        onNetworkStateChange: (listener: (state: NetworkState) => void) => void;
-        provider: Provider;
-        securityProviderRequest?: SecurityProviderRequest;
-    }, config?: Partial<TransactionConfig>, state?: Partial<TransactionState>);
-    /**
-     * Handle new method data request.
-     *
-     * @param fourBytePrefix - The method prefix.
-     * @returns The method data object corresponding to the given signature prefix.
-     */
-    handleMethodData(fourBytePrefix: string): Promise<MethodData>;
-    /**
-     * Add a new unapproved transaction to state. Parameters will be validated, a
-     * unique transaction id will be generated, and gas and gasPrice will be calculated
-     * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.
-     *
-     * @param txParams - Standard parameters for an Ethereum transaction.
-     * @param opts - Additional options to control how the transaction is added.
-     * @param opts.actionId - Unique ID to prevent duplicate requests.
-     * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
-     * @param opts.method - RPC method that requested the transaction.
-     * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
-     * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.
-     * @param opts.securityAlertResponse - Response from security validator.
-     * @param opts.sendFlowHistory - The sendFlowHistory entries to add.
-     * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.
-     * @returns Object containing a promise resolving to the transaction hash if approved.
-     */
-    addTransaction(txParams: TransactionParams, { actionId, deviceConfirmedOn, method, origin, requireApproval, securityAlertResponse, sendFlowHistory, type, }?: {
-        actionId?: string;
-        deviceConfirmedOn?: WalletDevice;
-        method?: string;
-        origin?: string;
-        requireApproval?: boolean | undefined;
-        securityAlertResponse?: Record<string, unknown>;
-        sendFlowHistory?: SendFlowHistoryEntry[];
-        type?: TransactionType;
-    }): Promise<Result>;
-    startIncomingTransactionPolling(): void;
-    stopIncomingTransactionPolling(): void;
-    updateIncomingTransactions(): Promise<void>;
-    /**
-     * Creates approvals for all unapproved transactions persisted.
-     */
-    initApprovals(): void;
-    /**
-     * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
-     * and emitting a `<tx.id>:finished` hub event.
-     *
-     * @param transactionId - The ID of the transaction to cancel.
-     * @param gasValues - The gas values to use for the cancellation transaction.
-     * @param options - The options for the cancellation transaction.
-     * @param options.estimatedBaseFee - The estimated base fee of the transaction.
-     */
-    stopTransaction(transactionId: string, gasValues?: GasPriceValue | FeeMarketEIP1559Values, { estimatedBaseFee }?: {
-        estimatedBaseFee?: string;
-    }): Promise<void>;
-    /**
-     * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.
-     *
-     * @param transactionId - The ID of the transaction to speed up.
-     * @param gasValues - The gas values to use for the speed up transaction.
-     * @param options - The options for the speed up transaction.
-     * @param options.actionId - Unique ID to prevent duplicate requests
-     * @param options.estimatedBaseFee - The estimated base fee of the transaction.
-     */
-    speedUpTransaction(transactionId: string, gasValues?: GasPriceValue | FeeMarketEIP1559Values, { actionId, estimatedBaseFee, }?: {
-        actionId?: string;
-        estimatedBaseFee?: string;
-    }): Promise<void>;
-    /**
-     * Estimates required gas for a given transaction.
-     *
-     * @param transaction - The transaction to estimate gas for.
-     * @returns The gas and gas price.
-     */
-    estimateGas(transaction: TransactionParams): Promise<{
-        gas: string;
-        gasPrice: any;
-        estimateGasError?: undefined;
-    } | {
-        gas: string;
-        gasPrice: any;
-        estimateGasError: string | undefined;
-    }>;
-    /**
-     * Updates an existing transaction in state.
-     *
-     * @param transactionMeta - The new transaction to store in state.
-     * @param note - A note or update reason to include in the transaction history.
-     */
-    updateTransaction(transactionMeta: TransactionMeta, note: string): void;
-    /**
-     * Removes all transactions from state, optionally based on the current network.
-     *
-     * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the
-     * current network. If `true`, all transactions are wiped.
-     * @param address - If specified, only transactions originating from this address will be
-     * wiped on current network.
-     */
-    wipeTransactions(ignoreNetwork?: boolean, address?: string): void;
-    startIncomingTransactionProcessing(): void;
-    stopIncomingTransactionProcessing(): void;
-    /**
-     * Adds external provided transaction to state as confirmed transaction.
-     *
-     * @param transactionMeta - TransactionMeta to add transactions.
-     * @param transactionReceipt - TransactionReceipt of the external transaction.
-     * @param baseFeePerGas - Base fee per gas of the external transaction.
-     */
-    confirmExternalTransaction(transactionMeta: TransactionMeta, transactionReceipt: TransactionReceipt, baseFeePerGas: Hex): Promise<void>;
-    /**
-     * Append new send flow history to a transaction.
-     *
-     * @param transactionID - The ID of the transaction to update.
-     * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.
-     * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.
-     * @returns The updated transactionMeta.
-     */
-    updateTransactionSendFlowHistory(transactionID: string, currentSendFlowHistoryLength: number, sendFlowHistoryToAdd: SendFlowHistoryEntry[]): TransactionMeta;
-    /**
-     * Update the gas values of a transaction.
-     *
-     * @param transactionId - The ID of the transaction to update.
-     * @param gasValues - Gas values to update.
-     * @param gasValues.gas - Same as transaction.gasLimit.
-     * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.
-     * @param gasValues.gasPrice - Price per gas for legacy transactions.
-     * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.
-     * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.
-     * @param gasValues.estimateUsed - Which estimate level was used.
-     * @param gasValues.estimateSuggested - Which estimate level that the API suggested.
-     * @param gasValues.defaultGasEstimates - The default estimate for gas.
-     * @param gasValues.originalGasEstimate - Original estimate for gas.
-     * @param gasValues.userEditedGasLimit - The gas limit supplied by user.
-     * @param gasValues.userFeeLevel - Estimate level user selected.
-     * @returns The updated transactionMeta.
-     */
-    updateTransactionGasFees(transactionId: string, { defaultGasEstimates, estimateUsed, estimateSuggested, gas, gasLimit, gasPrice, maxPriorityFeePerGas, maxFeePerGas, originalGasEstimate, userEditedGasLimit, userFeeLevel, }: {
-        defaultGasEstimates?: string;
-        estimateUsed?: string;
-        estimateSuggested?: string;
-        gas?: string;
-        gasLimit?: string;
-        gasPrice?: string;
-        maxPriorityFeePerGas?: string;
-        maxFeePerGas?: string;
-        originalGasEstimate?: string;
-        userEditedGasLimit?: boolean;
-        userFeeLevel?: string;
-    }): TransactionMeta;
-    private processApproval;
-    /**
-     * Approves a transaction and updates it's status in state. If this is not a
-     * retry transaction, a nonce will be generated. The transaction is signed
-     * using the sign configuration property, then published to the blockchain.
-     * A `<tx.id>:finished` hub event is fired after success or failure.
-     *
-     * @param transactionId - The ID of the transaction to approve.
-     */
-    private approveTransaction;
-    /**
-     * Cancels a transaction based on its ID by setting its status to "rejected"
-     * and emitting a `<tx.id>:finished` hub event.
-     *
-     * @param transactionId - The ID of the transaction to cancel.
-     */
-    private cancelTransaction;
-    /**
-     * Trim the amount of transactions that are set on the state. Checks
-     * if the length of the tx history is longer then desired persistence
-     * limit and then if it is removes the oldest confirmed or rejected tx.
-     * Pending or unapproved transactions will not be removed by this
-     * operation. For safety of presenting a fully functional transaction UI
-     * representation, this function will not break apart transactions with the
-     * same nonce, created on the same day, per network. Not accounting for transactions of the same
-     * nonce, same day and network combo can result in confusing or broken experiences
-     * in the UI. The transactions are then updated using the BaseController update.
-     *
-     * @param transactions - The transactions to be applied to the state.
-     * @returns The trimmed list of transactions.
-     */
-    private trimTransactionsForState;
-    /**
-     * Determines if the transaction is in a final state.
-     *
-     * @param status - The transaction status.
-     * @returns Whether the transaction is in a final state.
-     */
-    private isFinalState;
-    /**
-     * Whether the transaction has at least completed all local processing.
-     *
-     * @param status - The transaction status.
-     * @returns Whether the transaction is in a final state.
-     */
-    private isLocalFinalState;
-    private requestApproval;
-    private getTransaction;
-    private getApprovalId;
-    private isTransactionCompleted;
-    private getChainId;
-    private prepareUnsignedEthTx;
-    /**
-     * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for
-     * specifying which chain, network, hardfork and EIPs to support for
-     * a transaction. By referencing this configuration, and analyzing the fields
-     * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718
-     * transaction type to use.
-     *
-     * @returns common configuration object
-     */
-    private getCommonConfiguration;
-    private onIncomingTransactions;
-    private onUpdatedLastFetchedBlockNumbers;
-    private onPendingTransactionsUpdate;
-    private generateDappSuggestedGasFees;
-    /**
-     * Validates and adds external provided transaction to state.
-     *
-     * @param transactionMeta - Nominated external transaction to be added to state.
-     */
-    private addExternalTransaction;
-    /**
-     * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions
-     * in the transactions have the same nonce.
-     *
-     * @param transactionId - Used to identify original transaction.
-     */
-    private markNonceDuplicatesDropped;
-    /**
-     * Method to set transaction status to dropped.
-     *
-     * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.
-     */
-    private setTransactionStatusDropped;
-    /**
-     * Get transaction with provided actionId.
-     *
-     * @param actionId - Unique ID to prevent duplicate requests
-     * @returns the filtered transaction
-     */
-    private getTransactionWithActionId;
-    private waitForTransactionFinished;
-    /**
-     * Updates the r, s, and v properties of a TransactionMeta object
-     * with values from a signed transaction.
-     *
-     * @param transactionMeta - The TransactionMeta object to update.
-     * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.
-     */
-    private updateTransactionMetaRSV;
-    private getEIP1559Compatibility;
-}
-export default TransactionController;
-//# sourceMappingURL=TransactionController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts.map b/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts.map
deleted file mode 100644
index e54e5f7..0000000
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"TransactionController.d.ts","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.js b/node_modules/@metamask/transaction-controller/dist/TransactionController.js
index 9748f0b..e33351b 100644
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.js
+++ b/node_modules/@metamask/transaction-controller/dist/TransactionController.js
@@ -1,1099 +1,45 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.TransactionController = exports.SPEED_UP_RATE = exports.CANCEL_RATE = exports.HARDFORK = void 0;
-const common_1 = require("@ethereumjs/common");
-const tx_1 = require("@ethereumjs/tx");
-const base_controller_1 = require("@metamask/base-controller");
-const controller_utils_1 = require("@metamask/controller-utils");
-const eth_query_1 = __importDefault(require("@metamask/eth-query"));
-const rpc_errors_1 = require("@metamask/rpc-errors");
-const async_mutex_1 = require("async-mutex");
-const eth_method_registry_1 = __importDefault(require("eth-method-registry"));
-const ethereumjs_util_1 = require("ethereumjs-util");
-const events_1 = require("events");
-const lodash_1 = require("lodash");
-const nonce_tracker_1 = __importDefault(require("nonce-tracker"));
-const uuid_1 = require("uuid");
-const EtherscanRemoteTransactionSource_1 = require("./EtherscanRemoteTransactionSource");
-const external_transactions_1 = require("./external-transactions");
-const history_1 = require("./history");
-const IncomingTransactionHelper_1 = require("./IncomingTransactionHelper");
-const logger_1 = require("./logger");
-const PendingTransactionTracker_1 = require("./PendingTransactionTracker");
-const transaction_type_1 = require("./transaction-type");
-const types_1 = require("./types");
-const utils_1 = require("./utils");
-const validation_1 = require("./validation");
-exports.HARDFORK = common_1.Hardfork.London;
-/**
- * Multiplier used to determine a transaction's increased gas fee during cancellation
- */
-exports.CANCEL_RATE = 1.5;
-/**
- * Multiplier used to determine a transaction's increased gas fee during speed up
- */
-exports.SPEED_UP_RATE = 1.1;
-/**
- * The name of the {@link TransactionController}.
- */
-const controllerName = 'TransactionController';
-/**
- * Controller responsible for submitting and managing transactions.
- */
-class TransactionController extends base_controller_1.BaseController {
-    /**
-     * Creates a TransactionController instance.
-     *
-     * @param options - The controller options.
-     * @param options.blockTracker - The block tracker used to poll for new blocks data.
-     * @param options.disableHistory - Whether to disable storing history in transaction metadata.
-     * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.
-     * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.
-     * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.
-     * @param options.getNetworkState - Gets the state of the network controller.
-     * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.
-     * @param options.getSelectedAddress - Gets the address of the currently selected account.
-     * @param options.incomingTransactions - Configuration options for incoming transaction support.
-     * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.
-     * @param options.incomingTransactions.isEnabled - Whether or not incoming transaction retrieval is enabled.
-     * @param options.incomingTransactions.queryEntireHistory - Whether to initially query the entire transaction history or only recent blocks.
-     * @param options.incomingTransactions.updateTransactions - Whether to update local transactions using remote transaction data.
-     * @param options.messenger - The controller messenger.
-     * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
-     * @param options.provider - The provider used to create the underlying EthQuery instance.
-     * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.
-     * @param config - Initial options used to configure this controller.
-     * @param state - Initial state to set on this controller.
-     */
-    constructor({ blockTracker, disableHistory, disableSendFlowHistory, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getNetworkState, getPermittedAccounts, getSelectedAddress, incomingTransactions = {}, messenger, onNetworkStateChange, provider, securityProviderRequest, }, config, state) {
-        super(config, state);
-        this.mutex = new async_mutex_1.Mutex();
-        /**
-         * EventEmitter instance used to listen to specific transactional events
-         */
-        this.hub = new events_1.EventEmitter();
-        /**
-         * Name of this controller used during composition
-         */
-        this.name = 'TransactionController';
-        this.defaultConfig = {
-            txHistoryLimit: 40,
-        };
-        this.defaultState = {
-            methodData: {},
-            transactions: [],
-            lastFetchedBlockNumbers: {},
-        };
-        this.initialize();
-        this.provider = provider;
-        this.messagingSystem = messenger;
-        this.getNetworkState = getNetworkState;
-        // @ts-expect-error TODO: Provider type alignment
-        this.ethQuery = new eth_query_1.default(provider);
-        this.isSendFlowHistoryDisabled = disableSendFlowHistory !== null && disableSendFlowHistory !== void 0 ? disableSendFlowHistory : false;
-        this.isHistoryDisabled = disableHistory !== null && disableHistory !== void 0 ? disableHistory : false;
-        this.registry = new eth_method_registry_1.default({ provider });
-        this.getCurrentAccountEIP1559Compatibility =
-            getCurrentAccountEIP1559Compatibility;
-        this.getCurrentNetworkEIP1559Compatibility =
-            getCurrentNetworkEIP1559Compatibility;
-        this.getPermittedAccounts = getPermittedAccounts;
-        this.getSelectedAddress = getSelectedAddress;
-        this.securityProviderRequest = securityProviderRequest;
-        this.nonceTracker = new nonce_tracker_1.default({
-            provider,
-            blockTracker,
-            getPendingTransactions: (address) => (0, utils_1.getAndFormatTransactionsForNonceTracker)(address, types_1.TransactionStatus.submitted, this.state.transactions),
-            getConfirmedTransactions: (address) => (0, utils_1.getAndFormatTransactionsForNonceTracker)(address, types_1.TransactionStatus.confirmed, this.state.transactions),
-        });
-        this.incomingTransactionHelper = new IncomingTransactionHelper_1.IncomingTransactionHelper({
-            blockTracker,
-            getCurrentAccount: getSelectedAddress,
-            getLastFetchedBlockNumbers: () => this.state.lastFetchedBlockNumbers,
-            getNetworkState,
-            isEnabled: incomingTransactions.isEnabled,
-            queryEntireHistory: incomingTransactions.queryEntireHistory,
-            remoteTransactionSource: new EtherscanRemoteTransactionSource_1.EtherscanRemoteTransactionSource({
-                includeTokenTransfers: incomingTransactions.includeTokenTransfers,
-            }),
-            transactionLimit: this.config.txHistoryLimit,
-            updateTransactions: incomingTransactions.updateTransactions,
-        });
-        this.incomingTransactionHelper.hub.on('transactions', this.onIncomingTransactions.bind(this));
-        this.incomingTransactionHelper.hub.on('updatedLastFetchedBlockNumbers', this.onUpdatedLastFetchedBlockNumbers.bind(this));
-        this.pendingTransactionTracker = new PendingTransactionTracker_1.PendingTransactionTracker({
-            blockTracker,
-            failTransaction: this.failTransaction.bind(this),
-            getChainId: this.getChainId.bind(this),
-            getEthQuery: () => this.ethQuery,
-            getTransactions: () => this.state.transactions,
-        });
-        this.pendingTransactionTracker.hub.on('transactions', this.onPendingTransactionsUpdate.bind(this));
-        this.pendingTransactionTracker.hub.on('transaction-confirmed', (transactionMeta) => this.hub.emit(`${transactionMeta.id}:confirmed`, transactionMeta));
-        onNetworkStateChange(() => {
-            // @ts-expect-error TODO: Provider type alignment
-            this.ethQuery = new eth_query_1.default(this.provider);
-            this.registry = new eth_method_registry_1.default({ provider: this.provider });
-        });
-        this.pendingTransactionTracker.start();
-    }
-    failTransaction(transactionMeta, error) {
-        const newTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { error, status: types_1.TransactionStatus.failed });
-        this.updateTransaction(newTransactionMeta, 'TransactionController#failTransaction - Add error message and set status to failed');
-        this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);
-    }
-    registryLookup(fourBytePrefix) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const registryMethod = yield this.registry.lookup(fourBytePrefix);
-            const parsedRegistryMethod = this.registry.parse(registryMethod);
-            return { registryMethod, parsedRegistryMethod };
-        });
-    }
-    /**
-     * Handle new method data request.
-     *
-     * @param fourBytePrefix - The method prefix.
-     * @returns The method data object corresponding to the given signature prefix.
-     */
-    handleMethodData(fourBytePrefix) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const releaseLock = yield this.mutex.acquire();
-            try {
-                const { methodData } = this.state;
-                const knownMethod = Object.keys(methodData).find((knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix);
-                if (knownMethod) {
-                    return methodData[fourBytePrefix];
-                }
-                const registry = yield this.registryLookup(fourBytePrefix);
-                this.update({
-                    methodData: Object.assign(Object.assign({}, methodData), { [fourBytePrefix]: registry }),
-                });
-                return registry;
-            }
-            finally {
-                releaseLock();
-            }
-        });
-    }
-    /**
-     * Add a new unapproved transaction to state. Parameters will be validated, a
-     * unique transaction id will be generated, and gas and gasPrice will be calculated
-     * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.
-     *
-     * @param txParams - Standard parameters for an Ethereum transaction.
-     * @param opts - Additional options to control how the transaction is added.
-     * @param opts.actionId - Unique ID to prevent duplicate requests.
-     * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
-     * @param opts.method - RPC method that requested the transaction.
-     * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
-     * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.
-     * @param opts.securityAlertResponse - Response from security validator.
-     * @param opts.sendFlowHistory - The sendFlowHistory entries to add.
-     * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.
-     * @returns Object containing a promise resolving to the transaction hash if approved.
-     */
-    addTransaction(txParams, { actionId, deviceConfirmedOn, method, origin, requireApproval, securityAlertResponse, sendFlowHistory, type, } = {}) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const chainId = this.getChainId();
-            const { transactions } = this.state;
-            txParams = (0, utils_1.normalizeTxParams)(txParams);
-            const isEIP1559Compatible = yield this.getEIP1559Compatibility();
-            (0, validation_1.validateTxParams)(txParams, isEIP1559Compatible);
-            if (origin) {
-                yield (0, validation_1.validateTransactionOrigin)(yield this.getPermittedAccounts(origin), this.getSelectedAddress(), txParams.from, origin);
-            }
-            const dappSuggestedGasFees = this.generateDappSuggestedGasFees(txParams, origin);
-            const transactionType = type !== null && type !== void 0 ? type : (yield (0, transaction_type_1.determineTransactionType)(txParams, this.ethQuery)).type;
-            const existingTransactionMeta = this.getTransactionWithActionId(actionId);
-            // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.
-            const transactionMeta = existingTransactionMeta || {
-                // Add actionId to txMeta to check if same actionId is seen again
-                actionId,
-                chainId,
-                dappSuggestedGasFees,
-                deviceConfirmedOn,
-                id: (0, uuid_1.v1)(),
-                origin,
-                securityAlertResponse,
-                status: types_1.TransactionStatus.unapproved,
-                time: Date.now(),
-                txParams,
-                userEditedGasLimit: false,
-                verifiedOnBlockchain: false,
-                type: transactionType,
-            };
-            try {
-                const { gas, estimateGasError } = yield this.estimateGas(txParams);
-                txParams.gas = gas;
-                txParams.estimateGasError = estimateGasError;
-                transactionMeta.originalGasEstimate = gas;
-            }
-            catch (error) {
-                this.failTransaction(transactionMeta, error);
-                return Promise.reject(error);
-            }
-            // Checks if a transaction already exists with a given actionId
-            if (!existingTransactionMeta) {
-                // Set security provider response
-                if (method && this.securityProviderRequest) {
-                    const securityProviderResponse = yield this.securityProviderRequest(transactionMeta, method);
-                    transactionMeta.securityProviderResponse = securityProviderResponse;
-                }
-                if (!this.isSendFlowHistoryDisabled) {
-                    transactionMeta.sendFlowHistory = sendFlowHistory !== null && sendFlowHistory !== void 0 ? sendFlowHistory : [];
-                }
-                // Initial history push
-                if (!this.isHistoryDisabled) {
-                    (0, history_1.addInitialHistorySnapshot)(transactionMeta);
-                }
-                transactions.push(transactionMeta);
-                this.update({
-                    transactions: this.trimTransactionsForState(transactions),
-                });
-                this.hub.emit(`unapprovedTransaction`, transactionMeta);
-            }
-            return {
-                result: this.processApproval(transactionMeta, {
-                    isExisting: Boolean(existingTransactionMeta),
-                    requireApproval,
-                }),
-                transactionMeta,
-            };
-        });
-    }
-    startIncomingTransactionPolling() {
-        this.incomingTransactionHelper.start();
-    }
-    stopIncomingTransactionPolling() {
-        this.incomingTransactionHelper.stop();
-    }
-    updateIncomingTransactions() {
-        return __awaiter(this, void 0, void 0, function* () {
-            yield this.incomingTransactionHelper.update();
-        });
-    }
-    /**
-     * Creates approvals for all unapproved transactions persisted.
-     */
-    initApprovals() {
-        const chainId = this.getChainId();
-        const unapprovedTxs = this.state.transactions.filter((transaction) => transaction.status === types_1.TransactionStatus.unapproved &&
-            transaction.chainId === chainId);
-        for (const txMeta of unapprovedTxs) {
-            this.processApproval(txMeta, {
-                shouldShowRequest: false,
-            }).catch((error) => {
-                /* istanbul ignore next */
-                console.error('Error during persisted transaction approval', error);
-            });
-        }
-    }
-    /**
-     * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
-     * and emitting a `<tx.id>:finished` hub event.
-     *
-     * @param transactionId - The ID of the transaction to cancel.
-     * @param gasValues - The gas values to use for the cancellation transaction.
-     * @param options - The options for the cancellation transaction.
-     * @param options.estimatedBaseFee - The estimated base fee of the transaction.
-     */
-    stopTransaction(transactionId, gasValues, { estimatedBaseFee } = {}) {
-        var _a, _b;
-        return __awaiter(this, void 0, void 0, function* () {
-            if (gasValues) {
-                (0, utils_1.validateGasValues)(gasValues);
-            }
-            const transactionMeta = this.state.transactions.find(({ id }) => id === transactionId);
-            if (!transactionMeta) {
-                return;
-            }
-            if (!this.sign) {
-                throw new Error('No sign method defined.');
-            }
-            // gasPrice (legacy non EIP1559)
-            const minGasPrice = (0, utils_1.getIncreasedPriceFromExisting)(transactionMeta.txParams.gasPrice, exports.CANCEL_RATE);
-            const gasPriceFromValues = (0, utils_1.isGasPriceValue)(gasValues) && gasValues.gasPrice;
-            const newGasPrice = (gasPriceFromValues &&
-                (0, utils_1.validateMinimumIncrease)(gasPriceFromValues, minGasPrice)) ||
-                minGasPrice;
-            // maxFeePerGas (EIP1559)
-            const existingMaxFeePerGas = (_a = transactionMeta.txParams) === null || _a === void 0 ? void 0 : _a.maxFeePerGas;
-            const minMaxFeePerGas = (0, utils_1.getIncreasedPriceFromExisting)(existingMaxFeePerGas, exports.CANCEL_RATE);
-            const maxFeePerGasValues = (0, utils_1.isFeeMarketEIP1559Values)(gasValues) && gasValues.maxFeePerGas;
-            const newMaxFeePerGas = (maxFeePerGasValues &&
-                (0, utils_1.validateMinimumIncrease)(maxFeePerGasValues, minMaxFeePerGas)) ||
-                (existingMaxFeePerGas && minMaxFeePerGas);
-            // maxPriorityFeePerGas (EIP1559)
-            const existingMaxPriorityFeePerGas = (_b = transactionMeta.txParams) === null || _b === void 0 ? void 0 : _b.maxPriorityFeePerGas;
-            const minMaxPriorityFeePerGas = (0, utils_1.getIncreasedPriceFromExisting)(existingMaxPriorityFeePerGas, exports.CANCEL_RATE);
-            const maxPriorityFeePerGasValues = (0, utils_1.isFeeMarketEIP1559Values)(gasValues) && gasValues.maxPriorityFeePerGas;
-            const newMaxPriorityFeePerGas = (maxPriorityFeePerGasValues &&
-                (0, utils_1.validateMinimumIncrease)(maxPriorityFeePerGasValues, minMaxPriorityFeePerGas)) ||
-                (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);
-            const txParams = newMaxFeePerGas && newMaxPriorityFeePerGas
-                ? {
-                    from: transactionMeta.txParams.from,
-                    gasLimit: transactionMeta.txParams.gas,
-                    maxFeePerGas: newMaxFeePerGas,
-                    maxPriorityFeePerGas: newMaxPriorityFeePerGas,
-                    type: 2,
-                    nonce: transactionMeta.txParams.nonce,
-                    to: transactionMeta.txParams.from,
-                    value: '0x0',
-                }
-                : {
-                    from: transactionMeta.txParams.from,
-                    gasLimit: transactionMeta.txParams.gas,
-                    gasPrice: newGasPrice,
-                    nonce: transactionMeta.txParams.nonce,
-                    to: transactionMeta.txParams.from,
-                    value: '0x0',
-                };
-            const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
-            const signedTx = yield this.sign(unsignedEthTx, transactionMeta.txParams.from);
-            yield this.updateTransactionMetaRSV(transactionMeta, signedTx);
-            const rawTx = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
-            yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTx]);
-            transactionMeta.estimatedBaseFee = estimatedBaseFee;
-            transactionMeta.status = types_1.TransactionStatus.cancelled;
-            this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
-        });
-    }
-    /**
-     * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.
-     *
-     * @param transactionId - The ID of the transaction to speed up.
-     * @param gasValues - The gas values to use for the speed up transaction.
-     * @param options - The options for the speed up transaction.
-     * @param options.actionId - Unique ID to prevent duplicate requests
-     * @param options.estimatedBaseFee - The estimated base fee of the transaction.
-     */
-    speedUpTransaction(transactionId, gasValues, { actionId, estimatedBaseFee, } = {}) {
-        var _a, _b;
-        return __awaiter(this, void 0, void 0, function* () {
-            // If transaction is found for same action id, do not create a new speed up transaction.
-            if (this.getTransactionWithActionId(actionId)) {
-                return;
-            }
-            if (gasValues) {
-                (0, utils_1.validateGasValues)(gasValues);
-            }
-            const transactionMeta = this.state.transactions.find(({ id }) => id === transactionId);
-            /* istanbul ignore next */
-            if (!transactionMeta) {
-                return;
-            }
-            /* istanbul ignore next */
-            if (!this.sign) {
-                throw new Error('No sign method defined.');
-            }
-            const { transactions } = this.state;
-            // gasPrice (legacy non EIP1559)
-            const minGasPrice = (0, utils_1.getIncreasedPriceFromExisting)(transactionMeta.txParams.gasPrice, exports.SPEED_UP_RATE);
-            const gasPriceFromValues = (0, utils_1.isGasPriceValue)(gasValues) && gasValues.gasPrice;
-            const newGasPrice = (gasPriceFromValues &&
-                (0, utils_1.validateMinimumIncrease)(gasPriceFromValues, minGasPrice)) ||
-                minGasPrice;
-            // maxFeePerGas (EIP1559)
-            const existingMaxFeePerGas = (_a = transactionMeta.txParams) === null || _a === void 0 ? void 0 : _a.maxFeePerGas;
-            const minMaxFeePerGas = (0, utils_1.getIncreasedPriceFromExisting)(existingMaxFeePerGas, exports.SPEED_UP_RATE);
-            const maxFeePerGasValues = (0, utils_1.isFeeMarketEIP1559Values)(gasValues) && gasValues.maxFeePerGas;
-            const newMaxFeePerGas = (maxFeePerGasValues &&
-                (0, utils_1.validateMinimumIncrease)(maxFeePerGasValues, minMaxFeePerGas)) ||
-                (existingMaxFeePerGas && minMaxFeePerGas);
-            // maxPriorityFeePerGas (EIP1559)
-            const existingMaxPriorityFeePerGas = (_b = transactionMeta.txParams) === null || _b === void 0 ? void 0 : _b.maxPriorityFeePerGas;
-            const minMaxPriorityFeePerGas = (0, utils_1.getIncreasedPriceFromExisting)(existingMaxPriorityFeePerGas, exports.SPEED_UP_RATE);
-            const maxPriorityFeePerGasValues = (0, utils_1.isFeeMarketEIP1559Values)(gasValues) && gasValues.maxPriorityFeePerGas;
-            const newMaxPriorityFeePerGas = (maxPriorityFeePerGasValues &&
-                (0, utils_1.validateMinimumIncrease)(maxPriorityFeePerGasValues, minMaxPriorityFeePerGas)) ||
-                (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);
-            const txParams = newMaxFeePerGas && newMaxPriorityFeePerGas
-                ? Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas, maxFeePerGas: newMaxFeePerGas, maxPriorityFeePerGas: newMaxPriorityFeePerGas, type: 2 }) : Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas, gasPrice: newGasPrice });
-            const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
-            const signedTx = yield this.sign(unsignedEthTx, transactionMeta.txParams.from);
-            yield this.updateTransactionMetaRSV(transactionMeta, signedTx);
-            const rawTx = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
-            const hash = yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTx]);
-            const baseTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { estimatedBaseFee, id: (0, uuid_1.v1)(), time: Date.now(), hash,
-                actionId, originalGasEstimate: transactionMeta.txParams.gas, type: types_1.TransactionType.retry });
-            const newTransactionMeta = newMaxFeePerGas && newMaxPriorityFeePerGas
-                ? Object.assign(Object.assign({}, baseTransactionMeta), { txParams: Object.assign(Object.assign({}, transactionMeta.txParams), { maxFeePerGas: newMaxFeePerGas, maxPriorityFeePerGas: newMaxPriorityFeePerGas }) }) : Object.assign(Object.assign({}, baseTransactionMeta), { txParams: Object.assign(Object.assign({}, transactionMeta.txParams), { gasPrice: newGasPrice }) });
-            transactions.push(newTransactionMeta);
-            this.update({ transactions: this.trimTransactionsForState(transactions) });
-            this.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);
-        });
-    }
-    /**
-     * Estimates required gas for a given transaction.
-     *
-     * @param transaction - The transaction to estimate gas for.
-     * @returns The gas and gas price.
-     */
-    estimateGas(transaction) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const estimatedTransaction = Object.assign({}, transaction);
-            const { gas, gasPrice: providedGasPrice, to, value, data, } = estimatedTransaction;
-            const gasPrice = typeof providedGasPrice === 'undefined'
-                ? yield (0, controller_utils_1.query)(this.ethQuery, 'gasPrice')
-                : providedGasPrice;
-            const { providerConfig } = this.getNetworkState();
-            const isCustomNetwork = providerConfig.type === controller_utils_1.NetworkType.rpc;
-            // 1. If gas is already defined on the transaction, use it
-            if (typeof gas !== 'undefined') {
-                return { gas, gasPrice };
-            }
-            const { gasLimit } = yield (0, controller_utils_1.query)(this.ethQuery, 'getBlockByNumber', [
-                'latest',
-                false,
-            ]);
-            // 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000.
-            // If the network is a custom network then bypass this check and fetch 'estimateGas'.
-            /* istanbul ignore next */
-            const code = to ? yield (0, controller_utils_1.query)(this.ethQuery, 'getCode', [to]) : undefined;
-            /* istanbul ignore next */
-            if (!isCustomNetwork &&
-                (!to || (to && !data && (!code || code === '0x')))) {
-                return { gas: '0x5208', gasPrice };
-            }
-            // if data, should be hex string format
-            estimatedTransaction.data = !data
-                ? data
-                : /* istanbul ignore next */ (0, ethereumjs_util_1.addHexPrefix)(data);
-            // 3. If this is a contract address, safely estimate gas using RPC
-            estimatedTransaction.value =
-                typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;
-            const gasLimitBN = (0, controller_utils_1.hexToBN)(gasLimit);
-            estimatedTransaction.gas = (0, controller_utils_1.BNToHex)((0, controller_utils_1.fractionBN)(gasLimitBN, 19, 20));
-            let gasHex;
-            let estimateGasError;
-            try {
-                gasHex = yield (0, controller_utils_1.query)(this.ethQuery, 'estimateGas', [
-                    estimatedTransaction,
-                ]);
-            }
-            catch (error) {
-                estimateGasError = utils_1.ESTIMATE_GAS_ERROR;
-            }
-            // 4. Pad estimated gas without exceeding the most recent block gasLimit. If the network is a
-            // a custom network then return the eth_estimateGas value.
-            const gasBN = (0, controller_utils_1.hexToBN)(gasHex);
-            const maxGasBN = gasLimitBN.muln(0.9);
-            const paddedGasBN = gasBN.muln(1.5);
-            /* istanbul ignore next */
-            if (gasBN.gt(maxGasBN) || isCustomNetwork) {
-                return { gas: (0, ethereumjs_util_1.addHexPrefix)(gasHex), gasPrice, estimateGasError };
-            }
-            /* istanbul ignore next */
-            if (paddedGasBN.lt(maxGasBN)) {
-                return {
-                    gas: (0, ethereumjs_util_1.addHexPrefix)((0, controller_utils_1.BNToHex)(paddedGasBN)),
-                    gasPrice,
-                    estimateGasError,
-                };
-            }
-            return { gas: (0, ethereumjs_util_1.addHexPrefix)((0, controller_utils_1.BNToHex)(maxGasBN)), gasPrice, estimateGasError };
-        });
-    }
-    /**
-     * Updates an existing transaction in state.
-     *
-     * @param transactionMeta - The new transaction to store in state.
-     * @param note - A note or update reason to include in the transaction history.
-     */
-    updateTransaction(transactionMeta, note) {
-        const { transactions } = this.state;
-        transactionMeta.txParams = (0, utils_1.normalizeTxParams)(transactionMeta.txParams);
-        (0, validation_1.validateTxParams)(transactionMeta.txParams);
-        if (!this.isHistoryDisabled) {
-            (0, history_1.updateTransactionHistory)(transactionMeta, note);
-        }
-        const index = transactions.findIndex(({ id }) => transactionMeta.id === id);
-        transactions[index] = transactionMeta;
-        this.update({ transactions: this.trimTransactionsForState(transactions) });
-    }
-    /**
-     * Removes all transactions from state, optionally based on the current network.
-     *
-     * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the
-     * current network. If `true`, all transactions are wiped.
-     * @param address - If specified, only transactions originating from this address will be
-     * wiped on current network.
-     */
-    wipeTransactions(ignoreNetwork, address) {
-        /* istanbul ignore next */
-        if (ignoreNetwork && !address) {
-            this.update({ transactions: [] });
-            return;
-        }
-        const currentChainId = this.getChainId();
-        const newTransactions = this.state.transactions.filter(({ chainId, txParams }) => {
-            var _a;
-            const isMatchingNetwork = ignoreNetwork || chainId === currentChainId;
-            if (!isMatchingNetwork) {
-                return true;
-            }
-            const isMatchingAddress = !address || ((_a = txParams.from) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === address.toLowerCase();
-            return !isMatchingAddress;
-        });
-        this.update({
-            transactions: this.trimTransactionsForState(newTransactions),
-        });
-    }
-    startIncomingTransactionProcessing() {
-        this.incomingTransactionHelper.start();
-    }
-    stopIncomingTransactionProcessing() {
-        this.incomingTransactionHelper.stop();
-    }
-    /**
-     * Adds external provided transaction to state as confirmed transaction.
-     *
-     * @param transactionMeta - TransactionMeta to add transactions.
-     * @param transactionReceipt - TransactionReceipt of the external transaction.
-     * @param baseFeePerGas - Base fee per gas of the external transaction.
-     */
-    confirmExternalTransaction(transactionMeta, transactionReceipt, baseFeePerGas) {
-        return __awaiter(this, void 0, void 0, function* () {
-            // Run validation and add external transaction to state.
-            this.addExternalTransaction(transactionMeta);
-            try {
-                const transactionId = transactionMeta.id;
-                // Make sure status is confirmed and define gasUsed as in receipt.
-                transactionMeta.status = types_1.TransactionStatus.confirmed;
-                transactionMeta.txReceipt = transactionReceipt;
-                if (baseFeePerGas) {
-                    transactionMeta.baseFeePerGas = baseFeePerGas;
-                }
-                // Update same nonce local transactions as dropped and define replacedBy properties.
-                this.markNonceDuplicatesDropped(transactionId);
-                // Update external provided transaction with updated gas values and confirmed status.
-                this.updateTransaction(transactionMeta, 'TransactionController:confirmExternalTransaction - Add external transaction');
-            }
-            catch (error) {
-                console.error(error);
-            }
-        });
-    }
-    /**
-     * Append new send flow history to a transaction.
-     *
-     * @param transactionID - The ID of the transaction to update.
-     * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.
-     * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.
-     * @returns The updated transactionMeta.
-     */
-    updateTransactionSendFlowHistory(transactionID, currentSendFlowHistoryLength, sendFlowHistoryToAdd) {
-        var _a, _b;
-        if (this.isSendFlowHistoryDisabled) {
-            throw new Error('Send flow history is disabled for the current transaction controller');
-        }
-        const transactionMeta = this.getTransaction(transactionID);
-        if (!transactionMeta) {
-            throw new Error(`Cannot update send flow history as no transaction metadata found`);
-        }
-        (0, utils_1.validateIfTransactionUnapproved)(transactionMeta, 'updateTransactionSendFlowHistory');
-        if (currentSendFlowHistoryLength ===
-            (((_a = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.sendFlowHistory) === null || _a === void 0 ? void 0 : _a.length) || 0)) {
-            transactionMeta.sendFlowHistory = [
-                ...((_b = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.sendFlowHistory) !== null && _b !== void 0 ? _b : []),
-                ...sendFlowHistoryToAdd,
-            ];
-            this.updateTransaction(transactionMeta, 'TransactionController:updateTransactionSendFlowHistory - sendFlowHistory updated');
-        }
-        return this.getTransaction(transactionID);
-    }
-    /**
-     * Update the gas values of a transaction.
-     *
-     * @param transactionId - The ID of the transaction to update.
-     * @param gasValues - Gas values to update.
-     * @param gasValues.gas - Same as transaction.gasLimit.
-     * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.
-     * @param gasValues.gasPrice - Price per gas for legacy transactions.
-     * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.
-     * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.
-     * @param gasValues.estimateUsed - Which estimate level was used.
-     * @param gasValues.estimateSuggested - Which estimate level that the API suggested.
-     * @param gasValues.defaultGasEstimates - The default estimate for gas.
-     * @param gasValues.originalGasEstimate - Original estimate for gas.
-     * @param gasValues.userEditedGasLimit - The gas limit supplied by user.
-     * @param gasValues.userFeeLevel - Estimate level user selected.
-     * @returns The updated transactionMeta.
-     */
-    updateTransactionGasFees(transactionId, { defaultGasEstimates, estimateUsed, estimateSuggested, gas, gasLimit, gasPrice, maxPriorityFeePerGas, maxFeePerGas, originalGasEstimate, userEditedGasLimit, userFeeLevel, }) {
-        const transactionMeta = this.getTransaction(transactionId);
-        if (!transactionMeta) {
-            throw new Error(`Cannot update transaction as no transaction metadata found`);
-        }
-        (0, utils_1.validateIfTransactionUnapproved)(transactionMeta, 'updateTransactionGasFees');
-        let transactionGasFees = {
-            txParams: {
-                gas,
-                gasLimit,
-                gasPrice,
-                maxPriorityFeePerGas,
-                maxFeePerGas,
-            },
-            defaultGasEstimates,
-            estimateUsed,
-            estimateSuggested,
-            originalGasEstimate,
-            userEditedGasLimit,
-            userFeeLevel,
-        };
-        // only update what is defined
-        transactionGasFees.txParams = (0, lodash_1.pickBy)(transactionGasFees.txParams);
-        transactionGasFees = (0, lodash_1.pickBy)(transactionGasFees);
-        // merge updated gas values with existing transaction meta
-        const updatedMeta = (0, lodash_1.merge)(transactionMeta, transactionGasFees);
-        this.updateTransaction(updatedMeta, 'TransactionController:updateTransactionGasFees - gas values updated');
-        return this.getTransaction(transactionId);
-    }
-    processApproval(transactionMeta, { isExisting = false, requireApproval, shouldShowRequest = true, }) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const transactionId = transactionMeta.id;
-            let resultCallbacks;
-            const { meta, isCompleted } = this.isTransactionCompleted(transactionId);
-            const finishedPromise = isCompleted
-                ? Promise.resolve(meta)
-                : this.waitForTransactionFinished(transactionId);
-            if (meta && !isExisting && !isCompleted) {
-                try {
-                    if (requireApproval !== false) {
-                        const acceptResult = yield this.requestApproval(transactionMeta, {
-                            shouldShowRequest,
-                        });
-                        resultCallbacks = acceptResult.resultCallbacks;
-                    }
-                    const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);
-                    if (!isTxCompleted) {
-                        yield this.approveTransaction(transactionId);
-                    }
-                }
-                catch (error) {
-                    const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);
-                    if (!isTxCompleted) {
-                        if (error.code === rpc_errors_1.errorCodes.provider.userRejectedRequest) {
-                            this.cancelTransaction(transactionId);
-                            throw rpc_errors_1.providerErrors.userRejectedRequest('User rejected the transaction');
-                        }
-                        else {
-                            this.failTransaction(meta, error);
-                        }
-                    }
-                }
-            }
-            const finalMeta = yield finishedPromise;
-            switch (finalMeta === null || finalMeta === void 0 ? void 0 : finalMeta.status) {
-                case types_1.TransactionStatus.failed:
-                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(finalMeta.error);
-                    throw rpc_errors_1.rpcErrors.internal(finalMeta.error.message);
-                case types_1.TransactionStatus.cancelled:
-                    const cancelError = rpc_errors_1.rpcErrors.internal('User cancelled the transaction');
-                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(cancelError);
-                    throw cancelError;
-                case types_1.TransactionStatus.submitted:
-                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.success();
-                    return finalMeta.hash;
-                default:
-                    const internalError = rpc_errors_1.rpcErrors.internal(`MetaMask Tx Signature: Unknown problem: ${JSON.stringify(finalMeta || transactionId)}`);
-                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(internalError);
-                    throw internalError;
-            }
-        });
-    }
-    /**
-     * Approves a transaction and updates it's status in state. If this is not a
-     * retry transaction, a nonce will be generated. The transaction is signed
-     * using the sign configuration property, then published to the blockchain.
-     * A `<tx.id>:finished` hub event is fired after success or failure.
-     *
-     * @param transactionId - The ID of the transaction to approve.
-     */
-    approveTransaction(transactionId) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const { transactions } = this.state;
-            const releaseLock = yield this.mutex.acquire();
-            const chainId = this.getChainId();
-            const index = transactions.findIndex(({ id }) => transactionId === id);
-            const transactionMeta = transactions[index];
-            const { txParams: { nonce, from }, } = transactionMeta;
-            let nonceLock;
-            try {
-                if (!this.sign) {
-                    releaseLock();
-                    this.failTransaction(transactionMeta, new Error('No sign method defined.'));
-                    return;
-                }
-                else if (!chainId) {
-                    releaseLock();
-                    this.failTransaction(transactionMeta, new Error('No chainId defined.'));
-                    return;
-                }
-                const { approved: status } = types_1.TransactionStatus;
-                let nonceToUse = nonce;
-                // if a nonce already exists on the transactionMeta it means this is a speedup or cancel transaction
-                // so we want to reuse that nonce and hope that it beats the previous attempt to chain. Otherwise use a new locked nonce
-                if (!nonceToUse) {
-                    nonceLock = yield this.nonceTracker.getNonceLock(from);
-                    nonceToUse = (0, ethereumjs_util_1.addHexPrefix)(nonceLock.nextNonce.toString(16));
-                }
-                transactionMeta.status = status;
-                transactionMeta.txParams.nonce = nonceToUse;
-                transactionMeta.txParams.chainId = chainId;
-                const baseTxParams = Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas });
-                const isEIP1559 = (0, utils_1.isEIP1559Transaction)(transactionMeta.txParams);
-                const txParams = isEIP1559
-                    ? Object.assign(Object.assign({}, baseTxParams), { maxFeePerGas: transactionMeta.txParams.maxFeePerGas, maxPriorityFeePerGas: transactionMeta.txParams.maxPriorityFeePerGas, estimatedBaseFee: transactionMeta.txParams.estimatedBaseFee, 
-                        // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set
-                        type: 2 }) : baseTxParams;
-                // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set
-                if (isEIP1559) {
-                    delete txParams.gasPrice;
-                }
-                const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
-                const signedTx = yield this.sign(unsignedEthTx, from);
-                yield this.updateTransactionMetaRSV(transactionMeta, signedTx);
-                transactionMeta.status = types_1.TransactionStatus.signed;
-                this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction signed');
-                const rawTx = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
-                transactionMeta.rawTx = rawTx;
-                this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - RawTransaction added');
-                const hash = yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTx]);
-                transactionMeta.hash = hash;
-                transactionMeta.status = types_1.TransactionStatus.submitted;
-                transactionMeta.submittedTime = new Date().getTime();
-                this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction submitted');
-                this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
-            }
-            catch (error) {
-                this.failTransaction(transactionMeta, error);
-            }
-            finally {
-                // must set transaction to submitted/failed before releasing lock
-                if (nonceLock) {
-                    nonceLock.releaseLock();
-                }
-                releaseLock();
-            }
-        });
-    }
-    /**
-     * Cancels a transaction based on its ID by setting its status to "rejected"
-     * and emitting a `<tx.id>:finished` hub event.
-     *
-     * @param transactionId - The ID of the transaction to cancel.
-     */
-    cancelTransaction(transactionId) {
-        const transactionMeta = this.state.transactions.find(({ id }) => id === transactionId);
-        if (!transactionMeta) {
-            return;
-        }
-        transactionMeta.status = types_1.TransactionStatus.rejected;
-        this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
-        const transactions = this.state.transactions.filter(({ id }) => id !== transactionId);
-        this.update({ transactions: this.trimTransactionsForState(transactions) });
-    }
-    /**
-     * Trim the amount of transactions that are set on the state. Checks
-     * if the length of the tx history is longer then desired persistence
-     * limit and then if it is removes the oldest confirmed or rejected tx.
-     * Pending or unapproved transactions will not be removed by this
-     * operation. For safety of presenting a fully functional transaction UI
-     * representation, this function will not break apart transactions with the
-     * same nonce, created on the same day, per network. Not accounting for transactions of the same
-     * nonce, same day and network combo can result in confusing or broken experiences
-     * in the UI. The transactions are then updated using the BaseController update.
-     *
-     * @param transactions - The transactions to be applied to the state.
-     * @returns The trimmed list of transactions.
-     */
-    trimTransactionsForState(transactions) {
-        const nonceNetworkSet = new Set();
-        const txsToKeep = transactions
-            .sort((a, b) => (a.time > b.time ? -1 : 1)) // Descending time order
-            .filter((tx) => {
-            const { chainId, status, txParams, time } = tx;
-            if (txParams) {
-                const key = `${txParams.nonce}-${(0, controller_utils_1.convertHexToDecimal)(chainId)}-${new Date(time).toDateString()}`;
-                if (nonceNetworkSet.has(key)) {
-                    return true;
-                }
-                else if (nonceNetworkSet.size < this.config.txHistoryLimit ||
-                    !this.isFinalState(status)) {
-                    nonceNetworkSet.add(key);
-                    return true;
-                }
-            }
-            return false;
-        });
-        txsToKeep.reverse(); // Ascending time order
-        return txsToKeep;
-    }
-    /**
-     * Determines if the transaction is in a final state.
-     *
-     * @param status - The transaction status.
-     * @returns Whether the transaction is in a final state.
-     */
-    isFinalState(status) {
-        return (status === types_1.TransactionStatus.rejected ||
-            status === types_1.TransactionStatus.confirmed ||
-            status === types_1.TransactionStatus.failed ||
-            status === types_1.TransactionStatus.cancelled);
-    }
-    /**
-     * Whether the transaction has at least completed all local processing.
-     *
-     * @param status - The transaction status.
-     * @returns Whether the transaction is in a final state.
-     */
-    isLocalFinalState(status) {
-        return [
-            types_1.TransactionStatus.cancelled,
-            types_1.TransactionStatus.confirmed,
-            types_1.TransactionStatus.failed,
-            types_1.TransactionStatus.rejected,
-            types_1.TransactionStatus.submitted,
-        ].includes(status);
-    }
-    requestApproval(txMeta, { shouldShowRequest }) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const id = this.getApprovalId(txMeta);
-            const { origin } = txMeta;
-            const type = controller_utils_1.ApprovalType.Transaction;
-            const requestData = { txId: txMeta.id };
-            return (yield this.messagingSystem.call('ApprovalController:addRequest', {
-                id,
-                origin: origin || controller_utils_1.ORIGIN_METAMASK,
-                type,
-                requestData,
-                expectsResult: true,
-            }, shouldShowRequest));
-        });
-    }
-    getTransaction(transactionId) {
-        const { transactions } = this.state;
-        return transactions.find(({ id }) => id === transactionId);
-    }
-    getApprovalId(txMeta) {
-        return String(txMeta.id);
-    }
-    isTransactionCompleted(transactionId) {
-        const transaction = this.getTransaction(transactionId);
-        if (!transaction) {
-            return { meta: undefined, isCompleted: false };
-        }
-        const isCompleted = this.isLocalFinalState(transaction.status);
-        return { meta: transaction, isCompleted };
-    }
-    getChainId() {
-        const { providerConfig } = this.getNetworkState();
-        return providerConfig.chainId;
-    }
-    prepareUnsignedEthTx(txParams) {
-        return tx_1.TransactionFactory.fromTxData(txParams, {
-            common: this.getCommonConfiguration(),
-            freeze: false,
-        });
-    }
-    /**
-     * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for
-     * specifying which chain, network, hardfork and EIPs to support for
-     * a transaction. By referencing this configuration, and analyzing the fields
-     * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718
-     * transaction type to use.
-     *
-     * @returns common configuration object
-     */
-    getCommonConfiguration() {
-        const { providerConfig: { type: chain, chainId, nickname: name }, } = this.getNetworkState();
-        if (chain !== controller_utils_1.RPC &&
-            chain !== controller_utils_1.NetworkType['linea-goerli'] &&
-            chain !== controller_utils_1.NetworkType['linea-mainnet']) {
-            return new common_1.Common({ chain, hardfork: exports.HARDFORK });
-        }
-        const customChainParams = {
-            name,
-            chainId: parseInt(chainId, 16),
-            defaultHardfork: exports.HARDFORK,
-        };
-        return common_1.Common.custom(customChainParams);
-    }
-    onIncomingTransactions({ added, updated, }) {
-        const { transactions: currentTransactions } = this.state;
-        const updatedTransactions = [
-            ...added,
-            ...currentTransactions.map((originalTransaction) => {
-                const updatedTransaction = updated.find(({ hash }) => hash === originalTransaction.hash);
-                return updatedTransaction !== null && updatedTransaction !== void 0 ? updatedTransaction : originalTransaction;
-            }),
-        ];
-        this.update({
-            transactions: this.trimTransactionsForState(updatedTransactions),
-        });
-    }
-    onUpdatedLastFetchedBlockNumbers({ lastFetchedBlockNumbers, blockNumber, }) {
-        this.update({ lastFetchedBlockNumbers });
-        this.hub.emit('incomingTransactionBlock', blockNumber);
-    }
-    onPendingTransactionsUpdate(transactions) {
-        (0, logger_1.pendingTransactionsLogger)('Updated pending transactions');
-        this.update({ transactions: this.trimTransactionsForState(transactions) });
-    }
-    generateDappSuggestedGasFees(txParams, origin) {
-        if (!origin || origin === controller_utils_1.ORIGIN_METAMASK) {
-            return undefined;
-        }
-        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;
-        if (gasPrice === undefined &&
-            maxFeePerGas === undefined &&
-            maxPriorityFeePerGas === undefined &&
-            gas === undefined) {
-            return undefined;
-        }
-        const dappSuggestedGasFees = {};
-        if (gasPrice !== undefined) {
-            dappSuggestedGasFees.gasPrice = gasPrice;
-        }
-        else if (maxFeePerGas !== undefined ||
-            maxPriorityFeePerGas !== undefined) {
-            dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;
-            dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;
-        }
-        if (gas !== undefined) {
-            dappSuggestedGasFees.gas = gas;
-        }
-        return dappSuggestedGasFees;
-    }
-    /**
-     * Validates and adds external provided transaction to state.
-     *
-     * @param transactionMeta - Nominated external transaction to be added to state.
-     */
-    addExternalTransaction(transactionMeta) {
-        var _a, _b;
-        return __awaiter(this, void 0, void 0, function* () {
-            const chainId = this.getChainId();
-            const { transactions } = this.state;
-            const fromAddress = (_a = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.txParams) === null || _a === void 0 ? void 0 : _a.from;
-            const sameFromAndNetworkTransactions = transactions.filter((transaction) => transaction.txParams.from === fromAddress &&
-                transaction.chainId === chainId);
-            const confirmedTxs = sameFromAndNetworkTransactions.filter((transaction) => transaction.status === types_1.TransactionStatus.confirmed);
-            const pendingTxs = sameFromAndNetworkTransactions.filter((transaction) => transaction.status === types_1.TransactionStatus.submitted);
-            (0, external_transactions_1.validateConfirmedExternalTransaction)(transactionMeta, confirmedTxs, pendingTxs);
-            // Make sure provided external transaction has non empty history array
-            if (!((_b = transactionMeta.history) !== null && _b !== void 0 ? _b : []).length) {
-                if (!this.isHistoryDisabled) {
-                    (0, history_1.addInitialHistorySnapshot)(transactionMeta);
-                }
-            }
-            const updatedTransactions = [...transactions, transactionMeta];
-            this.update({
-                transactions: this.trimTransactionsForState(updatedTransactions),
-            });
-        });
-    }
-    /**
-     * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions
-     * in the transactions have the same nonce.
-     *
-     * @param transactionId - Used to identify original transaction.
-     */
-    markNonceDuplicatesDropped(transactionId) {
-        var _a, _b;
-        const chainId = this.getChainId();
-        const transactionMeta = this.getTransaction(transactionId);
-        const nonce = (_a = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.txParams) === null || _a === void 0 ? void 0 : _a.nonce;
-        const from = (_b = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.txParams) === null || _b === void 0 ? void 0 : _b.from;
-        const sameNonceTxs = this.state.transactions.filter((transaction) => transaction.txParams.from === from &&
-            transaction.txParams.nonce === nonce &&
-            transaction.chainId === chainId);
-        if (!sameNonceTxs.length) {
-            return;
-        }
-        // Mark all same nonce transactions as dropped and give it a replacedBy hash
-        for (const transaction of sameNonceTxs) {
-            if (transaction.id === transactionId) {
-                continue;
-            }
-            transaction.replacedBy = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.hash;
-            transaction.replacedById = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.id;
-            // Drop any transaction that wasn't previously failed (off chain failure)
-            if (transaction.status !== types_1.TransactionStatus.failed) {
-                this.setTransactionStatusDropped(transaction);
-            }
-        }
-    }
-    /**
-     * Method to set transaction status to dropped.
-     *
-     * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.
-     */
-    setTransactionStatusDropped(transactionMeta) {
-        transactionMeta.status = types_1.TransactionStatus.dropped;
-        this.updateTransaction(transactionMeta, 'TransactionController#setTransactionStatusDropped - Transaction dropped');
-    }
-    /**
-     * Get transaction with provided actionId.
-     *
-     * @param actionId - Unique ID to prevent duplicate requests
-     * @returns the filtered transaction
-     */
-    getTransactionWithActionId(actionId) {
-        return this.state.transactions.find((transaction) => actionId && transaction.actionId === actionId);
-    }
-    waitForTransactionFinished(transactionId) {
-        return __awaiter(this, void 0, void 0, function* () {
-            return new Promise((resolve) => {
-                this.hub.once(`${transactionId}:finished`, (txMeta) => {
-                    resolve(txMeta);
-                });
-            });
-        });
-    }
-    /**
-     * Updates the r, s, and v properties of a TransactionMeta object
-     * with values from a signed transaction.
-     *
-     * @param transactionMeta - The TransactionMeta object to update.
-     * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.
-     */
-    updateTransactionMetaRSV(transactionMeta, signedTx) {
-        return __awaiter(this, void 0, void 0, function* () {
-            if (signedTx.r) {
-                transactionMeta.r = (0, ethereumjs_util_1.addHexPrefix)(signedTx.r.toString(16));
-            }
-            if (signedTx.s) {
-                transactionMeta.s = (0, ethereumjs_util_1.addHexPrefix)(signedTx.s.toString(16));
-            }
-            if (signedTx.v) {
-                transactionMeta.v = (0, ethereumjs_util_1.addHexPrefix)(signedTx.v.toString(16));
-            }
-        });
-    }
-    getEIP1559Compatibility() {
-        var _a, _b;
-        return __awaiter(this, void 0, void 0, function* () {
-            const currentNetworkIsEIP1559Compatible = yield this.getCurrentNetworkEIP1559Compatibility();
-            const currentAccountIsEIP1559Compatible = (_b = (_a = this.getCurrentAccountEIP1559Compatibility) === null || _a === void 0 ? void 0 : _a.call(this)) !== null && _b !== void 0 ? _b : true;
-            return (currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible);
-        });
-    }
-}
-exports.TransactionController = TransactionController;
-exports.default = TransactionController;
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+
+
+var _chunkN55SEKK7js = require('./chunk-N55SEKK7.js');
+require('./chunk-ZNZEJDOE.js');
+require('./chunk-X3KACH5P.js');
+require('./chunk-KT6UAKBB.js');
+require('./chunk-SD6CWFDF.js');
+require('./chunk-VH47Q6TS.js');
+require('./chunk-5KMU2IAT.js');
+require('./chunk-7LXE4KHV.js');
+require('./chunk-V72C4MCR.js');
+require('./chunk-QP75SWIQ.js');
+require('./chunk-NYKRCWBG.js');
+require('./chunk-WR5F34OW.js');
+require('./chunk-YVCX6Z75.js');
+require('./chunk-TJMQEH57.js');
+require('./chunk-7DJO6UZA.js');
+require('./chunk-2XKEAKQG.js');
+require('./chunk-DTDTOMTB.js');
+require('./chunk-5XQ2KRYL.js');
+require('./chunk-EQT25RSP.js');
+require('./chunk-FDUCRHYT.js');
+require('./chunk-HMOSP33F.js');
+require('./chunk-DUFOYA4D.js');
+require('./chunk-VJYFB7BM.js');
+require('./chunk-KNYSD4JP.js');
+require('./chunk-C2LNDHP4.js');
+require('./chunk-UGFBA4GV.js');
+require('./chunk-EMDU4XLM.js');
+require('./chunk-UGN7PBON.js');
+require('./chunk-S6VGOPUY.js');
+require('./chunk-5C3CSQAD.js');
+require('./chunk-Z4BLTVTB.js');
+
+
+
+
+
+
+exports.ApprovalState = _chunkN55SEKK7js.ApprovalState; exports.CANCEL_RATE = _chunkN55SEKK7js.CANCEL_RATE; exports.HARDFORK = _chunkN55SEKK7js.HARDFORK; exports.SPEED_UP_RATE = _chunkN55SEKK7js.SPEED_UP_RATE; exports.TransactionController = _chunkN55SEKK7js.TransactionController;
 //# sourceMappingURL=TransactionController.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.js.map b/node_modules/@metamask/transaction-controller/dist/TransactionController.js.map
deleted file mode 100644
index e6d61be..0000000
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"TransactionController.js","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,+CAAwE;AAExE,uCAAoD;AAWpD,+DAA2D;AAC3D,iEAUoC;AACpC,oEAA2C;AAM3C,qDAA6E;AAE7E,6CAAoC;AACpC,8EAAiD;AACjD,qDAA4D;AAC5D,mCAAsC;AACtC,mCAAuC;AACvC,kEAAyC;AACzC,+BAAoC;AAEpC,yFAAsF;AACtF,mEAA+E;AAC/E,uCAAgF;AAChF,2EAAwE;AACxE,qCAAqD;AACrD,2EAAwE;AACxE,yDAA8D;AAU9D,mCAA6D;AAC7D,mCAWiB;AACjB,6CAA2E;AAE9D,QAAA,QAAQ,GAAG,iBAAQ,CAAC,MAAM,CAAC;AA0DxC;;GAEG;AACU,QAAA,WAAW,GAAG,GAAG,CAAC;AAE/B;;GAEG;AACU,QAAA,aAAa,GAAG,GAAG,CAAC;AAEjC;;GAEG;AACH,MAAM,cAAc,GAAG,uBAAuB,CAAC;AAkB/C;;GAEG;AACH,MAAa,qBAAsB,SAAQ,gCAG1C;IAwEC;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,YACE,EACE,YAAY,EACZ,cAAc,EACd,sBAAsB,EACtB,qCAAqC,EACrC,qCAAqC,EACrC,eAAe,EACf,oBAAoB,EACpB,kBAAkB,EAClB,oBAAoB,GAAG,EAAE,EACzB,SAAS,EACT,oBAAoB,EACpB,QAAQ,EACR,uBAAuB,GAoBxB,EACD,MAAmC,EACnC,KAAiC;QAEjC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAvHN,UAAK,GAAG,IAAI,mBAAK,EAAE,CAAC;QAuCrC;;WAEG;QACH,QAAG,GAAG,IAAI,qBAAY,EAAE,CAAC;QAEzB;;WAEG;QACM,SAAI,GAAG,uBAAuB,CAAC;QA0EtC,IAAI,CAAC,aAAa,GAAG;YACnB,cAAc,EAAE,EAAE;SACnB,CAAC;QAEF,IAAI,CAAC,YAAY,GAAG;YAClB,UAAU,EAAE,EAAE;YACd,YAAY,EAAE,EAAE;YAChB,uBAAuB,EAAE,EAAE;SAC5B,CAAC;QAEF,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,iDAAiD;QACjD,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,yBAAyB,GAAG,sBAAsB,aAAtB,sBAAsB,cAAtB,sBAAsB,GAAI,KAAK,CAAC;QACjE,IAAI,CAAC,iBAAiB,GAAG,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,KAAK,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,IAAI,6BAAc,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;QACjD,IAAI,CAAC,qCAAqC;YACxC,qCAAqC,CAAC;QACxC,IAAI,CAAC,qCAAqC;YACxC,qCAAqC,CAAC;QACxC,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QAEvD,IAAI,CAAC,YAAY,GAAG,IAAI,uBAAY,CAAC;YACnC,QAAQ;YACR,YAAY;YACZ,sBAAsB,EAAE,CAAC,OAAO,EAAE,EAAE,CAClC,IAAA,+CAAuC,EACrC,OAAO,EACP,yBAAiB,CAAC,SAAS,EAC3B,IAAI,CAAC,KAAK,CAAC,YAAY,CACxB;YACH,wBAAwB,EAAE,CAAC,OAAO,EAAE,EAAE,CACpC,IAAA,+CAAuC,EACrC,OAAO,EACP,yBAAiB,CAAC,SAAS,EAC3B,IAAI,CAAC,KAAK,CAAC,YAAY,CACxB;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,yBAAyB,GAAG,IAAI,qDAAyB,CAAC;YAC7D,YAAY;YACZ,iBAAiB,EAAE,kBAAkB;YACrC,0BAA0B,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,uBAAuB;YACpE,eAAe;YACf,SAAS,EAAE,oBAAoB,CAAC,SAAS;YACzC,kBAAkB,EAAE,oBAAoB,CAAC,kBAAkB;YAC3D,uBAAuB,EAAE,IAAI,mEAAgC,CAAC;gBAC5D,qBAAqB,EAAE,oBAAoB,CAAC,qBAAqB;aAClE,CAAC;YACF,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc;YAC5C,kBAAkB,EAAE,oBAAoB,CAAC,kBAAkB;SAC5D,CAAC,CAAC;QAEH,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,EAAE,CACnC,cAAc,EACd,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CACvC,CAAC;QAEF,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,EAAE,CACnC,gCAAgC,EAChC,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,IAAI,CAAC,CACjD,CAAC;QAEF,IAAI,CAAC,yBAAyB,GAAG,IAAI,qDAAyB,CAAC;YAC7D,YAAY;YACZ,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;YAChD,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;YACtC,WAAW,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ;YAChC,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY;SAC/C,CAAC,CAAC;QAEH,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,EAAE,CACnC,cAAc,EACd,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAC5C,CAAC;QAEF,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,EAAE,CACnC,uBAAuB,EACvB,CAAC,eAAgC,EAAE,EAAE,CACnC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,EAAE,YAAY,EAAE,eAAe,CAAC,CACpE,CAAC;QAEF,oBAAoB,CAAC,GAAG,EAAE;YACxB,iDAAiD;YACjD,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5C,IAAI,CAAC,QAAQ,GAAG,IAAI,6BAAc,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;IACzC,CAAC;IApMO,eAAe,CAAC,eAAgC,EAAE,KAAY;QACpE,MAAM,kBAAkB,mCACnB,eAAe,KAClB,KAAK,EACL,MAAM,EAAE,yBAAiB,CAAC,MAAM,GACjC,CAAC;QACF,IAAI,CAAC,iBAAiB,CACpB,kBAAkB,EAClB,oFAAoF,CACrF,CAAC;QACF,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,EAAE,WAAW,EAAE,kBAAkB,CAAC,CAAC;IACtE,CAAC;IAEa,cAAc,CAAC,cAAsB;;YACjD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAClE,MAAM,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACjE,OAAO,EAAE,cAAc,EAAE,oBAAoB,EAAE,CAAC;QAClD,CAAC;KAAA;IAqLD;;;;;OAKG;IACG,gBAAgB,CAAC,cAAsB;;YAC3C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YAC/C,IAAI;gBACF,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;gBAClC,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAC9C,CAAC,mBAAmB,EAAE,EAAE,CAAC,cAAc,KAAK,mBAAmB,CAChE,CAAC;gBACF,IAAI,WAAW,EAAE;oBACf,OAAO,UAAU,CAAC,cAAc,CAAC,CAAC;iBACnC;gBACD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;gBAC3D,IAAI,CAAC,MAAM,CAAC;oBACV,UAAU,kCAAO,UAAU,GAAK,EAAE,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,CAAE;iBACjE,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;aACjB;oBAAS;gBACR,WAAW,EAAE,CAAC;aACf;QACH,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,cAAc,CAClB,QAA2B,EAC3B,EACE,QAAQ,EACR,iBAAiB,EACjB,MAAM,EACN,MAAM,EACN,eAAe,EACf,qBAAqB,EACrB,eAAe,EACf,IAAI,MAUF,EAAE;;YAEN,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACpC,QAAQ,GAAG,IAAA,yBAAiB,EAAC,QAAQ,CAAC,CAAC;YACvC,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACjE,IAAA,6BAAgB,EAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;YAChD,IAAI,MAAM,EAAE;gBACV,MAAM,IAAA,sCAAyB,EAC7B,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EACvC,IAAI,CAAC,kBAAkB,EAAE,EACzB,QAAQ,CAAC,IAAI,EACb,MAAM,CACP,CAAC;aACH;YAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,4BAA4B,CAC5D,QAAQ,EACR,MAAM,CACP,CAAC;YAEF,MAAM,eAAe,GACnB,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,CAAC,MAAM,IAAA,2CAAwB,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;YAEzE,MAAM,uBAAuB,GAAG,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;YAC1E,6HAA6H;YAC7H,MAAM,eAAe,GAAoB,uBAAuB,IAAI;gBAClE,iEAAiE;gBACjE,QAAQ;gBACR,OAAO;gBACP,oBAAoB;gBACpB,iBAAiB;gBACjB,EAAE,EAAE,IAAA,SAAM,GAAE;gBACZ,MAAM;gBACN,qBAAqB;gBACrB,MAAM,EAAE,yBAAiB,CAAC,UAA0C;gBACpE,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;gBAChB,QAAQ;gBACR,kBAAkB,EAAE,KAAK;gBACzB,oBAAoB,EAAE,KAAK;gBAC3B,IAAI,EAAE,eAAe;aACtB,CAAC;YAEF,IAAI;gBACF,MAAM,EAAE,GAAG,EAAE,gBAAgB,EAAE,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBACnE,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC;gBACnB,QAAQ,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;gBAC7C,eAAe,CAAC,mBAAmB,GAAG,GAAG,CAAC;aAC3C;YAAC,OAAO,KAAU,EAAE;gBACnB,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;gBAC7C,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC9B;YAED,+DAA+D;YAC/D,IAAI,CAAC,uBAAuB,EAAE;gBAC5B,iCAAiC;gBACjC,IAAI,MAAM,IAAI,IAAI,CAAC,uBAAuB,EAAE;oBAC1C,MAAM,wBAAwB,GAAG,MAAM,IAAI,CAAC,uBAAuB,CACjE,eAAe,EACf,MAAM,CACP,CAAC;oBACF,eAAe,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;iBACrE;gBAED,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;oBACnC,eAAe,CAAC,eAAe,GAAG,eAAe,aAAf,eAAe,cAAf,eAAe,GAAI,EAAE,CAAC;iBACzD;gBACD,uBAAuB;gBACvB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;oBAC3B,IAAA,mCAAyB,EAAC,eAAe,CAAC,CAAC;iBAC5C;gBACD,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBACnC,IAAI,CAAC,MAAM,CAAC;oBACV,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC;iBAC1D,CAAC,CAAC;gBACH,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,uBAAuB,EAAE,eAAe,CAAC,CAAC;aACzD;YAED,OAAO;gBACL,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE;oBAC5C,UAAU,EAAE,OAAO,CAAC,uBAAuB,CAAC;oBAC5C,eAAe;iBAChB,CAAC;gBACF,eAAe;aAChB,CAAC;QACJ,CAAC;KAAA;IAED,+BAA+B;QAC7B,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;IACzC,CAAC;IAED,8BAA8B;QAC5B,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,CAAC;IACxC,CAAC;IAEK,0BAA0B;;YAC9B,MAAM,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,CAAC;QAChD,CAAC;KAAA;IAED;;OAEG;IACH,aAAa;QACX,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAClD,CAAC,WAAW,EAAE,EAAE,CACd,WAAW,CAAC,MAAM,KAAK,yBAAiB,CAAC,UAAU;YACnD,WAAW,CAAC,OAAO,KAAK,OAAO,CAClC,CAAC;QAEF,KAAK,MAAM,MAAM,IAAI,aAAa,EAAE;YAClC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;gBAC3B,iBAAiB,EAAE,KAAK;aACzB,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBACjB,0BAA0B;gBAC1B,OAAO,CAAC,KAAK,CAAC,6CAA6C,EAAE,KAAK,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED;;;;;;;;OAQG;IACG,eAAe,CACnB,aAAqB,EACrB,SAAkD,EAClD,EAAE,gBAAgB,KAAoC,EAAE;;;YAExD,IAAI,SAAS,EAAE;gBACb,IAAA,yBAAiB,EAAC,SAAS,CAAC,CAAC;aAC9B;YACD,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAClD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,aAAa,CACjC,CAAC;YACF,IAAI,CAAC,eAAe,EAAE;gBACpB,OAAO;aACR;YAED,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C;YAED,gCAAgC;YAChC,MAAM,WAAW,GAAG,IAAA,qCAA6B,EAC/C,eAAe,CAAC,QAAQ,CAAC,QAAQ,EACjC,mBAAW,CACZ,CAAC;YAEF,MAAM,kBAAkB,GAAG,IAAA,uBAAe,EAAC,SAAS,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC;YAE5E,MAAM,WAAW,GACf,CAAC,kBAAkB;gBACjB,IAAA,+BAAuB,EAAC,kBAAkB,EAAE,WAAW,CAAC,CAAC;gBAC3D,WAAW,CAAC;YAEd,yBAAyB;YACzB,MAAM,oBAAoB,GAAG,MAAA,eAAe,CAAC,QAAQ,0CAAE,YAAY,CAAC;YACpE,MAAM,eAAe,GAAG,IAAA,qCAA6B,EACnD,oBAAoB,EACpB,mBAAW,CACZ,CAAC;YACF,MAAM,kBAAkB,GACtB,IAAA,gCAAwB,EAAC,SAAS,CAAC,IAAI,SAAS,CAAC,YAAY,CAAC;YAChE,MAAM,eAAe,GACnB,CAAC,kBAAkB;gBACjB,IAAA,+BAAuB,EAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;gBAC/D,CAAC,oBAAoB,IAAI,eAAe,CAAC,CAAC;YAE5C,iCAAiC;YACjC,MAAM,4BAA4B,GAChC,MAAA,eAAe,CAAC,QAAQ,0CAAE,oBAAoB,CAAC;YACjD,MAAM,uBAAuB,GAAG,IAAA,qCAA6B,EAC3D,4BAA4B,EAC5B,mBAAW,CACZ,CAAC;YACF,MAAM,0BAA0B,GAC9B,IAAA,gCAAwB,EAAC,SAAS,CAAC,IAAI,SAAS,CAAC,oBAAoB,CAAC;YACxE,MAAM,uBAAuB,GAC3B,CAAC,0BAA0B;gBACzB,IAAA,+BAAuB,EACrB,0BAA0B,EAC1B,uBAAuB,CACxB,CAAC;gBACJ,CAAC,4BAA4B,IAAI,uBAAuB,CAAC,CAAC;YAE5D,MAAM,QAAQ,GACZ,eAAe,IAAI,uBAAuB;gBACxC,CAAC,CAAC;oBACE,IAAI,EAAE,eAAe,CAAC,QAAQ,CAAC,IAAI;oBACnC,QAAQ,EAAE,eAAe,CAAC,QAAQ,CAAC,GAAG;oBACtC,YAAY,EAAE,eAAe;oBAC7B,oBAAoB,EAAE,uBAAuB;oBAC7C,IAAI,EAAE,CAAC;oBACP,KAAK,EAAE,eAAe,CAAC,QAAQ,CAAC,KAAK;oBACrC,EAAE,EAAE,eAAe,CAAC,QAAQ,CAAC,IAAI;oBACjC,KAAK,EAAE,KAAK;iBACb;gBACH,CAAC,CAAC;oBACE,IAAI,EAAE,eAAe,CAAC,QAAQ,CAAC,IAAI;oBACnC,QAAQ,EAAE,eAAe,CAAC,QAAQ,CAAC,GAAG;oBACtC,QAAQ,EAAE,WAAW;oBACrB,KAAK,EAAE,eAAe,CAAC,QAAQ,CAAC,KAAK;oBACrC,EAAE,EAAE,eAAe,CAAC,QAAQ,CAAC,IAAI;oBACjC,KAAK,EAAE,KAAK;iBACb,CAAC;YAER,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YAE1D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAC9B,aAAa,EACb,eAAe,CAAC,QAAQ,CAAC,IAAI,CAC9B,CAAC;YACF,MAAM,IAAI,CAAC,wBAAwB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YAC/D,MAAM,KAAK,GAAG,IAAA,6BAAW,EAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;YAChD,MAAM,IAAA,wBAAK,EAAC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;YAC1D,eAAe,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YACpD,eAAe,CAAC,MAAM,GAAG,yBAAiB,CAAC,SAAS,CAAC;YACrD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;;KAClE;IAED;;;;;;;;OAQG;IACG,kBAAkB,CACtB,aAAqB,EACrB,SAAkD,EAClD,EACE,QAAQ,EACR,gBAAgB,MACoC,EAAE;;;YAExD,wFAAwF;YACxF,IAAI,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,EAAE;gBAC7C,OAAO;aACR;YAED,IAAI,SAAS,EAAE;gBACb,IAAA,yBAAiB,EAAC,SAAS,CAAC,CAAC;aAC9B;YACD,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAClD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,aAAa,CACjC,CAAC;YACF,0BAA0B;YAC1B,IAAI,CAAC,eAAe,EAAE;gBACpB,OAAO;aACR;YAED,0BAA0B;YAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C;YAED,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAEpC,gCAAgC;YAChC,MAAM,WAAW,GAAG,IAAA,qCAA6B,EAC/C,eAAe,CAAC,QAAQ,CAAC,QAAQ,EACjC,qBAAa,CACd,CAAC;YAEF,MAAM,kBAAkB,GAAG,IAAA,uBAAe,EAAC,SAAS,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC;YAE5E,MAAM,WAAW,GACf,CAAC,kBAAkB;gBACjB,IAAA,+BAAuB,EAAC,kBAAkB,EAAE,WAAW,CAAC,CAAC;gBAC3D,WAAW,CAAC;YAEd,yBAAyB;YACzB,MAAM,oBAAoB,GAAG,MAAA,eAAe,CAAC,QAAQ,0CAAE,YAAY,CAAC;YACpE,MAAM,eAAe,GAAG,IAAA,qCAA6B,EACnD,oBAAoB,EACpB,qBAAa,CACd,CAAC;YACF,MAAM,kBAAkB,GACtB,IAAA,gCAAwB,EAAC,SAAS,CAAC,IAAI,SAAS,CAAC,YAAY,CAAC;YAChE,MAAM,eAAe,GACnB,CAAC,kBAAkB;gBACjB,IAAA,+BAAuB,EAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;gBAC/D,CAAC,oBAAoB,IAAI,eAAe,CAAC,CAAC;YAE5C,iCAAiC;YACjC,MAAM,4BAA4B,GAChC,MAAA,eAAe,CAAC,QAAQ,0CAAE,oBAAoB,CAAC;YACjD,MAAM,uBAAuB,GAAG,IAAA,qCAA6B,EAC3D,4BAA4B,EAC5B,qBAAa,CACd,CAAC;YACF,MAAM,0BAA0B,GAC9B,IAAA,gCAAwB,EAAC,SAAS,CAAC,IAAI,SAAS,CAAC,oBAAoB,CAAC;YACxE,MAAM,uBAAuB,GAC3B,CAAC,0BAA0B;gBACzB,IAAA,+BAAuB,EACrB,0BAA0B,EAC1B,uBAAuB,CACxB,CAAC;gBACJ,CAAC,4BAA4B,IAAI,uBAAuB,CAAC,CAAC;YAE5D,MAAM,QAAQ,GACZ,eAAe,IAAI,uBAAuB;gBACxC,CAAC,iCACM,eAAe,CAAC,QAAQ,KAC3B,QAAQ,EAAE,eAAe,CAAC,QAAQ,CAAC,GAAG,EACtC,YAAY,EAAE,eAAe,EAC7B,oBAAoB,EAAE,uBAAuB,EAC7C,IAAI,EAAE,CAAC,IAEX,CAAC,iCACM,eAAe,CAAC,QAAQ,KAC3B,QAAQ,EAAE,eAAe,CAAC,QAAQ,CAAC,GAAG,EACtC,QAAQ,EAAE,WAAW,GACtB,CAAC;YAER,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YAE1D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAC9B,aAAa,EACb,eAAe,CAAC,QAAQ,CAAC,IAAI,CAC9B,CAAC;YACF,MAAM,IAAI,CAAC,wBAAwB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YAC/D,MAAM,KAAK,GAAG,IAAA,6BAAW,EAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;YAChD,MAAM,IAAI,GAAG,MAAM,IAAA,wBAAK,EAAC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;YACvE,MAAM,mBAAmB,mCACpB,eAAe,KAClB,gBAAgB,EAChB,EAAE,EAAE,IAAA,SAAM,GAAE,EACZ,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,EAChB,IAAI;gBACJ,QAAQ,EACR,mBAAmB,EAAE,eAAe,CAAC,QAAQ,CAAC,GAAG,EACjD,IAAI,EAAE,uBAAe,CAAC,KAAK,GAC5B,CAAC;YACF,MAAM,kBAAkB,GACtB,eAAe,IAAI,uBAAuB;gBACxC,CAAC,iCACM,mBAAmB,KACtB,QAAQ,kCACH,eAAe,CAAC,QAAQ,KAC3B,YAAY,EAAE,eAAe,EAC7B,oBAAoB,EAAE,uBAAuB,OAGnD,CAAC,iCACM,mBAAmB,KACtB,QAAQ,kCACH,eAAe,CAAC,QAAQ,KAC3B,QAAQ,EAAE,WAAW,MAExB,CAAC;YACR,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAC3E,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,EAAE,UAAU,EAAE,kBAAkB,CAAC,CAAC;;KACpE;IAED;;;;;OAKG;IACG,WAAW,CAAC,WAA8B;;YAC9C,MAAM,oBAAoB,qBAAQ,WAAW,CAAE,CAAC;YAChD,MAAM,EACJ,GAAG,EACH,QAAQ,EAAE,gBAAgB,EAC1B,EAAE,EACF,KAAK,EACL,IAAI,GACL,GAAG,oBAAoB,CAAC;YACzB,MAAM,QAAQ,GACZ,OAAO,gBAAgB,KAAK,WAAW;gBACrC,CAAC,CAAC,MAAM,IAAA,wBAAK,EAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC;gBACxC,CAAC,CAAC,gBAAgB,CAAC;YACvB,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YAClD,MAAM,eAAe,GAAG,cAAc,CAAC,IAAI,KAAK,8BAAW,CAAC,GAAG,CAAC;YAChE,0DAA0D;YAC1D,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;gBAC9B,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;aAC1B;YACD,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAA,wBAAK,EAAC,IAAI,CAAC,QAAQ,EAAE,kBAAkB,EAAE;gBAClE,QAAQ;gBACR,KAAK;aACN,CAAC,CAAC;YAEH,sGAAsG;YACtG,qFAAqF;YACrF,0BAA0B;YAC1B,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,IAAA,wBAAK,EAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAC1E,0BAA0B;YAC1B,IACE,CAAC,eAAe;gBAChB,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAClD;gBACA,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;aACpC;YAED,uCAAuC;YACvC,oBAAoB,CAAC,IAAI,GAAG,CAAC,IAAI;gBAC/B,CAAC,CAAC,IAAI;gBACN,CAAC,CAAC,0BAA0B,CAAC,IAAA,8BAAY,EAAC,IAAI,CAAC,CAAC;YAElD,kEAAkE;YAClE,oBAAoB,CAAC,KAAK;gBACxB,OAAO,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,0BAA0B,CAAC,KAAK,CAAC;YAC1E,MAAM,UAAU,GAAG,IAAA,0BAAO,EAAC,QAAQ,CAAC,CAAC;YACrC,oBAAoB,CAAC,GAAG,GAAG,IAAA,0BAAO,EAAC,IAAA,6BAAU,EAAC,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAEnE,IAAI,MAAM,CAAC;YACX,IAAI,gBAAgB,CAAC;YACrB,IAAI;gBACF,MAAM,GAAG,MAAM,IAAA,wBAAK,EAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,EAAE;oBACjD,oBAAoB;iBACrB,CAAC,CAAC;aACJ;YAAC,OAAO,KAAK,EAAE;gBACd,gBAAgB,GAAG,0BAAkB,CAAC;aACvC;YACD,6FAA6F;YAC7F,0DAA0D;YAC1D,MAAM,KAAK,GAAG,IAAA,0BAAO,EAAC,MAAM,CAAC,CAAC;YAC9B,MAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtC,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACpC,0BAA0B;YAC1B,IAAI,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,eAAe,EAAE;gBACzC,OAAO,EAAE,GAAG,EAAE,IAAA,8BAAY,EAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,gBAAgB,EAAE,CAAC;aAClE;YAED,0BAA0B;YAC1B,IAAI,WAAW,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE;gBAC5B,OAAO;oBACL,GAAG,EAAE,IAAA,8BAAY,EAAC,IAAA,0BAAO,EAAC,WAAW,CAAC,CAAC;oBACvC,QAAQ;oBACR,gBAAgB;iBACjB,CAAC;aACH;YACD,OAAO,EAAE,GAAG,EAAE,IAAA,8BAAY,EAAC,IAAA,0BAAO,EAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,EAAE,gBAAgB,EAAE,CAAC;QAC9E,CAAC;KAAA;IAED;;;;;OAKG;IACH,iBAAiB,CAAC,eAAgC,EAAE,IAAY;QAC9D,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpC,eAAe,CAAC,QAAQ,GAAG,IAAA,yBAAiB,EAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACvE,IAAA,6BAAgB,EAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,IAAA,kCAAwB,EAAC,eAAe,EAAE,IAAI,CAAC,CAAC;SACjD;QACD,MAAM,KAAK,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5E,YAAY,CAAC,KAAK,CAAC,GAAG,eAAe,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED;;;;;;;OAOG;IACH,gBAAgB,CAAC,aAAuB,EAAE,OAAgB;QACxD,0BAA0B;QAC1B,IAAI,aAAa,IAAI,CAAC,OAAO,EAAE;YAC7B,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;YAClC,OAAO;SACR;QACD,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACzC,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CACpD,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE;;YACxB,MAAM,iBAAiB,GAAG,aAAa,IAAI,OAAO,KAAK,cAAc,CAAC;YAEtE,IAAI,CAAC,iBAAiB,EAAE;gBACtB,OAAO,IAAI,CAAC;aACb;YAED,MAAM,iBAAiB,GACrB,CAAC,OAAO,IAAI,CAAA,MAAA,QAAQ,CAAC,IAAI,0CAAE,WAAW,EAAE,MAAK,OAAO,CAAC,WAAW,EAAE,CAAC;YAErE,OAAO,CAAC,iBAAiB,CAAC;QAC5B,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC;YACV,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC;SAC7D,CAAC,CAAC;IACL,CAAC;IAED,kCAAkC;QAChC,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;IACzC,CAAC;IAED,iCAAiC;QAC/B,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,CAAC;IACxC,CAAC;IAED;;;;;;OAMG;IACG,0BAA0B,CAC9B,eAAgC,EAChC,kBAAsC,EACtC,aAAkB;;YAElB,wDAAwD;YACxD,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;YAE7C,IAAI;gBACF,MAAM,aAAa,GAAG,eAAe,CAAC,EAAE,CAAC;gBAEzC,kEAAkE;gBAClE,eAAe,CAAC,MAAM,GAAG,yBAAiB,CAAC,SAAS,CAAC;gBACrD,eAAe,CAAC,SAAS,GAAG,kBAAkB,CAAC;gBAC/C,IAAI,aAAa,EAAE;oBACjB,eAAe,CAAC,aAAa,GAAG,aAAa,CAAC;iBAC/C;gBAED,oFAAoF;gBACpF,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;gBAE/C,qFAAqF;gBACrF,IAAI,CAAC,iBAAiB,CACpB,eAAe,EACf,6EAA6E,CAC9E,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACtB;QACH,CAAC;KAAA;IAED;;;;;;;OAOG;IACH,gCAAgC,CAC9B,aAAqB,EACrB,4BAAoC,EACpC,oBAA4C;;QAE5C,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAClC,MAAM,IAAI,KAAK,CACb,sEAAsE,CACvE,CAAC;SACH;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAE3D,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CACb,kEAAkE,CACnE,CAAC;SACH;QAED,IAAA,uCAA+B,EAC7B,eAAe,EACf,kCAAkC,CACnC,CAAC;QAEF,IACE,4BAA4B;YAC5B,CAAC,CAAA,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,eAAe,0CAAE,MAAM,KAAI,CAAC,CAAC,EAC/C;YACA,eAAe,CAAC,eAAe,GAAG;gBAChC,GAAG,CAAC,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,eAAe,mCAAI,EAAE,CAAC;gBAC3C,GAAG,oBAAoB;aACxB,CAAC;YACF,IAAI,CAAC,iBAAiB,CACpB,eAAe,EACf,kFAAkF,CACnF,CAAC;SACH;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAoB,CAAC;IAC/D,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACH,wBAAwB,CACtB,aAAqB,EACrB,EACE,mBAAmB,EACnB,YAAY,EACZ,iBAAiB,EACjB,GAAG,EACH,QAAQ,EACR,QAAQ,EACR,oBAAoB,EACpB,YAAY,EACZ,mBAAmB,EACnB,kBAAkB,EAClB,YAAY,GAab;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAE3D,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CACb,4DAA4D,CAC7D,CAAC;SACH;QAED,IAAA,uCAA+B,EAC7B,eAAe,EACf,0BAA0B,CAC3B,CAAC;QAEF,IAAI,kBAAkB,GAAG;YACvB,QAAQ,EAAE;gBACR,GAAG;gBACH,QAAQ;gBACR,QAAQ;gBACR,oBAAoB;gBACpB,YAAY;aACb;YACD,mBAAmB;YACnB,YAAY;YACZ,iBAAiB;YACjB,mBAAmB;YACnB,kBAAkB;YAClB,YAAY;SACN,CAAC;QAET,8BAA8B;QAC9B,kBAAkB,CAAC,QAAQ,GAAG,IAAA,eAAM,EAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAClE,kBAAkB,GAAG,IAAA,eAAM,EAAC,kBAAkB,CAAC,CAAC;QAEhD,0DAA0D;QAC1D,MAAM,WAAW,GAAG,IAAA,cAAK,EAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC;QAE/D,IAAI,CAAC,iBAAiB,CACpB,WAAW,EACX,qEAAqE,CACtE,CAAC;QAEF,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAoB,CAAC;IAC/D,CAAC;IAEa,eAAe,CAC3B,eAAgC,EAChC,EACE,UAAU,GAAG,KAAK,EAClB,eAAe,EACf,iBAAiB,GAAG,IAAI,GAKzB;;YAED,MAAM,aAAa,GAAG,eAAe,CAAC,EAAE,CAAC;YACzC,IAAI,eAAkD,CAAC;YACvD,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;YACzE,MAAM,eAAe,GAAG,WAAW;gBACjC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;gBACvB,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;YAEnD,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,WAAW,EAAE;gBACvC,IAAI;oBACF,IAAI,eAAe,KAAK,KAAK,EAAE;wBAC7B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE;4BAC/D,iBAAiB;yBAClB,CAAC,CAAC;wBACH,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;qBAChD;oBAED,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,GAClC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;oBAE7C,IAAI,CAAC,aAAa,EAAE;wBAClB,MAAM,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;qBAC9C;iBACF;gBAAC,OAAO,KAAU,EAAE;oBACnB,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,GAClC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;oBAC7C,IAAI,CAAC,aAAa,EAAE;wBAClB,IAAI,KAAK,CAAC,IAAI,KAAK,uBAAU,CAAC,QAAQ,CAAC,mBAAmB,EAAE;4BAC1D,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;4BAEtC,MAAM,2BAAc,CAAC,mBAAmB,CACtC,+BAA+B,CAChC,CAAC;yBACH;6BAAM;4BACL,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;yBACnC;qBACF;iBACF;aACF;YAED,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC;YAExC,QAAQ,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,MAAM,EAAE;gBACzB,KAAK,yBAAiB,CAAC,MAAM;oBAC3B,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBACxC,MAAM,sBAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAEpD,KAAK,yBAAiB,CAAC,SAAS;oBAC9B,MAAM,WAAW,GAAG,sBAAS,CAAC,QAAQ,CACpC,gCAAgC,CACjC,CAAC;oBAEF,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,KAAK,CAAC,WAAW,CAAC,CAAC;oBACpC,MAAM,WAAW,CAAC;gBAEpB,KAAK,yBAAiB,CAAC,SAAS;oBAC9B,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,EAAE,CAAC;oBAC3B,OAAO,SAAS,CAAC,IAAc,CAAC;gBAElC;oBACE,MAAM,aAAa,GAAG,sBAAS,CAAC,QAAQ,CACtC,2CAA2C,IAAI,CAAC,SAAS,CACvD,SAAS,IAAI,aAAa,CAC3B,EAAE,CACJ,CAAC;oBAEF,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,KAAK,CAAC,aAAa,CAAC,CAAC;oBACtC,MAAM,aAAa,CAAC;aACvB;QACH,CAAC;KAAA;IAED;;;;;;;OAOG;IACW,kBAAkB,CAAC,aAAqB;;YACpD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACpC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,MAAM,KAAK,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,aAAa,KAAK,EAAE,CAAC,CAAC;YACvE,MAAM,eAAe,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;YAC5C,MAAM,EACJ,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,GAC1B,GAAG,eAAe,CAAC;YACpB,IAAI,SAAS,CAAC;YACd,IAAI;gBACF,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;oBACd,WAAW,EAAE,CAAC;oBACd,IAAI,CAAC,eAAe,CAClB,eAAe,EACf,IAAI,KAAK,CAAC,yBAAyB,CAAC,CACrC,CAAC;oBACF,OAAO;iBACR;qBAAM,IAAI,CAAC,OAAO,EAAE;oBACnB,WAAW,EAAE,CAAC;oBACd,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;oBACxE,OAAO;iBACR;gBAED,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,yBAAiB,CAAC;gBAC/C,IAAI,UAAU,GAAG,KAAK,CAAC;gBACvB,oGAAoG;gBACpG,wHAAwH;gBACxH,IAAI,CAAC,UAAU,EAAE;oBACf,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBACvD,UAAU,GAAG,IAAA,8BAAY,EAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC7D;gBAED,eAAe,CAAC,MAAM,GAAG,MAAM,CAAC;gBAChC,eAAe,CAAC,QAAQ,CAAC,KAAK,GAAG,UAAU,CAAC;gBAC5C,eAAe,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;gBAE3C,MAAM,YAAY,mCACb,eAAe,CAAC,QAAQ,KAC3B,QAAQ,EAAE,eAAe,CAAC,QAAQ,CAAC,GAAG,GACvC,CAAC;gBAEF,MAAM,SAAS,GAAG,IAAA,4BAAoB,EAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAEjE,MAAM,QAAQ,GAAG,SAAS;oBACxB,CAAC,iCACM,YAAY,KACf,YAAY,EAAE,eAAe,CAAC,QAAQ,CAAC,YAAY,EACnD,oBAAoB,EAAE,eAAe,CAAC,QAAQ,CAAC,oBAAoB,EACnE,gBAAgB,EAAE,eAAe,CAAC,QAAQ,CAAC,gBAAgB;wBAC3D,kEAAkE;wBAClE,IAAI,EAAE,CAAC,IAEX,CAAC,CAAC,YAAY,CAAC;gBAEjB,mEAAmE;gBACnE,IAAI,SAAS,EAAE;oBACb,OAAO,QAAQ,CAAC,QAAQ,CAAC;iBAC1B;gBAED,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;gBAC1D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;gBACtD,MAAM,IAAI,CAAC,wBAAwB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;gBAC/D,eAAe,CAAC,MAAM,GAAG,yBAAiB,CAAC,MAAM,CAAC;gBAClD,IAAI,CAAC,iBAAiB,CACpB,eAAe,EACf,+DAA+D,CAChE,CAAC;gBAEF,MAAM,KAAK,GAAG,IAAA,6BAAW,EAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;gBAChD,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC;gBAC9B,IAAI,CAAC,iBAAiB,CACpB,eAAe,EACf,iEAAiE,CAClE,CAAC;gBACF,MAAM,IAAI,GAAG,MAAM,IAAA,wBAAK,EAAC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;gBACvE,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC;gBAC5B,eAAe,CAAC,MAAM,GAAG,yBAAiB,CAAC,SAAS,CAAC;gBACrD,eAAe,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;gBACrD,IAAI,CAAC,iBAAiB,CACpB,eAAe,EACf,kEAAkE,CACnE,CAAC;gBACF,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;aAClE;YAAC,OAAO,KAAU,EAAE;gBACnB,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;aAC9C;oBAAS;gBACR,iEAAiE;gBACjE,IAAI,SAAS,EAAE;oBACb,SAAS,CAAC,WAAW,EAAE,CAAC;iBACzB;gBACD,WAAW,EAAE,CAAC;aACf;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACK,iBAAiB,CAAC,aAAqB;QAC7C,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAClD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,aAAa,CACjC,CAAC;QACF,IAAI,CAAC,eAAe,EAAE;YACpB,OAAO;SACR;QACD,eAAe,CAAC,MAAM,GAAG,yBAAiB,CAAC,QAAQ,CAAC;QACpD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;QACjE,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CACjD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,aAAa,CACjC,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED;;;;;;;;;;;;;OAaG;IACK,wBAAwB,CAC9B,YAA+B;QAE/B,MAAM,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;QAElC,MAAM,SAAS,GAAG,YAAY;aAC3B,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,wBAAwB;aACnE,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE;YACb,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;YAE/C,IAAI,QAAQ,EAAE;gBACZ,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC,KAAK,IAAI,IAAA,sCAAmB,EAClD,OAAO,CACR,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC;gBAErC,IAAI,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;oBAC5B,OAAO,IAAI,CAAC;iBACb;qBAAM,IACL,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc;oBACjD,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAC1B;oBACA,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACzB,OAAO,IAAI,CAAC;iBACb;aACF;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QAEL,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,uBAAuB;QAC5C,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;;OAKG;IACK,YAAY,CAAC,MAAyB;QAC5C,OAAO,CACL,MAAM,KAAK,yBAAiB,CAAC,QAAQ;YACrC,MAAM,KAAK,yBAAiB,CAAC,SAAS;YACtC,MAAM,KAAK,yBAAiB,CAAC,MAAM;YACnC,MAAM,KAAK,yBAAiB,CAAC,SAAS,CACvC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACK,iBAAiB,CAAC,MAAyB;QACjD,OAAO;YACL,yBAAiB,CAAC,SAAS;YAC3B,yBAAiB,CAAC,SAAS;YAC3B,yBAAiB,CAAC,MAAM;YACxB,yBAAiB,CAAC,QAAQ;YAC1B,yBAAiB,CAAC,SAAS;SAC5B,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC;IAEa,eAAe,CAC3B,MAAuB,EACvB,EAAE,iBAAiB,EAAkC;;YAErD,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;YAC1B,MAAM,IAAI,GAAG,+BAAY,CAAC,WAAW,CAAC;YACtC,MAAM,WAAW,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC;YAExC,OAAO,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CACrC,+BAA+B,EAC/B;gBACE,EAAE;gBACF,MAAM,EAAE,MAAM,IAAI,kCAAe;gBACjC,IAAI;gBACJ,WAAW;gBACX,aAAa,EAAE,IAAI;aACpB,EACD,iBAAiB,CAClB,CAAuB,CAAC;QAC3B,CAAC;KAAA;IAEO,cAAc,CAAC,aAAqB;QAC1C,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpC,OAAO,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,aAAa,CAAC,CAAC;IAC7D,CAAC;IAEO,aAAa,CAAC,MAAuB;QAC3C,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAEO,sBAAsB,CAAC,aAAqB;QAIlD,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAEvD,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;SAChD;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAE/D,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC;IAC5C,CAAC;IAEO,UAAU;QAChB,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAClD,OAAO,cAAc,CAAC,OAAO,CAAC;IAChC,CAAC;IAEO,oBAAoB,CAC1B,QAAiC;QAEjC,OAAO,uBAAkB,CAAC,UAAU,CAAC,QAAQ,EAAE;YAC7C,MAAM,EAAE,IAAI,CAAC,sBAAsB,EAAE;YACrC,MAAM,EAAE,KAAK;SACd,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;OAQG;IACK,sBAAsB;QAC5B,MAAM,EACJ,cAAc,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,GACzD,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAE3B,IACE,KAAK,KAAK,sBAAG;YACb,KAAK,KAAK,8BAAW,CAAC,cAAc,CAAC;YACrC,KAAK,KAAK,8BAAW,CAAC,eAAe,CAAC,EACtC;YACA,OAAO,IAAI,eAAM,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,gBAAQ,EAAE,CAAC,CAAC;SAClD;QAED,MAAM,iBAAiB,GAAyB;YAC9C,IAAI;YACJ,OAAO,EAAE,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC;YAC9B,eAAe,EAAE,gBAAQ;SAC1B,CAAC;QAEF,OAAO,eAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAC1C,CAAC;IAEO,sBAAsB,CAAC,EAC7B,KAAK,EACL,OAAO,GAIR;QACC,MAAM,EAAE,YAAY,EAAE,mBAAmB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAEzD,MAAM,mBAAmB,GAAG;YAC1B,GAAG,KAAK;YACR,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,mBAAmB,EAAE,EAAE;gBACjD,MAAM,kBAAkB,GAAG,OAAO,CAAC,IAAI,CACrC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,mBAAmB,CAAC,IAAI,CAChD,CAAC;gBAEF,OAAO,kBAAkB,aAAlB,kBAAkB,cAAlB,kBAAkB,GAAI,mBAAmB,CAAC;YACnD,CAAC,CAAC;SACH,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC;YACV,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,CAAC;SACjE,CAAC,CAAC;IACL,CAAC;IAEO,gCAAgC,CAAC,EACvC,uBAAuB,EACvB,WAAW,GAMZ;QACC,IAAI,CAAC,MAAM,CAAC,EAAE,uBAAuB,EAAE,CAAC,CAAC;QACzC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,0BAA0B,EAAE,WAAW,CAAC,CAAC;IACzD,CAAC;IAEO,2BAA2B,CAAC,YAA+B;QACjE,IAAA,kCAAyB,EAAC,8BAA8B,CAAC,CAAC;QAC1D,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAC7E,CAAC;IAEO,4BAA4B,CAClC,QAA2B,EAC3B,MAAe;QAEf,IAAI,CAAC,MAAM,IAAI,MAAM,KAAK,kCAAe,EAAE;YACzC,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,oBAAoB,EAAE,GAAG,EAAE,GAAG,QAAQ,CAAC;QAEvE,IACE,QAAQ,KAAK,SAAS;YACtB,YAAY,KAAK,SAAS;YAC1B,oBAAoB,KAAK,SAAS;YAClC,GAAG,KAAK,SAAS,EACjB;YACA,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,oBAAoB,GAAyB,EAAE,CAAC;QAEtD,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,oBAAoB,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;aAAM,IACL,YAAY,KAAK,SAAS;YAC1B,oBAAoB,KAAK,SAAS,EAClC;YACA,oBAAoB,CAAC,YAAY,GAAG,YAAY,CAAC;YACjD,oBAAoB,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;SAClE;QAED,IAAI,GAAG,KAAK,SAAS,EAAE;YACrB,oBAAoB,CAAC,GAAG,GAAG,GAAG,CAAC;SAChC;QAED,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACW,sBAAsB,CAAC,eAAgC;;;YACnE,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACpC,MAAM,WAAW,GAAG,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,QAAQ,0CAAE,IAAI,CAAC;YACpD,MAAM,8BAA8B,GAAG,YAAY,CAAC,MAAM,CACxD,CAAC,WAAW,EAAE,EAAE,CACd,WAAW,CAAC,QAAQ,CAAC,IAAI,KAAK,WAAW;gBACzC,WAAW,CAAC,OAAO,KAAK,OAAO,CAClC,CAAC;YACF,MAAM,YAAY,GAAG,8BAA8B,CAAC,MAAM,CACxD,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,MAAM,KAAK,yBAAiB,CAAC,SAAS,CACpE,CAAC;YACF,MAAM,UAAU,GAAG,8BAA8B,CAAC,MAAM,CACtD,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,MAAM,KAAK,yBAAiB,CAAC,SAAS,CACpE,CAAC;YAEF,IAAA,4DAAoC,EAClC,eAAe,EACf,YAAY,EACZ,UAAU,CACX,CAAC;YAEF,sEAAsE;YACtE,IAAI,CAAC,CAAC,MAAA,eAAe,CAAC,OAAO,mCAAI,EAAE,CAAC,CAAC,MAAM,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;oBAC3B,IAAA,mCAAyB,EAAC,eAAe,CAAC,CAAC;iBAC5C;aACF;YAED,MAAM,mBAAmB,GAAG,CAAC,GAAG,YAAY,EAAE,eAAe,CAAC,CAAC;YAC/D,IAAI,CAAC,MAAM,CAAC;gBACV,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,CAAC;aACjE,CAAC,CAAC;;KACJ;IAED;;;;;OAKG;IACK,0BAA0B,CAAC,aAAqB;;QACtD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAC3D,MAAM,KAAK,GAAG,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,QAAQ,0CAAE,KAAK,CAAC;QAC/C,MAAM,IAAI,GAAG,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,QAAQ,0CAAE,IAAI,CAAC;QAC7C,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CACjD,CAAC,WAAW,EAAE,EAAE,CACd,WAAW,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI;YAClC,WAAW,CAAC,QAAQ,CAAC,KAAK,KAAK,KAAK;YACpC,WAAW,CAAC,OAAO,KAAK,OAAO,CAClC,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YACxB,OAAO;SACR;QAED,4EAA4E;QAC5E,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;YACtC,IAAI,WAAW,CAAC,EAAE,KAAK,aAAa,EAAE;gBACpC,SAAS;aACV;YACD,WAAW,CAAC,UAAU,GAAG,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,IAAI,CAAC;YAC/C,WAAW,CAAC,YAAY,GAAG,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,EAAE,CAAC;YAC/C,yEAAyE;YACzE,IAAI,WAAW,CAAC,MAAM,KAAK,yBAAiB,CAAC,MAAM,EAAE;gBACnD,IAAI,CAAC,2BAA2B,CAAC,WAAW,CAAC,CAAC;aAC/C;SACF;IACH,CAAC;IAED;;;;OAIG;IACK,2BAA2B,CAAC,eAAgC;QAClE,eAAe,CAAC,MAAM,GAAG,yBAAiB,CAAC,OAAO,CAAC;QACnD,IAAI,CAAC,iBAAiB,CACpB,eAAe,EACf,yEAAyE,CAC1E,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACK,0BAA0B,CAAC,QAAiB;QAClD,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CACjC,CAAC,WAAW,EAAE,EAAE,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,KAAK,QAAQ,CAC/D,CAAC;IACJ,CAAC;IAEa,0BAA0B,CACtC,aAAqB;;YAErB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC7B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,aAAa,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE;oBACpD,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;;;;OAMG;IACW,wBAAwB,CACpC,eAAgC,EAChC,QAA0B;;YAE1B,IAAI,QAAQ,CAAC,CAAC,EAAE;gBACd,eAAe,CAAC,CAAC,GAAG,IAAA,8BAAY,EAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;aAC3D;YAED,IAAI,QAAQ,CAAC,CAAC,EAAE;gBACd,eAAe,CAAC,CAAC,GAAG,IAAA,8BAAY,EAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;aAC3D;YAED,IAAI,QAAQ,CAAC,CAAC,EAAE;gBACd,eAAe,CAAC,CAAC,GAAG,IAAA,8BAAY,EAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;aAC3D;QACH,CAAC;KAAA;IAEa,uBAAuB;;;YACnC,MAAM,iCAAiC,GACrC,MAAM,IAAI,CAAC,qCAAqC,EAAE,CAAC;YACrD,MAAM,iCAAiC,GACrC,MAAA,MAAA,IAAI,CAAC,qCAAqC,oDAAI,mCAAI,IAAI,CAAC;YAEzD,OAAO,CACL,iCAAiC,IAAI,iCAAiC,CACvE,CAAC;;KACH;CACF;AAljDD,sDAkjDC;AAED,kBAAe,qBAAqB,CAAC","sourcesContent":["import { Hardfork, Common, type ChainConfig } from '@ethereumjs/common';\nimport type { TypedTransaction } from '@ethereumjs/tx';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type {\n  BaseConfig,\n  BaseState,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  BNToHex,\n  fractionBN,\n  hexToBN,\n  query,\n  NetworkType,\n  RPC,\n  ApprovalType,\n  ORIGIN_METAMASK,\n  convertHexToDecimal,\n} from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  BlockTracker,\n  NetworkState,\n  Provider,\n} from '@metamask/network-controller';\nimport { errorCodes, rpcErrors, providerErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport MethodRegistry from 'eth-method-registry';\nimport { addHexPrefix, bufferToHex } from 'ethereumjs-util';\nimport { EventEmitter } from 'events';\nimport { merge, pickBy } from 'lodash';\nimport NonceTracker from 'nonce-tracker';\nimport { v1 as random } from 'uuid';\n\nimport { EtherscanRemoteTransactionSource } from './EtherscanRemoteTransactionSource';\nimport { validateConfirmedExternalTransaction } from './external-transactions';\nimport { addInitialHistorySnapshot, updateTransactionHistory } from './history';\nimport { IncomingTransactionHelper } from './IncomingTransactionHelper';\nimport { pendingTransactionsLogger } from './logger';\nimport { PendingTransactionTracker } from './PendingTransactionTracker';\nimport { determineTransactionType } from './transaction-type';\nimport type {\n  DappSuggestedGasFees,\n  TransactionParams,\n  TransactionMeta,\n  TransactionReceipt,\n  SecurityProviderRequest,\n  SendFlowHistoryEntry,\n  WalletDevice,\n} from './types';\nimport { TransactionType, TransactionStatus } from './types';\nimport {\n  getAndFormatTransactionsForNonceTracker,\n  getIncreasedPriceFromExisting,\n  normalizeTxParams,\n  isEIP1559Transaction,\n  isFeeMarketEIP1559Values,\n  isGasPriceValue,\n  validateGasValues,\n  validateIfTransactionUnapproved,\n  validateMinimumIncrease,\n  ESTIMATE_GAS_ERROR,\n} from './utils';\nimport { validateTransactionOrigin, validateTxParams } from './validation';\n\nexport const HARDFORK = Hardfork.London;\n\n/**\n * @type Result\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\nexport interface GasPriceValue {\n  gasPrice: string;\n}\n\nexport interface FeeMarketEIP1559Values {\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n}\n\n/**\n * @type TransactionConfig\n *\n * Transaction controller configuration\n * @property provider - Provider used to create a new underlying EthQuery instance\n * @property sign - Method used to sign transactions\n */\nexport interface TransactionConfig extends BaseConfig {\n  sign?: (txParams: TransactionParams, from: string) => Promise<any>;\n  txHistoryLimit: number;\n}\n\n/**\n * @type MethodData\n *\n * Method data registry object\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport interface MethodData {\n  registryMethod: string;\n  parsedRegistryMethod: Record<string, unknown>;\n}\n\n/**\n * @type TransactionState\n *\n * Transaction controller state\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n */\nexport interface TransactionState extends BaseState {\n  transactions: TransactionMeta[];\n  methodData: { [key: string]: MethodData };\n  lastFetchedBlockNumbers: { [key: string]: number };\n}\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.5;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * The name of the {@link TransactionController}.\n */\nconst controllerName = 'TransactionController';\n\n/**\n * The external actions available to the {@link TransactionController}.\n */\ntype AllowedActions = AddApprovalRequest;\n\n/**\n * The messenger of the {@link TransactionController}.\n */\nexport type TransactionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  TransactionConfig,\n  TransactionState\n> {\n  private ethQuery: EthQuery;\n\n  private readonly isHistoryDisabled: boolean;\n\n  private readonly isSendFlowHistoryDisabled: boolean;\n\n  private readonly nonceTracker: NonceTracker;\n\n  private registry: any;\n\n  private readonly provider: Provider;\n\n  private readonly handle?: ReturnType<typeof setTimeout>;\n\n  private readonly mutex = new Mutex();\n\n  private readonly getNetworkState: () => NetworkState;\n\n  private readonly getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly getPermittedAccounts: (origin?: string) => Promise<string[]>;\n\n  private readonly getSelectedAddress: () => string;\n\n  private readonly messagingSystem: TransactionControllerMessenger;\n\n  private readonly incomingTransactionHelper: IncomingTransactionHelper;\n\n  private readonly securityProviderRequest?: SecurityProviderRequest;\n\n  private readonly pendingTransactionTracker: PendingTransactionTracker;\n\n  private failTransaction(transactionMeta: TransactionMeta, error: Error) {\n    const newTransactionMeta = {\n      ...transactionMeta,\n      error,\n      status: TransactionStatus.failed,\n    };\n    this.updateTransaction(\n      newTransactionMeta,\n      'TransactionController#failTransaction - Add error message and set status to failed',\n    );\n    this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);\n  }\n\n  private async registryLookup(fourBytePrefix: string): Promise<MethodData> {\n    const registryMethod = await this.registry.lookup(fourBytePrefix);\n    const parsedRegistryMethod = this.registry.parse(registryMethod);\n    return { registryMethod, parsedRegistryMethod };\n  }\n\n  /**\n   * EventEmitter instance used to listen to specific transactional events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TransactionController';\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Creates a TransactionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.blockTracker - The block tracker used to poll for new blocks data.\n   * @param options.disableHistory - Whether to disable storing history in transaction metadata.\n   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.\n   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.\n   * @param options.getSelectedAddress - Gets the address of the currently selected account.\n   * @param options.incomingTransactions - Configuration options for incoming transaction support.\n   * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.\n   * @param options.incomingTransactions.isEnabled - Whether or not incoming transaction retrieval is enabled.\n   * @param options.incomingTransactions.queryEntireHistory - Whether to initially query the entire transaction history or only recent blocks.\n   * @param options.incomingTransactions.updateTransactions - Whether to update local transactions using remote transaction data.\n   * @param options.messenger - The controller messenger.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.provider - The provider used to create the underlying EthQuery instance.\n   * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      blockTracker,\n      disableHistory,\n      disableSendFlowHistory,\n      getCurrentAccountEIP1559Compatibility,\n      getCurrentNetworkEIP1559Compatibility,\n      getNetworkState,\n      getPermittedAccounts,\n      getSelectedAddress,\n      incomingTransactions = {},\n      messenger,\n      onNetworkStateChange,\n      provider,\n      securityProviderRequest,\n    }: {\n      blockTracker: BlockTracker;\n      disableHistory: boolean;\n      disableSendFlowHistory: boolean;\n      getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n      getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n      getNetworkState: () => NetworkState;\n      getPermittedAccounts: (origin?: string) => Promise<string[]>;\n      getSelectedAddress: () => string;\n      incomingTransactions: {\n        includeTokenTransfers?: boolean;\n        isEnabled?: () => boolean;\n        queryEntireHistory?: boolean;\n        updateTransactions?: boolean;\n      };\n      messenger: TransactionControllerMessenger;\n      onNetworkStateChange: (listener: (state: NetworkState) => void) => void;\n      provider: Provider;\n      securityProviderRequest?: SecurityProviderRequest;\n    },\n    config?: Partial<TransactionConfig>,\n    state?: Partial<TransactionState>,\n  ) {\n    super(config, state);\n\n    this.defaultConfig = {\n      txHistoryLimit: 40,\n    };\n\n    this.defaultState = {\n      methodData: {},\n      transactions: [],\n      lastFetchedBlockNumbers: {},\n    };\n\n    this.initialize();\n\n    this.provider = provider;\n    this.messagingSystem = messenger;\n    this.getNetworkState = getNetworkState;\n    // @ts-expect-error TODO: Provider type alignment\n    this.ethQuery = new EthQuery(provider);\n    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;\n    this.isHistoryDisabled = disableHistory ?? false;\n    this.registry = new MethodRegistry({ provider });\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility;\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n    this.getPermittedAccounts = getPermittedAccounts;\n    this.getSelectedAddress = getSelectedAddress;\n    this.securityProviderRequest = securityProviderRequest;\n\n    this.nonceTracker = new NonceTracker({\n      provider,\n      blockTracker,\n      getPendingTransactions: (address) =>\n        getAndFormatTransactionsForNonceTracker(\n          address,\n          TransactionStatus.submitted,\n          this.state.transactions,\n        ),\n      getConfirmedTransactions: (address) =>\n        getAndFormatTransactionsForNonceTracker(\n          address,\n          TransactionStatus.confirmed,\n          this.state.transactions,\n        ),\n    });\n\n    this.incomingTransactionHelper = new IncomingTransactionHelper({\n      blockTracker,\n      getCurrentAccount: getSelectedAddress,\n      getLastFetchedBlockNumbers: () => this.state.lastFetchedBlockNumbers,\n      getNetworkState,\n      isEnabled: incomingTransactions.isEnabled,\n      queryEntireHistory: incomingTransactions.queryEntireHistory,\n      remoteTransactionSource: new EtherscanRemoteTransactionSource({\n        includeTokenTransfers: incomingTransactions.includeTokenTransfers,\n      }),\n      transactionLimit: this.config.txHistoryLimit,\n      updateTransactions: incomingTransactions.updateTransactions,\n    });\n\n    this.incomingTransactionHelper.hub.on(\n      'transactions',\n      this.onIncomingTransactions.bind(this),\n    );\n\n    this.incomingTransactionHelper.hub.on(\n      'updatedLastFetchedBlockNumbers',\n      this.onUpdatedLastFetchedBlockNumbers.bind(this),\n    );\n\n    this.pendingTransactionTracker = new PendingTransactionTracker({\n      blockTracker,\n      failTransaction: this.failTransaction.bind(this),\n      getChainId: this.getChainId.bind(this),\n      getEthQuery: () => this.ethQuery,\n      getTransactions: () => this.state.transactions,\n    });\n\n    this.pendingTransactionTracker.hub.on(\n      'transactions',\n      this.onPendingTransactionsUpdate.bind(this),\n    );\n\n    this.pendingTransactionTracker.hub.on(\n      'transaction-confirmed',\n      (transactionMeta: TransactionMeta) =>\n        this.hub.emit(`${transactionMeta.id}:confirmed`, transactionMeta),\n    );\n\n    onNetworkStateChange(() => {\n      // @ts-expect-error TODO: Provider type alignment\n      this.ethQuery = new EthQuery(this.provider);\n      this.registry = new MethodRegistry({ provider: this.provider });\n    });\n\n    this.pendingTransactionTracker.start();\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(fourBytePrefix: string): Promise<MethodData> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { methodData } = this.state;\n      const knownMethod = Object.keys(methodData).find(\n        (knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix,\n      );\n      if (knownMethod) {\n        return methodData[fourBytePrefix];\n      }\n      const registry = await this.registryLookup(fourBytePrefix);\n      this.update({\n        methodData: { ...methodData, ...{ [fourBytePrefix]: registry } },\n      });\n      return registry;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param txParams - Standard parameters for an Ethereum transaction.\n   * @param opts - Additional options to control how the transaction is added.\n   * @param opts.actionId - Unique ID to prevent duplicate requests.\n   * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.\n   * @param opts.method - RPC method that requested the transaction.\n   * @param opts.origin - The origin of the transaction request, such as a dApp hostname.\n   * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.\n   * @param opts.securityAlertResponse - Response from security validator.\n   * @param opts.sendFlowHistory - The sendFlowHistory entries to add.\n   * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    txParams: TransactionParams,\n    {\n      actionId,\n      deviceConfirmedOn,\n      method,\n      origin,\n      requireApproval,\n      securityAlertResponse,\n      sendFlowHistory,\n      type,\n    }: {\n      actionId?: string;\n      deviceConfirmedOn?: WalletDevice;\n      method?: string;\n      origin?: string;\n      requireApproval?: boolean | undefined;\n      securityAlertResponse?: Record<string, unknown>;\n      sendFlowHistory?: SendFlowHistoryEntry[];\n      type?: TransactionType;\n    } = {},\n  ): Promise<Result> {\n    const chainId = this.getChainId();\n    const { transactions } = this.state;\n    txParams = normalizeTxParams(txParams);\n    const isEIP1559Compatible = await this.getEIP1559Compatibility();\n    validateTxParams(txParams, isEIP1559Compatible);\n    if (origin) {\n      await validateTransactionOrigin(\n        await this.getPermittedAccounts(origin),\n        this.getSelectedAddress(),\n        txParams.from,\n        origin,\n      );\n    }\n\n    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(\n      txParams,\n      origin,\n    );\n\n    const transactionType =\n      type ?? (await determineTransactionType(txParams, this.ethQuery)).type;\n\n    const existingTransactionMeta = this.getTransactionWithActionId(actionId);\n    // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.\n    const transactionMeta: TransactionMeta = existingTransactionMeta || {\n      // Add actionId to txMeta to check if same actionId is seen again\n      actionId,\n      chainId,\n      dappSuggestedGasFees,\n      deviceConfirmedOn,\n      id: random(),\n      origin,\n      securityAlertResponse,\n      status: TransactionStatus.unapproved as TransactionStatus.unapproved,\n      time: Date.now(),\n      txParams,\n      userEditedGasLimit: false,\n      verifiedOnBlockchain: false,\n      type: transactionType,\n    };\n\n    try {\n      const { gas, estimateGasError } = await this.estimateGas(txParams);\n      txParams.gas = gas;\n      txParams.estimateGasError = estimateGasError;\n      transactionMeta.originalGasEstimate = gas;\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n      return Promise.reject(error);\n    }\n\n    // Checks if a transaction already exists with a given actionId\n    if (!existingTransactionMeta) {\n      // Set security provider response\n      if (method && this.securityProviderRequest) {\n        const securityProviderResponse = await this.securityProviderRequest(\n          transactionMeta,\n          method,\n        );\n        transactionMeta.securityProviderResponse = securityProviderResponse;\n      }\n\n      if (!this.isSendFlowHistoryDisabled) {\n        transactionMeta.sendFlowHistory = sendFlowHistory ?? [];\n      }\n      // Initial history push\n      if (!this.isHistoryDisabled) {\n        addInitialHistorySnapshot(transactionMeta);\n      }\n      transactions.push(transactionMeta);\n      this.update({\n        transactions: this.trimTransactionsForState(transactions),\n      });\n      this.hub.emit(`unapprovedTransaction`, transactionMeta);\n    }\n\n    return {\n      result: this.processApproval(transactionMeta, {\n        isExisting: Boolean(existingTransactionMeta),\n        requireApproval,\n      }),\n      transactionMeta,\n    };\n  }\n\n  startIncomingTransactionPolling() {\n    this.incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionPolling() {\n    this.incomingTransactionHelper.stop();\n  }\n\n  async updateIncomingTransactions() {\n    await this.incomingTransactionHelper.update();\n  }\n\n  /**\n   * Creates approvals for all unapproved transactions persisted.\n   */\n  initApprovals() {\n    const chainId = this.getChainId();\n    const unapprovedTxs = this.state.transactions.filter(\n      (transaction) =>\n        transaction.status === TransactionStatus.unapproved &&\n        transaction.chainId === chainId,\n    );\n\n    for (const txMeta of unapprovedTxs) {\n      this.processApproval(txMeta, {\n        shouldShowRequest: false,\n      }).catch((error) => {\n        /* istanbul ignore next */\n        console.error('Error during persisted transaction approval', error);\n      });\n    }\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transaction.\n   * @param options - The options for the cancellation transaction.\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async stopTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    { estimatedBaseFee }: { estimatedBaseFee?: string } = {},\n  ) {\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.txParams.gasPrice,\n      CANCEL_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.txParams?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            from: transactionMeta.txParams.from,\n            gasLimit: transactionMeta.txParams.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n            nonce: transactionMeta.txParams.nonce,\n            to: transactionMeta.txParams.from,\n            value: '0x0',\n          }\n        : {\n            from: transactionMeta.txParams.from,\n            gasLimit: transactionMeta.txParams.gas,\n            gasPrice: newGasPrice,\n            nonce: transactionMeta.txParams.nonce,\n            to: transactionMeta.txParams.from,\n            value: '0x0',\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n    await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n    const rawTx = bufferToHex(signedTx.serialize());\n    await query(this.ethQuery, 'sendRawTransaction', [rawTx]);\n    transactionMeta.estimatedBaseFee = estimatedBaseFee;\n    transactionMeta.status = TransactionStatus.cancelled;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionId - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transaction.\n   * @param options - The options for the speed up transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async speedUpTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      actionId,\n      estimatedBaseFee,\n    }: { actionId?: string; estimatedBaseFee?: string } = {},\n  ) {\n    // If transaction is found for same action id, do not create a new speed up transaction.\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const { transactions } = this.state;\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.txParams.gasPrice,\n      SPEED_UP_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.txParams?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...transactionMeta.txParams,\n            gasLimit: transactionMeta.txParams.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n          }\n        : {\n            ...transactionMeta.txParams,\n            gasLimit: transactionMeta.txParams.gas,\n            gasPrice: newGasPrice,\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n    await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n    const rawTx = bufferToHex(signedTx.serialize());\n    const hash = await query(this.ethQuery, 'sendRawTransaction', [rawTx]);\n    const baseTransactionMeta = {\n      ...transactionMeta,\n      estimatedBaseFee,\n      id: random(),\n      time: Date.now(),\n      hash,\n      actionId,\n      originalGasEstimate: transactionMeta.txParams.gas,\n      type: TransactionType.retry,\n    };\n    const newTransactionMeta =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...baseTransactionMeta,\n            txParams: {\n              ...transactionMeta.txParams,\n              maxFeePerGas: newMaxFeePerGas,\n              maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            },\n          }\n        : {\n            ...baseTransactionMeta,\n            txParams: {\n              ...transactionMeta.txParams,\n              gasPrice: newGasPrice,\n            },\n          };\n    transactions.push(newTransactionMeta);\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n    this.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(transaction: TransactionParams) {\n    const estimatedTransaction = { ...transaction };\n    const {\n      gas,\n      gasPrice: providedGasPrice,\n      to,\n      value,\n      data,\n    } = estimatedTransaction;\n    const gasPrice =\n      typeof providedGasPrice === 'undefined'\n        ? await query(this.ethQuery, 'gasPrice')\n        : providedGasPrice;\n    const { providerConfig } = this.getNetworkState();\n    const isCustomNetwork = providerConfig.type === NetworkType.rpc;\n    // 1. If gas is already defined on the transaction, use it\n    if (typeof gas !== 'undefined') {\n      return { gas, gasPrice };\n    }\n    const { gasLimit } = await query(this.ethQuery, 'getBlockByNumber', [\n      'latest',\n      false,\n    ]);\n\n    // 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000.\n    // If the network is a custom network then bypass this check and fetch 'estimateGas'.\n    /* istanbul ignore next */\n    const code = to ? await query(this.ethQuery, 'getCode', [to]) : undefined;\n    /* istanbul ignore next */\n    if (\n      !isCustomNetwork &&\n      (!to || (to && !data && (!code || code === '0x')))\n    ) {\n      return { gas: '0x5208', gasPrice };\n    }\n\n    // if data, should be hex string format\n    estimatedTransaction.data = !data\n      ? data\n      : /* istanbul ignore next */ addHexPrefix(data);\n\n    // 3. If this is a contract address, safely estimate gas using RPC\n    estimatedTransaction.value =\n      typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n    const gasLimitBN = hexToBN(gasLimit);\n    estimatedTransaction.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));\n\n    let gasHex;\n    let estimateGasError;\n    try {\n      gasHex = await query(this.ethQuery, 'estimateGas', [\n        estimatedTransaction,\n      ]);\n    } catch (error) {\n      estimateGasError = ESTIMATE_GAS_ERROR;\n    }\n    // 4. Pad estimated gas without exceeding the most recent block gasLimit. If the network is a\n    // a custom network then return the eth_estimateGas value.\n    const gasBN = hexToBN(gasHex);\n    const maxGasBN = gasLimitBN.muln(0.9);\n    const paddedGasBN = gasBN.muln(1.5);\n    /* istanbul ignore next */\n    if (gasBN.gt(maxGasBN) || isCustomNetwork) {\n      return { gas: addHexPrefix(gasHex), gasPrice, estimateGasError };\n    }\n\n    /* istanbul ignore next */\n    if (paddedGasBN.lt(maxGasBN)) {\n      return {\n        gas: addHexPrefix(BNToHex(paddedGasBN)),\n        gasPrice,\n        estimateGasError,\n      };\n    }\n    return { gas: addHexPrefix(BNToHex(maxGasBN)), gasPrice, estimateGasError };\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   * @param note - A note or update reason to include in the transaction history.\n   */\n  updateTransaction(transactionMeta: TransactionMeta, note: string) {\n    const { transactions } = this.state;\n    transactionMeta.txParams = normalizeTxParams(transactionMeta.txParams);\n    validateTxParams(transactionMeta.txParams);\n    if (!this.isHistoryDisabled) {\n      updateTransactionHistory(transactionMeta, note);\n    }\n    const index = transactions.findIndex(({ id }) => transactionMeta.id === id);\n    transactions[index] = transactionMeta;\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Removes all transactions from state, optionally based on the current network.\n   *\n   * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the\n   * current network. If `true`, all transactions are wiped.\n   * @param address - If specified, only transactions originating from this address will be\n   * wiped on current network.\n   */\n  wipeTransactions(ignoreNetwork?: boolean, address?: string) {\n    /* istanbul ignore next */\n    if (ignoreNetwork && !address) {\n      this.update({ transactions: [] });\n      return;\n    }\n    const currentChainId = this.getChainId();\n    const newTransactions = this.state.transactions.filter(\n      ({ chainId, txParams }) => {\n        const isMatchingNetwork = ignoreNetwork || chainId === currentChainId;\n\n        if (!isMatchingNetwork) {\n          return true;\n        }\n\n        const isMatchingAddress =\n          !address || txParams.from?.toLowerCase() === address.toLowerCase();\n\n        return !isMatchingAddress;\n      },\n    );\n\n    this.update({\n      transactions: this.trimTransactionsForState(newTransactions),\n    });\n  }\n\n  startIncomingTransactionProcessing() {\n    this.incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionProcessing() {\n    this.incomingTransactionHelper.stop();\n  }\n\n  /**\n   * Adds external provided transaction to state as confirmed transaction.\n   *\n   * @param transactionMeta - TransactionMeta to add transactions.\n   * @param transactionReceipt - TransactionReceipt of the external transaction.\n   * @param baseFeePerGas - Base fee per gas of the external transaction.\n   */\n  async confirmExternalTransaction(\n    transactionMeta: TransactionMeta,\n    transactionReceipt: TransactionReceipt,\n    baseFeePerGas: Hex,\n  ) {\n    // Run validation and add external transaction to state.\n    this.addExternalTransaction(transactionMeta);\n\n    try {\n      const transactionId = transactionMeta.id;\n\n      // Make sure status is confirmed and define gasUsed as in receipt.\n      transactionMeta.status = TransactionStatus.confirmed;\n      transactionMeta.txReceipt = transactionReceipt;\n      if (baseFeePerGas) {\n        transactionMeta.baseFeePerGas = baseFeePerGas;\n      }\n\n      // Update same nonce local transactions as dropped and define replacedBy properties.\n      this.markNonceDuplicatesDropped(transactionId);\n\n      // Update external provided transaction with updated gas values and confirmed status.\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController:confirmExternalTransaction - Add external transaction',\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Append new send flow history to a transaction.\n   *\n   * @param transactionID - The ID of the transaction to update.\n   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.\n   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionSendFlowHistory(\n    transactionID: string,\n    currentSendFlowHistoryLength: number,\n    sendFlowHistoryToAdd: SendFlowHistoryEntry[],\n  ): TransactionMeta {\n    if (this.isSendFlowHistoryDisabled) {\n      throw new Error(\n        'Send flow history is disabled for the current transaction controller',\n      );\n    }\n\n    const transactionMeta = this.getTransaction(transactionID);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update send flow history as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionSendFlowHistory',\n    );\n\n    if (\n      currentSendFlowHistoryLength ===\n      (transactionMeta?.sendFlowHistory?.length || 0)\n    ) {\n      transactionMeta.sendFlowHistory = [\n        ...(transactionMeta?.sendFlowHistory ?? []),\n        ...sendFlowHistoryToAdd,\n      ];\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController:updateTransactionSendFlowHistory - sendFlowHistory updated',\n      );\n    }\n\n    return this.getTransaction(transactionID) as TransactionMeta;\n  }\n\n  /**\n   * Update the gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param gasValues - Gas values to update.\n   * @param gasValues.gas - Same as transaction.gasLimit.\n   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param gasValues.gasPrice - Price per gas for legacy transactions.\n   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param gasValues.estimateUsed - Which estimate level was used.\n   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.\n   * @param gasValues.defaultGasEstimates - The default estimate for gas.\n   * @param gasValues.originalGasEstimate - Original estimate for gas.\n   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.\n   * @param gasValues.userFeeLevel - Estimate level user selected.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionGasFees(\n    transactionId: string,\n    {\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      gas,\n      gasLimit,\n      gasPrice,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    }: {\n      defaultGasEstimates?: string;\n      estimateUsed?: string;\n      estimateSuggested?: string;\n      gas?: string;\n      gasLimit?: string;\n      gasPrice?: string;\n      maxPriorityFeePerGas?: string;\n      maxFeePerGas?: string;\n      originalGasEstimate?: string;\n      userEditedGasLimit?: boolean;\n      userFeeLevel?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionGasFees',\n    );\n\n    let transactionGasFees = {\n      txParams: {\n        gas,\n        gasLimit,\n        gasPrice,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n      },\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    } as any;\n\n    // only update what is defined\n    transactionGasFees.txParams = pickBy(transactionGasFees.txParams);\n    transactionGasFees = pickBy(transactionGasFees);\n\n    // merge updated gas values with existing transaction meta\n    const updatedMeta = merge(transactionMeta, transactionGasFees);\n\n    this.updateTransaction(\n      updatedMeta,\n      'TransactionController:updateTransactionGasFees - gas values updated',\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  private async processApproval(\n    transactionMeta: TransactionMeta,\n    {\n      isExisting = false,\n      requireApproval,\n      shouldShowRequest = true,\n    }: {\n      isExisting?: boolean;\n      requireApproval?: boolean | undefined;\n      shouldShowRequest?: boolean;\n    },\n  ): Promise<string> {\n    const transactionId = transactionMeta.id;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n    const finishedPromise = isCompleted\n      ? Promise.resolve(meta)\n      : this.waitForTransactionFinished(transactionId);\n\n    if (meta && !isExisting && !isCompleted) {\n      try {\n        if (requireApproval !== false) {\n          const acceptResult = await this.requestApproval(transactionMeta, {\n            shouldShowRequest,\n          });\n          resultCallbacks = acceptResult.resultCallbacks;\n        }\n\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n\n        if (!isTxCompleted) {\n          await this.approveTransaction(transactionId);\n        }\n      } catch (error: any) {\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n        if (!isTxCompleted) {\n          if (error.code === errorCodes.provider.userRejectedRequest) {\n            this.cancelTransaction(transactionId);\n\n            throw providerErrors.userRejectedRequest(\n              'User rejected the transaction',\n            );\n          } else {\n            this.failTransaction(meta, error);\n          }\n        }\n      }\n    }\n\n    const finalMeta = await finishedPromise;\n\n    switch (finalMeta?.status) {\n      case TransactionStatus.failed:\n        resultCallbacks?.error(finalMeta.error);\n        throw rpcErrors.internal(finalMeta.error.message);\n\n      case TransactionStatus.cancelled:\n        const cancelError = rpcErrors.internal(\n          'User cancelled the transaction',\n        );\n\n        resultCallbacks?.error(cancelError);\n        throw cancelError;\n\n      case TransactionStatus.submitted:\n        resultCallbacks?.success();\n        return finalMeta.hash as string;\n\n      default:\n        const internalError = rpcErrors.internal(\n          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n            finalMeta || transactionId,\n          )}`,\n        );\n\n        resultCallbacks?.error(internalError);\n        throw internalError;\n    }\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionId - The ID of the transaction to approve.\n   */\n  private async approveTransaction(transactionId: string) {\n    const { transactions } = this.state;\n    const releaseLock = await this.mutex.acquire();\n    const chainId = this.getChainId();\n    const index = transactions.findIndex(({ id }) => transactionId === id);\n    const transactionMeta = transactions[index];\n    const {\n      txParams: { nonce, from },\n    } = transactionMeta;\n    let nonceLock;\n    try {\n      if (!this.sign) {\n        releaseLock();\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return;\n      } else if (!chainId) {\n        releaseLock();\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return;\n      }\n\n      const { approved: status } = TransactionStatus;\n      let nonceToUse = nonce;\n      // if a nonce already exists on the transactionMeta it means this is a speedup or cancel transaction\n      // so we want to reuse that nonce and hope that it beats the previous attempt to chain. Otherwise use a new locked nonce\n      if (!nonceToUse) {\n        nonceLock = await this.nonceTracker.getNonceLock(from);\n        nonceToUse = addHexPrefix(nonceLock.nextNonce.toString(16));\n      }\n\n      transactionMeta.status = status;\n      transactionMeta.txParams.nonce = nonceToUse;\n      transactionMeta.txParams.chainId = chainId;\n\n      const baseTxParams = {\n        ...transactionMeta.txParams,\n        gasLimit: transactionMeta.txParams.gas,\n      };\n\n      const isEIP1559 = isEIP1559Transaction(transactionMeta.txParams);\n\n      const txParams = isEIP1559\n        ? {\n            ...baseTxParams,\n            maxFeePerGas: transactionMeta.txParams.maxFeePerGas,\n            maxPriorityFeePerGas: transactionMeta.txParams.maxPriorityFeePerGas,\n            estimatedBaseFee: transactionMeta.txParams.estimatedBaseFee,\n            // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set\n            type: 2,\n          }\n        : baseTxParams;\n\n      // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set\n      if (isEIP1559) {\n        delete txParams.gasPrice;\n      }\n\n      const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n      const signedTx = await this.sign(unsignedEthTx, from);\n      await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n      transactionMeta.status = TransactionStatus.signed;\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - Transaction signed',\n      );\n\n      const rawTx = bufferToHex(signedTx.serialize());\n      transactionMeta.rawTx = rawTx;\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - RawTransaction added',\n      );\n      const hash = await query(this.ethQuery, 'sendRawTransaction', [rawTx]);\n      transactionMeta.hash = hash;\n      transactionMeta.status = TransactionStatus.submitted;\n      transactionMeta.submittedTime = new Date().getTime();\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - Transaction submitted',\n      );\n      this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n    } finally {\n      // must set transaction to submitted/failed before releasing lock\n      if (nonceLock) {\n        nonceLock.releaseLock();\n      }\n      releaseLock();\n    }\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   */\n  private cancelTransaction(transactionId: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    transactionMeta.status = TransactionStatus.rejected;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    const transactions = this.state.transactions.filter(\n      ({ id }) => id !== transactionId,\n    );\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for transactions of the same\n   * nonce, same day and network combo can result in confusing or broken experiences\n   * in the UI. The transactions are then updated using the BaseController update.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n\n    const txsToKeep = transactions\n      .sort((a, b) => (a.time > b.time ? -1 : 1)) // Descending time order\n      .filter((tx) => {\n        const { chainId, status, txParams, time } = tx;\n\n        if (txParams) {\n          const key = `${txParams.nonce}-${convertHexToDecimal(\n            chainId,\n          )}-${new Date(time).toDateString()}`;\n\n          if (nonceNetworkSet.has(key)) {\n            return true;\n          } else if (\n            nonceNetworkSet.size < this.config.txHistoryLimit ||\n            !this.isFinalState(status)\n          ) {\n            nonceNetworkSet.add(key);\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n    txsToKeep.reverse(); // Ascending time order\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed ||\n      status === TransactionStatus.cancelled\n    );\n  }\n\n  /**\n   * Whether the transaction has at least completed all local processing.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isLocalFinalState(status: TransactionStatus): boolean {\n    return [\n      TransactionStatus.cancelled,\n      TransactionStatus.confirmed,\n      TransactionStatus.failed,\n      TransactionStatus.rejected,\n      TransactionStatus.submitted,\n    ].includes(status);\n  }\n\n  private async requestApproval(\n    txMeta: TransactionMeta,\n    { shouldShowRequest }: { shouldShowRequest: boolean },\n  ): Promise<AddResult> {\n    const id = this.getApprovalId(txMeta);\n    const { origin } = txMeta;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: txMeta.id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: origin || ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      shouldShowRequest,\n    )) as Promise<AddResult>;\n  }\n\n  private getTransaction(transactionId: string): TransactionMeta | undefined {\n    const { transactions } = this.state;\n    return transactions.find(({ id }) => id === transactionId);\n  }\n\n  private getApprovalId(txMeta: TransactionMeta) {\n    return String(txMeta.id);\n  }\n\n  private isTransactionCompleted(transactionId: string): {\n    meta?: TransactionMeta;\n    isCompleted: boolean;\n  } {\n    const transaction = this.getTransaction(transactionId);\n\n    if (!transaction) {\n      return { meta: undefined, isCompleted: false };\n    }\n\n    const isCompleted = this.isLocalFinalState(transaction.status);\n\n    return { meta: transaction, isCompleted };\n  }\n\n  private getChainId(): Hex {\n    const { providerConfig } = this.getNetworkState();\n    return providerConfig.chainId;\n  }\n\n  private prepareUnsignedEthTx(\n    txParams: Record<string, unknown>,\n  ): TypedTransaction {\n    return TransactionFactory.fromTxData(txParams, {\n      common: this.getCommonConfiguration(),\n      freeze: false,\n    });\n  }\n\n  /**\n   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for\n   * specifying which chain, network, hardfork and EIPs to support for\n   * a transaction. By referencing this configuration, and analyzing the fields\n   * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718\n   * transaction type to use.\n   *\n   * @returns common configuration object\n   */\n  private getCommonConfiguration(): Common {\n    const {\n      providerConfig: { type: chain, chainId, nickname: name },\n    } = this.getNetworkState();\n\n    if (\n      chain !== RPC &&\n      chain !== NetworkType['linea-goerli'] &&\n      chain !== NetworkType['linea-mainnet']\n    ) {\n      return new Common({ chain, hardfork: HARDFORK });\n    }\n\n    const customChainParams: Partial<ChainConfig> = {\n      name,\n      chainId: parseInt(chainId, 16),\n      defaultHardfork: HARDFORK,\n    };\n\n    return Common.custom(customChainParams);\n  }\n\n  private onIncomingTransactions({\n    added,\n    updated,\n  }: {\n    added: TransactionMeta[];\n    updated: TransactionMeta[];\n  }) {\n    const { transactions: currentTransactions } = this.state;\n\n    const updatedTransactions = [\n      ...added,\n      ...currentTransactions.map((originalTransaction) => {\n        const updatedTransaction = updated.find(\n          ({ hash }) => hash === originalTransaction.hash,\n        );\n\n        return updatedTransaction ?? originalTransaction;\n      }),\n    ];\n\n    this.update({\n      transactions: this.trimTransactionsForState(updatedTransactions),\n    });\n  }\n\n  private onUpdatedLastFetchedBlockNumbers({\n    lastFetchedBlockNumbers,\n    blockNumber,\n  }: {\n    lastFetchedBlockNumbers: {\n      [key: string]: number;\n    };\n    blockNumber: number;\n  }) {\n    this.update({ lastFetchedBlockNumbers });\n    this.hub.emit('incomingTransactionBlock', blockNumber);\n  }\n\n  private onPendingTransactionsUpdate(transactions: TransactionMeta[]) {\n    pendingTransactionsLogger('Updated pending transactions');\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  private generateDappSuggestedGasFees(\n    txParams: TransactionParams,\n    origin?: string,\n  ): DappSuggestedGasFees | undefined {\n    if (!origin || origin === ORIGIN_METAMASK) {\n      return undefined;\n    }\n\n    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;\n\n    if (\n      gasPrice === undefined &&\n      maxFeePerGas === undefined &&\n      maxPriorityFeePerGas === undefined &&\n      gas === undefined\n    ) {\n      return undefined;\n    }\n\n    const dappSuggestedGasFees: DappSuggestedGasFees = {};\n\n    if (gasPrice !== undefined) {\n      dappSuggestedGasFees.gasPrice = gasPrice;\n    } else if (\n      maxFeePerGas !== undefined ||\n      maxPriorityFeePerGas !== undefined\n    ) {\n      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;\n      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    }\n\n    if (gas !== undefined) {\n      dappSuggestedGasFees.gas = gas;\n    }\n\n    return dappSuggestedGasFees;\n  }\n\n  /**\n   * Validates and adds external provided transaction to state.\n   *\n   * @param transactionMeta - Nominated external transaction to be added to state.\n   */\n  private async addExternalTransaction(transactionMeta: TransactionMeta) {\n    const chainId = this.getChainId();\n    const { transactions } = this.state;\n    const fromAddress = transactionMeta?.txParams?.from;\n    const sameFromAndNetworkTransactions = transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === fromAddress &&\n        transaction.chainId === chainId,\n    );\n    const confirmedTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.confirmed,\n    );\n    const pendingTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.submitted,\n    );\n\n    validateConfirmedExternalTransaction(\n      transactionMeta,\n      confirmedTxs,\n      pendingTxs,\n    );\n\n    // Make sure provided external transaction has non empty history array\n    if (!(transactionMeta.history ?? []).length) {\n      if (!this.isHistoryDisabled) {\n        addInitialHistorySnapshot(transactionMeta);\n      }\n    }\n\n    const updatedTransactions = [...transactions, transactionMeta];\n    this.update({\n      transactions: this.trimTransactionsForState(updatedTransactions),\n    });\n  }\n\n  /**\n   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions\n   * in the transactions have the same nonce.\n   *\n   * @param transactionId - Used to identify original transaction.\n   */\n  private markNonceDuplicatesDropped(transactionId: string) {\n    const chainId = this.getChainId();\n    const transactionMeta = this.getTransaction(transactionId);\n    const nonce = transactionMeta?.txParams?.nonce;\n    const from = transactionMeta?.txParams?.from;\n    const sameNonceTxs = this.state.transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === from &&\n        transaction.txParams.nonce === nonce &&\n        transaction.chainId === chainId,\n    );\n\n    if (!sameNonceTxs.length) {\n      return;\n    }\n\n    // Mark all same nonce transactions as dropped and give it a replacedBy hash\n    for (const transaction of sameNonceTxs) {\n      if (transaction.id === transactionId) {\n        continue;\n      }\n      transaction.replacedBy = transactionMeta?.hash;\n      transaction.replacedById = transactionMeta?.id;\n      // Drop any transaction that wasn't previously failed (off chain failure)\n      if (transaction.status !== TransactionStatus.failed) {\n        this.setTransactionStatusDropped(transaction);\n      }\n    }\n  }\n\n  /**\n   * Method to set transaction status to dropped.\n   *\n   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.\n   */\n  private setTransactionStatusDropped(transactionMeta: TransactionMeta) {\n    transactionMeta.status = TransactionStatus.dropped;\n    this.updateTransaction(\n      transactionMeta,\n      'TransactionController#setTransactionStatusDropped - Transaction dropped',\n    );\n  }\n\n  /**\n   * Get transaction with provided actionId.\n   *\n   * @param actionId - Unique ID to prevent duplicate requests\n   * @returns the filtered transaction\n   */\n  private getTransactionWithActionId(actionId?: string) {\n    return this.state.transactions.find(\n      (transaction) => actionId && transaction.actionId === actionId,\n    );\n  }\n\n  private async waitForTransactionFinished(\n    transactionId: string,\n  ): Promise<TransactionMeta> {\n    return new Promise((resolve) => {\n      this.hub.once(`${transactionId}:finished`, (txMeta) => {\n        resolve(txMeta);\n      });\n    });\n  }\n\n  /**\n   * Updates the r, s, and v properties of a TransactionMeta object\n   * with values from a signed transaction.\n   *\n   * @param transactionMeta - The TransactionMeta object to update.\n   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.\n   */\n  private async updateTransactionMetaRSV(\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ): Promise<void> {\n    if (signedTx.r) {\n      transactionMeta.r = addHexPrefix(signedTx.r.toString(16));\n    }\n\n    if (signedTx.s) {\n      transactionMeta.s = addHexPrefix(signedTx.s.toString(16));\n    }\n\n    if (signedTx.v) {\n      transactionMeta.v = addHexPrefix(signedTx.v.toString(16));\n    }\n  }\n\n  private async getEIP1559Compatibility() {\n    const currentNetworkIsEIP1559Compatible =\n      await this.getCurrentNetworkEIP1559Compatibility();\n    const currentAccountIsEIP1559Compatible =\n      this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n}\n\nexport default TransactionController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.mjs b/node_modules/@metamask/transaction-controller/dist/TransactionController.mjs
new file mode 100644
index 0000000..bacd8b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/TransactionController.mjs
@@ -0,0 +1,45 @@
+import {
+  ApprovalState,
+  CANCEL_RATE,
+  HARDFORK,
+  SPEED_UP_RATE,
+  TransactionController
+} from "./chunk-7TPXSDXL.mjs";
+import "./chunk-NHRBO3LU.mjs";
+import "./chunk-MDRMMUMS.mjs";
+import "./chunk-K4KOSAGM.mjs";
+import "./chunk-KG4UW4K4.mjs";
+import "./chunk-NM6OYEPP.mjs";
+import "./chunk-5YES3V2R.mjs";
+import "./chunk-FRKQ3Z2L.mjs";
+import "./chunk-5G6OHAXI.mjs";
+import "./chunk-XGRAHX6T.mjs";
+import "./chunk-VEVVBHP3.mjs";
+import "./chunk-Z4GV3YQQ.mjs";
+import "./chunk-FG74Z3F5.mjs";
+import "./chunk-FMRLPVFZ.mjs";
+import "./chunk-SL3GHHKG.mjs";
+import "./chunk-NOHEXQ7Y.mjs";
+import "./chunk-Y7ENNK7L.mjs";
+import "./chunk-F6E3TTR3.mjs";
+import "./chunk-CPMTUMMZ.mjs";
+import "./chunk-QZLPYOGC.mjs";
+import "./chunk-HQSNKCXI.mjs";
+import "./chunk-XL3HBKDE.mjs";
+import "./chunk-REOG6YD4.mjs";
+import "./chunk-4M7FHI4S.mjs";
+import "./chunk-ZGUNOEUQ.mjs";
+import "./chunk-J56A7UCK.mjs";
+import "./chunk-AGJNOOBN.mjs";
+import "./chunk-O6ZZVIFH.mjs";
+import "./chunk-UQQWZT6C.mjs";
+import "./chunk-N6JXPWLY.mjs";
+import "./chunk-XUI43LEZ.mjs";
+export {
+  ApprovalState,
+  CANCEL_RATE,
+  HARDFORK,
+  SPEED_UP_RATE,
+  TransactionController
+};
+//# sourceMappingURL=TransactionController.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-2XKEAKQG.js b/node_modules/@metamask/transaction-controller/dist/chunk-2XKEAKQG.js
new file mode 100644
index 0000000..d9520fb
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-2XKEAKQG.js
@@ -0,0 +1,55 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+// src/utils/layer1-gas-fee-flow.ts
+var _utils = require('@metamask/utils');
+var log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "layer-1-gas-fee-flow");
+async function updateTransactionLayer1GasFee(request) {
+  const layer1GasFee = await getTransactionLayer1GasFee(request);
+  if (!layer1GasFee) {
+    return;
+  }
+  const { transactionMeta } = request;
+  transactionMeta.layer1GasFee = layer1GasFee;
+  log("Updated layer 1 gas fee", layer1GasFee, transactionMeta.id);
+}
+function getLayer1GasFeeFlow(transactionMeta, layer1GasFeeFlows) {
+  return layer1GasFeeFlows.find(
+    (layer1GasFeeFlow) => layer1GasFeeFlow.matchesTransaction(transactionMeta)
+  );
+}
+async function getTransactionLayer1GasFee({
+  layer1GasFeeFlows,
+  provider,
+  transactionMeta
+}) {
+  const layer1GasFeeFlow = getLayer1GasFeeFlow(
+    transactionMeta,
+    layer1GasFeeFlows
+  );
+  if (!layer1GasFeeFlow) {
+    return void 0;
+  }
+  log(
+    "Found layer 1 gas fee flow",
+    layer1GasFeeFlow.constructor.name,
+    transactionMeta.id
+  );
+  try {
+    const { layer1Fee } = await layer1GasFeeFlow.getLayer1Fee({
+      provider,
+      transactionMeta
+    });
+    return layer1Fee;
+  } catch (error) {
+    log("Failed to get layer 1 gas fee", transactionMeta.id, error);
+    return void 0;
+  }
+}
+
+
+
+
+exports.updateTransactionLayer1GasFee = updateTransactionLayer1GasFee; exports.getTransactionLayer1GasFee = getTransactionLayer1GasFee;
+//# sourceMappingURL=chunk-2XKEAKQG.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-4M7FHI4S.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-4M7FHI4S.mjs
new file mode 100644
index 0000000..50a6715
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-4M7FHI4S.mjs
@@ -0,0 +1,224 @@
+import {
+  SWAP_TRANSACTION_TYPES
+} from "./chunk-ZGUNOEUQ.mjs";
+import {
+  getGasFeeFlow
+} from "./chunk-AGJNOOBN.mjs";
+import {
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+
+// src/utils/gas-fees.ts
+import {
+  ORIGIN_METAMASK,
+  gweiDecToWEIBN,
+  query,
+  toHex
+} from "@metamask/controller-utils";
+import { add0x, createModuleLogger } from "@metamask/utils";
+var log = createModuleLogger(projectLogger, "gas-fees");
+async function updateGasFees(request) {
+  const { txMeta } = request;
+  const initialParams = { ...txMeta.txParams };
+  const isSwap = SWAP_TRANSACTION_TYPES.includes(
+    txMeta.type
+  );
+  const savedGasFees = isSwap ? void 0 : request.getSavedGasFees(txMeta.chainId);
+  const suggestedGasFees = await getSuggestedGasFees(request);
+  log("Suggested gas fees", suggestedGasFees);
+  const getGasFeeRequest = {
+    ...request,
+    initialParams,
+    savedGasFees,
+    suggestedGasFees
+  };
+  txMeta.txParams.maxFeePerGas = getMaxFeePerGas(getGasFeeRequest);
+  txMeta.txParams.maxPriorityFeePerGas = getMaxPriorityFeePerGas(getGasFeeRequest);
+  txMeta.txParams.gasPrice = getGasPrice(getGasFeeRequest);
+  txMeta.userFeeLevel = getUserFeeLevel(getGasFeeRequest);
+  log("Updated gas fee properties", {
+    maxFeePerGas: txMeta.txParams.maxFeePerGas,
+    maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,
+    gasPrice: txMeta.txParams.gasPrice
+  });
+  if (txMeta.txParams.maxFeePerGas || txMeta.txParams.maxPriorityFeePerGas) {
+    delete txMeta.txParams.gasPrice;
+  }
+  if (txMeta.txParams.gasPrice) {
+    delete txMeta.txParams.maxFeePerGas;
+    delete txMeta.txParams.maxPriorityFeePerGas;
+  }
+  updateDefaultGasEstimates(txMeta);
+}
+function gweiDecimalToWeiHex(value) {
+  return toHex(gweiDecToWEIBN(value));
+}
+function getMaxFeePerGas(request) {
+  const { savedGasFees, eip1559, initialParams, suggestedGasFees } = request;
+  if (!eip1559) {
+    return void 0;
+  }
+  if (savedGasFees) {
+    const maxFeePerGas = gweiDecimalToWeiHex(savedGasFees.maxBaseFee);
+    log("Using maxFeePerGas from savedGasFees", maxFeePerGas);
+    return maxFeePerGas;
+  }
+  if (initialParams.maxFeePerGas) {
+    log("Using maxFeePerGas from request", initialParams.maxFeePerGas);
+    return initialParams.maxFeePerGas;
+  }
+  if (initialParams.gasPrice && !initialParams.maxPriorityFeePerGas) {
+    log(
+      "Setting maxFeePerGas to gasPrice from request",
+      initialParams.gasPrice
+    );
+    return initialParams.gasPrice;
+  }
+  if (suggestedGasFees.maxFeePerGas) {
+    log("Using suggested maxFeePerGas", suggestedGasFees.maxFeePerGas);
+    return suggestedGasFees.maxFeePerGas;
+  }
+  if (suggestedGasFees.gasPrice) {
+    log(
+      "Setting maxFeePerGas to suggested gasPrice",
+      suggestedGasFees.gasPrice
+    );
+    return suggestedGasFees.gasPrice;
+  }
+  log("maxFeePerGas not set");
+  return void 0;
+}
+function getMaxPriorityFeePerGas(request) {
+  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } = request;
+  if (!eip1559) {
+    return void 0;
+  }
+  if (savedGasFees) {
+    const maxPriorityFeePerGas = gweiDecimalToWeiHex(savedGasFees.priorityFee);
+    log(
+      "Using maxPriorityFeePerGas from savedGasFees.priorityFee",
+      maxPriorityFeePerGas
+    );
+    return maxPriorityFeePerGas;
+  }
+  if (initialParams.maxPriorityFeePerGas) {
+    log(
+      "Using maxPriorityFeePerGas from request",
+      initialParams.maxPriorityFeePerGas
+    );
+    return initialParams.maxPriorityFeePerGas;
+  }
+  if (initialParams.gasPrice && !initialParams.maxFeePerGas) {
+    log(
+      "Setting maxPriorityFeePerGas to gasPrice from request",
+      initialParams.gasPrice
+    );
+    return initialParams.gasPrice;
+  }
+  if (suggestedGasFees.maxPriorityFeePerGas) {
+    log(
+      "Using suggested maxPriorityFeePerGas",
+      suggestedGasFees.maxPriorityFeePerGas
+    );
+    return suggestedGasFees.maxPriorityFeePerGas;
+  }
+  if (txMeta.txParams.maxFeePerGas) {
+    log(
+      "Setting maxPriorityFeePerGas to maxFeePerGas",
+      txMeta.txParams.maxFeePerGas
+    );
+    return txMeta.txParams.maxFeePerGas;
+  }
+  log("maxPriorityFeePerGas not set");
+  return void 0;
+}
+function getGasPrice(request) {
+  const { eip1559, initialParams, suggestedGasFees } = request;
+  if (eip1559) {
+    return void 0;
+  }
+  if (initialParams.gasPrice) {
+    log("Using gasPrice from request", initialParams.gasPrice);
+    return initialParams.gasPrice;
+  }
+  if (suggestedGasFees.maxFeePerGas) {
+    log("Using suggested maxFeePerGas", suggestedGasFees.maxFeePerGas);
+    return suggestedGasFees.maxFeePerGas;
+  }
+  if (suggestedGasFees.gasPrice) {
+    log("Using suggested gasPrice", suggestedGasFees.gasPrice);
+    return suggestedGasFees.gasPrice;
+  }
+  log("gasPrice not set");
+  return void 0;
+}
+function getUserFeeLevel(request) {
+  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } = request;
+  if (!eip1559) {
+    return void 0;
+  }
+  if (savedGasFees) {
+    return "custom" /* CUSTOM */;
+  }
+  if (!initialParams.maxFeePerGas && !initialParams.maxPriorityFeePerGas && initialParams.gasPrice) {
+    return txMeta.origin === ORIGIN_METAMASK ? "custom" /* CUSTOM */ : "dappSuggested" /* DAPP_SUGGESTED */;
+  }
+  if (!initialParams.maxFeePerGas && !initialParams.maxPriorityFeePerGas && suggestedGasFees.maxFeePerGas && suggestedGasFees.maxPriorityFeePerGas) {
+    return "medium" /* MEDIUM */;
+  }
+  if (txMeta.origin === ORIGIN_METAMASK) {
+    return "medium" /* MEDIUM */;
+  }
+  return "dappSuggested" /* DAPP_SUGGESTED */;
+}
+function updateDefaultGasEstimates(txMeta) {
+  if (!txMeta.defaultGasEstimates) {
+    txMeta.defaultGasEstimates = {};
+  }
+  txMeta.defaultGasEstimates.maxFeePerGas = txMeta.txParams.maxFeePerGas;
+  txMeta.defaultGasEstimates.maxPriorityFeePerGas = txMeta.txParams.maxPriorityFeePerGas;
+  txMeta.defaultGasEstimates.gasPrice = txMeta.txParams.gasPrice;
+  txMeta.defaultGasEstimates.estimateType = txMeta.userFeeLevel;
+}
+async function getSuggestedGasFees(request) {
+  const { eip1559, ethQuery, gasFeeFlows, getGasFeeEstimates, txMeta } = request;
+  const { networkClientId } = txMeta;
+  if (!eip1559 && txMeta.txParams.gasPrice || eip1559 && txMeta.txParams.maxFeePerGas && txMeta.txParams.maxPriorityFeePerGas) {
+    return {};
+  }
+  const gasFeeFlow = getGasFeeFlow(txMeta, gasFeeFlows);
+  try {
+    const gasFeeControllerData = await getGasFeeEstimates({ networkClientId });
+    const response = await gasFeeFlow.getGasFees({
+      ethQuery,
+      gasFeeControllerData,
+      transactionMeta: txMeta
+    });
+    const gasFeeEstimateType = response.estimates?.type;
+    switch (gasFeeEstimateType) {
+      case "fee-market" /* FeeMarket */:
+        return response.estimates.medium;
+      case "legacy" /* Legacy */:
+        return {
+          gasPrice: response.estimates.medium
+        };
+      case "eth_gasPrice" /* GasPrice */:
+        return { gasPrice: response.estimates.gasPrice };
+      default:
+        throw new Error(
+          `Unsupported gas fee estimate type returned from flow: ${gasFeeEstimateType}`
+        );
+    }
+  } catch (error) {
+    log("Failed to get suggested gas fees", error);
+  }
+  const gasPriceDecimal = await query(ethQuery, "gasPrice");
+  const gasPrice = gasPriceDecimal ? add0x(gasPriceDecimal.toString(16)) : void 0;
+  return { gasPrice };
+}
+
+export {
+  updateGasFees,
+  gweiDecimalToWeiHex
+};
+//# sourceMappingURL=chunk-4M7FHI4S.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-5C3CSQAD.js b/node_modules/@metamask/transaction-controller/dist/chunk-5C3CSQAD.js
new file mode 100644
index 0000000..7f08b1f
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-5C3CSQAD.js
@@ -0,0 +1,92 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/types.ts
+var TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {
+  TransactionStatus2["approved"] = "approved";
+  TransactionStatus2["cancelled"] = "cancelled";
+  TransactionStatus2["confirmed"] = "confirmed";
+  TransactionStatus2["dropped"] = "dropped";
+  TransactionStatus2["failed"] = "failed";
+  TransactionStatus2["rejected"] = "rejected";
+  TransactionStatus2["signed"] = "signed";
+  TransactionStatus2["submitted"] = "submitted";
+  TransactionStatus2["unapproved"] = "unapproved";
+  return TransactionStatus2;
+})(TransactionStatus || {});
+var WalletDevice = /* @__PURE__ */ ((WalletDevice2) => {
+  WalletDevice2["MM_MOBILE"] = "metamask_mobile";
+  WalletDevice2["MM_EXTENSION"] = "metamask_extension";
+  WalletDevice2["OTHER"] = "other_device";
+  return WalletDevice2;
+})(WalletDevice || {});
+var TransactionType = /* @__PURE__ */ ((TransactionType2) => {
+  TransactionType2["cancel"] = "cancel";
+  TransactionType2["contractInteraction"] = "contractInteraction";
+  TransactionType2["deployContract"] = "contractDeployment";
+  TransactionType2["ethDecrypt"] = "eth_decrypt";
+  TransactionType2["ethGetEncryptionPublicKey"] = "eth_getEncryptionPublicKey";
+  TransactionType2["incoming"] = "incoming";
+  TransactionType2["personalSign"] = "personal_sign";
+  TransactionType2["retry"] = "retry";
+  TransactionType2["simpleSend"] = "simpleSend";
+  TransactionType2["sign"] = "eth_sign";
+  TransactionType2["signTypedData"] = "eth_signTypedData";
+  TransactionType2["smart"] = "smart";
+  TransactionType2["swap"] = "swap";
+  TransactionType2["swapApproval"] = "swapApproval";
+  TransactionType2["tokenMethodApprove"] = "approve";
+  TransactionType2["tokenMethodSafeTransferFrom"] = "safetransferfrom";
+  TransactionType2["tokenMethodTransfer"] = "transfer";
+  TransactionType2["tokenMethodTransferFrom"] = "transferfrom";
+  TransactionType2["tokenMethodSetApprovalForAll"] = "setapprovalforall";
+  TransactionType2["tokenMethodIncreaseAllowance"] = "increaseAllowance";
+  return TransactionType2;
+})(TransactionType || {});
+var TransactionEnvelopeType = /* @__PURE__ */ ((TransactionEnvelopeType2) => {
+  TransactionEnvelopeType2["legacy"] = "0x0";
+  TransactionEnvelopeType2["accessList"] = "0x1";
+  TransactionEnvelopeType2["feeMarket"] = "0x2";
+  return TransactionEnvelopeType2;
+})(TransactionEnvelopeType || {});
+var UserFeeLevel = /* @__PURE__ */ ((UserFeeLevel2) => {
+  UserFeeLevel2["CUSTOM"] = "custom";
+  UserFeeLevel2["DAPP_SUGGESTED"] = "dappSuggested";
+  UserFeeLevel2["MEDIUM"] = "medium";
+  return UserFeeLevel2;
+})(UserFeeLevel || {});
+var GasFeeEstimateLevel = /* @__PURE__ */ ((GasFeeEstimateLevel2) => {
+  GasFeeEstimateLevel2["Low"] = "low";
+  GasFeeEstimateLevel2["Medium"] = "medium";
+  GasFeeEstimateLevel2["High"] = "high";
+  return GasFeeEstimateLevel2;
+})(GasFeeEstimateLevel || {});
+var GasFeeEstimateType = /* @__PURE__ */ ((GasFeeEstimateType2) => {
+  GasFeeEstimateType2["FeeMarket"] = "fee-market";
+  GasFeeEstimateType2["Legacy"] = "legacy";
+  GasFeeEstimateType2["GasPrice"] = "eth_gasPrice";
+  return GasFeeEstimateType2;
+})(GasFeeEstimateType || {});
+var SimulationTokenStandard = /* @__PURE__ */ ((SimulationTokenStandard2) => {
+  SimulationTokenStandard2["erc20"] = "erc20";
+  SimulationTokenStandard2["erc721"] = "erc721";
+  SimulationTokenStandard2["erc1155"] = "erc1155";
+  return SimulationTokenStandard2;
+})(SimulationTokenStandard || {});
+var SimulationErrorCode = /* @__PURE__ */ ((SimulationErrorCode2) => {
+  SimulationErrorCode2["ChainNotSupported"] = "chain-not-supported";
+  SimulationErrorCode2["Disabled"] = "disabled";
+  SimulationErrorCode2["InvalidResponse"] = "invalid-response";
+  SimulationErrorCode2["Reverted"] = "reverted";
+  return SimulationErrorCode2;
+})(SimulationErrorCode || {});
+
+
+
+
+
+
+
+
+
+
+
+exports.TransactionStatus = TransactionStatus; exports.WalletDevice = WalletDevice; exports.TransactionType = TransactionType; exports.TransactionEnvelopeType = TransactionEnvelopeType; exports.UserFeeLevel = UserFeeLevel; exports.GasFeeEstimateLevel = GasFeeEstimateLevel; exports.GasFeeEstimateType = GasFeeEstimateType; exports.SimulationTokenStandard = SimulationTokenStandard; exports.SimulationErrorCode = SimulationErrorCode;
+//# sourceMappingURL=chunk-5C3CSQAD.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-5G6OHAXI.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-5G6OHAXI.mjs
new file mode 100644
index 0000000..9114198
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-5G6OHAXI.mjs
@@ -0,0 +1,137 @@
+import {
+  GAS_BUFFER_CHAIN_OVERRIDES
+} from "./chunk-O6ZZVIFH.mjs";
+import {
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+
+// src/utils/gas.ts
+import {
+  BNToHex,
+  fractionBN,
+  hexToBN,
+  query
+} from "@metamask/controller-utils";
+import { add0x, createModuleLogger } from "@metamask/utils";
+var log = createModuleLogger(projectLogger, "gas");
+var FIXED_GAS = "0x5208";
+var DEFAULT_GAS_MULTIPLIER = 1.5;
+async function updateGas(request) {
+  const { txMeta } = request;
+  const initialParams = { ...txMeta.txParams };
+  const [gas, simulationFails] = await getGas(request);
+  txMeta.txParams.gas = gas;
+  txMeta.simulationFails = simulationFails;
+  if (!initialParams.gas) {
+    txMeta.originalGasEstimate = txMeta.txParams.gas;
+  }
+  if (!txMeta.defaultGasEstimates) {
+    txMeta.defaultGasEstimates = {};
+  }
+  txMeta.defaultGasEstimates.gas = txMeta.txParams.gas;
+}
+async function estimateGas(txParams, ethQuery) {
+  const request = { ...txParams };
+  const { data, value } = request;
+  const { gasLimit: gasLimitHex, number: blockNumber } = await getLatestBlock(
+    ethQuery
+  );
+  const gasLimitBN = hexToBN(gasLimitHex);
+  request.data = data ? add0x(data) : data;
+  request.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));
+  request.value = value || "0x0";
+  let estimatedGas = request.gas;
+  let simulationFails;
+  try {
+    estimatedGas = await query(ethQuery, "estimateGas", [request]);
+  } catch (error) {
+    simulationFails = {
+      reason: error.message,
+      errorKey: error.errorKey,
+      debug: {
+        blockNumber,
+        blockGasLimit: gasLimitHex
+      }
+    };
+    log("Estimation failed", { ...simulationFails, fallback: estimateGas });
+  }
+  return {
+    blockGasLimit: gasLimitHex,
+    estimatedGas,
+    simulationFails
+  };
+}
+function addGasBuffer(estimatedGas, blockGasLimit, multiplier) {
+  const estimatedGasBN = hexToBN(estimatedGas);
+  const maxGasBN = hexToBN(blockGasLimit).muln(0.9);
+  const paddedGasBN = estimatedGasBN.muln(multiplier);
+  if (estimatedGasBN.gt(maxGasBN)) {
+    const estimatedGasHex = add0x(estimatedGas);
+    log("Using estimated value", estimatedGasHex);
+    return estimatedGasHex;
+  }
+  if (paddedGasBN.lt(maxGasBN)) {
+    const paddedHex = add0x(BNToHex(paddedGasBN));
+    log("Using padded estimate", paddedHex, multiplier);
+    return paddedHex;
+  }
+  const maxHex = add0x(BNToHex(maxGasBN));
+  log("Using 90% of block gas limit", maxHex);
+  return maxHex;
+}
+async function getGas(request) {
+  const { isCustomNetwork, chainId, txMeta } = request;
+  if (txMeta.txParams.gas) {
+    log("Using value from request", txMeta.txParams.gas);
+    return [txMeta.txParams.gas];
+  }
+  if (await requiresFixedGas(request)) {
+    log("Using fixed value", FIXED_GAS);
+    return [FIXED_GAS];
+  }
+  const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(
+    txMeta.txParams,
+    request.ethQuery
+  );
+  if (isCustomNetwork) {
+    log("Using original estimate as custom network");
+    return [estimatedGas, simulationFails];
+  }
+  const bufferMultiplier = GAS_BUFFER_CHAIN_OVERRIDES[chainId] ?? DEFAULT_GAS_MULTIPLIER;
+  const bufferedGas = addGasBuffer(
+    estimatedGas,
+    blockGasLimit,
+    bufferMultiplier
+  );
+  return [bufferedGas, simulationFails];
+}
+async function requiresFixedGas({
+  ethQuery,
+  txMeta,
+  isCustomNetwork
+}) {
+  const {
+    txParams: { to, data }
+  } = txMeta;
+  if (isCustomNetwork || !to || data) {
+    return false;
+  }
+  const code = await getCode(ethQuery, to);
+  return !code || code === "0x";
+}
+async function getCode(ethQuery, address) {
+  return await query(ethQuery, "getCode", [address]);
+}
+async function getLatestBlock(ethQuery) {
+  return await query(ethQuery, "getBlockByNumber", ["latest", false]);
+}
+
+export {
+  log,
+  FIXED_GAS,
+  DEFAULT_GAS_MULTIPLIER,
+  updateGas,
+  estimateGas,
+  addGasBuffer
+};
+//# sourceMappingURL=chunk-5G6OHAXI.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-5KMU2IAT.js b/node_modules/@metamask/transaction-controller/dist/chunk-5KMU2IAT.js
new file mode 100644
index 0000000..cf553f6
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-5KMU2IAT.js
@@ -0,0 +1,399 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/helpers/PendingTransactionTracker.ts
+var _controllerutils = require('@metamask/controller-utils');
+var _events = require('events'); var _events2 = _interopRequireDefault(_events);
+var _lodash = require('lodash');
+var DROPPED_BLOCK_COUNT = 3;
+var RECEIPT_STATUS_SUCCESS = "0x1";
+var RECEIPT_STATUS_FAILURE = "0x0";
+var MAX_RETRY_BLOCK_DISTANCE = 50;
+var KNOWN_TRANSACTION_ERRORS = [
+  "replacement transaction underpriced",
+  "known transaction",
+  "gas price too low to replace",
+  "transaction with the same hash was already imported",
+  "gateway timeout",
+  "nonce too low"
+];
+var log = _chunkS6VGOPUYjs.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "pending-transactions");
+var _approveTransaction, _blockTracker, _droppedBlockCountByHash, _getChainId, _getEthQuery, _getTransactions, _isResubmitEnabled, _listener, _getGlobalLock, _publishTransaction, _running, _beforeCheckPendingTransaction, _beforePublish, _start, start_fn, _onLatestBlock, onLatestBlock_fn, _checkTransactions, checkTransactions_fn, _resubmitTransactions, resubmitTransactions_fn, _isKnownTransactionError, isKnownTransactionError_fn, _resubmitTransaction, resubmitTransaction_fn, _isResubmitDue, isResubmitDue_fn, _checkTransaction, checkTransaction_fn, _onTransactionConfirmed, onTransactionConfirmed_fn, _isTransactionDropped, isTransactionDropped_fn, _isNonceTaken, isNonceTaken_fn, _getPendingTransactions, getPendingTransactions_fn, _warnTransaction, warnTransaction_fn, _failTransaction, failTransaction_fn, _dropTransaction, dropTransaction_fn, _updateTransaction, updateTransaction_fn, _getTransactionReceipt, getTransactionReceipt_fn, _getBlockByHash, getBlockByHash_fn, _getNetworkTransactionCount, getNetworkTransactionCount_fn, _getCurrentChainTransactions, getCurrentChainTransactions_fn;
+var PendingTransactionTracker = class {
+  constructor({
+    approveTransaction,
+    blockTracker,
+    getChainId,
+    getEthQuery,
+    getTransactions,
+    isResubmitEnabled,
+    getGlobalLock,
+    publishTransaction,
+    hooks
+  }) {
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _start);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onLatestBlock);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _checkTransactions);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _resubmitTransactions);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isKnownTransactionError);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _resubmitTransaction);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isResubmitDue);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _checkTransaction);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onTransactionConfirmed);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isTransactionDropped);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isNonceTaken);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getPendingTransactions);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _warnTransaction);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _failTransaction);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _dropTransaction);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateTransaction);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getTransactionReceipt);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getBlockByHash);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNetworkTransactionCount);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getCurrentChainTransactions);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _approveTransaction, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _blockTracker, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _droppedBlockCountByHash, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getChainId, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getEthQuery, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getTransactions, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isResubmitEnabled, void 0);
+    // TODO: Replace `any` with type
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _listener, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGlobalLock, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _publishTransaction, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _running, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _beforeCheckPendingTransaction, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _beforePublish, void 0);
+    this.startIfPendingTransactions = () => {
+      const pendingTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getPendingTransactions, getPendingTransactions_fn).call(this);
+      if (pendingTransactions.length) {
+        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _start, start_fn).call(this);
+      } else {
+        this.stop();
+      }
+    };
+    this.hub = new (0, _events2.default)();
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _approveTransaction, approveTransaction);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _blockTracker, blockTracker);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _droppedBlockCountByHash, /* @__PURE__ */ new Map());
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getChainId, getChainId);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getEthQuery, getEthQuery);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getTransactions, getTransactions);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isResubmitEnabled, isResubmitEnabled ?? (() => true));
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _listener, _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onLatestBlock, onLatestBlock_fn).bind(this));
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getGlobalLock, getGlobalLock);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _publishTransaction, publishTransaction);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _running, false);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _beforePublish, hooks?.beforePublish ?? (() => true));
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _beforeCheckPendingTransaction, hooks?.beforeCheckPendingTransaction ?? (() => true));
+  }
+  /**
+   * Force checks the network if the given transaction is confirmed and updates it's status.
+   *
+   * @param txMeta - The transaction to check
+   */
+  async forceCheckTransaction(txMeta) {
+    const releaseLock = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getGlobalLock).call(this);
+    try {
+      await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _checkTransaction, checkTransaction_fn).call(this, txMeta);
+    } catch (error) {
+      log("Failed to check transaction", error);
+    } finally {
+      releaseLock();
+    }
+  }
+  stop() {
+    if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _running)) {
+      return;
+    }
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _blockTracker).removeListener("latest", _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _listener));
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _running, false);
+    log("Stopped polling");
+  }
+};
+_approveTransaction = new WeakMap();
+_blockTracker = new WeakMap();
+_droppedBlockCountByHash = new WeakMap();
+_getChainId = new WeakMap();
+_getEthQuery = new WeakMap();
+_getTransactions = new WeakMap();
+_isResubmitEnabled = new WeakMap();
+_listener = new WeakMap();
+_getGlobalLock = new WeakMap();
+_publishTransaction = new WeakMap();
+_running = new WeakMap();
+_beforeCheckPendingTransaction = new WeakMap();
+_beforePublish = new WeakMap();
+_start = new WeakSet();
+start_fn = function() {
+  if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _running)) {
+    return;
+  }
+  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _blockTracker).on("latest", _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _listener));
+  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _running, true);
+  log("Started polling");
+};
+_onLatestBlock = new WeakSet();
+onLatestBlock_fn = async function(latestBlockNumber) {
+  const releaseLock = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getGlobalLock).call(this);
+  try {
+    await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _checkTransactions, checkTransactions_fn).call(this);
+  } catch (error) {
+    log("Failed to check transactions", error);
+  } finally {
+    releaseLock();
+  }
+  try {
+    await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _resubmitTransactions, resubmitTransactions_fn).call(this, latestBlockNumber);
+  } catch (error) {
+    log("Failed to resubmit transactions", error);
+  }
+};
+_checkTransactions = new WeakSet();
+checkTransactions_fn = async function() {
+  log("Checking transactions");
+  const pendingTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getPendingTransactions, getPendingTransactions_fn).call(this);
+  if (!pendingTransactions.length) {
+    log("No pending transactions to check");
+    return;
+  }
+  log("Found pending transactions to check", {
+    count: pendingTransactions.length,
+    ids: pendingTransactions.map((tx) => tx.id)
+  });
+  await Promise.all(
+    pendingTransactions.map((tx) => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _checkTransaction, checkTransaction_fn).call(this, tx))
+  );
+};
+_resubmitTransactions = new WeakSet();
+resubmitTransactions_fn = async function(latestBlockNumber) {
+  if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isResubmitEnabled).call(this) || !_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _running)) {
+    return;
+  }
+  log("Resubmitting transactions");
+  const pendingTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getPendingTransactions, getPendingTransactions_fn).call(this);
+  if (!pendingTransactions.length) {
+    log("No pending transactions to resubmit");
+    return;
+  }
+  log("Found pending transactions to resubmit", {
+    count: pendingTransactions.length,
+    ids: pendingTransactions.map((tx) => tx.id)
+  });
+  for (const txMeta of pendingTransactions) {
+    try {
+      await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _resubmitTransaction, resubmitTransaction_fn).call(this, txMeta, latestBlockNumber);
+    } catch (error) {
+      const errorMessage = error.value?.message?.toLowerCase() || error.message.toLowerCase();
+      if (_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isKnownTransactionError, isKnownTransactionError_fn).call(this, errorMessage)) {
+        log("Ignoring known transaction error", errorMessage);
+        return;
+      }
+      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _warnTransaction, warnTransaction_fn).call(this, txMeta, error.message, "There was an error when resubmitting this transaction.");
+    }
+  }
+};
+_isKnownTransactionError = new WeakSet();
+isKnownTransactionError_fn = function(errorMessage) {
+  return KNOWN_TRANSACTION_ERRORS.some(
+    (knownError) => errorMessage.includes(knownError)
+  );
+};
+_resubmitTransaction = new WeakSet();
+resubmitTransaction_fn = async function(txMeta, latestBlockNumber) {
+  if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isResubmitDue, isResubmitDue_fn).call(this, txMeta, latestBlockNumber)) {
+    return;
+  }
+  const { rawTx } = txMeta;
+  if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _beforePublish).call(this, txMeta)) {
+    return;
+  }
+  if (!rawTx?.length) {
+    log("Approving transaction as no raw value");
+    await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _approveTransaction).call(this, txMeta.id);
+    return;
+  }
+  const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getEthQuery).call(this, txMeta.networkClientId);
+  await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _publishTransaction).call(this, ethQuery, rawTx);
+  const retryCount = (txMeta.retryCount ?? 0) + 1;
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransaction, updateTransaction_fn).call(this, _lodash.merge.call(void 0, {}, txMeta, { retryCount }), "PendingTransactionTracker:transaction-retry - Retry count increased");
+};
+_isResubmitDue = new WeakSet();
+isResubmitDue_fn = function(txMeta, latestBlockNumber) {
+  const txMetaWithFirstRetryBlockNumber = _lodash.cloneDeep.call(void 0, txMeta);
+  if (!txMetaWithFirstRetryBlockNumber.firstRetryBlockNumber) {
+    txMetaWithFirstRetryBlockNumber.firstRetryBlockNumber = latestBlockNumber;
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransaction, updateTransaction_fn).call(this, txMetaWithFirstRetryBlockNumber, "PendingTransactionTracker:#isResubmitDue - First retry block number set");
+  }
+  const { firstRetryBlockNumber } = txMetaWithFirstRetryBlockNumber;
+  const blocksSinceFirstRetry = Number.parseInt(latestBlockNumber, 16) - Number.parseInt(firstRetryBlockNumber, 16);
+  const retryCount = txMeta.retryCount || 0;
+  const requiredBlocksSinceFirstRetry = Math.min(
+    MAX_RETRY_BLOCK_DISTANCE,
+    Math.pow(2, retryCount)
+  );
+  return blocksSinceFirstRetry >= requiredBlocksSinceFirstRetry;
+};
+_checkTransaction = new WeakSet();
+checkTransaction_fn = async function(txMeta) {
+  const { hash, id } = txMeta;
+  if (!hash && _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _beforeCheckPendingTransaction).call(this, txMeta)) {
+    const error = new Error(
+      "We had an error while submitting this transaction, please try again."
+    );
+    error.name = "NoTxHashError";
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _failTransaction, failTransaction_fn).call(this, txMeta, error);
+    return;
+  }
+  if (_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isNonceTaken, isNonceTaken_fn).call(this, txMeta)) {
+    log("Nonce already taken", id);
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _dropTransaction, dropTransaction_fn).call(this, txMeta);
+    return;
+  }
+  try {
+    const receipt = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getTransactionReceipt, getTransactionReceipt_fn).call(this, hash);
+    const isSuccess = receipt?.status === RECEIPT_STATUS_SUCCESS;
+    const isFailure = receipt?.status === RECEIPT_STATUS_FAILURE;
+    if (isFailure) {
+      log("Transaction receipt has failed status");
+      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _failTransaction, failTransaction_fn).call(this, txMeta, new Error("Transaction dropped or replaced"));
+      return;
+    }
+    const { blockNumber, blockHash } = receipt || {};
+    if (isSuccess && blockNumber && blockHash) {
+      await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onTransactionConfirmed, onTransactionConfirmed_fn).call(this, txMeta, {
+        ...receipt,
+        blockNumber,
+        blockHash
+      });
+      return;
+    }
+  } catch (error) {
+    log("Failed to check transaction", id, error);
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _warnTransaction, warnTransaction_fn).call(this, txMeta, error.message, "There was a problem loading this transaction.");
+    return;
+  }
+  if (await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isTransactionDropped, isTransactionDropped_fn).call(this, txMeta)) {
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _dropTransaction, dropTransaction_fn).call(this, txMeta);
+  }
+};
+_onTransactionConfirmed = new WeakSet();
+onTransactionConfirmed_fn = async function(txMeta, receipt) {
+  const { id } = txMeta;
+  const { blockHash } = receipt;
+  log("Transaction confirmed", id);
+  const { baseFeePerGas, timestamp: blockTimestamp } = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getBlockByHash, getBlockByHash_fn).call(this, blockHash, false);
+  const updatedTxMeta = _lodash.cloneDeep.call(void 0, txMeta);
+  updatedTxMeta.baseFeePerGas = baseFeePerGas;
+  updatedTxMeta.blockTimestamp = blockTimestamp;
+  updatedTxMeta.status = "confirmed" /* confirmed */;
+  updatedTxMeta.txParams = {
+    ...updatedTxMeta.txParams,
+    gasUsed: receipt.gasUsed
+  };
+  updatedTxMeta.txReceipt = receipt;
+  updatedTxMeta.verifiedOnBlockchain = true;
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransaction, updateTransaction_fn).call(this, updatedTxMeta, "PendingTransactionTracker:#onTransactionConfirmed - Transaction confirmed");
+  this.hub.emit("transaction-confirmed", updatedTxMeta);
+};
+_isTransactionDropped = new WeakSet();
+isTransactionDropped_fn = async function(txMeta) {
+  const {
+    hash,
+    id,
+    txParams: { nonce, from }
+  } = txMeta;
+  if (!nonce || !hash) {
+    return false;
+  }
+  const networkNextNonceHex = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNetworkTransactionCount, getNetworkTransactionCount_fn).call(this, from);
+  const networkNextNonceNumber = parseInt(networkNextNonceHex, 16);
+  const nonceNumber = parseInt(nonce, 16);
+  if (nonceNumber >= networkNextNonceNumber) {
+    return false;
+  }
+  let droppedBlockCount = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _droppedBlockCountByHash).get(hash);
+  if (droppedBlockCount === void 0) {
+    droppedBlockCount = 0;
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _droppedBlockCountByHash).set(hash, droppedBlockCount);
+  }
+  if (droppedBlockCount < DROPPED_BLOCK_COUNT) {
+    log("Incrementing dropped block count", { id, droppedBlockCount });
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _droppedBlockCountByHash).set(hash, droppedBlockCount + 1);
+    return false;
+  }
+  log("Hit dropped block count", id);
+  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _droppedBlockCountByHash).delete(hash);
+  return true;
+};
+_isNonceTaken = new WeakSet();
+isNonceTaken_fn = function(txMeta) {
+  const { id, txParams } = txMeta;
+  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getCurrentChainTransactions, getCurrentChainTransactions_fn).call(this).some(
+    (tx) => tx.id !== id && tx.txParams.from === txParams.from && tx.status === "confirmed" /* confirmed */ && tx.txParams.nonce === txParams.nonce && tx.type !== "incoming" /* incoming */
+  );
+};
+_getPendingTransactions = new WeakSet();
+getPendingTransactions_fn = function() {
+  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getCurrentChainTransactions, getCurrentChainTransactions_fn).call(this).filter(
+    (tx) => tx.status === "submitted" /* submitted */ && !tx.verifiedOnBlockchain && !tx.isUserOperation
+  );
+};
+_warnTransaction = new WeakSet();
+warnTransaction_fn = function(txMeta, error, message) {
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransaction, updateTransaction_fn).call(this, {
+    ...txMeta,
+    warning: { error, message }
+  }, "PendingTransactionTracker:#warnTransaction - Warning added");
+};
+_failTransaction = new WeakSet();
+failTransaction_fn = function(txMeta, error) {
+  log("Transaction failed", txMeta.id, error);
+  this.hub.emit("transaction-failed", txMeta, error);
+};
+_dropTransaction = new WeakSet();
+dropTransaction_fn = function(txMeta) {
+  log("Transaction dropped", txMeta.id);
+  this.hub.emit("transaction-dropped", txMeta);
+};
+_updateTransaction = new WeakSet();
+updateTransaction_fn = function(txMeta, note) {
+  this.hub.emit("transaction-updated", txMeta, note);
+};
+_getTransactionReceipt = new WeakSet();
+getTransactionReceipt_fn = async function(txHash) {
+  return await _controllerutils.query.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getEthQuery).call(this), "getTransactionReceipt", [txHash]);
+};
+_getBlockByHash = new WeakSet();
+getBlockByHash_fn = async function(blockHash, includeTransactionDetails) {
+  return await _controllerutils.query.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getEthQuery).call(this), "getBlockByHash", [
+    blockHash,
+    includeTransactionDetails
+  ]);
+};
+_getNetworkTransactionCount = new WeakSet();
+getNetworkTransactionCount_fn = async function(address) {
+  return await _controllerutils.query.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getEthQuery).call(this), "getTransactionCount", [address]);
+};
+_getCurrentChainTransactions = new WeakSet();
+getCurrentChainTransactions_fn = function() {
+  const currentChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getChainId).call(this);
+  return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getTransactions).call(this).filter(
+    (tx) => tx.chainId === currentChainId
+  );
+};
+
+
+
+exports.PendingTransactionTracker = PendingTransactionTracker;
+//# sourceMappingURL=chunk-5KMU2IAT.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-5XQ2KRYL.js b/node_modules/@metamask/transaction-controller/dist/chunk-5XQ2KRYL.js
new file mode 100644
index 0000000..4edeff2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-5XQ2KRYL.js
@@ -0,0 +1,335 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+var _chunkEQT25RSPjs = require('./chunk-EQT25RSP.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/helpers/MultichainTrackingHelper.ts
+var _ethquery = require('@metamask/eth-query'); var _ethquery2 = _interopRequireDefault(_ethquery);
+var _asyncmutex = require('async-mutex');
+var _isMultichainEnabled, _provider, _nonceTracker, _incomingTransactionOptions, _findNetworkClientIdByChainId, _getNetworkClientById, _getNetworkClientRegistry, _removeIncomingTransactionHelperListeners, _removePendingTransactionTrackerListeners, _createNonceTracker, _createIncomingTransactionHelper, _createPendingTransactionTracker, _nonceMutexesByChainId, _trackingMap, _etherscanRemoteTransactionSourcesMap, _refreshTrackingMap, _stopTrackingByNetworkClientId, stopTrackingByNetworkClientId_fn, _startTrackingByNetworkClientId, startTrackingByNetworkClientId_fn, _refreshEtherscanRemoteTransactionSources, _getNetworkClient, getNetworkClient_fn;
+var MultichainTrackingHelper = class {
+  constructor({
+    isMultichainEnabled,
+    provider,
+    nonceTracker,
+    incomingTransactionOptions,
+    findNetworkClientIdByChainId,
+    getNetworkClientById,
+    getNetworkClientRegistry,
+    removeIncomingTransactionHelperListeners,
+    removePendingTransactionTrackerListeners,
+    createNonceTracker,
+    createIncomingTransactionHelper,
+    createPendingTransactionTracker,
+    onNetworkStateChange
+  }) {
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _stopTrackingByNetworkClientId);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _startTrackingByNetworkClientId);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNetworkClient);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isMultichainEnabled, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _provider, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _nonceTracker, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _incomingTransactionOptions, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _findNetworkClientIdByChainId, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNetworkClientById, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNetworkClientRegistry, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _removeIncomingTransactionHelperListeners, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _removePendingTransactionTrackerListeners, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createNonceTracker, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createIncomingTransactionHelper, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createPendingTransactionTracker, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _nonceMutexesByChainId, /* @__PURE__ */ new Map());
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _trackingMap, /* @__PURE__ */ new Map());
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _etherscanRemoteTransactionSourcesMap, /* @__PURE__ */ new Map());
+    this.checkForPendingTransactionAndStartPolling = () => {
+      for (const [, trackers] of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap)) {
+        trackers.pendingTransactionTracker.startIfPendingTransactions();
+      }
+    };
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _refreshTrackingMap, (networkClients) => {
+      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _refreshEtherscanRemoteTransactionSources).call(this, networkClients);
+      const networkClientIds = Object.keys(networkClients);
+      const existingNetworkClientIds = Array.from(_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).keys());
+      const networkClientIdsToRemove = existingNetworkClientIds.filter(
+        (id) => !networkClientIds.includes(id)
+      );
+      networkClientIdsToRemove.forEach((id) => {
+        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _stopTrackingByNetworkClientId, stopTrackingByNetworkClientId_fn).call(this, id);
+      });
+      const networkClientIdsToAdd = networkClientIds.filter(
+        (id) => !existingNetworkClientIds.includes(id)
+      );
+      networkClientIdsToAdd.forEach((id) => {
+        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _startTrackingByNetworkClientId, startTrackingByNetworkClientId_fn).call(this, id);
+      });
+    });
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _refreshEtherscanRemoteTransactionSources, (networkClients) => {
+      const chainIdsInRegistry = /* @__PURE__ */ new Set();
+      Object.values(networkClients).forEach(
+        (networkClient) => chainIdsInRegistry.add(networkClient.configuration.chainId)
+      );
+      const existingChainIds = Array.from(
+        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _etherscanRemoteTransactionSourcesMap).keys()
+      );
+      const chainIdsToRemove = existingChainIds.filter(
+        (chainId) => !chainIdsInRegistry.has(chainId)
+      );
+      chainIdsToRemove.forEach((chainId) => {
+        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _etherscanRemoteTransactionSourcesMap).delete(chainId);
+      });
+    });
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isMultichainEnabled, isMultichainEnabled);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _provider, provider);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _nonceTracker, nonceTracker);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _incomingTransactionOptions, incomingTransactionOptions);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _findNetworkClientIdByChainId, findNetworkClientIdByChainId);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getNetworkClientById, getNetworkClientById);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getNetworkClientRegistry, getNetworkClientRegistry);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _createNonceTracker, createNonceTracker);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _createIncomingTransactionHelper, createIncomingTransactionHelper);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _createPendingTransactionTracker, createPendingTransactionTracker);
+    onNetworkStateChange((_, patches) => {
+      if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isMultichainEnabled)) {
+        const networkClients = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientRegistry).call(this);
+        patches.forEach(({ op, path }) => {
+          if (op === "remove" && path[0] === "networkConfigurations") {
+            const networkClientId = path[1];
+            delete networkClients[networkClientId];
+          }
+        });
+        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _refreshTrackingMap).call(this, networkClients);
+      }
+    });
+  }
+  initialize() {
+    if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isMultichainEnabled)) {
+      return;
+    }
+    const networkClients = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientRegistry).call(this);
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _refreshTrackingMap).call(this, networkClients);
+  }
+  has(networkClientId) {
+    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).has(networkClientId);
+  }
+  getEthQuery({
+    networkClientId,
+    chainId
+  } = {}) {
+    return new (0, _ethquery2.default)(this.getProvider({ networkClientId, chainId }));
+  }
+  getProvider({
+    networkClientId,
+    chainId
+  } = {}) {
+    if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isMultichainEnabled)) {
+      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _provider);
+    }
+    const networkClient = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNetworkClient, getNetworkClient_fn).call(this, {
+      networkClientId,
+      chainId
+    });
+    return networkClient?.provider || _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _provider);
+  }
+  /**
+   * Gets the mutex intended to guard the nonceTracker for a particular chainId and key .
+   *
+   * @param opts - The options object.
+   * @param opts.chainId - The hex chainId.
+   * @param opts.key - The hex address (or constant) pertaining to the chainId
+   * @returns Mutex instance for the given chainId and key pair
+   */
+  async acquireNonceLockForChainIdKey({
+    chainId,
+    key = "global"
+  }) {
+    let nonceMutexesForChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _nonceMutexesByChainId).get(chainId);
+    if (!nonceMutexesForChainId) {
+      nonceMutexesForChainId = /* @__PURE__ */ new Map();
+      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _nonceMutexesByChainId).set(chainId, nonceMutexesForChainId);
+    }
+    let nonceMutexForKey = nonceMutexesForChainId.get(key);
+    if (!nonceMutexForKey) {
+      nonceMutexForKey = new (0, _asyncmutex.Mutex)();
+      nonceMutexesForChainId.set(key, nonceMutexForKey);
+    }
+    return await nonceMutexForKey.acquire();
+  }
+  /**
+   * Gets the next nonce according to the nonce-tracker.
+   * Ensure `releaseLock` is called once processing of the `nonce` value is complete.
+   *
+   * @param address - The hex string address for the transaction.
+   * @param networkClientId - The network client ID for the transaction, used to fetch the correct nonce tracker.
+   * @returns object with the `nextNonce` `nonceDetails`, and the releaseLock.
+   */
+  async getNonceLock(address, networkClientId) {
+    let releaseLockForChainIdKey;
+    let nonceTracker = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _nonceTracker);
+    if (networkClientId && _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isMultichainEnabled)) {
+      const networkClient = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientById).call(this, networkClientId);
+      releaseLockForChainIdKey = await this.acquireNonceLockForChainIdKey({
+        chainId: networkClient.configuration.chainId,
+        key: address
+      });
+      const trackers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId);
+      if (!trackers) {
+        throw new Error("missing nonceTracker for networkClientId");
+      }
+      nonceTracker = trackers.nonceTracker;
+    }
+    try {
+      const nonceLock = await nonceTracker.getNonceLock(address);
+      return {
+        ...nonceLock,
+        releaseLock: () => {
+          nonceLock.releaseLock();
+          releaseLockForChainIdKey?.();
+        }
+      };
+    } catch (err) {
+      releaseLockForChainIdKey?.();
+      throw err;
+    }
+  }
+  startIncomingTransactionPolling(networkClientIds = []) {
+    networkClientIds.forEach((networkClientId) => {
+      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId)?.incomingTransactionHelper.start();
+    });
+  }
+  stopIncomingTransactionPolling(networkClientIds = []) {
+    networkClientIds.forEach((networkClientId) => {
+      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId)?.incomingTransactionHelper.stop();
+    });
+  }
+  stopAllIncomingTransactionPolling() {
+    for (const [, trackers] of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap)) {
+      trackers.incomingTransactionHelper.stop();
+    }
+  }
+  async updateIncomingTransactions(networkClientIds = []) {
+    const promises = await Promise.allSettled(
+      networkClientIds.map(async (networkClientId) => {
+        return await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId)?.incomingTransactionHelper.update();
+      })
+    );
+    promises.filter((result) => result.status === "rejected").forEach((result) => {
+      _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, 
+        "failed to update incoming transactions",
+        result.reason
+      );
+    });
+  }
+  stopAllTracking() {
+    for (const [networkClientId] of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap)) {
+      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _stopTrackingByNetworkClientId, stopTrackingByNetworkClientId_fn).call(this, networkClientId);
+    }
+  }
+};
+_isMultichainEnabled = new WeakMap();
+_provider = new WeakMap();
+_nonceTracker = new WeakMap();
+_incomingTransactionOptions = new WeakMap();
+_findNetworkClientIdByChainId = new WeakMap();
+_getNetworkClientById = new WeakMap();
+_getNetworkClientRegistry = new WeakMap();
+_removeIncomingTransactionHelperListeners = new WeakMap();
+_removePendingTransactionTrackerListeners = new WeakMap();
+_createNonceTracker = new WeakMap();
+_createIncomingTransactionHelper = new WeakMap();
+_createPendingTransactionTracker = new WeakMap();
+_nonceMutexesByChainId = new WeakMap();
+_trackingMap = new WeakMap();
+_etherscanRemoteTransactionSourcesMap = new WeakMap();
+_refreshTrackingMap = new WeakMap();
+_stopTrackingByNetworkClientId = new WeakSet();
+stopTrackingByNetworkClientId_fn = function(networkClientId) {
+  const trackers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId);
+  if (trackers) {
+    trackers.pendingTransactionTracker.stop();
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _removePendingTransactionTrackerListeners).call(this, trackers.pendingTransactionTracker);
+    trackers.incomingTransactionHelper.stop();
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _removeIncomingTransactionHelperListeners).call(this, trackers.incomingTransactionHelper);
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).delete(networkClientId);
+  }
+};
+_startTrackingByNetworkClientId = new WeakSet();
+startTrackingByNetworkClientId_fn = function(networkClientId) {
+  const trackers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId);
+  if (trackers) {
+    return;
+  }
+  const {
+    provider,
+    blockTracker,
+    configuration: { chainId }
+  } = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientById).call(this, networkClientId);
+  let etherscanRemoteTransactionSource = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _etherscanRemoteTransactionSourcesMap).get(chainId);
+  if (!etherscanRemoteTransactionSource) {
+    etherscanRemoteTransactionSource = new (0, _chunkEQT25RSPjs.EtherscanRemoteTransactionSource)({
+      includeTokenTransfers: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _incomingTransactionOptions).includeTokenTransfers
+    });
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _etherscanRemoteTransactionSourcesMap).set(
+      chainId,
+      etherscanRemoteTransactionSource
+    );
+  }
+  const nonceTracker = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _createNonceTracker).call(this, {
+    provider,
+    blockTracker,
+    chainId
+  });
+  const incomingTransactionHelper = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _createIncomingTransactionHelper).call(this, {
+    blockTracker,
+    etherscanRemoteTransactionSource,
+    chainId
+  });
+  const pendingTransactionTracker = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _createPendingTransactionTracker).call(this, {
+    provider,
+    blockTracker,
+    chainId
+  });
+  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).set(networkClientId, {
+    nonceTracker,
+    incomingTransactionHelper,
+    pendingTransactionTracker
+  });
+};
+_refreshEtherscanRemoteTransactionSources = new WeakMap();
+_getNetworkClient = new WeakSet();
+getNetworkClient_fn = function({
+  networkClientId,
+  chainId
+} = {}) {
+  let networkClient;
+  if (networkClientId) {
+    try {
+      networkClient = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientById).call(this, networkClientId);
+    } catch (err) {
+      _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, "failed to get network client by networkClientId");
+    }
+  }
+  if (!networkClient && chainId) {
+    try {
+      const networkClientIdForChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _findNetworkClientIdByChainId).call(this, chainId);
+      networkClient = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientById).call(this, networkClientIdForChainId);
+    } catch (err) {
+      _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, "failed to get network client by chainId");
+    }
+  }
+  return networkClient;
+};
+
+
+
+exports.MultichainTrackingHelper = MultichainTrackingHelper;
+//# sourceMappingURL=chunk-5XQ2KRYL.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-5YES3V2R.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-5YES3V2R.mjs
new file mode 100644
index 0000000..1c0078b
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-5YES3V2R.mjs
@@ -0,0 +1,399 @@
+import {
+  createModuleLogger,
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+import {
+  __privateAdd,
+  __privateGet,
+  __privateMethod,
+  __privateSet
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/helpers/PendingTransactionTracker.ts
+import { query } from "@metamask/controller-utils";
+import EventEmitter from "events";
+import { cloneDeep, merge } from "lodash";
+var DROPPED_BLOCK_COUNT = 3;
+var RECEIPT_STATUS_SUCCESS = "0x1";
+var RECEIPT_STATUS_FAILURE = "0x0";
+var MAX_RETRY_BLOCK_DISTANCE = 50;
+var KNOWN_TRANSACTION_ERRORS = [
+  "replacement transaction underpriced",
+  "known transaction",
+  "gas price too low to replace",
+  "transaction with the same hash was already imported",
+  "gateway timeout",
+  "nonce too low"
+];
+var log = createModuleLogger(projectLogger, "pending-transactions");
+var _approveTransaction, _blockTracker, _droppedBlockCountByHash, _getChainId, _getEthQuery, _getTransactions, _isResubmitEnabled, _listener, _getGlobalLock, _publishTransaction, _running, _beforeCheckPendingTransaction, _beforePublish, _start, start_fn, _onLatestBlock, onLatestBlock_fn, _checkTransactions, checkTransactions_fn, _resubmitTransactions, resubmitTransactions_fn, _isKnownTransactionError, isKnownTransactionError_fn, _resubmitTransaction, resubmitTransaction_fn, _isResubmitDue, isResubmitDue_fn, _checkTransaction, checkTransaction_fn, _onTransactionConfirmed, onTransactionConfirmed_fn, _isTransactionDropped, isTransactionDropped_fn, _isNonceTaken, isNonceTaken_fn, _getPendingTransactions, getPendingTransactions_fn, _warnTransaction, warnTransaction_fn, _failTransaction, failTransaction_fn, _dropTransaction, dropTransaction_fn, _updateTransaction, updateTransaction_fn, _getTransactionReceipt, getTransactionReceipt_fn, _getBlockByHash, getBlockByHash_fn, _getNetworkTransactionCount, getNetworkTransactionCount_fn, _getCurrentChainTransactions, getCurrentChainTransactions_fn;
+var PendingTransactionTracker = class {
+  constructor({
+    approveTransaction,
+    blockTracker,
+    getChainId,
+    getEthQuery,
+    getTransactions,
+    isResubmitEnabled,
+    getGlobalLock,
+    publishTransaction,
+    hooks
+  }) {
+    __privateAdd(this, _start);
+    __privateAdd(this, _onLatestBlock);
+    __privateAdd(this, _checkTransactions);
+    __privateAdd(this, _resubmitTransactions);
+    __privateAdd(this, _isKnownTransactionError);
+    __privateAdd(this, _resubmitTransaction);
+    __privateAdd(this, _isResubmitDue);
+    __privateAdd(this, _checkTransaction);
+    __privateAdd(this, _onTransactionConfirmed);
+    __privateAdd(this, _isTransactionDropped);
+    __privateAdd(this, _isNonceTaken);
+    __privateAdd(this, _getPendingTransactions);
+    __privateAdd(this, _warnTransaction);
+    __privateAdd(this, _failTransaction);
+    __privateAdd(this, _dropTransaction);
+    __privateAdd(this, _updateTransaction);
+    __privateAdd(this, _getTransactionReceipt);
+    __privateAdd(this, _getBlockByHash);
+    __privateAdd(this, _getNetworkTransactionCount);
+    __privateAdd(this, _getCurrentChainTransactions);
+    __privateAdd(this, _approveTransaction, void 0);
+    __privateAdd(this, _blockTracker, void 0);
+    __privateAdd(this, _droppedBlockCountByHash, void 0);
+    __privateAdd(this, _getChainId, void 0);
+    __privateAdd(this, _getEthQuery, void 0);
+    __privateAdd(this, _getTransactions, void 0);
+    __privateAdd(this, _isResubmitEnabled, void 0);
+    // TODO: Replace `any` with type
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    __privateAdd(this, _listener, void 0);
+    __privateAdd(this, _getGlobalLock, void 0);
+    __privateAdd(this, _publishTransaction, void 0);
+    __privateAdd(this, _running, void 0);
+    __privateAdd(this, _beforeCheckPendingTransaction, void 0);
+    __privateAdd(this, _beforePublish, void 0);
+    this.startIfPendingTransactions = () => {
+      const pendingTransactions = __privateMethod(this, _getPendingTransactions, getPendingTransactions_fn).call(this);
+      if (pendingTransactions.length) {
+        __privateMethod(this, _start, start_fn).call(this);
+      } else {
+        this.stop();
+      }
+    };
+    this.hub = new EventEmitter();
+    __privateSet(this, _approveTransaction, approveTransaction);
+    __privateSet(this, _blockTracker, blockTracker);
+    __privateSet(this, _droppedBlockCountByHash, /* @__PURE__ */ new Map());
+    __privateSet(this, _getChainId, getChainId);
+    __privateSet(this, _getEthQuery, getEthQuery);
+    __privateSet(this, _getTransactions, getTransactions);
+    __privateSet(this, _isResubmitEnabled, isResubmitEnabled ?? (() => true));
+    __privateSet(this, _listener, __privateMethod(this, _onLatestBlock, onLatestBlock_fn).bind(this));
+    __privateSet(this, _getGlobalLock, getGlobalLock);
+    __privateSet(this, _publishTransaction, publishTransaction);
+    __privateSet(this, _running, false);
+    __privateSet(this, _beforePublish, hooks?.beforePublish ?? (() => true));
+    __privateSet(this, _beforeCheckPendingTransaction, hooks?.beforeCheckPendingTransaction ?? (() => true));
+  }
+  /**
+   * Force checks the network if the given transaction is confirmed and updates it's status.
+   *
+   * @param txMeta - The transaction to check
+   */
+  async forceCheckTransaction(txMeta) {
+    const releaseLock = await __privateGet(this, _getGlobalLock).call(this);
+    try {
+      await __privateMethod(this, _checkTransaction, checkTransaction_fn).call(this, txMeta);
+    } catch (error) {
+      log("Failed to check transaction", error);
+    } finally {
+      releaseLock();
+    }
+  }
+  stop() {
+    if (!__privateGet(this, _running)) {
+      return;
+    }
+    __privateGet(this, _blockTracker).removeListener("latest", __privateGet(this, _listener));
+    __privateSet(this, _running, false);
+    log("Stopped polling");
+  }
+};
+_approveTransaction = new WeakMap();
+_blockTracker = new WeakMap();
+_droppedBlockCountByHash = new WeakMap();
+_getChainId = new WeakMap();
+_getEthQuery = new WeakMap();
+_getTransactions = new WeakMap();
+_isResubmitEnabled = new WeakMap();
+_listener = new WeakMap();
+_getGlobalLock = new WeakMap();
+_publishTransaction = new WeakMap();
+_running = new WeakMap();
+_beforeCheckPendingTransaction = new WeakMap();
+_beforePublish = new WeakMap();
+_start = new WeakSet();
+start_fn = function() {
+  if (__privateGet(this, _running)) {
+    return;
+  }
+  __privateGet(this, _blockTracker).on("latest", __privateGet(this, _listener));
+  __privateSet(this, _running, true);
+  log("Started polling");
+};
+_onLatestBlock = new WeakSet();
+onLatestBlock_fn = async function(latestBlockNumber) {
+  const releaseLock = await __privateGet(this, _getGlobalLock).call(this);
+  try {
+    await __privateMethod(this, _checkTransactions, checkTransactions_fn).call(this);
+  } catch (error) {
+    log("Failed to check transactions", error);
+  } finally {
+    releaseLock();
+  }
+  try {
+    await __privateMethod(this, _resubmitTransactions, resubmitTransactions_fn).call(this, latestBlockNumber);
+  } catch (error) {
+    log("Failed to resubmit transactions", error);
+  }
+};
+_checkTransactions = new WeakSet();
+checkTransactions_fn = async function() {
+  log("Checking transactions");
+  const pendingTransactions = __privateMethod(this, _getPendingTransactions, getPendingTransactions_fn).call(this);
+  if (!pendingTransactions.length) {
+    log("No pending transactions to check");
+    return;
+  }
+  log("Found pending transactions to check", {
+    count: pendingTransactions.length,
+    ids: pendingTransactions.map((tx) => tx.id)
+  });
+  await Promise.all(
+    pendingTransactions.map((tx) => __privateMethod(this, _checkTransaction, checkTransaction_fn).call(this, tx))
+  );
+};
+_resubmitTransactions = new WeakSet();
+resubmitTransactions_fn = async function(latestBlockNumber) {
+  if (!__privateGet(this, _isResubmitEnabled).call(this) || !__privateGet(this, _running)) {
+    return;
+  }
+  log("Resubmitting transactions");
+  const pendingTransactions = __privateMethod(this, _getPendingTransactions, getPendingTransactions_fn).call(this);
+  if (!pendingTransactions.length) {
+    log("No pending transactions to resubmit");
+    return;
+  }
+  log("Found pending transactions to resubmit", {
+    count: pendingTransactions.length,
+    ids: pendingTransactions.map((tx) => tx.id)
+  });
+  for (const txMeta of pendingTransactions) {
+    try {
+      await __privateMethod(this, _resubmitTransaction, resubmitTransaction_fn).call(this, txMeta, latestBlockNumber);
+    } catch (error) {
+      const errorMessage = error.value?.message?.toLowerCase() || error.message.toLowerCase();
+      if (__privateMethod(this, _isKnownTransactionError, isKnownTransactionError_fn).call(this, errorMessage)) {
+        log("Ignoring known transaction error", errorMessage);
+        return;
+      }
+      __privateMethod(this, _warnTransaction, warnTransaction_fn).call(this, txMeta, error.message, "There was an error when resubmitting this transaction.");
+    }
+  }
+};
+_isKnownTransactionError = new WeakSet();
+isKnownTransactionError_fn = function(errorMessage) {
+  return KNOWN_TRANSACTION_ERRORS.some(
+    (knownError) => errorMessage.includes(knownError)
+  );
+};
+_resubmitTransaction = new WeakSet();
+resubmitTransaction_fn = async function(txMeta, latestBlockNumber) {
+  if (!__privateMethod(this, _isResubmitDue, isResubmitDue_fn).call(this, txMeta, latestBlockNumber)) {
+    return;
+  }
+  const { rawTx } = txMeta;
+  if (!__privateGet(this, _beforePublish).call(this, txMeta)) {
+    return;
+  }
+  if (!rawTx?.length) {
+    log("Approving transaction as no raw value");
+    await __privateGet(this, _approveTransaction).call(this, txMeta.id);
+    return;
+  }
+  const ethQuery = __privateGet(this, _getEthQuery).call(this, txMeta.networkClientId);
+  await __privateGet(this, _publishTransaction).call(this, ethQuery, rawTx);
+  const retryCount = (txMeta.retryCount ?? 0) + 1;
+  __privateMethod(this, _updateTransaction, updateTransaction_fn).call(this, merge({}, txMeta, { retryCount }), "PendingTransactionTracker:transaction-retry - Retry count increased");
+};
+_isResubmitDue = new WeakSet();
+isResubmitDue_fn = function(txMeta, latestBlockNumber) {
+  const txMetaWithFirstRetryBlockNumber = cloneDeep(txMeta);
+  if (!txMetaWithFirstRetryBlockNumber.firstRetryBlockNumber) {
+    txMetaWithFirstRetryBlockNumber.firstRetryBlockNumber = latestBlockNumber;
+    __privateMethod(this, _updateTransaction, updateTransaction_fn).call(this, txMetaWithFirstRetryBlockNumber, "PendingTransactionTracker:#isResubmitDue - First retry block number set");
+  }
+  const { firstRetryBlockNumber } = txMetaWithFirstRetryBlockNumber;
+  const blocksSinceFirstRetry = Number.parseInt(latestBlockNumber, 16) - Number.parseInt(firstRetryBlockNumber, 16);
+  const retryCount = txMeta.retryCount || 0;
+  const requiredBlocksSinceFirstRetry = Math.min(
+    MAX_RETRY_BLOCK_DISTANCE,
+    Math.pow(2, retryCount)
+  );
+  return blocksSinceFirstRetry >= requiredBlocksSinceFirstRetry;
+};
+_checkTransaction = new WeakSet();
+checkTransaction_fn = async function(txMeta) {
+  const { hash, id } = txMeta;
+  if (!hash && __privateGet(this, _beforeCheckPendingTransaction).call(this, txMeta)) {
+    const error = new Error(
+      "We had an error while submitting this transaction, please try again."
+    );
+    error.name = "NoTxHashError";
+    __privateMethod(this, _failTransaction, failTransaction_fn).call(this, txMeta, error);
+    return;
+  }
+  if (__privateMethod(this, _isNonceTaken, isNonceTaken_fn).call(this, txMeta)) {
+    log("Nonce already taken", id);
+    __privateMethod(this, _dropTransaction, dropTransaction_fn).call(this, txMeta);
+    return;
+  }
+  try {
+    const receipt = await __privateMethod(this, _getTransactionReceipt, getTransactionReceipt_fn).call(this, hash);
+    const isSuccess = receipt?.status === RECEIPT_STATUS_SUCCESS;
+    const isFailure = receipt?.status === RECEIPT_STATUS_FAILURE;
+    if (isFailure) {
+      log("Transaction receipt has failed status");
+      __privateMethod(this, _failTransaction, failTransaction_fn).call(this, txMeta, new Error("Transaction dropped or replaced"));
+      return;
+    }
+    const { blockNumber, blockHash } = receipt || {};
+    if (isSuccess && blockNumber && blockHash) {
+      await __privateMethod(this, _onTransactionConfirmed, onTransactionConfirmed_fn).call(this, txMeta, {
+        ...receipt,
+        blockNumber,
+        blockHash
+      });
+      return;
+    }
+  } catch (error) {
+    log("Failed to check transaction", id, error);
+    __privateMethod(this, _warnTransaction, warnTransaction_fn).call(this, txMeta, error.message, "There was a problem loading this transaction.");
+    return;
+  }
+  if (await __privateMethod(this, _isTransactionDropped, isTransactionDropped_fn).call(this, txMeta)) {
+    __privateMethod(this, _dropTransaction, dropTransaction_fn).call(this, txMeta);
+  }
+};
+_onTransactionConfirmed = new WeakSet();
+onTransactionConfirmed_fn = async function(txMeta, receipt) {
+  const { id } = txMeta;
+  const { blockHash } = receipt;
+  log("Transaction confirmed", id);
+  const { baseFeePerGas, timestamp: blockTimestamp } = await __privateMethod(this, _getBlockByHash, getBlockByHash_fn).call(this, blockHash, false);
+  const updatedTxMeta = cloneDeep(txMeta);
+  updatedTxMeta.baseFeePerGas = baseFeePerGas;
+  updatedTxMeta.blockTimestamp = blockTimestamp;
+  updatedTxMeta.status = "confirmed" /* confirmed */;
+  updatedTxMeta.txParams = {
+    ...updatedTxMeta.txParams,
+    gasUsed: receipt.gasUsed
+  };
+  updatedTxMeta.txReceipt = receipt;
+  updatedTxMeta.verifiedOnBlockchain = true;
+  __privateMethod(this, _updateTransaction, updateTransaction_fn).call(this, updatedTxMeta, "PendingTransactionTracker:#onTransactionConfirmed - Transaction confirmed");
+  this.hub.emit("transaction-confirmed", updatedTxMeta);
+};
+_isTransactionDropped = new WeakSet();
+isTransactionDropped_fn = async function(txMeta) {
+  const {
+    hash,
+    id,
+    txParams: { nonce, from }
+  } = txMeta;
+  if (!nonce || !hash) {
+    return false;
+  }
+  const networkNextNonceHex = await __privateMethod(this, _getNetworkTransactionCount, getNetworkTransactionCount_fn).call(this, from);
+  const networkNextNonceNumber = parseInt(networkNextNonceHex, 16);
+  const nonceNumber = parseInt(nonce, 16);
+  if (nonceNumber >= networkNextNonceNumber) {
+    return false;
+  }
+  let droppedBlockCount = __privateGet(this, _droppedBlockCountByHash).get(hash);
+  if (droppedBlockCount === void 0) {
+    droppedBlockCount = 0;
+    __privateGet(this, _droppedBlockCountByHash).set(hash, droppedBlockCount);
+  }
+  if (droppedBlockCount < DROPPED_BLOCK_COUNT) {
+    log("Incrementing dropped block count", { id, droppedBlockCount });
+    __privateGet(this, _droppedBlockCountByHash).set(hash, droppedBlockCount + 1);
+    return false;
+  }
+  log("Hit dropped block count", id);
+  __privateGet(this, _droppedBlockCountByHash).delete(hash);
+  return true;
+};
+_isNonceTaken = new WeakSet();
+isNonceTaken_fn = function(txMeta) {
+  const { id, txParams } = txMeta;
+  return __privateMethod(this, _getCurrentChainTransactions, getCurrentChainTransactions_fn).call(this).some(
+    (tx) => tx.id !== id && tx.txParams.from === txParams.from && tx.status === "confirmed" /* confirmed */ && tx.txParams.nonce === txParams.nonce && tx.type !== "incoming" /* incoming */
+  );
+};
+_getPendingTransactions = new WeakSet();
+getPendingTransactions_fn = function() {
+  return __privateMethod(this, _getCurrentChainTransactions, getCurrentChainTransactions_fn).call(this).filter(
+    (tx) => tx.status === "submitted" /* submitted */ && !tx.verifiedOnBlockchain && !tx.isUserOperation
+  );
+};
+_warnTransaction = new WeakSet();
+warnTransaction_fn = function(txMeta, error, message) {
+  __privateMethod(this, _updateTransaction, updateTransaction_fn).call(this, {
+    ...txMeta,
+    warning: { error, message }
+  }, "PendingTransactionTracker:#warnTransaction - Warning added");
+};
+_failTransaction = new WeakSet();
+failTransaction_fn = function(txMeta, error) {
+  log("Transaction failed", txMeta.id, error);
+  this.hub.emit("transaction-failed", txMeta, error);
+};
+_dropTransaction = new WeakSet();
+dropTransaction_fn = function(txMeta) {
+  log("Transaction dropped", txMeta.id);
+  this.hub.emit("transaction-dropped", txMeta);
+};
+_updateTransaction = new WeakSet();
+updateTransaction_fn = function(txMeta, note) {
+  this.hub.emit("transaction-updated", txMeta, note);
+};
+_getTransactionReceipt = new WeakSet();
+getTransactionReceipt_fn = async function(txHash) {
+  return await query(__privateGet(this, _getEthQuery).call(this), "getTransactionReceipt", [txHash]);
+};
+_getBlockByHash = new WeakSet();
+getBlockByHash_fn = async function(blockHash, includeTransactionDetails) {
+  return await query(__privateGet(this, _getEthQuery).call(this), "getBlockByHash", [
+    blockHash,
+    includeTransactionDetails
+  ]);
+};
+_getNetworkTransactionCount = new WeakSet();
+getNetworkTransactionCount_fn = async function(address) {
+  return await query(__privateGet(this, _getEthQuery).call(this), "getTransactionCount", [address]);
+};
+_getCurrentChainTransactions = new WeakSet();
+getCurrentChainTransactions_fn = function() {
+  const currentChainId = __privateGet(this, _getChainId).call(this);
+  return __privateGet(this, _getTransactions).call(this).filter(
+    (tx) => tx.chainId === currentChainId
+  );
+};
+
+export {
+  PendingTransactionTracker
+};
+//# sourceMappingURL=chunk-5YES3V2R.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-7DJO6UZA.js b/node_modules/@metamask/transaction-controller/dist/chunk-7DJO6UZA.js
new file mode 100644
index 0000000..e1c3cb6
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-7DJO6UZA.js
@@ -0,0 +1,228 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+var _chunk2XKEAKQGjs = require('./chunk-2XKEAKQG.js');
+
+
+var _chunkEMDU4XLMjs = require('./chunk-EMDU4XLM.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/helpers/GasFeePoller.ts
+var _ethquery = require('@metamask/eth-query'); var _ethquery2 = _interopRequireDefault(_ethquery);
+var _utils = require('@metamask/utils');
+var _events = require('events'); var _events2 = _interopRequireDefault(_events);
+var log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "gas-fee-poller");
+var INTERVAL_MILLISECONDS = 1e4;
+var _findNetworkClientIdByChainId, _gasFeeFlows, _getGasFeeControllerEstimates, _getProvider, _getTransactions, _layer1GasFeeFlows, _timeout, _running, _start, start_fn, _stop, stop_fn, _onTimeout, onTimeout_fn, _updateUnapprovedTransactions, updateUnapprovedTransactions_fn, _updateUnapprovedTransaction, updateUnapprovedTransaction_fn, _updateTransactionGasFeeEstimates, updateTransactionGasFeeEstimates_fn, _updateTransactionLayer1GasFee, updateTransactionLayer1GasFee_fn, _getUnapprovedTransactions, getUnapprovedTransactions_fn, _getGasFeeControllerData, getGasFeeControllerData_fn;
+var GasFeePoller = class {
+  /**
+   * Constructs a new instance of the GasFeePoller.
+   * @param options - The options for this instance.
+   * @param options.findNetworkClientIdByChainId - Callback to find the network client ID by chain ID.
+   * @param options.gasFeeFlows - The gas fee flows to use to obtain suitable gas fees.
+   * @param options.getGasFeeControllerEstimates - Callback to obtain the default fee estimates.
+   * @param options.getProvider - Callback to obtain a provider instance.
+   * @param options.getTransactions - Callback to obtain the transaction data.
+   * @param options.layer1GasFeeFlows - The layer 1 gas fee flows to use to obtain suitable layer 1 gas fees.
+   * @param options.onStateChange - Callback to register a listener for controller state changes.
+   */
+  constructor({
+    findNetworkClientIdByChainId,
+    gasFeeFlows,
+    getGasFeeControllerEstimates,
+    getProvider,
+    getTransactions,
+    layer1GasFeeFlows,
+    onStateChange
+  }) {
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _start);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _stop);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onTimeout);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateUnapprovedTransactions);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateUnapprovedTransaction);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateTransactionGasFeeEstimates);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateTransactionLayer1GasFee);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getUnapprovedTransactions);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGasFeeControllerData);
+    this.hub = new (0, _events2.default)();
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _findNetworkClientIdByChainId, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _gasFeeFlows, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGasFeeControllerEstimates, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getProvider, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getTransactions, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _layer1GasFeeFlows, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _timeout, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _running, false);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _findNetworkClientIdByChainId, findNetworkClientIdByChainId);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _gasFeeFlows, gasFeeFlows);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _layer1GasFeeFlows, layer1GasFeeFlows);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getGasFeeControllerEstimates, getGasFeeControllerEstimates);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getProvider, getProvider);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getTransactions, getTransactions);
+    onStateChange(() => {
+      const unapprovedTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getUnapprovedTransactions, getUnapprovedTransactions_fn).call(this);
+      if (unapprovedTransactions.length) {
+        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _start, start_fn).call(this);
+      } else {
+        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _stop, stop_fn).call(this);
+      }
+    });
+  }
+};
+_findNetworkClientIdByChainId = new WeakMap();
+_gasFeeFlows = new WeakMap();
+_getGasFeeControllerEstimates = new WeakMap();
+_getProvider = new WeakMap();
+_getTransactions = new WeakMap();
+_layer1GasFeeFlows = new WeakMap();
+_timeout = new WeakMap();
+_running = new WeakMap();
+_start = new WeakSet();
+start_fn = function() {
+  if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _running)) {
+    return;
+  }
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onTimeout, onTimeout_fn).call(this);
+  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _running, true);
+  log("Started polling");
+};
+_stop = new WeakSet();
+stop_fn = function() {
+  if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _running)) {
+    return;
+  }
+  clearTimeout(_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _timeout));
+  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _timeout, void 0);
+  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _running, false);
+  log("Stopped polling");
+};
+_onTimeout = new WeakSet();
+onTimeout_fn = async function() {
+  await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateUnapprovedTransactions, updateUnapprovedTransactions_fn).call(this);
+  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _timeout, setTimeout(() => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onTimeout, onTimeout_fn).call(this), INTERVAL_MILLISECONDS));
+};
+_updateUnapprovedTransactions = new WeakSet();
+updateUnapprovedTransactions_fn = async function() {
+  const unapprovedTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getUnapprovedTransactions, getUnapprovedTransactions_fn).call(this);
+  if (!unapprovedTransactions.length) {
+    return;
+  }
+  log("Found unapproved transactions", unapprovedTransactions.length);
+  const gasFeeControllerDataByChainId = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGasFeeControllerData, getGasFeeControllerData_fn).call(this, unapprovedTransactions);
+  log("Retrieved gas fee controller data", gasFeeControllerDataByChainId);
+  await Promise.all(
+    unapprovedTransactions.flatMap((tx) => {
+      const { chainId } = tx;
+      const gasFeeControllerData = gasFeeControllerDataByChainId.get(
+        chainId
+      );
+      return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateUnapprovedTransaction, updateUnapprovedTransaction_fn).call(this, tx, gasFeeControllerData);
+    })
+  );
+};
+_updateUnapprovedTransaction = new WeakSet();
+updateUnapprovedTransaction_fn = async function(transactionMeta, gasFeeControllerData) {
+  const { id } = transactionMeta;
+  const [gasFeeEstimatesResponse, layer1GasFee] = await Promise.all([
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionGasFeeEstimates, updateTransactionGasFeeEstimates_fn).call(this, transactionMeta, gasFeeControllerData),
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionLayer1GasFee, updateTransactionLayer1GasFee_fn).call(this, transactionMeta)
+  ]);
+  if (!gasFeeEstimatesResponse && !layer1GasFee) {
+    return;
+  }
+  this.hub.emit("transaction-updated", {
+    transactionId: id,
+    gasFeeEstimates: gasFeeEstimatesResponse?.gasFeeEstimates,
+    gasFeeEstimatesLoaded: gasFeeEstimatesResponse?.gasFeeEstimatesLoaded,
+    layer1GasFee
+  });
+};
+_updateTransactionGasFeeEstimates = new WeakSet();
+updateTransactionGasFeeEstimates_fn = async function(transactionMeta, gasFeeControllerData) {
+  const { chainId, networkClientId } = transactionMeta;
+  const ethQuery = new (0, _ethquery2.default)(_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getProvider).call(this, chainId, networkClientId));
+  const gasFeeFlow = _chunkEMDU4XLMjs.getGasFeeFlow.call(void 0, transactionMeta, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _gasFeeFlows));
+  if (gasFeeFlow) {
+    log(
+      "Found gas fee flow",
+      gasFeeFlow.constructor.name,
+      transactionMeta.id
+    );
+  }
+  const request = {
+    ethQuery,
+    gasFeeControllerData,
+    transactionMeta
+  };
+  let gasFeeEstimates;
+  if (gasFeeFlow) {
+    try {
+      const response = await gasFeeFlow.getGasFees(request);
+      gasFeeEstimates = response.estimates;
+    } catch (error) {
+      log("Failed to get suggested gas fees", transactionMeta.id, error);
+    }
+  }
+  if (!gasFeeEstimates && transactionMeta.gasFeeEstimatesLoaded) {
+    return void 0;
+  }
+  log("Updated gas fee estimates", {
+    gasFeeEstimates,
+    transaction: transactionMeta.id
+  });
+  return { gasFeeEstimates, gasFeeEstimatesLoaded: true };
+};
+_updateTransactionLayer1GasFee = new WeakSet();
+updateTransactionLayer1GasFee_fn = async function(transactionMeta) {
+  const { chainId, networkClientId } = transactionMeta;
+  const provider = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getProvider).call(this, chainId, networkClientId);
+  const layer1GasFee = await _chunk2XKEAKQGjs.getTransactionLayer1GasFee.call(void 0, {
+    layer1GasFeeFlows: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _layer1GasFeeFlows),
+    provider,
+    transactionMeta
+  });
+  if (layer1GasFee) {
+    log("Updated layer 1 gas fee", layer1GasFee, transactionMeta.id);
+  }
+  return layer1GasFee;
+};
+_getUnapprovedTransactions = new WeakSet();
+getUnapprovedTransactions_fn = function() {
+  return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getTransactions).call(this).filter(
+    (tx) => tx.status === "unapproved" /* unapproved */
+  );
+};
+_getGasFeeControllerData = new WeakSet();
+getGasFeeControllerData_fn = async function(transactions) {
+  const networkClientIdsByChainId = /* @__PURE__ */ new Map();
+  for (const transaction of transactions) {
+    const { chainId, networkClientId: transactionNetworkClientId } = transaction;
+    if (networkClientIdsByChainId.has(chainId)) {
+      continue;
+    }
+    const networkClientId = transactionNetworkClientId ?? _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _findNetworkClientIdByChainId).call(this, chainId);
+    networkClientIdsByChainId.set(chainId, networkClientId);
+  }
+  log("Extracted network client IDs by chain ID", networkClientIdsByChainId);
+  const entryPromises = Array.from(networkClientIdsByChainId.entries()).map(
+    async ([chainId, networkClientId]) => {
+      return [
+        chainId,
+        await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getGasFeeControllerEstimates).call(this, { networkClientId })
+      ];
+    }
+  );
+  return new Map(await Promise.all(entryPromises));
+};
+
+
+
+exports.GasFeePoller = GasFeePoller;
+//# sourceMappingURL=chunk-7DJO6UZA.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-7LXE4KHV.js b/node_modules/@metamask/transaction-controller/dist/chunk-7LXE4KHV.js
new file mode 100644
index 0000000..92da67f
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-7LXE4KHV.js
@@ -0,0 +1,40 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/utils/external-transactions.ts
+var _rpcerrors = require('@metamask/rpc-errors');
+function validateConfirmedExternalTransaction(transactionMeta, confirmedTxs, pendingTxs) {
+  if (!transactionMeta || !transactionMeta.txParams) {
+    throw _rpcerrors.rpcErrors.invalidParams(
+      '"transactionMeta" or "transactionMeta.txParams" is missing'
+    );
+  }
+  if (transactionMeta.status !== "confirmed" /* confirmed */) {
+    throw _rpcerrors.rpcErrors.invalidParams(
+      'External transaction status should be "confirmed"'
+    );
+  }
+  const externalTxNonce = transactionMeta.txParams.nonce;
+  if (pendingTxs && pendingTxs.length > 0) {
+    const foundPendingTxByNonce = pendingTxs.find(
+      (tx) => tx.txParams?.nonce === externalTxNonce
+    );
+    if (foundPendingTxByNonce) {
+      throw _rpcerrors.rpcErrors.invalidParams(
+        "External transaction nonce should not be in pending txs"
+      );
+    }
+  }
+  if (confirmedTxs && confirmedTxs.length > 0) {
+    const foundConfirmedTxByNonce = confirmedTxs.find(
+      (tx) => tx.txParams?.nonce === externalTxNonce
+    );
+    if (foundConfirmedTxByNonce) {
+      throw _rpcerrors.rpcErrors.invalidParams(
+        "External transaction nonce should not be in confirmed txs"
+      );
+    }
+  }
+}
+
+
+
+exports.validateConfirmedExternalTransaction = validateConfirmedExternalTransaction;
+//# sourceMappingURL=chunk-7LXE4KHV.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-7TPXSDXL.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-7TPXSDXL.mjs
new file mode 100644
index 0000000..5a4da42
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-7TPXSDXL.mjs
@@ -0,0 +1,2550 @@
+import {
+  getAndFormatTransactionsForNonceTracker,
+  getNextNonce
+} from "./chunk-NHRBO3LU.mjs";
+import {
+  getSimulationData
+} from "./chunk-MDRMMUMS.mjs";
+import {
+  determineTransactionType
+} from "./chunk-KG4UW4K4.mjs";
+import {
+  validateTransactionOrigin,
+  validateTxParams
+} from "./chunk-NM6OYEPP.mjs";
+import {
+  PendingTransactionTracker
+} from "./chunk-5YES3V2R.mjs";
+import {
+  validateConfirmedExternalTransaction
+} from "./chunk-FRKQ3Z2L.mjs";
+import {
+  addGasBuffer,
+  estimateGas,
+  updateGas
+} from "./chunk-5G6OHAXI.mjs";
+import {
+  addInitialHistorySnapshot,
+  updateTransactionHistory
+} from "./chunk-XGRAHX6T.mjs";
+import {
+  OptimismLayer1GasFeeFlow
+} from "./chunk-VEVVBHP3.mjs";
+import {
+  ScrollLayer1GasFeeFlow
+} from "./chunk-Z4GV3YQQ.mjs";
+import {
+  TestGasFeeFlow
+} from "./chunk-FMRLPVFZ.mjs";
+import {
+  GasFeePoller
+} from "./chunk-SL3GHHKG.mjs";
+import {
+  getTransactionLayer1GasFee,
+  updateTransactionLayer1GasFee
+} from "./chunk-NOHEXQ7Y.mjs";
+import {
+  IncomingTransactionHelper
+} from "./chunk-Y7ENNK7L.mjs";
+import {
+  MultichainTrackingHelper
+} from "./chunk-F6E3TTR3.mjs";
+import {
+  EtherscanRemoteTransactionSource
+} from "./chunk-CPMTUMMZ.mjs";
+import {
+  LineaGasFeeFlow
+} from "./chunk-XL3HBKDE.mjs";
+import {
+  DefaultGasFeeFlow
+} from "./chunk-REOG6YD4.mjs";
+import {
+  updateGasFees
+} from "./chunk-4M7FHI4S.mjs";
+import {
+  updatePostTransactionBalance,
+  updateSwapsTransaction
+} from "./chunk-ZGUNOEUQ.mjs";
+import {
+  getIncreasedPriceFromExisting,
+  isEIP1559Transaction,
+  isFeeMarketEIP1559Values,
+  isGasPriceValue,
+  normalizeGasFeeValues,
+  normalizeTransactionParams,
+  normalizeTxError,
+  validateGasValues,
+  validateIfTransactionUnapproved,
+  validateMinimumIncrease
+} from "./chunk-J56A7UCK.mjs";
+import {
+  getGasFeeFlow
+} from "./chunk-AGJNOOBN.mjs";
+import {
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+import {
+  __privateAdd,
+  __privateGet,
+  __privateMethod,
+  __privateSet
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/TransactionController.ts
+import { Hardfork, Common } from "@ethereumjs/common";
+import { TransactionFactory } from "@ethereumjs/tx";
+import { bufferToHex } from "@ethereumjs/util";
+import { BaseController } from "@metamask/base-controller";
+import {
+  query,
+  NetworkType,
+  ApprovalType,
+  ORIGIN_METAMASK,
+  convertHexToDecimal
+} from "@metamask/controller-utils";
+import EthQuery from "@metamask/eth-query";
+import { NetworkClientType } from "@metamask/network-controller";
+import { errorCodes, rpcErrors, providerErrors } from "@metamask/rpc-errors";
+import { add0x } from "@metamask/utils";
+import { Mutex } from "async-mutex";
+import { MethodRegistry } from "eth-method-registry";
+import { EventEmitter } from "events";
+import { cloneDeep, mapValues, merge, pickBy, sortBy, isEqual } from "lodash";
+import { NonceTracker } from "nonce-tracker";
+import { v1 as random } from "uuid";
+var metadata = {
+  transactions: {
+    persist: true,
+    anonymous: false
+  },
+  methodData: {
+    persist: true,
+    anonymous: false
+  },
+  lastFetchedBlockNumbers: {
+    persist: true,
+    anonymous: false
+  }
+};
+var HARDFORK = Hardfork.London;
+var CANCEL_RATE = 1.1;
+var SPEED_UP_RATE = 1.1;
+var controllerName = "TransactionController";
+var ApprovalState = /* @__PURE__ */ ((ApprovalState2) => {
+  ApprovalState2["Approved"] = "approved";
+  ApprovalState2["NotApproved"] = "not-approved";
+  ApprovalState2["SkippedViaBeforePublishHook"] = "skipped-via-before-publish-hook";
+  return ApprovalState2;
+})(ApprovalState || {});
+function getDefaultTransactionControllerState() {
+  return {
+    methodData: {},
+    transactions: [],
+    lastFetchedBlockNumbers: {}
+  };
+}
+var _internalEvents, _incomingTransactionOptions, _pendingTransactionOptions, _transactionHistoryLimit, _isSimulationEnabled, _testGasFeeFlows, _multichainTrackingHelper, _createNonceTracker, createNonceTracker_fn, _createIncomingTransactionHelper, createIncomingTransactionHelper_fn, _createPendingTransactionTracker, createPendingTransactionTracker_fn, _checkForPendingTransactionAndStartPolling, _stopAllTracking, stopAllTracking_fn, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners_fn, _addIncomingTransactionHelperListeners, addIncomingTransactionHelperListeners_fn, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners_fn, _addPendingTransactionTrackerListeners, addPendingTransactionTrackerListeners_fn, _getNonceTrackerPendingTransactions, getNonceTrackerPendingTransactions_fn, _getGasFeeFlows, getGasFeeFlows_fn, _getLayer1GasFeeFlows, getLayer1GasFeeFlows_fn, _updateTransactionInternal, updateTransactionInternal_fn, _checkIfTransactionParamsUpdated, checkIfTransactionParamsUpdated_fn, _onTransactionParamsUpdated, onTransactionParamsUpdated_fn, _updateSimulationData, updateSimulationData_fn, _onGasFeePollerTransactionUpdate, onGasFeePollerTransactionUpdate_fn, _getNetworkClientId, getNetworkClientId_fn, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn, _getGlobalChainId, getGlobalChainId_fn, _isCustomNetwork, isCustomNetwork_fn;
+var TransactionController = class extends BaseController {
+  /**
+   * Constructs a TransactionController.
+   *
+   * @param options - The controller options.
+   * @param options.blockTracker - The block tracker used to poll for new blocks data.
+   * @param options.disableHistory - Whether to disable storing history in transaction metadata.
+   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.
+   * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.
+   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.
+   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.
+   * @param options.getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.
+   * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.
+   * @param options.getNetworkClientRegistry - Gets the network client registry.
+   * @param options.getNetworkState - Gets the state of the network controller.
+   * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.
+   * @param options.getSavedGasFees - Gets the saved gas fee config.
+   * @param options.getSelectedAddress - Gets the address of the currently selected account.
+   * @param options.incomingTransactions - Configuration options for incoming transaction support.
+   * @param options.isMultichainEnabled - Enable multichain support.
+   * @param options.isSimulationEnabled - Whether new transactions will be automatically simulated.
+   * @param options.messenger - The controller messenger.
+   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
+   * @param options.pendingTransactions - Configuration options for pending transaction support.
+   * @param options.provider - The provider used to create the underlying EthQuery instance.
+   * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.
+   * @param options.sign - Function used to sign transactions.
+   * @param options.state - Initial state to set on this controller.
+   * @param options.testGasFeeFlows - Whether to use the test gas fee flow.
+   * @param options.transactionHistoryLimit - Transaction history limit.
+   * @param options.hooks - The controller hooks.
+   */
+  constructor({
+    blockTracker,
+    disableHistory,
+    disableSendFlowHistory,
+    disableSwaps,
+    getCurrentAccountEIP1559Compatibility,
+    getCurrentNetworkEIP1559Compatibility,
+    getExternalPendingTransactions,
+    getGasFeeEstimates,
+    getNetworkClientRegistry,
+    getNetworkState,
+    getPermittedAccounts,
+    getSavedGasFees,
+    getSelectedAddress,
+    incomingTransactions = {},
+    isMultichainEnabled = false,
+    isSimulationEnabled,
+    messenger,
+    onNetworkStateChange,
+    pendingTransactions = {},
+    provider,
+    securityProviderRequest,
+    sign,
+    state,
+    testGasFeeFlows,
+    transactionHistoryLimit = 40,
+    hooks
+  }) {
+    super({
+      name: controllerName,
+      metadata,
+      messenger,
+      state: {
+        ...getDefaultTransactionControllerState(),
+        ...state
+      }
+    });
+    __privateAdd(this, _createNonceTracker);
+    __privateAdd(this, _createIncomingTransactionHelper);
+    __privateAdd(this, _createPendingTransactionTracker);
+    __privateAdd(this, _stopAllTracking);
+    __privateAdd(this, _removeIncomingTransactionHelperListeners);
+    __privateAdd(this, _addIncomingTransactionHelperListeners);
+    __privateAdd(this, _removePendingTransactionTrackerListeners);
+    __privateAdd(this, _addPendingTransactionTrackerListeners);
+    __privateAdd(this, _getNonceTrackerPendingTransactions);
+    __privateAdd(this, _getGasFeeFlows);
+    __privateAdd(this, _getLayer1GasFeeFlows);
+    __privateAdd(this, _updateTransactionInternal);
+    __privateAdd(this, _checkIfTransactionParamsUpdated);
+    __privateAdd(this, _onTransactionParamsUpdated);
+    __privateAdd(this, _updateSimulationData);
+    __privateAdd(this, _onGasFeePollerTransactionUpdate);
+    __privateAdd(this, _getNetworkClientId);
+    __privateAdd(this, _getGlobalNetworkClientId);
+    __privateAdd(this, _getGlobalChainId);
+    __privateAdd(this, _isCustomNetwork);
+    __privateAdd(this, _internalEvents, new EventEmitter());
+    this.inProcessOfSigning = /* @__PURE__ */ new Set();
+    this.mutex = new Mutex();
+    __privateAdd(this, _incomingTransactionOptions, void 0);
+    __privateAdd(this, _pendingTransactionOptions, void 0);
+    this.signAbortCallbacks = /* @__PURE__ */ new Map();
+    __privateAdd(this, _transactionHistoryLimit, void 0);
+    __privateAdd(this, _isSimulationEnabled, void 0);
+    __privateAdd(this, _testGasFeeFlows, void 0);
+    __privateAdd(this, _multichainTrackingHelper, void 0);
+    __privateAdd(this, _checkForPendingTransactionAndStartPolling, () => {
+      this.pendingTransactionTracker.startIfPendingTransactions();
+      __privateGet(this, _multichainTrackingHelper).checkForPendingTransactionAndStartPolling();
+    });
+    this.messagingSystem = messenger;
+    this.getNetworkState = getNetworkState;
+    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;
+    this.isHistoryDisabled = disableHistory ?? false;
+    this.isSwapsDisabled = disableSwaps ?? false;
+    __privateSet(this, _isSimulationEnabled, isSimulationEnabled ?? (() => true));
+    this.registry = new MethodRegistry({ provider });
+    this.getSavedGasFees = getSavedGasFees ?? ((_chainId) => void 0);
+    this.getCurrentAccountEIP1559Compatibility = getCurrentAccountEIP1559Compatibility ?? (() => Promise.resolve(true));
+    this.getCurrentNetworkEIP1559Compatibility = getCurrentNetworkEIP1559Compatibility;
+    this.getGasFeeEstimates = getGasFeeEstimates || (() => Promise.resolve({}));
+    this.getPermittedAccounts = getPermittedAccounts;
+    this.getSelectedAddress = getSelectedAddress;
+    this.getExternalPendingTransactions = getExternalPendingTransactions ?? (() => []);
+    this.securityProviderRequest = securityProviderRequest;
+    __privateSet(this, _incomingTransactionOptions, incomingTransactions);
+    __privateSet(this, _pendingTransactionOptions, pendingTransactions);
+    __privateSet(this, _transactionHistoryLimit, transactionHistoryLimit);
+    this.sign = sign;
+    __privateSet(this, _testGasFeeFlows, testGasFeeFlows === true);
+    this.afterSign = hooks?.afterSign ?? (() => true);
+    this.beforeApproveOnInit = hooks?.beforeApproveOnInit ?? (() => true);
+    this.beforeCheckPendingTransaction = hooks?.beforeCheckPendingTransaction ?? /* istanbul ignore next */
+    (() => true);
+    this.beforePublish = hooks?.beforePublish ?? (() => true);
+    this.getAdditionalSignArguments = hooks?.getAdditionalSignArguments ?? (() => []);
+    this.publish = hooks?.publish ?? (() => Promise.resolve({ transactionHash: void 0 }));
+    this.nonceTracker = __privateMethod(this, _createNonceTracker, createNonceTracker_fn).call(this, {
+      provider,
+      blockTracker
+    });
+    const findNetworkClientIdByChainId = (chainId) => {
+      return this.messagingSystem.call(
+        `NetworkController:findNetworkClientIdByChainId`,
+        chainId
+      );
+    };
+    __privateSet(this, _multichainTrackingHelper, new MultichainTrackingHelper({
+      isMultichainEnabled,
+      provider,
+      nonceTracker: this.nonceTracker,
+      incomingTransactionOptions: incomingTransactions,
+      findNetworkClientIdByChainId,
+      getNetworkClientById: (networkClientId) => {
+        return this.messagingSystem.call(
+          `NetworkController:getNetworkClientById`,
+          networkClientId
+        );
+      },
+      getNetworkClientRegistry,
+      removeIncomingTransactionHelperListeners: __privateMethod(this, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners_fn).bind(this),
+      removePendingTransactionTrackerListeners: __privateMethod(this, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners_fn).bind(this),
+      createNonceTracker: __privateMethod(this, _createNonceTracker, createNonceTracker_fn).bind(this),
+      createIncomingTransactionHelper: __privateMethod(this, _createIncomingTransactionHelper, createIncomingTransactionHelper_fn).bind(this),
+      createPendingTransactionTracker: __privateMethod(this, _createPendingTransactionTracker, createPendingTransactionTracker_fn).bind(this),
+      onNetworkStateChange: (listener) => {
+        this.messagingSystem.subscribe(
+          "NetworkController:stateChange",
+          listener
+        );
+      }
+    }));
+    __privateGet(this, _multichainTrackingHelper).initialize();
+    const etherscanRemoteTransactionSource = new EtherscanRemoteTransactionSource({
+      includeTokenTransfers: incomingTransactions.includeTokenTransfers
+    });
+    this.incomingTransactionHelper = __privateMethod(this, _createIncomingTransactionHelper, createIncomingTransactionHelper_fn).call(this, {
+      blockTracker,
+      etherscanRemoteTransactionSource
+    });
+    this.pendingTransactionTracker = __privateMethod(this, _createPendingTransactionTracker, createPendingTransactionTracker_fn).call(this, {
+      provider,
+      blockTracker
+    });
+    this.gasFeeFlows = __privateMethod(this, _getGasFeeFlows, getGasFeeFlows_fn).call(this);
+    this.layer1GasFeeFlows = __privateMethod(this, _getLayer1GasFeeFlows, getLayer1GasFeeFlows_fn).call(this);
+    const gasFeePoller = new GasFeePoller({
+      findNetworkClientIdByChainId,
+      gasFeeFlows: this.gasFeeFlows,
+      getGasFeeControllerEstimates: this.getGasFeeEstimates,
+      getProvider: (chainId, networkClientId) => __privateGet(this, _multichainTrackingHelper).getProvider({
+        networkClientId,
+        chainId
+      }),
+      getTransactions: () => this.state.transactions,
+      layer1GasFeeFlows: this.layer1GasFeeFlows,
+      onStateChange: (listener) => {
+        this.messagingSystem.subscribe(
+          "TransactionController:stateChange",
+          listener
+        );
+      }
+    });
+    gasFeePoller.hub.on(
+      "transaction-updated",
+      __privateMethod(this, _onGasFeePollerTransactionUpdate, onGasFeePollerTransactionUpdate_fn).bind(this)
+    );
+    this.messagingSystem.subscribe(
+      "TransactionController:stateChange",
+      __privateGet(this, _checkForPendingTransactionAndStartPolling)
+    );
+    onNetworkStateChange(() => {
+      projectLogger("Detected network change", this.getChainId());
+      this.pendingTransactionTracker.startIfPendingTransactions();
+      this.onBootCleanup();
+    });
+    this.onBootCleanup();
+    __privateGet(this, _checkForPendingTransactionAndStartPolling).call(this);
+  }
+  failTransaction(transactionMeta, error, actionId) {
+    const newTransactionMeta = merge({}, transactionMeta, {
+      error: normalizeTxError(error),
+      status: "failed" /* failed */
+    });
+    this.messagingSystem.publish(`${controllerName}:transactionFailed`, {
+      actionId,
+      error: error.message,
+      transactionMeta: newTransactionMeta
+    });
+    this.updateTransaction(
+      newTransactionMeta,
+      "TransactionController#failTransaction - Add error message and set status to failed"
+    );
+    this.onTransactionStatusChange(newTransactionMeta);
+    this.messagingSystem.publish(
+      `${controllerName}:transactionFinished`,
+      newTransactionMeta
+    );
+    __privateGet(this, _internalEvents).emit(
+      `${transactionMeta.id}:finished`,
+      newTransactionMeta
+    );
+  }
+  async registryLookup(fourBytePrefix) {
+    const registryMethod = await this.registry.lookup(fourBytePrefix);
+    if (!registryMethod) {
+      return {
+        registryMethod: "",
+        parsedRegistryMethod: { name: void 0, args: void 0 }
+      };
+    }
+    const parsedRegistryMethod = this.registry.parse(registryMethod);
+    return { registryMethod, parsedRegistryMethod };
+  }
+  /**
+   * Stops polling and removes listeners to prepare the controller for garbage collection.
+   */
+  destroy() {
+    __privateMethod(this, _stopAllTracking, stopAllTracking_fn).call(this);
+  }
+  /**
+   * Handle new method data request.
+   *
+   * @param fourBytePrefix - The method prefix.
+   * @returns The method data object corresponding to the given signature prefix.
+   */
+  async handleMethodData(fourBytePrefix) {
+    const releaseLock = await this.mutex.acquire();
+    try {
+      const { methodData } = this.state;
+      const knownMethod = Object.keys(methodData).find(
+        (knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix
+      );
+      if (knownMethod) {
+        return methodData[fourBytePrefix];
+      }
+      const registry = await this.registryLookup(fourBytePrefix);
+      this.update((state) => {
+        state.methodData[fourBytePrefix] = registry;
+      });
+      return registry;
+    } finally {
+      releaseLock();
+    }
+  }
+  /**
+   * Add a new unapproved transaction to state. Parameters will be validated, a
+   * unique transaction id will be generated, and gas and gasPrice will be calculated
+   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.
+   *
+   * @param txParams - Standard parameters for an Ethereum transaction.
+   * @param opts - Additional options to control how the transaction is added.
+   * @param opts.actionId - Unique ID to prevent duplicate requests.
+   * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
+   * @param opts.method - RPC method that requested the transaction.
+   * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
+   * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.
+   * @param opts.securityAlertResponse - Response from security validator.
+   * @param opts.sendFlowHistory - The sendFlowHistory entries to add.
+   * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.
+   * @param opts.swaps - Options for swaps transactions.
+   * @param opts.swaps.hasApproveTx - Whether the transaction has an approval transaction.
+   * @param opts.swaps.meta - Metadata for swap transaction.
+   * @param opts.networkClientId - The id of the network client for this transaction.
+   * @returns Object containing a promise resolving to the transaction hash if approved.
+   */
+  async addTransaction(txParams, {
+    actionId,
+    deviceConfirmedOn,
+    method,
+    origin,
+    requireApproval,
+    securityAlertResponse,
+    sendFlowHistory,
+    swaps = {},
+    type,
+    networkClientId: requestNetworkClientId
+  } = {}) {
+    projectLogger("Adding transaction", txParams);
+    txParams = normalizeTransactionParams(txParams);
+    if (requestNetworkClientId && !__privateGet(this, _multichainTrackingHelper).has(requestNetworkClientId)) {
+      throw new Error(
+        "The networkClientId for this transaction could not be found"
+      );
+    }
+    const networkClientId = requestNetworkClientId ?? __privateMethod(this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);
+    const isEIP1559Compatible = await this.getEIP1559Compatibility(
+      networkClientId
+    );
+    validateTxParams(txParams, isEIP1559Compatible);
+    if (origin) {
+      await validateTransactionOrigin(
+        await this.getPermittedAccounts(origin),
+        this.getSelectedAddress(),
+        txParams.from,
+        origin
+      );
+    }
+    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(
+      txParams,
+      origin
+    );
+    const chainId = this.getChainId(networkClientId);
+    const ethQuery = __privateGet(this, _multichainTrackingHelper).getEthQuery({
+      networkClientId,
+      chainId
+    });
+    const transactionType = type ?? (await determineTransactionType(txParams, ethQuery)).type;
+    const existingTransactionMeta = this.getTransactionWithActionId(actionId);
+    let addedTransactionMeta = existingTransactionMeta ? cloneDeep(existingTransactionMeta) : {
+      // Add actionId to txMeta to check if same actionId is seen again
+      actionId,
+      chainId,
+      dappSuggestedGasFees,
+      deviceConfirmedOn,
+      id: random(),
+      origin,
+      securityAlertResponse,
+      status: "unapproved" /* unapproved */,
+      time: Date.now(),
+      txParams,
+      userEditedGasLimit: false,
+      verifiedOnBlockchain: false,
+      type: transactionType,
+      networkClientId
+    };
+    await this.updateGasProperties(addedTransactionMeta);
+    if (!existingTransactionMeta) {
+      if (method && this.securityProviderRequest) {
+        const securityProviderResponse = await this.securityProviderRequest(
+          addedTransactionMeta,
+          method
+        );
+        addedTransactionMeta.securityProviderResponse = securityProviderResponse;
+      }
+      if (!this.isSendFlowHistoryDisabled) {
+        addedTransactionMeta.sendFlowHistory = sendFlowHistory ?? [];
+      }
+      if (!this.isHistoryDisabled) {
+        addedTransactionMeta = addInitialHistorySnapshot(addedTransactionMeta);
+      }
+      addedTransactionMeta = updateSwapsTransaction(
+        addedTransactionMeta,
+        transactionType,
+        swaps,
+        {
+          isSwapsDisabled: this.isSwapsDisabled,
+          cancelTransaction: this.cancelTransaction.bind(this),
+          messenger: this.messagingSystem
+        }
+      );
+      this.addMetadata(addedTransactionMeta);
+      if (requireApproval !== false) {
+        __privateMethod(this, _updateSimulationData, updateSimulationData_fn).call(this, addedTransactionMeta);
+      } else {
+        projectLogger("Skipping simulation as approval not required");
+      }
+      this.messagingSystem.publish(
+        `${controllerName}:unapprovedTransactionAdded`,
+        addedTransactionMeta
+      );
+    }
+    return {
+      result: this.processApproval(addedTransactionMeta, {
+        isExisting: Boolean(existingTransactionMeta),
+        requireApproval,
+        actionId
+      }),
+      transactionMeta: addedTransactionMeta
+    };
+  }
+  startIncomingTransactionPolling(networkClientIds = []) {
+    if (networkClientIds.length === 0) {
+      this.incomingTransactionHelper.start();
+      return;
+    }
+    __privateGet(this, _multichainTrackingHelper).startIncomingTransactionPolling(
+      networkClientIds
+    );
+  }
+  stopIncomingTransactionPolling(networkClientIds = []) {
+    if (networkClientIds.length === 0) {
+      this.incomingTransactionHelper.stop();
+      return;
+    }
+    __privateGet(this, _multichainTrackingHelper).stopIncomingTransactionPolling(
+      networkClientIds
+    );
+  }
+  stopAllIncomingTransactionPolling() {
+    this.incomingTransactionHelper.stop();
+    __privateGet(this, _multichainTrackingHelper).stopAllIncomingTransactionPolling();
+  }
+  async updateIncomingTransactions(networkClientIds = []) {
+    if (networkClientIds.length === 0) {
+      await this.incomingTransactionHelper.update();
+      return;
+    }
+    await __privateGet(this, _multichainTrackingHelper).updateIncomingTransactions(
+      networkClientIds
+    );
+  }
+  /**
+   * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
+   * and emitting a `<tx.id>:finished` hub event.
+   *
+   * @param transactionId - The ID of the transaction to cancel.
+   * @param gasValues - The gas values to use for the cancellation transaction.
+   * @param options - The options for the cancellation transaction.
+   * @param options.actionId - Unique ID to prevent duplicate requests.
+   * @param options.estimatedBaseFee - The estimated base fee of the transaction.
+   */
+  async stopTransaction(transactionId, gasValues, {
+    estimatedBaseFee,
+    actionId
+  } = {}) {
+    if (this.getTransactionWithActionId(actionId)) {
+      return;
+    }
+    if (gasValues) {
+      gasValues = normalizeGasFeeValues(gasValues);
+      validateGasValues(gasValues);
+    }
+    projectLogger("Creating cancel transaction", transactionId, gasValues);
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      return;
+    }
+    if (!this.sign) {
+      throw new Error("No sign method defined.");
+    }
+    const minGasPrice = getIncreasedPriceFromExisting(
+      transactionMeta.txParams.gasPrice,
+      CANCEL_RATE
+    );
+    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;
+    const newGasPrice = gasPriceFromValues && validateMinimumIncrease(gasPriceFromValues, minGasPrice) || minGasPrice;
+    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;
+    const minMaxFeePerGas = getIncreasedPriceFromExisting(
+      existingMaxFeePerGas,
+      CANCEL_RATE
+    );
+    const maxFeePerGasValues = isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;
+    const newMaxFeePerGas = maxFeePerGasValues && validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas) || existingMaxFeePerGas && minMaxFeePerGas;
+    const existingMaxPriorityFeePerGas = transactionMeta.txParams?.maxPriorityFeePerGas;
+    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(
+      existingMaxPriorityFeePerGas,
+      CANCEL_RATE
+    );
+    const maxPriorityFeePerGasValues = isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;
+    const newMaxPriorityFeePerGas = maxPriorityFeePerGasValues && validateMinimumIncrease(
+      maxPriorityFeePerGasValues,
+      minMaxPriorityFeePerGas
+    ) || existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas;
+    const newTxParams = newMaxFeePerGas && newMaxPriorityFeePerGas ? {
+      from: transactionMeta.txParams.from,
+      gasLimit: transactionMeta.txParams.gas,
+      maxFeePerGas: newMaxFeePerGas,
+      maxPriorityFeePerGas: newMaxPriorityFeePerGas,
+      type: "0x2" /* feeMarket */,
+      nonce: transactionMeta.txParams.nonce,
+      to: transactionMeta.txParams.from,
+      value: "0x0"
+    } : {
+      from: transactionMeta.txParams.from,
+      gasLimit: transactionMeta.txParams.gas,
+      gasPrice: newGasPrice,
+      nonce: transactionMeta.txParams.nonce,
+      to: transactionMeta.txParams.from,
+      value: "0x0"
+    };
+    const unsignedEthTx = this.prepareUnsignedEthTx(
+      transactionMeta.chainId,
+      newTxParams
+    );
+    const signedTx = await this.sign(
+      unsignedEthTx,
+      transactionMeta.txParams.from
+    );
+    const rawTx = bufferToHex(signedTx.serialize());
+    const newFee = newTxParams.maxFeePerGas ?? newTxParams.gasPrice;
+    const oldFee = newTxParams.maxFeePerGas ? transactionMeta.txParams.maxFeePerGas : transactionMeta.txParams.gasPrice;
+    projectLogger("Submitting cancel transaction", {
+      oldFee,
+      newFee,
+      txParams: newTxParams
+    });
+    const ethQuery = __privateGet(this, _multichainTrackingHelper).getEthQuery({
+      networkClientId: transactionMeta.networkClientId,
+      chainId: transactionMeta.chainId
+    });
+    const hash = await this.publishTransactionForRetry(
+      ethQuery,
+      rawTx,
+      transactionMeta
+    );
+    const cancelTransactionMeta = {
+      actionId,
+      chainId: transactionMeta.chainId,
+      networkClientId: transactionMeta.networkClientId,
+      estimatedBaseFee,
+      hash,
+      id: random(),
+      originalGasEstimate: transactionMeta.txParams.gas,
+      status: "submitted" /* submitted */,
+      time: Date.now(),
+      type: "cancel" /* cancel */,
+      txParams: newTxParams
+    };
+    this.addMetadata(cancelTransactionMeta);
+    this.messagingSystem.publish(`${controllerName}:transactionApproved`, {
+      transactionMeta: cancelTransactionMeta,
+      actionId
+    });
+    this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {
+      transactionMeta: cancelTransactionMeta,
+      actionId
+    });
+    this.messagingSystem.publish(
+      `${controllerName}:transactionFinished`,
+      cancelTransactionMeta
+    );
+    __privateGet(this, _internalEvents).emit(
+      `${transactionMeta.id}:finished`,
+      cancelTransactionMeta
+    );
+  }
+  /**
+   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.
+   *
+   * @param transactionId - The ID of the transaction to speed up.
+   * @param gasValues - The gas values to use for the speed up transaction.
+   * @param options - The options for the speed up transaction.
+   * @param options.actionId - Unique ID to prevent duplicate requests
+   * @param options.estimatedBaseFee - The estimated base fee of the transaction.
+   */
+  async speedUpTransaction(transactionId, gasValues, {
+    actionId,
+    estimatedBaseFee
+  } = {}) {
+    if (this.getTransactionWithActionId(actionId)) {
+      return;
+    }
+    if (gasValues) {
+      gasValues = normalizeGasFeeValues(gasValues);
+      validateGasValues(gasValues);
+    }
+    projectLogger("Creating speed up transaction", transactionId, gasValues);
+    const transactionMeta = this.state.transactions.find(
+      ({ id }) => id === transactionId
+    );
+    if (!transactionMeta) {
+      return;
+    }
+    if (!this.sign) {
+      throw new Error("No sign method defined.");
+    }
+    const minGasPrice = getIncreasedPriceFromExisting(
+      transactionMeta.txParams.gasPrice,
+      SPEED_UP_RATE
+    );
+    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;
+    const newGasPrice = gasPriceFromValues && validateMinimumIncrease(gasPriceFromValues, minGasPrice) || minGasPrice;
+    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;
+    const minMaxFeePerGas = getIncreasedPriceFromExisting(
+      existingMaxFeePerGas,
+      SPEED_UP_RATE
+    );
+    const maxFeePerGasValues = isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;
+    const newMaxFeePerGas = maxFeePerGasValues && validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas) || existingMaxFeePerGas && minMaxFeePerGas;
+    const existingMaxPriorityFeePerGas = transactionMeta.txParams?.maxPriorityFeePerGas;
+    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(
+      existingMaxPriorityFeePerGas,
+      SPEED_UP_RATE
+    );
+    const maxPriorityFeePerGasValues = isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;
+    const newMaxPriorityFeePerGas = maxPriorityFeePerGasValues && validateMinimumIncrease(
+      maxPriorityFeePerGasValues,
+      minMaxPriorityFeePerGas
+    ) || existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas;
+    const txParams = newMaxFeePerGas && newMaxPriorityFeePerGas ? {
+      ...transactionMeta.txParams,
+      gasLimit: transactionMeta.txParams.gas,
+      maxFeePerGas: newMaxFeePerGas,
+      maxPriorityFeePerGas: newMaxPriorityFeePerGas,
+      type: "0x2" /* feeMarket */
+    } : {
+      ...transactionMeta.txParams,
+      gasLimit: transactionMeta.txParams.gas,
+      gasPrice: newGasPrice
+    };
+    const unsignedEthTx = this.prepareUnsignedEthTx(
+      transactionMeta.chainId,
+      txParams
+    );
+    const signedTx = await this.sign(
+      unsignedEthTx,
+      transactionMeta.txParams.from
+    );
+    const transactionMetaWithRsv = await this.updateTransactionMetaRSV(
+      transactionMeta,
+      signedTx
+    );
+    const rawTx = bufferToHex(signedTx.serialize());
+    const newFee = txParams.maxFeePerGas ?? txParams.gasPrice;
+    const oldFee = txParams.maxFeePerGas ? transactionMetaWithRsv.txParams.maxFeePerGas : transactionMetaWithRsv.txParams.gasPrice;
+    projectLogger("Submitting speed up transaction", { oldFee, newFee, txParams });
+    const ethQuery = __privateGet(this, _multichainTrackingHelper).getEthQuery({
+      networkClientId: transactionMeta.networkClientId,
+      chainId: transactionMeta.chainId
+    });
+    const hash = await this.publishTransactionForRetry(
+      ethQuery,
+      rawTx,
+      transactionMeta
+    );
+    const baseTransactionMeta = {
+      ...transactionMetaWithRsv,
+      estimatedBaseFee,
+      id: random(),
+      time: Date.now(),
+      hash,
+      actionId,
+      originalGasEstimate: transactionMeta.txParams.gas,
+      type: "retry" /* retry */,
+      originalType: transactionMeta.type
+    };
+    const newTransactionMeta = newMaxFeePerGas && newMaxPriorityFeePerGas ? {
+      ...baseTransactionMeta,
+      txParams: {
+        ...transactionMeta.txParams,
+        maxFeePerGas: newMaxFeePerGas,
+        maxPriorityFeePerGas: newMaxPriorityFeePerGas
+      }
+    } : {
+      ...baseTransactionMeta,
+      txParams: {
+        ...transactionMeta.txParams,
+        gasPrice: newGasPrice
+      }
+    };
+    this.addMetadata(newTransactionMeta);
+    this.messagingSystem.publish(`${controllerName}:transactionApproved`, {
+      transactionMeta: newTransactionMeta,
+      actionId
+    });
+    this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {
+      transactionMeta: newTransactionMeta,
+      actionId
+    });
+    this.messagingSystem.publish(
+      `${controllerName}:speedupTransactionAdded`,
+      newTransactionMeta
+    );
+  }
+  /**
+   * Estimates required gas for a given transaction.
+   *
+   * @param transaction - The transaction to estimate gas for.
+   * @param networkClientId - The network client id to use for the estimate.
+   * @returns The gas and gas price.
+   */
+  async estimateGas(transaction, networkClientId) {
+    const ethQuery = __privateGet(this, _multichainTrackingHelper).getEthQuery({
+      networkClientId
+    });
+    const { estimatedGas, simulationFails } = await estimateGas(
+      transaction,
+      ethQuery
+    );
+    return { gas: estimatedGas, simulationFails };
+  }
+  /**
+   * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.
+   *
+   * @param transaction - The transaction params to estimate gas for.
+   * @param multiplier - The multiplier to use for the gas buffer.
+   * @param networkClientId - The network client id to use for the estimate.
+   */
+  async estimateGasBuffered(transaction, multiplier, networkClientId) {
+    const ethQuery = __privateGet(this, _multichainTrackingHelper).getEthQuery({
+      networkClientId
+    });
+    const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(
+      transaction,
+      ethQuery
+    );
+    const gas = addGasBuffer(estimatedGas, blockGasLimit, multiplier);
+    return {
+      gas,
+      simulationFails
+    };
+  }
+  /**
+   * Updates an existing transaction in state.
+   *
+   * @param transactionMeta - The new transaction to store in state.
+   * @param note - A note or update reason to include in the transaction history.
+   */
+  updateTransaction(transactionMeta, note) {
+    const { id: transactionId } = transactionMeta;
+    __privateMethod(this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, { transactionId, note, skipHistory: this.isHistoryDisabled }, () => ({ ...transactionMeta }));
+  }
+  /**
+   * Update the security alert response for a transaction.
+   *
+   * @param transactionId - ID of the transaction.
+   * @param securityAlertResponse - The new security alert response for the transaction.
+   */
+  updateSecurityAlertResponse(transactionId, securityAlertResponse) {
+    if (!securityAlertResponse) {
+      throw new Error(
+        "updateSecurityAlertResponse: securityAlertResponse should not be null"
+      );
+    }
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update security alert response as no transaction metadata found`
+      );
+    }
+    const updatedTransactionMeta = {
+      ...transactionMeta,
+      securityAlertResponse
+    };
+    this.updateTransaction(
+      updatedTransactionMeta,
+      `${controllerName}:updatesecurityAlertResponse - securityAlertResponse updated`
+    );
+  }
+  /**
+   * Removes all transactions from state, optionally based on the current network.
+   *
+   * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the
+   * current network. If `true`, all transactions are wiped.
+   * @param address - If specified, only transactions originating from this address will be
+   * wiped on current network.
+   */
+  wipeTransactions(ignoreNetwork, address) {
+    if (ignoreNetwork && !address) {
+      this.update((state) => {
+        state.transactions = [];
+      });
+      return;
+    }
+    const currentChainId = this.getChainId();
+    const newTransactions = this.state.transactions.filter(
+      ({ chainId, txParams }) => {
+        const isMatchingNetwork = ignoreNetwork || chainId === currentChainId;
+        if (!isMatchingNetwork) {
+          return true;
+        }
+        const isMatchingAddress = !address || txParams.from?.toLowerCase() === address.toLowerCase();
+        return !isMatchingAddress;
+      }
+    );
+    this.update((state) => {
+      state.transactions = this.trimTransactionsForState(newTransactions);
+    });
+  }
+  /**
+   * Adds external provided transaction to state as confirmed transaction.
+   *
+   * @param transactionMeta - TransactionMeta to add transactions.
+   * @param transactionReceipt - TransactionReceipt of the external transaction.
+   * @param baseFeePerGas - Base fee per gas of the external transaction.
+   */
+  async confirmExternalTransaction(transactionMeta, transactionReceipt, baseFeePerGas) {
+    const newTransactionMeta = this.addExternalTransaction(transactionMeta);
+    try {
+      const transactionId = newTransactionMeta.id;
+      const updatedTransactionMeta = {
+        ...newTransactionMeta,
+        status: "confirmed" /* confirmed */,
+        txReceipt: transactionReceipt
+      };
+      if (baseFeePerGas) {
+        updatedTransactionMeta.baseFeePerGas = baseFeePerGas;
+      }
+      this.markNonceDuplicatesDropped(transactionId);
+      this.updateTransaction(
+        updatedTransactionMeta,
+        `${controllerName}:confirmExternalTransaction - Add external transaction`
+      );
+      this.onTransactionStatusChange(updatedTransactionMeta);
+      this.updatePostBalance(updatedTransactionMeta);
+      this.messagingSystem.publish(
+        `${controllerName}:transactionConfirmed`,
+        updatedTransactionMeta
+      );
+    } catch (error) {
+      console.error("Failed to confirm external transaction", error);
+    }
+  }
+  /**
+   * Append new send flow history to a transaction.
+   *
+   * @param transactionID - The ID of the transaction to update.
+   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.
+   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.
+   * @returns The updated transactionMeta.
+   */
+  updateTransactionSendFlowHistory(transactionID, currentSendFlowHistoryLength, sendFlowHistoryToAdd) {
+    if (this.isSendFlowHistoryDisabled) {
+      throw new Error(
+        "Send flow history is disabled for the current transaction controller"
+      );
+    }
+    const transactionMeta = this.getTransaction(transactionID);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update send flow history as no transaction metadata found`
+      );
+    }
+    validateIfTransactionUnapproved(
+      transactionMeta,
+      "updateTransactionSendFlowHistory"
+    );
+    const sendFlowHistory = transactionMeta.sendFlowHistory ?? [];
+    if (currentSendFlowHistoryLength === sendFlowHistory.length) {
+      const updatedTransactionMeta = {
+        ...transactionMeta,
+        sendFlowHistory: [...sendFlowHistory, ...sendFlowHistoryToAdd]
+      };
+      this.updateTransaction(
+        updatedTransactionMeta,
+        `${controllerName}:updateTransactionSendFlowHistory - sendFlowHistory updated`
+      );
+    }
+    return this.getTransaction(transactionID);
+  }
+  /**
+   * Update the gas values of a transaction.
+   *
+   * @param transactionId - The ID of the transaction to update.
+   * @param gasValues - Gas values to update.
+   * @param gasValues.gas - Same as transaction.gasLimit.
+   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.
+   * @param gasValues.gasPrice - Price per gas for legacy transactions.
+   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.
+   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.
+   * @param gasValues.estimateUsed - Which estimate level was used.
+   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.
+   * @param gasValues.defaultGasEstimates - The default estimate for gas.
+   * @param gasValues.originalGasEstimate - Original estimate for gas.
+   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.
+   * @param gasValues.userFeeLevel - Estimate level user selected.
+   * @returns The updated transactionMeta.
+   */
+  updateTransactionGasFees(transactionId, {
+    defaultGasEstimates,
+    estimateUsed,
+    estimateSuggested,
+    gas,
+    gasLimit,
+    gasPrice,
+    maxPriorityFeePerGas,
+    maxFeePerGas,
+    originalGasEstimate,
+    userEditedGasLimit,
+    userFeeLevel
+  }) {
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update transaction as no transaction metadata found`
+      );
+    }
+    validateIfTransactionUnapproved(
+      transactionMeta,
+      "updateTransactionGasFees"
+    );
+    let transactionGasFees = {
+      txParams: {
+        gas,
+        gasLimit,
+        gasPrice,
+        maxPriorityFeePerGas,
+        maxFeePerGas
+      },
+      defaultGasEstimates,
+      estimateUsed,
+      estimateSuggested,
+      originalGasEstimate,
+      userEditedGasLimit,
+      userFeeLevel
+      // TODO: Replace `any` with type
+      // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    };
+    transactionGasFees.txParams = pickBy(transactionGasFees.txParams);
+    transactionGasFees = pickBy(transactionGasFees);
+    const updatedMeta = merge({}, transactionMeta, transactionGasFees);
+    this.updateTransaction(
+      updatedMeta,
+      `${controllerName}:updateTransactionGasFees - gas values updated`
+    );
+    return this.getTransaction(transactionId);
+  }
+  /**
+   * Update the previous gas values of a transaction.
+   *
+   * @param transactionId - The ID of the transaction to update.
+   * @param previousGas - Previous gas values to update.
+   * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.
+   * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.
+   * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.
+   * @returns The updated transactionMeta.
+   */
+  updatePreviousGasParams(transactionId, {
+    gasLimit,
+    maxFeePerGas,
+    maxPriorityFeePerGas
+  }) {
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update transaction as no transaction metadata found`
+      );
+    }
+    validateIfTransactionUnapproved(transactionMeta, "updatePreviousGasParams");
+    const transactionPreviousGas = {
+      previousGas: {
+        gasLimit,
+        maxFeePerGas,
+        maxPriorityFeePerGas
+      }
+      // TODO: Replace `any` with type
+      // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    };
+    transactionPreviousGas.previousGas = pickBy(
+      transactionPreviousGas.previousGas
+    );
+    const updatedMeta = merge({}, transactionMeta, transactionPreviousGas);
+    this.updateTransaction(
+      updatedMeta,
+      `${controllerName}:updatePreviousGasParams - Previous gas values updated`
+    );
+    return this.getTransaction(transactionId);
+  }
+  async getNonceLock(address, networkClientId) {
+    return __privateGet(this, _multichainTrackingHelper).getNonceLock(
+      address,
+      networkClientId
+    );
+  }
+  /**
+   * Updates the editable parameters of a transaction.
+   *
+   * @param txId - The ID of the transaction to update.
+   * @param params - The editable parameters to update.
+   * @param params.data - Data to pass with the transaction.
+   * @param params.gas - Maximum number of units of gas to use for the transaction.
+   * @param params.gasPrice - Price per gas for legacy transactions.
+   * @param params.from - Address to send the transaction from.
+   * @param params.to - Address to send the transaction to.
+   * @param params.value - Value associated with the transaction.
+   * @returns The updated transaction metadata.
+   */
+  async updateEditableParams(txId, {
+    data,
+    gas,
+    gasPrice,
+    from,
+    to,
+    value
+  }) {
+    const transactionMeta = this.getTransaction(txId);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update editable params as no transaction metadata found`
+      );
+    }
+    validateIfTransactionUnapproved(transactionMeta, "updateEditableParams");
+    const editableParams = {
+      txParams: {
+        data,
+        from,
+        to,
+        value,
+        gas,
+        gasPrice
+      }
+    };
+    editableParams.txParams = pickBy(
+      editableParams.txParams
+    );
+    const updatedTransaction = merge({}, transactionMeta, editableParams);
+    const provider = __privateGet(this, _multichainTrackingHelper).getProvider({
+      chainId: transactionMeta.chainId,
+      networkClientId: transactionMeta.networkClientId
+    });
+    const ethQuery = new EthQuery(provider);
+    const { type } = await determineTransactionType(
+      updatedTransaction.txParams,
+      ethQuery
+    );
+    updatedTransaction.type = type;
+    await updateTransactionLayer1GasFee({
+      layer1GasFeeFlows: this.layer1GasFeeFlows,
+      provider,
+      transactionMeta: updatedTransaction
+    });
+    this.updateTransaction(
+      updatedTransaction,
+      `Update Editable Params for ${txId}`
+    );
+    return this.getTransaction(txId);
+  }
+  /**
+   * Signs and returns the raw transaction data for provided transaction params list.
+   *
+   * @param listOfTxParams - The list of transaction params to approve.
+   * @param opts - Options bag.
+   * @param opts.hasNonce - Whether the transactions already have a nonce.
+   * @returns The raw transactions.
+   */
+  async approveTransactionsWithSameNonce(listOfTxParams = [], { hasNonce } = {}) {
+    projectLogger("Approving transactions with same nonce", {
+      transactions: listOfTxParams
+    });
+    if (listOfTxParams.length === 0) {
+      return "";
+    }
+    const initialTx = listOfTxParams[0];
+    const common = this.getCommonConfiguration(initialTx.chainId);
+    let networkClientId;
+    try {
+      networkClientId = this.messagingSystem.call(
+        `NetworkController:findNetworkClientIdByChainId`,
+        initialTx.chainId
+      );
+    } catch (err) {
+      projectLogger("failed to find networkClientId from chainId", err);
+    }
+    const initialTxAsEthTx = TransactionFactory.fromTxData(initialTx, {
+      common
+    });
+    const initialTxAsSerializedHex = bufferToHex(initialTxAsEthTx.serialize());
+    if (this.inProcessOfSigning.has(initialTxAsSerializedHex)) {
+      return "";
+    }
+    this.inProcessOfSigning.add(initialTxAsSerializedHex);
+    let rawTransactions, nonceLock;
+    try {
+      const fromAddress = initialTx.from;
+      const requiresNonce = hasNonce !== true;
+      nonceLock = requiresNonce ? await this.getNonceLock(fromAddress, networkClientId) : void 0;
+      const nonce = nonceLock ? add0x(nonceLock.nextNonce.toString(16)) : initialTx.nonce;
+      if (nonceLock) {
+        projectLogger("Using nonce from nonce tracker", nonce, nonceLock.nonceDetails);
+      }
+      rawTransactions = await Promise.all(
+        listOfTxParams.map((txParams) => {
+          txParams.nonce = nonce;
+          return this.signExternalTransaction(txParams.chainId, txParams);
+        })
+      );
+    } catch (err) {
+      projectLogger("Error while signing transactions with same nonce", err);
+      throw err;
+    } finally {
+      nonceLock?.releaseLock();
+      this.inProcessOfSigning.delete(initialTxAsSerializedHex);
+    }
+    return rawTransactions;
+  }
+  /**
+   * Update a custodial transaction.
+   *
+   * @param transactionId - The ID of the transaction to update.
+   * @param options - The custodial transaction options to update.
+   * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.
+   * @param options.hash - The new hash value to be assigned.
+   * @param options.status - The new status value to be assigned.
+   */
+  updateCustodialTransaction(transactionId, {
+    errorMessage,
+    hash,
+    status
+  }) {
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update custodial transaction as no transaction metadata found`
+      );
+    }
+    if (!transactionMeta.custodyId) {
+      throw new Error("Transaction must be a custodian transaction");
+    }
+    if (status && ![
+      "submitted" /* submitted */,
+      "signed" /* signed */,
+      "failed" /* failed */
+    ].includes(status)) {
+      throw new Error(
+        `Cannot update custodial transaction with status: ${status}`
+      );
+    }
+    const updatedTransactionMeta = merge(
+      {},
+      transactionMeta,
+      pickBy({ hash, status })
+    );
+    if (status === "submitted" /* submitted */) {
+      updatedTransactionMeta.submittedTime = (/* @__PURE__ */ new Date()).getTime();
+    }
+    if (status === "failed" /* failed */) {
+      updatedTransactionMeta.error = normalizeTxError(new Error(errorMessage));
+    }
+    this.updateTransaction(
+      updatedTransactionMeta,
+      `${controllerName}:updateCustodialTransaction - Custodial transaction updated`
+    );
+    if (["submitted" /* submitted */, "failed" /* failed */].includes(
+      status
+    )) {
+      this.messagingSystem.publish(
+        `${controllerName}:transactionFinished`,
+        updatedTransactionMeta
+      );
+      __privateGet(this, _internalEvents).emit(
+        `${updatedTransactionMeta.id}:finished`,
+        updatedTransactionMeta
+      );
+    }
+  }
+  /**
+   * Creates approvals for all unapproved transactions persisted.
+   */
+  initApprovals() {
+    const chainId = this.getChainId();
+    const unapprovedTxs = this.state.transactions.filter(
+      (transaction) => transaction.status === "unapproved" /* unapproved */ && transaction.chainId === chainId && !transaction.isUserOperation
+    );
+    for (const txMeta of unapprovedTxs) {
+      this.processApproval(txMeta, {
+        shouldShowRequest: false
+      }).catch((error) => {
+        if (error?.code === errorCodes.provider.userRejectedRequest) {
+          return;
+        }
+        console.error("Error during persisted transaction approval", error);
+      });
+    }
+  }
+  /**
+   * Search transaction metadata for matching entries.
+   *
+   * @param opts - Options bag.
+   * @param opts.searchCriteria - An object containing values or functions for transaction properties to filter transactions with.
+   * @param opts.initialList - The transactions to search. Defaults to the current state.
+   * @param opts.filterToCurrentNetwork - Whether to filter the results to the current network. Defaults to true.
+   * @param opts.limit - The maximum number of transactions to return. No limit by default.
+   * @returns An array of transactions matching the provided options.
+   */
+  getTransactions({
+    searchCriteria = {},
+    initialList,
+    filterToCurrentNetwork = true,
+    limit
+  } = {}) {
+    const chainId = this.getChainId();
+    const predicateMethods = mapValues(searchCriteria, (predicate) => {
+      return typeof predicate === "function" ? predicate : (
+        // TODO: Replace `any` with type
+        // eslint-disable-next-line @typescript-eslint/no-explicit-any
+        (v) => v === predicate
+      );
+    });
+    const transactionsToFilter = initialList ?? this.state.transactions;
+    const filteredTransactions = sortBy(
+      pickBy(transactionsToFilter, (transaction) => {
+        if (filterToCurrentNetwork && transaction.chainId !== chainId) {
+          return false;
+        }
+        for (const [key, predicate] of Object.entries(predicateMethods)) {
+          if (key in transaction.txParams) {
+            if (predicate(transaction.txParams[key]) === false) {
+              return false;
+            }
+          } else if (predicate(transaction[key]) === false) {
+            return false;
+          }
+        }
+        return true;
+      }),
+      "time"
+    );
+    if (limit !== void 0) {
+      const nonces = /* @__PURE__ */ new Set();
+      const txs = [];
+      for (let i = filteredTransactions.length - 1; i > -1; i--) {
+        const txMeta = filteredTransactions[i];
+        const { nonce } = txMeta.txParams;
+        if (!nonces.has(nonce)) {
+          if (nonces.size < limit) {
+            nonces.add(nonce);
+          } else {
+            continue;
+          }
+        }
+        txs.unshift(txMeta);
+      }
+      return txs;
+    }
+    return filteredTransactions;
+  }
+  async estimateGasFee({
+    transactionParams,
+    chainId,
+    networkClientId: requestNetworkClientId
+  }) {
+    const networkClientId = __privateMethod(this, _getNetworkClientId, getNetworkClientId_fn).call(this, {
+      networkClientId: requestNetworkClientId,
+      chainId
+    });
+    const transactionMeta = {
+      txParams: transactionParams,
+      chainId,
+      networkClientId
+    };
+    const gasFeeFlow = getGasFeeFlow(
+      transactionMeta,
+      this.gasFeeFlows
+    );
+    const ethQuery = __privateGet(this, _multichainTrackingHelper).getEthQuery({
+      networkClientId,
+      chainId
+    });
+    const gasFeeControllerData = await this.getGasFeeEstimates({
+      networkClientId
+    });
+    return gasFeeFlow.getGasFees({
+      ethQuery,
+      gasFeeControllerData,
+      transactionMeta
+    });
+  }
+  /**
+   * Determine the layer 1 gas fee for the given transaction parameters.
+   *
+   * @param request - The request object.
+   * @param request.transactionParams - The transaction parameters to estimate the layer 1 gas fee for.
+   * @param request.chainId - The ID of the chain where the transaction will be executed.
+   * @param request.networkClientId - The ID of a specific network client to process the transaction.
+   */
+  async getLayer1GasFee({
+    transactionParams,
+    chainId,
+    networkClientId
+  }) {
+    const provider = __privateGet(this, _multichainTrackingHelper).getProvider({
+      networkClientId,
+      chainId
+    });
+    return await getTransactionLayer1GasFee({
+      layer1GasFeeFlows: this.layer1GasFeeFlows,
+      provider,
+      transactionMeta: {
+        txParams: transactionParams,
+        chainId
+      }
+    });
+  }
+  async signExternalTransaction(chainId, transactionParams) {
+    if (!this.sign) {
+      throw new Error("No sign method defined.");
+    }
+    const normalizedTransactionParams = normalizeTransactionParams(transactionParams);
+    const type = isEIP1559Transaction(normalizedTransactionParams) ? "0x2" /* feeMarket */ : "0x0" /* legacy */;
+    const updatedTransactionParams = {
+      ...normalizedTransactionParams,
+      type,
+      gasLimit: normalizedTransactionParams.gas,
+      chainId
+    };
+    const { from } = updatedTransactionParams;
+    const common = this.getCommonConfiguration(chainId);
+    const unsignedTransaction = TransactionFactory.fromTxData(
+      updatedTransactionParams,
+      { common }
+    );
+    const signedTransaction = await this.sign(unsignedTransaction, from);
+    const rawTransaction = bufferToHex(signedTransaction.serialize());
+    return rawTransaction;
+  }
+  /**
+   * Removes unapproved transactions from state.
+   */
+  clearUnapprovedTransactions() {
+    const transactions = this.state.transactions.filter(
+      ({ status }) => status !== "unapproved" /* unapproved */
+    );
+    this.update((state) => {
+      state.transactions = this.trimTransactionsForState(transactions);
+    });
+  }
+  /**
+   * Stop the signing process for a specific transaction.
+   * Throws an error causing the transaction status to be set to failed.
+   * @param transactionId - The ID of the transaction to stop signing.
+   */
+  abortTransactionSigning(transactionId) {
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      throw new Error(`Cannot abort signing as no transaction metadata found`);
+    }
+    const abortCallback = this.signAbortCallbacks.get(transactionId);
+    if (!abortCallback) {
+      throw new Error(
+        `Cannot abort signing as transaction is not waiting for signing`
+      );
+    }
+    abortCallback();
+    this.signAbortCallbacks.delete(transactionId);
+  }
+  addMetadata(transactionMeta) {
+    this.update((state) => {
+      state.transactions = this.trimTransactionsForState([
+        ...state.transactions,
+        transactionMeta
+      ]);
+    });
+  }
+  async updateGasProperties(transactionMeta) {
+    const isEIP1559Compatible = await this.getEIP1559Compatibility(transactionMeta.networkClientId) && transactionMeta.txParams.type !== "0x0" /* legacy */;
+    const { networkClientId, chainId } = transactionMeta;
+    const isCustomNetwork = __privateMethod(this, _isCustomNetwork, isCustomNetwork_fn).call(this, networkClientId);
+    const ethQuery = __privateGet(this, _multichainTrackingHelper).getEthQuery({
+      networkClientId,
+      chainId
+    });
+    const provider = __privateGet(this, _multichainTrackingHelper).getProvider({
+      networkClientId,
+      chainId
+    });
+    await updateGas({
+      ethQuery,
+      chainId,
+      isCustomNetwork,
+      txMeta: transactionMeta
+    });
+    await updateGasFees({
+      eip1559: isEIP1559Compatible,
+      ethQuery,
+      gasFeeFlows: this.gasFeeFlows,
+      getGasFeeEstimates: this.getGasFeeEstimates,
+      getSavedGasFees: this.getSavedGasFees.bind(this),
+      txMeta: transactionMeta
+    });
+    await updateTransactionLayer1GasFee({
+      layer1GasFeeFlows: this.layer1GasFeeFlows,
+      provider,
+      transactionMeta
+    });
+  }
+  onBootCleanup() {
+    this.submitApprovedTransactions();
+  }
+  /**
+   * Force submit approved transactions for all chains.
+   */
+  submitApprovedTransactions() {
+    const approvedTransactions = this.state.transactions.filter(
+      (transaction) => transaction.status === "approved" /* approved */
+    );
+    for (const transactionMeta of approvedTransactions) {
+      if (this.beforeApproveOnInit(transactionMeta)) {
+        this.approveTransaction(transactionMeta.id).catch((error) => {
+          console.error("Error while submitting persisted transaction", error);
+        });
+      }
+    }
+  }
+  async processApproval(transactionMeta, {
+    isExisting = false,
+    requireApproval,
+    shouldShowRequest = true,
+    actionId
+  }) {
+    const transactionId = transactionMeta.id;
+    let resultCallbacks;
+    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);
+    const finishedPromise = isCompleted ? Promise.resolve(meta) : this.waitForTransactionFinished(transactionId);
+    if (meta && !isExisting && !isCompleted) {
+      try {
+        if (requireApproval !== false) {
+          const acceptResult = await this.requestApproval(transactionMeta, {
+            shouldShowRequest
+          });
+          resultCallbacks = acceptResult.resultCallbacks;
+          const approvalValue = acceptResult.value;
+          const updatedTransaction = approvalValue?.txMeta;
+          if (updatedTransaction) {
+            projectLogger("Updating transaction with approval data", {
+              customNonce: updatedTransaction.customNonceValue,
+              params: updatedTransaction.txParams
+            });
+            this.updateTransaction(
+              updatedTransaction,
+              "TransactionController#processApproval - Updated with approval data"
+            );
+          }
+        }
+        const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);
+        if (!isTxCompleted) {
+          const approvalResult = await this.approveTransaction(transactionId);
+          if (approvalResult === "skipped-via-before-publish-hook" /* SkippedViaBeforePublishHook */ && resultCallbacks) {
+            resultCallbacks.success();
+          }
+          const updatedTransactionMeta = this.getTransaction(
+            transactionId
+          );
+          this.messagingSystem.publish(
+            `${controllerName}:transactionApproved`,
+            {
+              transactionMeta: updatedTransactionMeta,
+              actionId
+            }
+          );
+        }
+      } catch (error) {
+        const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);
+        if (!isTxCompleted) {
+          if (error?.code === errorCodes.provider.userRejectedRequest) {
+            this.cancelTransaction(transactionId, actionId);
+            throw providerErrors.userRejectedRequest(
+              "MetaMask Tx Signature: User denied transaction signature."
+            );
+          } else {
+            this.failTransaction(meta, error, actionId);
+          }
+        }
+      }
+    }
+    const finalMeta = await finishedPromise;
+    switch (finalMeta?.status) {
+      case "failed" /* failed */:
+        resultCallbacks?.error(finalMeta.error);
+        throw rpcErrors.internal(finalMeta.error.message);
+      case "submitted" /* submitted */:
+        resultCallbacks?.success();
+        return finalMeta.hash;
+      default:
+        const internalError = rpcErrors.internal(
+          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(
+            finalMeta || transactionId
+          )}`
+        );
+        resultCallbacks?.error(internalError);
+        throw internalError;
+    }
+  }
+  /**
+   * Approves a transaction and updates it's status in state. If this is not a
+   * retry transaction, a nonce will be generated. The transaction is signed
+   * using the sign configuration property, then published to the blockchain.
+   * A `<tx.id>:finished` hub event is fired after success or failure.
+   *
+   * @param transactionId - The ID of the transaction to approve.
+   */
+  async approveTransaction(transactionId) {
+    const { transactions } = this.state;
+    const releaseLock = await this.mutex.acquire();
+    const index = transactions.findIndex(({ id }) => transactionId === id);
+    const transactionMeta = transactions[index];
+    const updatedTransactionMeta = cloneDeep(transactionMeta);
+    const {
+      txParams: { from },
+      networkClientId
+    } = transactionMeta;
+    let releaseNonceLock;
+    try {
+      if (!this.sign) {
+        releaseLock();
+        this.failTransaction(
+          transactionMeta,
+          new Error("No sign method defined.")
+        );
+        return "not-approved" /* NotApproved */;
+      } else if (!transactionMeta.chainId) {
+        releaseLock();
+        this.failTransaction(transactionMeta, new Error("No chainId defined."));
+        return "not-approved" /* NotApproved */;
+      }
+      if (this.inProcessOfSigning.has(transactionId)) {
+        projectLogger("Skipping approval as signing in progress", transactionId);
+        return "not-approved" /* NotApproved */;
+      }
+      const [nonce, releaseNonce] = await getNextNonce(
+        transactionMeta,
+        (address) => __privateGet(this, _multichainTrackingHelper).getNonceLock(address, networkClientId)
+      );
+      releaseNonceLock = releaseNonce;
+      updatedTransactionMeta.status = "approved" /* approved */;
+      updatedTransactionMeta.txParams = {
+        ...updatedTransactionMeta.txParams,
+        nonce,
+        chainId: transactionMeta.chainId
+      };
+      const baseTxParams = {
+        ...updatedTransactionMeta.txParams,
+        gasLimit: updatedTransactionMeta.txParams.gas
+      };
+      this.updateTransaction(
+        updatedTransactionMeta,
+        "TransactionController#approveTransaction - Transaction approved"
+      );
+      this.onTransactionStatusChange(updatedTransactionMeta);
+      const isEIP1559 = isEIP1559Transaction(updatedTransactionMeta.txParams);
+      const txParams = isEIP1559 ? {
+        ...baseTxParams,
+        estimatedBaseFee: updatedTransactionMeta.txParams.estimatedBaseFee,
+        type: "0x2" /* feeMarket */
+      } : baseTxParams;
+      const rawTx = await this.signTransaction(
+        updatedTransactionMeta,
+        txParams
+      );
+      if (!this.beforePublish(updatedTransactionMeta)) {
+        projectLogger("Skipping publishing transaction based on hook");
+        this.messagingSystem.publish(
+          `${controllerName}:transactionPublishingSkipped`,
+          updatedTransactionMeta
+        );
+        return "skipped-via-before-publish-hook" /* SkippedViaBeforePublishHook */;
+      }
+      if (!rawTx) {
+        return "not-approved" /* NotApproved */;
+      }
+      const ethQuery = __privateGet(this, _multichainTrackingHelper).getEthQuery({
+        networkClientId: transactionMeta.networkClientId,
+        chainId: transactionMeta.chainId
+      });
+      if (transactionMeta.type === "swap" /* swap */) {
+        projectLogger("Determining pre-transaction balance");
+        const preTxBalance = await query(ethQuery, "getBalance", [from]);
+        updatedTransactionMeta.preTxBalance = preTxBalance;
+        projectLogger(
+          "Updated pre-transaction balance",
+          updatedTransactionMeta.preTxBalance
+        );
+      }
+      projectLogger("Publishing transaction", txParams);
+      let { transactionHash: hash } = await this.publish(
+        updatedTransactionMeta,
+        rawTx
+      );
+      if (hash === void 0) {
+        hash = await this.publishTransaction(ethQuery, rawTx);
+      }
+      projectLogger("Publish successful", hash);
+      updatedTransactionMeta.hash = hash;
+      updatedTransactionMeta.status = "submitted" /* submitted */;
+      updatedTransactionMeta.submittedTime = (/* @__PURE__ */ new Date()).getTime();
+      this.updateTransaction(
+        updatedTransactionMeta,
+        "TransactionController#approveTransaction - Transaction submitted"
+      );
+      this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {
+        transactionMeta: updatedTransactionMeta
+      });
+      this.messagingSystem.publish(
+        `${controllerName}:transactionFinished`,
+        updatedTransactionMeta
+      );
+      __privateGet(this, _internalEvents).emit(
+        `${updatedTransactionMeta.id}:finished`,
+        updatedTransactionMeta
+      );
+      this.onTransactionStatusChange(updatedTransactionMeta);
+      return "approved" /* Approved */;
+    } catch (error) {
+      this.failTransaction(transactionMeta, error);
+      return "not-approved" /* NotApproved */;
+    } finally {
+      this.inProcessOfSigning.delete(transactionId);
+      releaseNonceLock?.();
+      releaseLock();
+    }
+  }
+  async publishTransaction(ethQuery, rawTransaction) {
+    return await query(ethQuery, "sendRawTransaction", [rawTransaction]);
+  }
+  /**
+   * Cancels a transaction based on its ID by setting its status to "rejected"
+   * and emitting a `<tx.id>:finished` hub event.
+   *
+   * @param transactionId - The ID of the transaction to cancel.
+   * @param actionId - The actionId passed from UI
+   */
+  cancelTransaction(transactionId, actionId) {
+    const transactionMeta = this.state.transactions.find(
+      ({ id }) => id === transactionId
+    );
+    if (!transactionMeta) {
+      return;
+    }
+    this.update((state) => {
+      const transactions = state.transactions.filter(
+        ({ id }) => id !== transactionId
+      );
+      state.transactions = this.trimTransactionsForState(transactions);
+    });
+    const updatedTransactionMeta = {
+      ...transactionMeta,
+      status: "rejected" /* rejected */
+    };
+    this.messagingSystem.publish(
+      `${controllerName}:transactionFinished`,
+      updatedTransactionMeta
+    );
+    __privateGet(this, _internalEvents).emit(
+      `${transactionMeta.id}:finished`,
+      updatedTransactionMeta
+    );
+    this.messagingSystem.publish(`${controllerName}:transactionRejected`, {
+      transactionMeta: updatedTransactionMeta,
+      actionId
+    });
+    this.onTransactionStatusChange(updatedTransactionMeta);
+  }
+  /**
+   * Trim the amount of transactions that are set on the state. Checks
+   * if the length of the tx history is longer then desired persistence
+   * limit and then if it is removes the oldest confirmed or rejected tx.
+   * Pending or unapproved transactions will not be removed by this
+   * operation. For safety of presenting a fully functional transaction UI
+   * representation, this function will not break apart transactions with the
+   * same nonce, created on the same day, per network. Not accounting for
+   * transactions of the same nonce, same day and network combo can result in
+   * confusing or broken experiences in the UI.
+   *
+   * @param transactions - The transactions to be applied to the state.
+   * @returns The trimmed list of transactions.
+   */
+  trimTransactionsForState(transactions) {
+    const nonceNetworkSet = /* @__PURE__ */ new Set();
+    const txsToKeep = [...transactions].sort((a, b) => a.time > b.time ? -1 : 1).filter((tx) => {
+      const { chainId, status, txParams, time } = tx;
+      if (txParams) {
+        const key = `${String(txParams.nonce)}-${convertHexToDecimal(
+          chainId
+        )}-${new Date(time).toDateString()}`;
+        if (nonceNetworkSet.has(key)) {
+          return true;
+        } else if (nonceNetworkSet.size < __privateGet(this, _transactionHistoryLimit) || !this.isFinalState(status)) {
+          nonceNetworkSet.add(key);
+          return true;
+        }
+      }
+      return false;
+    });
+    txsToKeep.reverse();
+    return txsToKeep;
+  }
+  /**
+   * Determines if the transaction is in a final state.
+   *
+   * @param status - The transaction status.
+   * @returns Whether the transaction is in a final state.
+   */
+  isFinalState(status) {
+    return status === "rejected" /* rejected */ || status === "confirmed" /* confirmed */ || status === "failed" /* failed */;
+  }
+  /**
+   * Whether the transaction has at least completed all local processing.
+   *
+   * @param status - The transaction status.
+   * @returns Whether the transaction is in a final state.
+   */
+  isLocalFinalState(status) {
+    return [
+      "confirmed" /* confirmed */,
+      "failed" /* failed */,
+      "rejected" /* rejected */,
+      "submitted" /* submitted */
+    ].includes(status);
+  }
+  async requestApproval(txMeta, { shouldShowRequest }) {
+    const id = this.getApprovalId(txMeta);
+    const { origin } = txMeta;
+    const type = ApprovalType.Transaction;
+    const requestData = { txId: txMeta.id };
+    return await this.messagingSystem.call(
+      "ApprovalController:addRequest",
+      {
+        id,
+        origin: origin || ORIGIN_METAMASK,
+        type,
+        requestData,
+        expectsResult: true
+      },
+      shouldShowRequest
+    );
+  }
+  getTransaction(transactionId) {
+    const { transactions } = this.state;
+    return transactions.find(({ id }) => id === transactionId);
+  }
+  getApprovalId(txMeta) {
+    return String(txMeta.id);
+  }
+  isTransactionCompleted(transactionId) {
+    const transaction = this.getTransaction(transactionId);
+    if (!transaction) {
+      return { meta: void 0, isCompleted: false };
+    }
+    const isCompleted = this.isLocalFinalState(transaction.status);
+    return { meta: transaction, isCompleted };
+  }
+  getChainId(networkClientId) {
+    const globalChainId = __privateMethod(this, _getGlobalChainId, getGlobalChainId_fn).call(this);
+    const globalNetworkClientId = __privateMethod(this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);
+    if (!networkClientId || networkClientId === globalNetworkClientId) {
+      return globalChainId;
+    }
+    return this.messagingSystem.call(
+      `NetworkController:getNetworkClientById`,
+      networkClientId
+    ).configuration.chainId;
+  }
+  prepareUnsignedEthTx(chainId, txParams) {
+    return TransactionFactory.fromTxData(txParams, {
+      freeze: false,
+      common: this.getCommonConfiguration(chainId)
+    });
+  }
+  /**
+   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for
+   * specifying which chain, network, hardfork and EIPs to support for
+   * a transaction. By referencing this configuration, and analyzing the fields
+   * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718
+   * transaction type to use.
+   *
+   * @param chainId - The chainId to use for the configuration.
+   * @returns common configuration object
+   */
+  getCommonConfiguration(chainId) {
+    const customChainParams = {
+      chainId: parseInt(chainId, 16),
+      defaultHardfork: HARDFORK
+    };
+    return Common.custom(customChainParams);
+  }
+  onIncomingTransactions({
+    added,
+    updated
+  }) {
+    this.update((state) => {
+      const { transactions: currentTransactions } = state;
+      const updatedTransactions = [
+        ...added,
+        ...currentTransactions.map((originalTransaction) => {
+          const updatedTransaction = updated.find(
+            ({ hash }) => hash === originalTransaction.hash
+          );
+          return updatedTransaction ?? originalTransaction;
+        })
+      ];
+      state.transactions = this.trimTransactionsForState(updatedTransactions);
+    });
+  }
+  onUpdatedLastFetchedBlockNumbers({
+    lastFetchedBlockNumbers,
+    blockNumber
+  }) {
+    this.update((state) => {
+      state.lastFetchedBlockNumbers = lastFetchedBlockNumbers;
+    });
+    this.messagingSystem.publish(
+      `${controllerName}:incomingTransactionBlockReceived`,
+      blockNumber
+    );
+  }
+  generateDappSuggestedGasFees(txParams, origin) {
+    if (!origin || origin === ORIGIN_METAMASK) {
+      return void 0;
+    }
+    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;
+    if (gasPrice === void 0 && maxFeePerGas === void 0 && maxPriorityFeePerGas === void 0 && gas === void 0) {
+      return void 0;
+    }
+    const dappSuggestedGasFees = {};
+    if (gasPrice !== void 0) {
+      dappSuggestedGasFees.gasPrice = gasPrice;
+    } else if (maxFeePerGas !== void 0 || maxPriorityFeePerGas !== void 0) {
+      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;
+      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;
+    }
+    if (gas !== void 0) {
+      dappSuggestedGasFees.gas = gas;
+    }
+    return dappSuggestedGasFees;
+  }
+  /**
+   * Validates and adds external provided transaction to state.
+   *
+   * @param transactionMeta - Nominated external transaction to be added to state.
+   * @returns The new transaction.
+   */
+  addExternalTransaction(transactionMeta) {
+    const { chainId } = transactionMeta;
+    const { transactions } = this.state;
+    const fromAddress = transactionMeta?.txParams?.from;
+    const sameFromAndNetworkTransactions = transactions.filter(
+      (transaction) => transaction.txParams.from === fromAddress && transaction.chainId === chainId
+    );
+    const confirmedTxs = sameFromAndNetworkTransactions.filter(
+      (transaction) => transaction.status === "confirmed" /* confirmed */
+    );
+    const pendingTxs = sameFromAndNetworkTransactions.filter(
+      (transaction) => transaction.status === "submitted" /* submitted */
+    );
+    validateConfirmedExternalTransaction(
+      transactionMeta,
+      confirmedTxs,
+      pendingTxs
+    );
+    const newTransactionMeta = (transactionMeta.history ?? []).length === 0 && !this.isHistoryDisabled ? addInitialHistorySnapshot(transactionMeta) : transactionMeta;
+    this.update((state) => {
+      state.transactions = this.trimTransactionsForState([
+        ...state.transactions,
+        newTransactionMeta
+      ]);
+    });
+    return newTransactionMeta;
+  }
+  /**
+   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions
+   * in the transactions have the same nonce.
+   *
+   * @param transactionId - Used to identify original transaction.
+   */
+  markNonceDuplicatesDropped(transactionId) {
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      return;
+    }
+    const nonce = transactionMeta.txParams?.nonce;
+    const from = transactionMeta.txParams?.from;
+    const { chainId } = transactionMeta;
+    const sameNonceTransactions = this.state.transactions.filter(
+      (transaction) => transaction.id !== transactionId && transaction.txParams.from === from && transaction.txParams.nonce === nonce && transaction.chainId === chainId && transaction.type !== "incoming" /* incoming */
+    );
+    const sameNonceTransactionIds = sameNonceTransactions.map(
+      (transaction) => transaction.id
+    );
+    if (sameNonceTransactions.length === 0) {
+      return;
+    }
+    this.update((state) => {
+      for (const transaction of state.transactions) {
+        if (sameNonceTransactionIds.includes(transaction.id)) {
+          transaction.replacedBy = transactionMeta?.hash;
+          transaction.replacedById = transactionMeta?.id;
+        }
+      }
+    });
+    for (const transaction of this.state.transactions) {
+      if (sameNonceTransactionIds.includes(transaction.id) && transaction.status !== "failed" /* failed */) {
+        this.setTransactionStatusDropped(transaction);
+      }
+    }
+  }
+  /**
+   * Method to set transaction status to dropped.
+   *
+   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.
+   */
+  setTransactionStatusDropped(transactionMeta) {
+    const updatedTransactionMeta = {
+      ...transactionMeta,
+      status: "dropped" /* dropped */
+    };
+    this.messagingSystem.publish(`${controllerName}:transactionDropped`, {
+      transactionMeta: updatedTransactionMeta
+    });
+    this.updateTransaction(
+      updatedTransactionMeta,
+      "TransactionController#setTransactionStatusDropped - Transaction dropped"
+    );
+    this.onTransactionStatusChange(updatedTransactionMeta);
+  }
+  /**
+   * Get transaction with provided actionId.
+   *
+   * @param actionId - Unique ID to prevent duplicate requests
+   * @returns the filtered transaction
+   */
+  getTransactionWithActionId(actionId) {
+    return this.state.transactions.find(
+      (transaction) => actionId && transaction.actionId === actionId
+    );
+  }
+  async waitForTransactionFinished(transactionId) {
+    return new Promise((resolve) => {
+      __privateGet(this, _internalEvents).once(`${transactionId}:finished`, (txMeta) => {
+        resolve(txMeta);
+      });
+    });
+  }
+  /**
+   * Updates the r, s, and v properties of a TransactionMeta object
+   * with values from a signed transaction.
+   *
+   * @param transactionMeta - The TransactionMeta object to update.
+   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.
+   */
+  async updateTransactionMetaRSV(transactionMeta, signedTx) {
+    const transactionMetaWithRsv = cloneDeep(transactionMeta);
+    for (const key of ["r", "s", "v"]) {
+      const value = signedTx[key];
+      if (value === void 0 || value === null) {
+        continue;
+      }
+      transactionMetaWithRsv[key] = add0x(value.toString(16));
+    }
+    return transactionMetaWithRsv;
+  }
+  async getEIP1559Compatibility(networkClientId) {
+    const currentNetworkIsEIP1559Compatible = await this.getCurrentNetworkEIP1559Compatibility(networkClientId);
+    const currentAccountIsEIP1559Compatible = await this.getCurrentAccountEIP1559Compatibility();
+    return currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible;
+  }
+  async signTransaction(transactionMeta, txParams) {
+    projectLogger("Signing transaction", txParams);
+    const unsignedEthTx = this.prepareUnsignedEthTx(
+      transactionMeta.chainId,
+      txParams
+    );
+    this.inProcessOfSigning.add(transactionMeta.id);
+    const signedTx = await new Promise((resolve, reject) => {
+      this.sign?.(
+        unsignedEthTx,
+        txParams.from,
+        ...this.getAdditionalSignArguments(transactionMeta)
+      ).then(resolve, reject);
+      this.signAbortCallbacks.set(
+        transactionMeta.id,
+        () => reject(new Error("Signing aborted by user"))
+      );
+    });
+    this.signAbortCallbacks.delete(transactionMeta.id);
+    if (!signedTx) {
+      projectLogger("Skipping signed status as no signed transaction");
+      return void 0;
+    }
+    if (!this.afterSign(transactionMeta, signedTx)) {
+      this.updateTransaction(
+        transactionMeta,
+        "TransactionController#signTransaction - Update after sign"
+      );
+      projectLogger("Skipping signed status based on hook");
+      return void 0;
+    }
+    const transactionMetaWithRsv = {
+      ...await this.updateTransactionMetaRSV(transactionMeta, signedTx),
+      status: "signed" /* signed */
+    };
+    this.updateTransaction(
+      transactionMetaWithRsv,
+      "TransactionController#approveTransaction - Transaction signed"
+    );
+    this.onTransactionStatusChange(transactionMetaWithRsv);
+    const rawTx = bufferToHex(signedTx.serialize());
+    const transactionMetaWithRawTx = merge({}, transactionMetaWithRsv, {
+      rawTx
+    });
+    this.updateTransaction(
+      transactionMetaWithRawTx,
+      "TransactionController#approveTransaction - RawTransaction added"
+    );
+    return rawTx;
+  }
+  onTransactionStatusChange(transactionMeta) {
+    this.messagingSystem.publish(`${controllerName}:transactionStatusUpdated`, {
+      transactionMeta
+    });
+  }
+  getNonceTrackerTransactions(status, address, chainId = this.getChainId()) {
+    return getAndFormatTransactionsForNonceTracker(
+      chainId,
+      address,
+      status,
+      this.state.transactions
+    );
+  }
+  onConfirmedTransaction(transactionMeta) {
+    projectLogger("Processing confirmed transaction", transactionMeta.id);
+    this.markNonceDuplicatesDropped(transactionMeta.id);
+    this.messagingSystem.publish(
+      `${controllerName}:transactionConfirmed`,
+      transactionMeta
+    );
+    this.onTransactionStatusChange(transactionMeta);
+    this.updatePostBalance(transactionMeta);
+  }
+  async updatePostBalance(transactionMeta) {
+    try {
+      if (transactionMeta.type !== "swap" /* swap */) {
+        return;
+      }
+      const ethQuery = __privateGet(this, _multichainTrackingHelper).getEthQuery({
+        networkClientId: transactionMeta.networkClientId,
+        chainId: transactionMeta.chainId
+      });
+      const { updatedTransactionMeta, approvalTransactionMeta } = await updatePostTransactionBalance(transactionMeta, {
+        ethQuery,
+        getTransaction: this.getTransaction.bind(this),
+        updateTransaction: this.updateTransaction.bind(this)
+      });
+      this.messagingSystem.publish(
+        `${controllerName}:postTransactionBalanceUpdated`,
+        {
+          transactionMeta: updatedTransactionMeta,
+          approvalTransactionMeta
+        }
+      );
+    } catch (error) {
+      projectLogger("Error while updating post transaction balance", error);
+    }
+  }
+  async publishTransactionForRetry(ethQuery, rawTx, transactionMeta) {
+    try {
+      const hash = await this.publishTransaction(ethQuery, rawTx);
+      return hash;
+    } catch (error) {
+      if (this.isTransactionAlreadyConfirmedError(error)) {
+        await this.pendingTransactionTracker.forceCheckTransaction(
+          transactionMeta
+        );
+        throw new Error("Previous transaction is already confirmed");
+      }
+      throw error;
+    }
+  }
+  /**
+   * Ensures that error is a nonce issue
+   *
+   * @param error - The error to check
+   * @returns Whether or not the error is a nonce issue
+   */
+  // TODO: Replace `any` with type
+  // Some networks are returning original error in the data field
+  // eslint-disable-next-line @typescript-eslint/no-explicit-any
+  isTransactionAlreadyConfirmedError(error) {
+    return error?.message?.includes("nonce too low") || error?.data?.message?.includes("nonce too low");
+  }
+};
+_internalEvents = new WeakMap();
+_incomingTransactionOptions = new WeakMap();
+_pendingTransactionOptions = new WeakMap();
+_transactionHistoryLimit = new WeakMap();
+_isSimulationEnabled = new WeakMap();
+_testGasFeeFlows = new WeakMap();
+_multichainTrackingHelper = new WeakMap();
+_createNonceTracker = new WeakSet();
+createNonceTracker_fn = function({
+  provider,
+  blockTracker,
+  chainId
+}) {
+  return new NonceTracker({
+    // TODO: Replace `any` with type
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    provider,
+    blockTracker,
+    getPendingTransactions: __privateMethod(this, _getNonceTrackerPendingTransactions, getNonceTrackerPendingTransactions_fn).bind(
+      this,
+      chainId
+    ),
+    getConfirmedTransactions: this.getNonceTrackerTransactions.bind(
+      this,
+      "confirmed" /* confirmed */
+    )
+  });
+};
+_createIncomingTransactionHelper = new WeakSet();
+createIncomingTransactionHelper_fn = function({
+  blockTracker,
+  etherscanRemoteTransactionSource,
+  chainId
+}) {
+  const incomingTransactionHelper = new IncomingTransactionHelper({
+    blockTracker,
+    getCurrentAccount: this.getSelectedAddress,
+    getLastFetchedBlockNumbers: () => this.state.lastFetchedBlockNumbers,
+    getChainId: chainId ? () => chainId : this.getChainId.bind(this),
+    isEnabled: __privateGet(this, _incomingTransactionOptions).isEnabled,
+    queryEntireHistory: __privateGet(this, _incomingTransactionOptions).queryEntireHistory,
+    remoteTransactionSource: etherscanRemoteTransactionSource,
+    transactionLimit: __privateGet(this, _transactionHistoryLimit),
+    updateTransactions: __privateGet(this, _incomingTransactionOptions).updateTransactions
+  });
+  __privateMethod(this, _addIncomingTransactionHelperListeners, addIncomingTransactionHelperListeners_fn).call(this, incomingTransactionHelper);
+  return incomingTransactionHelper;
+};
+_createPendingTransactionTracker = new WeakSet();
+createPendingTransactionTracker_fn = function({
+  provider,
+  blockTracker,
+  chainId
+}) {
+  const ethQuery = new EthQuery(provider);
+  const getChainId = chainId ? () => chainId : this.getChainId.bind(this);
+  const pendingTransactionTracker = new PendingTransactionTracker({
+    approveTransaction: async (transactionId) => {
+      await this.approveTransaction(transactionId);
+    },
+    blockTracker,
+    getChainId,
+    getEthQuery: () => ethQuery,
+    getTransactions: () => this.state.transactions,
+    isResubmitEnabled: __privateGet(this, _pendingTransactionOptions).isResubmitEnabled,
+    getGlobalLock: () => __privateGet(this, _multichainTrackingHelper).acquireNonceLockForChainIdKey({
+      chainId: getChainId()
+    }),
+    publishTransaction: this.publishTransaction.bind(this),
+    hooks: {
+      beforeCheckPendingTransaction: this.beforeCheckPendingTransaction.bind(this),
+      beforePublish: this.beforePublish.bind(this)
+    }
+  });
+  __privateMethod(this, _addPendingTransactionTrackerListeners, addPendingTransactionTrackerListeners_fn).call(this, pendingTransactionTracker);
+  return pendingTransactionTracker;
+};
+_checkForPendingTransactionAndStartPolling = new WeakMap();
+_stopAllTracking = new WeakSet();
+stopAllTracking_fn = function() {
+  this.pendingTransactionTracker.stop();
+  __privateMethod(this, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners_fn).call(this, this.pendingTransactionTracker);
+  this.incomingTransactionHelper.stop();
+  __privateMethod(this, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners_fn).call(this, this.incomingTransactionHelper);
+  __privateGet(this, _multichainTrackingHelper).stopAllTracking();
+};
+_removeIncomingTransactionHelperListeners = new WeakSet();
+removeIncomingTransactionHelperListeners_fn = function(incomingTransactionHelper) {
+  incomingTransactionHelper.hub.removeAllListeners("transactions");
+  incomingTransactionHelper.hub.removeAllListeners(
+    "updatedLastFetchedBlockNumbers"
+  );
+};
+_addIncomingTransactionHelperListeners = new WeakSet();
+addIncomingTransactionHelperListeners_fn = function(incomingTransactionHelper) {
+  incomingTransactionHelper.hub.on(
+    "transactions",
+    this.onIncomingTransactions.bind(this)
+  );
+  incomingTransactionHelper.hub.on(
+    "updatedLastFetchedBlockNumbers",
+    this.onUpdatedLastFetchedBlockNumbers.bind(this)
+  );
+};
+_removePendingTransactionTrackerListeners = new WeakSet();
+removePendingTransactionTrackerListeners_fn = function(pendingTransactionTracker) {
+  pendingTransactionTracker.hub.removeAllListeners("transaction-confirmed");
+  pendingTransactionTracker.hub.removeAllListeners("transaction-dropped");
+  pendingTransactionTracker.hub.removeAllListeners("transaction-failed");
+  pendingTransactionTracker.hub.removeAllListeners("transaction-updated");
+};
+_addPendingTransactionTrackerListeners = new WeakSet();
+addPendingTransactionTrackerListeners_fn = function(pendingTransactionTracker) {
+  pendingTransactionTracker.hub.on(
+    "transaction-confirmed",
+    this.onConfirmedTransaction.bind(this)
+  );
+  pendingTransactionTracker.hub.on(
+    "transaction-dropped",
+    this.setTransactionStatusDropped.bind(this)
+  );
+  pendingTransactionTracker.hub.on(
+    "transaction-failed",
+    this.failTransaction.bind(this)
+  );
+  pendingTransactionTracker.hub.on(
+    "transaction-updated",
+    this.updateTransaction.bind(this)
+  );
+};
+_getNonceTrackerPendingTransactions = new WeakSet();
+getNonceTrackerPendingTransactions_fn = function(chainId, address) {
+  const standardPendingTransactions = this.getNonceTrackerTransactions(
+    "submitted" /* submitted */,
+    address,
+    chainId
+  );
+  const externalPendingTransactions = this.getExternalPendingTransactions(
+    address,
+    chainId
+  );
+  return [...standardPendingTransactions, ...externalPendingTransactions];
+};
+_getGasFeeFlows = new WeakSet();
+getGasFeeFlows_fn = function() {
+  if (__privateGet(this, _testGasFeeFlows)) {
+    return [new TestGasFeeFlow()];
+  }
+  return [new LineaGasFeeFlow(), new DefaultGasFeeFlow()];
+};
+_getLayer1GasFeeFlows = new WeakSet();
+getLayer1GasFeeFlows_fn = function() {
+  return [new OptimismLayer1GasFeeFlow(), new ScrollLayer1GasFeeFlow()];
+};
+_updateTransactionInternal = new WeakSet();
+updateTransactionInternal_fn = function({
+  transactionId,
+  note,
+  skipHistory
+}, callback) {
+  let updatedTransactionParams = [];
+  this.update((state) => {
+    const index = state.transactions.findIndex(
+      ({ id }) => id === transactionId
+    );
+    let transactionMeta2 = state.transactions[index];
+    transactionMeta2 = callback(transactionMeta2) ?? transactionMeta2;
+    transactionMeta2.txParams = normalizeTransactionParams(
+      transactionMeta2.txParams
+    );
+    validateTxParams(transactionMeta2.txParams);
+    updatedTransactionParams = __privateMethod(this, _checkIfTransactionParamsUpdated, checkIfTransactionParamsUpdated_fn).call(this, transactionMeta2);
+    if (skipHistory !== true) {
+      transactionMeta2 = updateTransactionHistory(
+        transactionMeta2,
+        note ?? "Transaction updated"
+      );
+    }
+    state.transactions[index] = transactionMeta2;
+  });
+  const transactionMeta = this.getTransaction(
+    transactionId
+  );
+  if (updatedTransactionParams.length > 0) {
+    __privateMethod(this, _onTransactionParamsUpdated, onTransactionParamsUpdated_fn).call(this, transactionMeta, updatedTransactionParams);
+  }
+};
+_checkIfTransactionParamsUpdated = new WeakSet();
+checkIfTransactionParamsUpdated_fn = function(newTransactionMeta) {
+  const { id: transactionId, txParams: newParams } = newTransactionMeta;
+  const originalParams = this.getTransaction(transactionId)?.txParams;
+  if (!originalParams || isEqual(originalParams, newParams)) {
+    return [];
+  }
+  const params = Object.keys(newParams);
+  const updatedProperties = params.filter(
+    (param) => newParams[param] !== originalParams[param]
+  );
+  projectLogger(
+    "Transaction parameters have been updated",
+    transactionId,
+    updatedProperties,
+    originalParams,
+    newParams
+  );
+  return updatedProperties;
+};
+_onTransactionParamsUpdated = new WeakSet();
+onTransactionParamsUpdated_fn = function(transactionMeta, updatedParams) {
+  if (["to", "value", "data"].some(
+    (param) => updatedParams.includes(param)
+  )) {
+    projectLogger("Updating simulation data due to transaction parameter update");
+    __privateMethod(this, _updateSimulationData, updateSimulationData_fn).call(this, transactionMeta);
+  }
+};
+_updateSimulationData = new WeakSet();
+updateSimulationData_fn = async function(transactionMeta) {
+  const { id: transactionId, chainId, txParams } = transactionMeta;
+  const { from, to, value, data } = txParams;
+  let simulationData = {
+    error: {
+      code: "disabled" /* Disabled */,
+      message: "Simulation disabled"
+    },
+    tokenBalanceChanges: []
+  };
+  if (__privateGet(this, _isSimulationEnabled).call(this)) {
+    __privateMethod(this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, { transactionId, skipHistory: true }, (txMeta) => {
+      txMeta.simulationData = void 0;
+    });
+    simulationData = await getSimulationData({
+      chainId,
+      from,
+      to,
+      value,
+      data
+    });
+  }
+  const finalTransactionMeta = this.getTransaction(transactionId);
+  if (!finalTransactionMeta) {
+    projectLogger(
+      "Cannot update simulation data as transaction not found",
+      transactionId,
+      simulationData
+    );
+    return;
+  }
+  __privateMethod(this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, {
+    transactionId,
+    note: "TransactionController#updateSimulationData - Update simulation data"
+  }, (txMeta) => {
+    txMeta.simulationData = simulationData;
+  });
+  projectLogger("Updated simulation data", transactionId, simulationData);
+};
+_onGasFeePollerTransactionUpdate = new WeakSet();
+onGasFeePollerTransactionUpdate_fn = function({
+  transactionId,
+  gasFeeEstimates,
+  gasFeeEstimatesLoaded,
+  layer1GasFee
+}) {
+  __privateMethod(this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, { transactionId, skipHistory: true }, (txMeta) => {
+    if (gasFeeEstimates) {
+      txMeta.gasFeeEstimates = gasFeeEstimates;
+    }
+    if (gasFeeEstimatesLoaded !== void 0) {
+      txMeta.gasFeeEstimatesLoaded = gasFeeEstimatesLoaded;
+    }
+    if (layer1GasFee) {
+      txMeta.layer1GasFee = layer1GasFee;
+    }
+  });
+};
+_getNetworkClientId = new WeakSet();
+getNetworkClientId_fn = function({
+  networkClientId: requestNetworkClientId,
+  chainId
+}) {
+  const globalChainId = __privateMethod(this, _getGlobalChainId, getGlobalChainId_fn).call(this);
+  const globalNetworkClientId = __privateMethod(this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);
+  if (requestNetworkClientId) {
+    return requestNetworkClientId;
+  }
+  if (!chainId || chainId === globalChainId) {
+    return globalNetworkClientId;
+  }
+  return this.messagingSystem.call(
+    `NetworkController:findNetworkClientIdByChainId`,
+    chainId
+  );
+};
+_getGlobalNetworkClientId = new WeakSet();
+getGlobalNetworkClientId_fn = function() {
+  return this.getNetworkState().selectedNetworkClientId;
+};
+_getGlobalChainId = new WeakSet();
+getGlobalChainId_fn = function() {
+  return this.getNetworkState().providerConfig.chainId;
+};
+_isCustomNetwork = new WeakSet();
+isCustomNetwork_fn = function(networkClientId) {
+  const globalNetworkClientId = __privateMethod(this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);
+  if (!networkClientId || networkClientId === globalNetworkClientId) {
+    return this.getNetworkState().providerConfig.type === NetworkType.rpc;
+  }
+  return this.messagingSystem.call(
+    `NetworkController:getNetworkClientById`,
+    networkClientId
+  ).configuration.type === NetworkClientType.Custom;
+};
+
+export {
+  HARDFORK,
+  CANCEL_RATE,
+  SPEED_UP_RATE,
+  ApprovalState,
+  TransactionController
+};
+//# sourceMappingURL=chunk-7TPXSDXL.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-AGJNOOBN.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-AGJNOOBN.mjs
new file mode 100644
index 0000000..4f28460
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-AGJNOOBN.mjs
@@ -0,0 +1,67 @@
+import {
+  GasFeeEstimateLevel
+} from "./chunk-N6JXPWLY.mjs";
+
+// src/utils/gas-flow.ts
+import { weiHexToGweiDec } from "@metamask/controller-utils";
+function getGasFeeFlow(transactionMeta, gasFeeFlows) {
+  return gasFeeFlows.find(
+    (gasFeeFlow) => gasFeeFlow.matchesTransaction(transactionMeta)
+  );
+}
+function mergeGasFeeEstimates({
+  gasFeeControllerEstimates,
+  transactionGasFeeEstimates
+}) {
+  const transactionEstimateType = transactionGasFeeEstimates.type;
+  if (transactionEstimateType === "fee-market" /* FeeMarket */) {
+    return Object.values(GasFeeEstimateLevel).reduce(
+      (result, level) => ({
+        ...result,
+        [level]: mergeFeeMarketEstimate(
+          gasFeeControllerEstimates?.[level],
+          transactionGasFeeEstimates[level]
+        )
+      }),
+      { ...gasFeeControllerEstimates }
+    );
+  }
+  if (transactionEstimateType === "legacy" /* Legacy */) {
+    return Object.values(GasFeeEstimateLevel).reduce(
+      (result, level) => ({
+        ...result,
+        [level]: getLegacyEstimate(transactionGasFeeEstimates, level)
+      }),
+      {}
+    );
+  }
+  if (transactionEstimateType === "eth_gasPrice" /* GasPrice */) {
+    return {
+      gasPrice: getGasPriceEstimate(transactionGasFeeEstimates)
+    };
+  }
+  return gasFeeControllerEstimates;
+}
+function mergeFeeMarketEstimate(gasFeeControllerEstimate, transactionGasFeeEstimate) {
+  return {
+    ...gasFeeControllerEstimate,
+    suggestedMaxFeePerGas: weiHexToGweiDec(
+      transactionGasFeeEstimate.maxFeePerGas
+    ),
+    suggestedMaxPriorityFeePerGas: weiHexToGweiDec(
+      transactionGasFeeEstimate.maxPriorityFeePerGas
+    )
+  };
+}
+function getLegacyEstimate(transactionGasFeeEstimate, level) {
+  return weiHexToGweiDec(transactionGasFeeEstimate[level]);
+}
+function getGasPriceEstimate(transactionGasFeeEstimate) {
+  return weiHexToGweiDec(transactionGasFeeEstimate.gasPrice);
+}
+
+export {
+  getGasFeeFlow,
+  mergeGasFeeEstimates
+};
+//# sourceMappingURL=chunk-AGJNOOBN.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-C2LNDHP4.js b/node_modules/@metamask/transaction-controller/dist/chunk-C2LNDHP4.js
new file mode 100644
index 0000000..cd260da
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-C2LNDHP4.js
@@ -0,0 +1,211 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkUGFBA4GVjs = require('./chunk-UGFBA4GV.js');
+
+
+var _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');
+
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+// src/utils/swaps.ts
+var _controllerutils = require('@metamask/controller-utils');
+var _lodash = require('lodash');
+var log = _chunkS6VGOPUYjs.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "swaps");
+var UPDATE_POST_TX_BALANCE_TIMEOUT = 5e3;
+var UPDATE_POST_TX_BALANCE_ATTEMPTS = 6;
+var SWAPS_TESTNET_CHAIN_ID = "0x539";
+var DEFAULT_TOKEN_ADDRESS = "0x0000000000000000000000000000000000000000";
+var ETH_SWAPS_TOKEN_OBJECT = {
+  name: "Ether",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var BNB_SWAPS_TOKEN_OBJECT = {
+  name: "Binance Coin",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var MATIC_SWAPS_TOKEN_OBJECT = {
+  name: "Matic",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var AVAX_SWAPS_TOKEN_OBJECT = {
+  name: "Avalanche",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var TEST_ETH_SWAPS_TOKEN_OBJECT = {
+  name: "Test Ether",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var GOERLI_SWAPS_TOKEN_OBJECT = {
+  name: "Ether",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var ARBITRUM_SWAPS_TOKEN_OBJECT = {
+  ...ETH_SWAPS_TOKEN_OBJECT
+};
+var OPTIMISM_SWAPS_TOKEN_OBJECT = {
+  ...ETH_SWAPS_TOKEN_OBJECT
+};
+var ZKSYNC_ERA_SWAPS_TOKEN_OBJECT = {
+  ...ETH_SWAPS_TOKEN_OBJECT
+};
+var SWAPS_CHAINID_DEFAULT_TOKEN_MAP = {
+  [_chunkUGN7PBONjs.CHAIN_IDS.MAINNET]: ETH_SWAPS_TOKEN_OBJECT,
+  [SWAPS_TESTNET_CHAIN_ID]: TEST_ETH_SWAPS_TOKEN_OBJECT,
+  [_chunkUGN7PBONjs.CHAIN_IDS.BSC]: BNB_SWAPS_TOKEN_OBJECT,
+  [_chunkUGN7PBONjs.CHAIN_IDS.POLYGON]: MATIC_SWAPS_TOKEN_OBJECT,
+  [_chunkUGN7PBONjs.CHAIN_IDS.GOERLI]: GOERLI_SWAPS_TOKEN_OBJECT,
+  [_chunkUGN7PBONjs.CHAIN_IDS.AVALANCHE]: AVAX_SWAPS_TOKEN_OBJECT,
+  [_chunkUGN7PBONjs.CHAIN_IDS.OPTIMISM]: OPTIMISM_SWAPS_TOKEN_OBJECT,
+  [_chunkUGN7PBONjs.CHAIN_IDS.ARBITRUM]: ARBITRUM_SWAPS_TOKEN_OBJECT,
+  [_chunkUGN7PBONjs.CHAIN_IDS.ZKSYNC_ERA]: ZKSYNC_ERA_SWAPS_TOKEN_OBJECT
+};
+var SWAP_TRANSACTION_TYPES = [
+  "swap" /* swap */,
+  "swapApproval" /* swapApproval */
+];
+function updateSwapsTransaction(transactionMeta, transactionType, swaps, {
+  isSwapsDisabled,
+  cancelTransaction,
+  messenger
+}) {
+  if (isSwapsDisabled || !SWAP_TRANSACTION_TYPES.includes(transactionType)) {
+    return transactionMeta;
+  }
+  if (transactionType === "swap" /* swap */ && swaps?.hasApproveTx === false && transactionMeta.simulationFails) {
+    cancelTransaction(transactionMeta.id);
+    throw new Error("Simulation failed");
+  }
+  const swapsMeta = swaps?.meta;
+  if (!swapsMeta) {
+    return transactionMeta;
+  }
+  let updatedTransactionMeta = transactionMeta;
+  if (transactionType === "swapApproval" /* swapApproval */) {
+    updatedTransactionMeta = updateSwapApprovalTransaction(
+      transactionMeta,
+      swapsMeta
+    );
+    messenger.publish("TransactionController:transactionNewSwapApproval", {
+      transactionMeta: updatedTransactionMeta
+    });
+  }
+  if (transactionType === "swap" /* swap */) {
+    updatedTransactionMeta = updateSwapTransaction(transactionMeta, swapsMeta);
+    messenger.publish("TransactionController:transactionNewSwap", {
+      transactionMeta: updatedTransactionMeta
+    });
+  }
+  return updatedTransactionMeta;
+}
+async function updatePostTransactionBalance(transactionMeta, {
+  ethQuery,
+  getTransaction,
+  updateTransaction
+}) {
+  log("Updating post transaction balance", transactionMeta.id);
+  const transactionId = transactionMeta.id;
+  let latestTransactionMeta;
+  let approvalTransactionMeta;
+  for (let i = 0; i < UPDATE_POST_TX_BALANCE_ATTEMPTS; i++) {
+    log("Querying balance", { attempt: i });
+    const postTransactionBalance = await _controllerutils.query.call(void 0, ethQuery, "getBalance", [
+      transactionMeta.txParams.from
+    ]);
+    latestTransactionMeta = {
+      ...getTransaction(transactionId) ?? {}
+    };
+    approvalTransactionMeta = latestTransactionMeta.approvalTxId ? getTransaction(latestTransactionMeta.approvalTxId) : void 0;
+    latestTransactionMeta.postTxBalance = postTransactionBalance.toString(16);
+    const isDefaultTokenAddress = isSwapsDefaultTokenAddress(
+      transactionMeta.destinationTokenAddress,
+      transactionMeta.chainId
+    );
+    if (!isDefaultTokenAddress || transactionMeta.preTxBalance !== latestTransactionMeta.postTxBalance) {
+      log("Finishing post balance update", {
+        isDefaultTokenAddress,
+        preTxBalance: transactionMeta.preTxBalance,
+        postTxBalance: latestTransactionMeta.postTxBalance
+      });
+      break;
+    }
+    log("Waiting for balance to update", {
+      delay: UPDATE_POST_TX_BALANCE_TIMEOUT
+    });
+    await sleep(UPDATE_POST_TX_BALANCE_TIMEOUT);
+  }
+  updateTransaction(
+    latestTransactionMeta,
+    "TransactionController#updatePostTransactionBalance - Add post transaction balance"
+  );
+  log("Completed post balance update", latestTransactionMeta?.postTxBalance);
+  return {
+    updatedTransactionMeta: latestTransactionMeta,
+    approvalTransactionMeta
+  };
+}
+function updateSwapTransaction(transactionMeta, {
+  sourceTokenSymbol,
+  destinationTokenSymbol,
+  type,
+  destinationTokenDecimals,
+  destinationTokenAddress,
+  swapMetaData,
+  swapTokenValue,
+  estimatedBaseFee,
+  approvalTxId
+}) {
+  _chunkUGFBA4GVjs.validateIfTransactionUnapproved.call(void 0, transactionMeta, "updateSwapTransaction");
+  let swapTransaction = {
+    sourceTokenSymbol,
+    destinationTokenSymbol,
+    type,
+    destinationTokenDecimals,
+    destinationTokenAddress,
+    swapMetaData,
+    swapTokenValue,
+    estimatedBaseFee,
+    approvalTxId
+  };
+  swapTransaction = _lodash.pickBy.call(void 0, swapTransaction);
+  return _lodash.merge.call(void 0, {}, transactionMeta, swapTransaction);
+}
+function updateSwapApprovalTransaction(transactionMeta, { type, sourceTokenSymbol }) {
+  _chunkUGFBA4GVjs.validateIfTransactionUnapproved.call(void 0, 
+    transactionMeta,
+    "updateSwapApprovalTransaction"
+  );
+  let swapApprovalTransaction = { type, sourceTokenSymbol };
+  swapApprovalTransaction = _lodash.pickBy.call(void 0, {
+    type,
+    sourceTokenSymbol
+  });
+  return _lodash.merge.call(void 0, {}, transactionMeta, swapApprovalTransaction);
+}
+function isSwapsDefaultTokenAddress(address, chainId) {
+  if (!address || !chainId) {
+    return false;
+  }
+  return address === SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId]?.address;
+}
+function sleep(ms) {
+  return new Promise((resolve) => setTimeout(resolve, ms));
+}
+
+
+
+
+
+
+
+
+
+exports.UPDATE_POST_TX_BALANCE_TIMEOUT = UPDATE_POST_TX_BALANCE_TIMEOUT; exports.UPDATE_POST_TX_BALANCE_ATTEMPTS = UPDATE_POST_TX_BALANCE_ATTEMPTS; exports.DEFAULT_TOKEN_ADDRESS = DEFAULT_TOKEN_ADDRESS; exports.SWAPS_CHAINID_DEFAULT_TOKEN_MAP = SWAPS_CHAINID_DEFAULT_TOKEN_MAP; exports.SWAP_TRANSACTION_TYPES = SWAP_TRANSACTION_TYPES; exports.updateSwapsTransaction = updateSwapsTransaction; exports.updatePostTransactionBalance = updatePostTransactionBalance;
+//# sourceMappingURL=chunk-C2LNDHP4.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-CPMTUMMZ.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-CPMTUMMZ.mjs
new file mode 100644
index 0000000..6c3e8f0
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-CPMTUMMZ.mjs
@@ -0,0 +1,170 @@
+import {
+  fetchEtherscanTokenTransactions,
+  fetchEtherscanTransactions
+} from "./chunk-QZLPYOGC.mjs";
+import {
+  ETHERSCAN_SUPPORTED_NETWORKS
+} from "./chunk-O6ZZVIFH.mjs";
+import {
+  incomingTransactionsLogger
+} from "./chunk-UQQWZT6C.mjs";
+import {
+  __privateAdd,
+  __privateGet,
+  __privateMethod,
+  __privateSet
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/helpers/EtherscanRemoteTransactionSource.ts
+import { BNToHex } from "@metamask/controller-utils";
+import { Mutex } from "async-mutex";
+import BN from "bn.js";
+import { v1 as random } from "uuid";
+var ETHERSCAN_RATE_LIMIT_INTERVAL = 5e3;
+var _includeTokenTransfers, _isTokenRequestPending, _mutex, _releaseLockAfterInterval, releaseLockAfterInterval_fn, _fetchNormalTransactions, _fetchTokenTransactions, _getResponseTransactions, getResponseTransactions_fn, _normalizeTransaction, normalizeTransaction_fn, _normalizeTokenTransaction, normalizeTokenTransaction_fn, _normalizeTransactionBase, normalizeTransactionBase_fn;
+var EtherscanRemoteTransactionSource = class {
+  constructor({
+    includeTokenTransfers
+  } = {}) {
+    __privateAdd(this, _releaseLockAfterInterval);
+    __privateAdd(this, _getResponseTransactions);
+    __privateAdd(this, _normalizeTransaction);
+    __privateAdd(this, _normalizeTokenTransaction);
+    __privateAdd(this, _normalizeTransactionBase);
+    __privateAdd(this, _includeTokenTransfers, void 0);
+    __privateAdd(this, _isTokenRequestPending, void 0);
+    __privateAdd(this, _mutex, new Mutex());
+    __privateAdd(this, _fetchNormalTransactions, async (request, etherscanRequest) => {
+      const { currentChainId } = request;
+      const etherscanTransactions = await fetchEtherscanTransactions(
+        etherscanRequest
+      );
+      return __privateMethod(this, _getResponseTransactions, getResponseTransactions_fn).call(this, etherscanTransactions).map(
+        (tx) => __privateMethod(this, _normalizeTransaction, normalizeTransaction_fn).call(this, tx, currentChainId)
+      );
+    });
+    __privateAdd(this, _fetchTokenTransactions, async (request, etherscanRequest) => {
+      const { currentChainId } = request;
+      const etherscanTransactions = await fetchEtherscanTokenTransactions(
+        etherscanRequest
+      );
+      return __privateMethod(this, _getResponseTransactions, getResponseTransactions_fn).call(this, etherscanTransactions).map(
+        (tx) => __privateMethod(this, _normalizeTokenTransaction, normalizeTokenTransaction_fn).call(this, tx, currentChainId)
+      );
+    });
+    __privateSet(this, _includeTokenTransfers, includeTokenTransfers ?? true);
+    __privateSet(this, _isTokenRequestPending, false);
+  }
+  isSupportedNetwork(chainId) {
+    return Object.keys(ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);
+  }
+  getLastBlockVariations() {
+    return [__privateGet(this, _isTokenRequestPending) ? "token" : "normal"];
+  }
+  async fetchTransactions(request) {
+    const releaseLock = await __privateGet(this, _mutex).acquire();
+    const acquiredTime = Date.now();
+    const etherscanRequest = {
+      ...request,
+      chainId: request.currentChainId
+    };
+    try {
+      const transactions = __privateGet(this, _isTokenRequestPending) ? await __privateGet(this, _fetchTokenTransactions).call(this, request, etherscanRequest) : await __privateGet(this, _fetchNormalTransactions).call(this, request, etherscanRequest);
+      if (__privateGet(this, _includeTokenTransfers)) {
+        __privateSet(this, _isTokenRequestPending, !__privateGet(this, _isTokenRequestPending));
+      }
+      return transactions;
+    } finally {
+      __privateMethod(this, _releaseLockAfterInterval, releaseLockAfterInterval_fn).call(this, acquiredTime, releaseLock);
+    }
+  }
+};
+_includeTokenTransfers = new WeakMap();
+_isTokenRequestPending = new WeakMap();
+_mutex = new WeakMap();
+_releaseLockAfterInterval = new WeakSet();
+releaseLockAfterInterval_fn = function(acquireTime, releaseLock) {
+  const elapsedTime = Date.now() - acquireTime;
+  const remainingTime = Math.max(
+    0,
+    ETHERSCAN_RATE_LIMIT_INTERVAL - elapsedTime
+  );
+  if (remainingTime > 0) {
+    setTimeout(releaseLock, remainingTime);
+  } else {
+    releaseLock();
+  }
+};
+_fetchNormalTransactions = new WeakMap();
+_fetchTokenTransactions = new WeakMap();
+_getResponseTransactions = new WeakSet();
+getResponseTransactions_fn = function(response) {
+  let result = response.result;
+  if (response.status === "0") {
+    result = [];
+    if (response.result.length) {
+      incomingTransactionsLogger("Ignored Etherscan request error", {
+        message: response.result,
+        type: __privateGet(this, _isTokenRequestPending) ? "token" : "normal"
+      });
+    }
+  }
+  return result;
+};
+_normalizeTransaction = new WeakSet();
+normalizeTransaction_fn = function(txMeta, currentChainId) {
+  const base = __privateMethod(this, _normalizeTransactionBase, normalizeTransactionBase_fn).call(this, txMeta, currentChainId);
+  return {
+    ...base,
+    txParams: {
+      ...base.txParams,
+      data: txMeta.input
+    },
+    ...txMeta.isError === "0" ? { status: "confirmed" /* confirmed */ } : {
+      error: new Error("Transaction failed"),
+      status: "failed" /* failed */
+    }
+  };
+};
+_normalizeTokenTransaction = new WeakSet();
+normalizeTokenTransaction_fn = function(txMeta, currentChainId) {
+  const base = __privateMethod(this, _normalizeTransactionBase, normalizeTransactionBase_fn).call(this, txMeta, currentChainId);
+  return {
+    ...base,
+    isTransfer: true,
+    transferInformation: {
+      contractAddress: txMeta.contractAddress,
+      decimals: Number(txMeta.tokenDecimal),
+      symbol: txMeta.tokenSymbol
+    }
+  };
+};
+_normalizeTransactionBase = new WeakSet();
+normalizeTransactionBase_fn = function(txMeta, currentChainId) {
+  const time = parseInt(txMeta.timeStamp, 10) * 1e3;
+  return {
+    blockNumber: txMeta.blockNumber,
+    chainId: currentChainId,
+    hash: txMeta.hash,
+    id: random({ msecs: time }),
+    status: "confirmed" /* confirmed */,
+    time,
+    txParams: {
+      chainId: currentChainId,
+      from: txMeta.from,
+      gas: BNToHex(new BN(txMeta.gas)),
+      gasPrice: BNToHex(new BN(txMeta.gasPrice)),
+      gasUsed: BNToHex(new BN(txMeta.gasUsed)),
+      nonce: BNToHex(new BN(txMeta.nonce)),
+      to: txMeta.to,
+      value: BNToHex(new BN(txMeta.value))
+    },
+    type: "incoming" /* incoming */,
+    verifiedOnBlockchain: false
+  };
+};
+
+export {
+  EtherscanRemoteTransactionSource
+};
+//# sourceMappingURL=chunk-CPMTUMMZ.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-DTDTOMTB.js b/node_modules/@metamask/transaction-controller/dist/chunk-DTDTOMTB.js
new file mode 100644
index 0000000..04c38f2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-DTDTOMTB.js
@@ -0,0 +1,238 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/helpers/IncomingTransactionHelper.ts
+var _asyncmutex = require('async-mutex');
+var _events = require('events'); var _events2 = _interopRequireDefault(_events);
+var RECENT_HISTORY_BLOCK_RANGE = 10;
+var UPDATE_CHECKS = [
+  (txMeta) => txMeta.status,
+  (txMeta) => txMeta.txParams.gasUsed
+];
+var _blockTracker, _getCurrentAccount, _getLastFetchedBlockNumbers, _getLocalTransactions, _getChainId, _isEnabled, _isRunning, _mutex, _onLatestBlock, _queryEntireHistory, _remoteTransactionSource, _transactionLimit, _updateTransactions, _sortTransactionsByTime, sortTransactionsByTime_fn, _getNewTransactions, getNewTransactions_fn, _getUpdatedTransactions, getUpdatedTransactions_fn, _isTransactionOutdated, isTransactionOutdated_fn, _getLastFetchedBlockNumberDec, getLastFetchedBlockNumberDec_fn, _getFromBlock, getFromBlock_fn, _updateLastFetchedBlockNumber, updateLastFetchedBlockNumber_fn, _getBlockNumberKey, getBlockNumberKey_fn, _canStart, canStart_fn;
+var IncomingTransactionHelper = class {
+  constructor({
+    blockTracker,
+    getCurrentAccount,
+    getLastFetchedBlockNumbers,
+    getLocalTransactions,
+    getChainId,
+    isEnabled,
+    queryEntireHistory,
+    remoteTransactionSource,
+    transactionLimit,
+    updateTransactions
+  }) {
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _sortTransactionsByTime);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNewTransactions);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getUpdatedTransactions);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isTransactionOutdated);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLastFetchedBlockNumberDec);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getFromBlock);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateLastFetchedBlockNumber);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getBlockNumberKey);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _canStart);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _blockTracker, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getCurrentAccount, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLastFetchedBlockNumbers, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLocalTransactions, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getChainId, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isEnabled, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isRunning, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _mutex, new (0, _asyncmutex.Mutex)());
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onLatestBlock, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _queryEntireHistory, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _remoteTransactionSource, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _transactionLimit, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateTransactions, void 0);
+    this.hub = new (0, _events2.default)();
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _blockTracker, blockTracker);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getCurrentAccount, getCurrentAccount);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getLastFetchedBlockNumbers, getLastFetchedBlockNumbers);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getLocalTransactions, getLocalTransactions || (() => []));
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getChainId, getChainId);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isEnabled, isEnabled ?? (() => true));
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isRunning, false);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _queryEntireHistory, queryEntireHistory ?? true);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _remoteTransactionSource, remoteTransactionSource);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _transactionLimit, transactionLimit);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _updateTransactions, updateTransactions ?? false);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _onLatestBlock, async (blockNumberHex) => {
+      try {
+        await this.update(blockNumberHex);
+      } catch (error) {
+        console.error("Error while checking incoming transactions", error);
+      }
+    });
+  }
+  start() {
+    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isRunning)) {
+      return;
+    }
+    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _canStart, canStart_fn).call(this)) {
+      return;
+    }
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _blockTracker).addListener("latest", _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _onLatestBlock));
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isRunning, true);
+  }
+  stop() {
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _blockTracker).removeListener("latest", _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _onLatestBlock));
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isRunning, false);
+  }
+  async update(latestBlockNumberHex) {
+    const releaseLock = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _mutex).acquire();
+    _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, "Checking for incoming transactions");
+    try {
+      if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _canStart, canStart_fn).call(this)) {
+        return;
+      }
+      const latestBlockNumber = parseInt(
+        latestBlockNumberHex || await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _blockTracker).getLatestBlock(),
+        16
+      );
+      const additionalLastFetchedKeys = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _remoteTransactionSource).getLastBlockVariations?.() ?? [];
+      const fromBlock = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getFromBlock, getFromBlock_fn).call(this, latestBlockNumber);
+      const address = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getCurrentAccount).call(this);
+      const currentChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getChainId).call(this);
+      let remoteTransactions = [];
+      try {
+        remoteTransactions = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _remoteTransactionSource).fetchTransactions({
+          address,
+          currentChainId,
+          fromBlock,
+          limit: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _transactionLimit)
+        });
+      } catch (error) {
+        _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, "Error while fetching remote transactions", error);
+        return;
+      }
+      if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _updateTransactions)) {
+        remoteTransactions = remoteTransactions.filter(
+          (tx) => tx.txParams.to?.toLowerCase() === address.toLowerCase()
+        );
+      }
+      const localTransactions = !_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _updateTransactions) ? [] : _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getLocalTransactions).call(this);
+      const newTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNewTransactions, getNewTransactions_fn).call(this, remoteTransactions, localTransactions);
+      const updatedTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getUpdatedTransactions, getUpdatedTransactions_fn).call(this, remoteTransactions, localTransactions);
+      if (newTransactions.length > 0 || updatedTransactions.length > 0) {
+        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _sortTransactionsByTime, sortTransactionsByTime_fn).call(this, newTransactions);
+        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _sortTransactionsByTime, sortTransactionsByTime_fn).call(this, updatedTransactions);
+        _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, "Found incoming transactions", {
+          new: newTransactions,
+          updated: updatedTransactions
+        });
+        this.hub.emit("transactions", {
+          added: newTransactions,
+          updated: updatedTransactions
+        });
+      }
+      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateLastFetchedBlockNumber, updateLastFetchedBlockNumber_fn).call(this, remoteTransactions, additionalLastFetchedKeys);
+    } finally {
+      releaseLock();
+    }
+  }
+};
+_blockTracker = new WeakMap();
+_getCurrentAccount = new WeakMap();
+_getLastFetchedBlockNumbers = new WeakMap();
+_getLocalTransactions = new WeakMap();
+_getChainId = new WeakMap();
+_isEnabled = new WeakMap();
+_isRunning = new WeakMap();
+_mutex = new WeakMap();
+_onLatestBlock = new WeakMap();
+_queryEntireHistory = new WeakMap();
+_remoteTransactionSource = new WeakMap();
+_transactionLimit = new WeakMap();
+_updateTransactions = new WeakMap();
+_sortTransactionsByTime = new WeakSet();
+sortTransactionsByTime_fn = function(transactions) {
+  transactions.sort((a, b) => a.time < b.time ? -1 : 1);
+};
+_getNewTransactions = new WeakSet();
+getNewTransactions_fn = function(remoteTxs, localTxs) {
+  return remoteTxs.filter(
+    (tx) => !localTxs.some(({ hash }) => hash === tx.hash)
+  );
+};
+_getUpdatedTransactions = new WeakSet();
+getUpdatedTransactions_fn = function(remoteTxs, localTxs) {
+  return remoteTxs.filter(
+    (remoteTx) => localTxs.some(
+      (localTx) => remoteTx.hash === localTx.hash && _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isTransactionOutdated, isTransactionOutdated_fn).call(this, remoteTx, localTx)
+    )
+  );
+};
+_isTransactionOutdated = new WeakSet();
+isTransactionOutdated_fn = function(remoteTx, localTx) {
+  return UPDATE_CHECKS.some(
+    (getValue) => getValue(remoteTx) !== getValue(localTx)
+  );
+};
+_getLastFetchedBlockNumberDec = new WeakSet();
+getLastFetchedBlockNumberDec_fn = function() {
+  const additionalLastFetchedKeys = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _remoteTransactionSource).getLastBlockVariations?.() ?? [];
+  const lastFetchedKey = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getBlockNumberKey, getBlockNumberKey_fn).call(this, additionalLastFetchedKeys);
+  const lastFetchedBlockNumbers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getLastFetchedBlockNumbers).call(this);
+  return lastFetchedBlockNumbers[lastFetchedKey];
+};
+_getFromBlock = new WeakSet();
+getFromBlock_fn = function(latestBlockNumber) {
+  const lastFetchedBlockNumber = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLastFetchedBlockNumberDec, getLastFetchedBlockNumberDec_fn).call(this);
+  if (lastFetchedBlockNumber) {
+    return lastFetchedBlockNumber + 1;
+  }
+  return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _queryEntireHistory) ? void 0 : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;
+};
+_updateLastFetchedBlockNumber = new WeakSet();
+updateLastFetchedBlockNumber_fn = function(remoteTxs, additionalKeys) {
+  let lastFetchedBlockNumber = -1;
+  for (const tx of remoteTxs) {
+    const currentBlockNumberValue = tx.blockNumber ? parseInt(tx.blockNumber, 10) : -1;
+    lastFetchedBlockNumber = Math.max(
+      lastFetchedBlockNumber,
+      currentBlockNumberValue
+    );
+  }
+  if (lastFetchedBlockNumber === -1) {
+    return;
+  }
+  const lastFetchedKey = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getBlockNumberKey, getBlockNumberKey_fn).call(this, additionalKeys);
+  const lastFetchedBlockNumbers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getLastFetchedBlockNumbers).call(this);
+  const previousValue = lastFetchedBlockNumbers[lastFetchedKey];
+  if (previousValue >= lastFetchedBlockNumber) {
+    return;
+  }
+  this.hub.emit("updatedLastFetchedBlockNumbers", {
+    lastFetchedBlockNumbers: {
+      ...lastFetchedBlockNumbers,
+      [lastFetchedKey]: lastFetchedBlockNumber
+    },
+    blockNumber: lastFetchedBlockNumber
+  });
+};
+_getBlockNumberKey = new WeakSet();
+getBlockNumberKey_fn = function(additionalKeys) {
+  const currentChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getChainId).call(this);
+  const currentAccount = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getCurrentAccount).call(this)?.toLowerCase();
+  return [currentChainId, currentAccount, ...additionalKeys].join("#");
+};
+_canStart = new WeakSet();
+canStart_fn = function() {
+  const isEnabled = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isEnabled).call(this);
+  const currentChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getChainId).call(this);
+  const isSupportedNetwork = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _remoteTransactionSource).isSupportedNetwork(currentChainId);
+  return isEnabled && isSupportedNetwork;
+};
+
+
+
+exports.IncomingTransactionHelper = IncomingTransactionHelper;
+//# sourceMappingURL=chunk-DTDTOMTB.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-DUFOYA4D.js b/node_modules/@metamask/transaction-controller/dist/chunk-DUFOYA4D.js
new file mode 100644
index 0000000..069942f
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-DUFOYA4D.js
@@ -0,0 +1,121 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkVJYFB7BMjs = require('./chunk-VJYFB7BM.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+
+var _chunk5C3CSQADjs = require('./chunk-5C3CSQAD.js');
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/gas-flows/LineaGasFeeFlow.ts
+var _controllerutils = require('@metamask/controller-utils');
+var _utils = require('@metamask/utils');
+var log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "linea-gas-fee-flow");
+var LINEA_CHAIN_IDS = [
+  _controllerutils.ChainId["linea-mainnet"],
+  _controllerutils.ChainId["linea-goerli"],
+  _controllerutils.ChainId["linea-sepolia"]
+];
+var BASE_FEE_MULTIPLIERS = {
+  low: 1,
+  medium: 1.35,
+  high: 1.7
+};
+var PRIORITY_FEE_MULTIPLIERS = {
+  low: 1,
+  medium: 1.05,
+  high: 1.1
+};
+var _getLineaGasFees, getLineaGasFees_fn, _getLineaResponse, getLineaResponse_fn, _getValuesFromMultipliers, getValuesFromMultipliers_fn, _getMaxFees, getMaxFees_fn, _feesToString, feesToString_fn;
+var LineaGasFeeFlow = class {
+  constructor() {
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLineaGasFees);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLineaResponse);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getValuesFromMultipliers);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getMaxFees);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _feesToString);
+  }
+  matchesTransaction(transactionMeta) {
+    return LINEA_CHAIN_IDS.includes(transactionMeta.chainId);
+  }
+  async getGasFees(request) {
+    try {
+      return await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLineaGasFees, getLineaGasFees_fn).call(this, request);
+    } catch (error) {
+      log("Using default flow as fallback due to error", error);
+      return new (0, _chunkVJYFB7BMjs.DefaultGasFeeFlow)().getGasFees(request);
+    }
+  }
+};
+_getLineaGasFees = new WeakSet();
+getLineaGasFees_fn = async function(request) {
+  const { ethQuery, transactionMeta } = request;
+  const lineaResponse = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLineaResponse, getLineaResponse_fn).call(this, transactionMeta, ethQuery);
+  log("Received Linea response", lineaResponse);
+  const baseFees = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValuesFromMultipliers, getValuesFromMultipliers_fn).call(this, lineaResponse.baseFeePerGas, BASE_FEE_MULTIPLIERS);
+  log("Generated base fees", _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _feesToString, feesToString_fn).call(this, baseFees));
+  const priorityFees = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValuesFromMultipliers, getValuesFromMultipliers_fn).call(this, lineaResponse.priorityFeePerGas, PRIORITY_FEE_MULTIPLIERS);
+  log("Generated priority fees", _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _feesToString, feesToString_fn).call(this, priorityFees));
+  const maxFees = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getMaxFees, getMaxFees_fn).call(this, baseFees, priorityFees);
+  log("Generated max fees", _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _feesToString, feesToString_fn).call(this, maxFees));
+  const estimates = Object.values(_chunk5C3CSQADjs.GasFeeEstimateLevel).reduce(
+    (result, level) => ({
+      ...result,
+      [level]: {
+        maxFeePerGas: _controllerutils.toHex.call(void 0, maxFees[level]),
+        maxPriorityFeePerGas: _controllerutils.toHex.call(void 0, priorityFees[level])
+      }
+    }),
+    { type: "fee-market" /* FeeMarket */ }
+  );
+  return { estimates };
+};
+_getLineaResponse = new WeakSet();
+getLineaResponse_fn = function(transactionMeta, ethQuery) {
+  return _controllerutils.query.call(void 0, ethQuery, "linea_estimateGas", [
+    {
+      from: transactionMeta.txParams.from,
+      to: transactionMeta.txParams.to,
+      value: transactionMeta.txParams.value,
+      input: transactionMeta.txParams.data,
+      // Required in request but no impact on response.
+      gasPrice: "0x100000000"
+    }
+  ]);
+};
+_getValuesFromMultipliers = new WeakSet();
+getValuesFromMultipliers_fn = function(value, multipliers) {
+  const base = _controllerutils.hexToBN.call(void 0, value);
+  const low = base.muln(multipliers.low);
+  const medium = base.muln(multipliers.medium);
+  const high = base.muln(multipliers.high);
+  return {
+    low,
+    medium,
+    high
+  };
+};
+_getMaxFees = new WeakSet();
+getMaxFees_fn = function(baseFees, priorityFees) {
+  return {
+    low: baseFees.low.add(priorityFees.low),
+    medium: baseFees.medium.add(priorityFees.medium),
+    high: baseFees.high.add(priorityFees.high)
+  };
+};
+_feesToString = new WeakSet();
+feesToString_fn = function(fees) {
+  return Object.values(_chunk5C3CSQADjs.GasFeeEstimateLevel).map(
+    (level) => fees[level].toString(10)
+  );
+};
+
+
+
+exports.LineaGasFeeFlow = LineaGasFeeFlow;
+//# sourceMappingURL=chunk-DUFOYA4D.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-EMDU4XLM.js b/node_modules/@metamask/transaction-controller/dist/chunk-EMDU4XLM.js
new file mode 100644
index 0000000..858eb00
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-EMDU4XLM.js
@@ -0,0 +1,67 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunk5C3CSQADjs = require('./chunk-5C3CSQAD.js');
+
+// src/utils/gas-flow.ts
+var _controllerutils = require('@metamask/controller-utils');
+function getGasFeeFlow(transactionMeta, gasFeeFlows) {
+  return gasFeeFlows.find(
+    (gasFeeFlow) => gasFeeFlow.matchesTransaction(transactionMeta)
+  );
+}
+function mergeGasFeeEstimates({
+  gasFeeControllerEstimates,
+  transactionGasFeeEstimates
+}) {
+  const transactionEstimateType = transactionGasFeeEstimates.type;
+  if (transactionEstimateType === "fee-market" /* FeeMarket */) {
+    return Object.values(_chunk5C3CSQADjs.GasFeeEstimateLevel).reduce(
+      (result, level) => ({
+        ...result,
+        [level]: mergeFeeMarketEstimate(
+          gasFeeControllerEstimates?.[level],
+          transactionGasFeeEstimates[level]
+        )
+      }),
+      { ...gasFeeControllerEstimates }
+    );
+  }
+  if (transactionEstimateType === "legacy" /* Legacy */) {
+    return Object.values(_chunk5C3CSQADjs.GasFeeEstimateLevel).reduce(
+      (result, level) => ({
+        ...result,
+        [level]: getLegacyEstimate(transactionGasFeeEstimates, level)
+      }),
+      {}
+    );
+  }
+  if (transactionEstimateType === "eth_gasPrice" /* GasPrice */) {
+    return {
+      gasPrice: getGasPriceEstimate(transactionGasFeeEstimates)
+    };
+  }
+  return gasFeeControllerEstimates;
+}
+function mergeFeeMarketEstimate(gasFeeControllerEstimate, transactionGasFeeEstimate) {
+  return {
+    ...gasFeeControllerEstimate,
+    suggestedMaxFeePerGas: _controllerutils.weiHexToGweiDec.call(void 0, 
+      transactionGasFeeEstimate.maxFeePerGas
+    ),
+    suggestedMaxPriorityFeePerGas: _controllerutils.weiHexToGweiDec.call(void 0, 
+      transactionGasFeeEstimate.maxPriorityFeePerGas
+    )
+  };
+}
+function getLegacyEstimate(transactionGasFeeEstimate, level) {
+  return _controllerutils.weiHexToGweiDec.call(void 0, transactionGasFeeEstimate[level]);
+}
+function getGasPriceEstimate(transactionGasFeeEstimate) {
+  return _controllerutils.weiHexToGweiDec.call(void 0, transactionGasFeeEstimate.gasPrice);
+}
+
+
+
+
+exports.getGasFeeFlow = getGasFeeFlow; exports.mergeGasFeeEstimates = mergeGasFeeEstimates;
+//# sourceMappingURL=chunk-EMDU4XLM.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-EQT25RSP.js b/node_modules/@metamask/transaction-controller/dist/chunk-EQT25RSP.js
new file mode 100644
index 0000000..c166766
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-EQT25RSP.js
@@ -0,0 +1,170 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+
+var _chunkFDUCRHYTjs = require('./chunk-FDUCRHYT.js');
+
+
+var _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/helpers/EtherscanRemoteTransactionSource.ts
+var _controllerutils = require('@metamask/controller-utils');
+var _asyncmutex = require('async-mutex');
+var _bnjs = require('bn.js'); var _bnjs2 = _interopRequireDefault(_bnjs);
+var _uuid = require('uuid');
+var ETHERSCAN_RATE_LIMIT_INTERVAL = 5e3;
+var _includeTokenTransfers, _isTokenRequestPending, _mutex, _releaseLockAfterInterval, releaseLockAfterInterval_fn, _fetchNormalTransactions, _fetchTokenTransactions, _getResponseTransactions, getResponseTransactions_fn, _normalizeTransaction, normalizeTransaction_fn, _normalizeTokenTransaction, normalizeTokenTransaction_fn, _normalizeTransactionBase, normalizeTransactionBase_fn;
+var EtherscanRemoteTransactionSource = class {
+  constructor({
+    includeTokenTransfers
+  } = {}) {
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _releaseLockAfterInterval);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getResponseTransactions);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _normalizeTransaction);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _normalizeTokenTransaction);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _normalizeTransactionBase);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _includeTokenTransfers, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isTokenRequestPending, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _mutex, new (0, _asyncmutex.Mutex)());
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _fetchNormalTransactions, async (request, etherscanRequest) => {
+      const { currentChainId } = request;
+      const etherscanTransactions = await _chunkFDUCRHYTjs.fetchEtherscanTransactions.call(void 0, 
+        etherscanRequest
+      );
+      return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getResponseTransactions, getResponseTransactions_fn).call(this, etherscanTransactions).map(
+        (tx) => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _normalizeTransaction, normalizeTransaction_fn).call(this, tx, currentChainId)
+      );
+    });
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _fetchTokenTransactions, async (request, etherscanRequest) => {
+      const { currentChainId } = request;
+      const etherscanTransactions = await _chunkFDUCRHYTjs.fetchEtherscanTokenTransactions.call(void 0, 
+        etherscanRequest
+      );
+      return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getResponseTransactions, getResponseTransactions_fn).call(this, etherscanTransactions).map(
+        (tx) => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _normalizeTokenTransaction, normalizeTokenTransaction_fn).call(this, tx, currentChainId)
+      );
+    });
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _includeTokenTransfers, includeTokenTransfers ?? true);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isTokenRequestPending, false);
+  }
+  isSupportedNetwork(chainId) {
+    return Object.keys(_chunkUGN7PBONjs.ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);
+  }
+  getLastBlockVariations() {
+    return [_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isTokenRequestPending) ? "token" : "normal"];
+  }
+  async fetchTransactions(request) {
+    const releaseLock = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _mutex).acquire();
+    const acquiredTime = Date.now();
+    const etherscanRequest = {
+      ...request,
+      chainId: request.currentChainId
+    };
+    try {
+      const transactions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isTokenRequestPending) ? await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _fetchTokenTransactions).call(this, request, etherscanRequest) : await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _fetchNormalTransactions).call(this, request, etherscanRequest);
+      if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _includeTokenTransfers)) {
+        _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isTokenRequestPending, !_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isTokenRequestPending));
+      }
+      return transactions;
+    } finally {
+      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _releaseLockAfterInterval, releaseLockAfterInterval_fn).call(this, acquiredTime, releaseLock);
+    }
+  }
+};
+_includeTokenTransfers = new WeakMap();
+_isTokenRequestPending = new WeakMap();
+_mutex = new WeakMap();
+_releaseLockAfterInterval = new WeakSet();
+releaseLockAfterInterval_fn = function(acquireTime, releaseLock) {
+  const elapsedTime = Date.now() - acquireTime;
+  const remainingTime = Math.max(
+    0,
+    ETHERSCAN_RATE_LIMIT_INTERVAL - elapsedTime
+  );
+  if (remainingTime > 0) {
+    setTimeout(releaseLock, remainingTime);
+  } else {
+    releaseLock();
+  }
+};
+_fetchNormalTransactions = new WeakMap();
+_fetchTokenTransactions = new WeakMap();
+_getResponseTransactions = new WeakSet();
+getResponseTransactions_fn = function(response) {
+  let result = response.result;
+  if (response.status === "0") {
+    result = [];
+    if (response.result.length) {
+      _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, "Ignored Etherscan request error", {
+        message: response.result,
+        type: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isTokenRequestPending) ? "token" : "normal"
+      });
+    }
+  }
+  return result;
+};
+_normalizeTransaction = new WeakSet();
+normalizeTransaction_fn = function(txMeta, currentChainId) {
+  const base = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _normalizeTransactionBase, normalizeTransactionBase_fn).call(this, txMeta, currentChainId);
+  return {
+    ...base,
+    txParams: {
+      ...base.txParams,
+      data: txMeta.input
+    },
+    ...txMeta.isError === "0" ? { status: "confirmed" /* confirmed */ } : {
+      error: new Error("Transaction failed"),
+      status: "failed" /* failed */
+    }
+  };
+};
+_normalizeTokenTransaction = new WeakSet();
+normalizeTokenTransaction_fn = function(txMeta, currentChainId) {
+  const base = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _normalizeTransactionBase, normalizeTransactionBase_fn).call(this, txMeta, currentChainId);
+  return {
+    ...base,
+    isTransfer: true,
+    transferInformation: {
+      contractAddress: txMeta.contractAddress,
+      decimals: Number(txMeta.tokenDecimal),
+      symbol: txMeta.tokenSymbol
+    }
+  };
+};
+_normalizeTransactionBase = new WeakSet();
+normalizeTransactionBase_fn = function(txMeta, currentChainId) {
+  const time = parseInt(txMeta.timeStamp, 10) * 1e3;
+  return {
+    blockNumber: txMeta.blockNumber,
+    chainId: currentChainId,
+    hash: txMeta.hash,
+    id: _uuid.v1.call(void 0, { msecs: time }),
+    status: "confirmed" /* confirmed */,
+    time,
+    txParams: {
+      chainId: currentChainId,
+      from: txMeta.from,
+      gas: _controllerutils.BNToHex.call(void 0, new (0, _bnjs2.default)(txMeta.gas)),
+      gasPrice: _controllerutils.BNToHex.call(void 0, new (0, _bnjs2.default)(txMeta.gasPrice)),
+      gasUsed: _controllerutils.BNToHex.call(void 0, new (0, _bnjs2.default)(txMeta.gasUsed)),
+      nonce: _controllerutils.BNToHex.call(void 0, new (0, _bnjs2.default)(txMeta.nonce)),
+      to: txMeta.to,
+      value: _controllerutils.BNToHex.call(void 0, new (0, _bnjs2.default)(txMeta.value))
+    },
+    type: "incoming" /* incoming */,
+    verifiedOnBlockchain: false
+  };
+};
+
+
+
+exports.EtherscanRemoteTransactionSource = EtherscanRemoteTransactionSource;
+//# sourceMappingURL=chunk-EQT25RSP.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-F6E3TTR3.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-F6E3TTR3.mjs
new file mode 100644
index 0000000..c289654
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-F6E3TTR3.mjs
@@ -0,0 +1,335 @@
+import {
+  EtherscanRemoteTransactionSource
+} from "./chunk-CPMTUMMZ.mjs";
+import {
+  incomingTransactionsLogger
+} from "./chunk-UQQWZT6C.mjs";
+import {
+  __privateAdd,
+  __privateGet,
+  __privateMethod,
+  __privateSet
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/helpers/MultichainTrackingHelper.ts
+import EthQuery from "@metamask/eth-query";
+import { Mutex } from "async-mutex";
+var _isMultichainEnabled, _provider, _nonceTracker, _incomingTransactionOptions, _findNetworkClientIdByChainId, _getNetworkClientById, _getNetworkClientRegistry, _removeIncomingTransactionHelperListeners, _removePendingTransactionTrackerListeners, _createNonceTracker, _createIncomingTransactionHelper, _createPendingTransactionTracker, _nonceMutexesByChainId, _trackingMap, _etherscanRemoteTransactionSourcesMap, _refreshTrackingMap, _stopTrackingByNetworkClientId, stopTrackingByNetworkClientId_fn, _startTrackingByNetworkClientId, startTrackingByNetworkClientId_fn, _refreshEtherscanRemoteTransactionSources, _getNetworkClient, getNetworkClient_fn;
+var MultichainTrackingHelper = class {
+  constructor({
+    isMultichainEnabled,
+    provider,
+    nonceTracker,
+    incomingTransactionOptions,
+    findNetworkClientIdByChainId,
+    getNetworkClientById,
+    getNetworkClientRegistry,
+    removeIncomingTransactionHelperListeners,
+    removePendingTransactionTrackerListeners,
+    createNonceTracker,
+    createIncomingTransactionHelper,
+    createPendingTransactionTracker,
+    onNetworkStateChange
+  }) {
+    __privateAdd(this, _stopTrackingByNetworkClientId);
+    __privateAdd(this, _startTrackingByNetworkClientId);
+    __privateAdd(this, _getNetworkClient);
+    __privateAdd(this, _isMultichainEnabled, void 0);
+    __privateAdd(this, _provider, void 0);
+    __privateAdd(this, _nonceTracker, void 0);
+    __privateAdd(this, _incomingTransactionOptions, void 0);
+    __privateAdd(this, _findNetworkClientIdByChainId, void 0);
+    __privateAdd(this, _getNetworkClientById, void 0);
+    __privateAdd(this, _getNetworkClientRegistry, void 0);
+    __privateAdd(this, _removeIncomingTransactionHelperListeners, void 0);
+    __privateAdd(this, _removePendingTransactionTrackerListeners, void 0);
+    __privateAdd(this, _createNonceTracker, void 0);
+    __privateAdd(this, _createIncomingTransactionHelper, void 0);
+    __privateAdd(this, _createPendingTransactionTracker, void 0);
+    __privateAdd(this, _nonceMutexesByChainId, /* @__PURE__ */ new Map());
+    __privateAdd(this, _trackingMap, /* @__PURE__ */ new Map());
+    __privateAdd(this, _etherscanRemoteTransactionSourcesMap, /* @__PURE__ */ new Map());
+    this.checkForPendingTransactionAndStartPolling = () => {
+      for (const [, trackers] of __privateGet(this, _trackingMap)) {
+        trackers.pendingTransactionTracker.startIfPendingTransactions();
+      }
+    };
+    __privateAdd(this, _refreshTrackingMap, (networkClients) => {
+      __privateGet(this, _refreshEtherscanRemoteTransactionSources).call(this, networkClients);
+      const networkClientIds = Object.keys(networkClients);
+      const existingNetworkClientIds = Array.from(__privateGet(this, _trackingMap).keys());
+      const networkClientIdsToRemove = existingNetworkClientIds.filter(
+        (id) => !networkClientIds.includes(id)
+      );
+      networkClientIdsToRemove.forEach((id) => {
+        __privateMethod(this, _stopTrackingByNetworkClientId, stopTrackingByNetworkClientId_fn).call(this, id);
+      });
+      const networkClientIdsToAdd = networkClientIds.filter(
+        (id) => !existingNetworkClientIds.includes(id)
+      );
+      networkClientIdsToAdd.forEach((id) => {
+        __privateMethod(this, _startTrackingByNetworkClientId, startTrackingByNetworkClientId_fn).call(this, id);
+      });
+    });
+    __privateAdd(this, _refreshEtherscanRemoteTransactionSources, (networkClients) => {
+      const chainIdsInRegistry = /* @__PURE__ */ new Set();
+      Object.values(networkClients).forEach(
+        (networkClient) => chainIdsInRegistry.add(networkClient.configuration.chainId)
+      );
+      const existingChainIds = Array.from(
+        __privateGet(this, _etherscanRemoteTransactionSourcesMap).keys()
+      );
+      const chainIdsToRemove = existingChainIds.filter(
+        (chainId) => !chainIdsInRegistry.has(chainId)
+      );
+      chainIdsToRemove.forEach((chainId) => {
+        __privateGet(this, _etherscanRemoteTransactionSourcesMap).delete(chainId);
+      });
+    });
+    __privateSet(this, _isMultichainEnabled, isMultichainEnabled);
+    __privateSet(this, _provider, provider);
+    __privateSet(this, _nonceTracker, nonceTracker);
+    __privateSet(this, _incomingTransactionOptions, incomingTransactionOptions);
+    __privateSet(this, _findNetworkClientIdByChainId, findNetworkClientIdByChainId);
+    __privateSet(this, _getNetworkClientById, getNetworkClientById);
+    __privateSet(this, _getNetworkClientRegistry, getNetworkClientRegistry);
+    __privateSet(this, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners);
+    __privateSet(this, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners);
+    __privateSet(this, _createNonceTracker, createNonceTracker);
+    __privateSet(this, _createIncomingTransactionHelper, createIncomingTransactionHelper);
+    __privateSet(this, _createPendingTransactionTracker, createPendingTransactionTracker);
+    onNetworkStateChange((_, patches) => {
+      if (__privateGet(this, _isMultichainEnabled)) {
+        const networkClients = __privateGet(this, _getNetworkClientRegistry).call(this);
+        patches.forEach(({ op, path }) => {
+          if (op === "remove" && path[0] === "networkConfigurations") {
+            const networkClientId = path[1];
+            delete networkClients[networkClientId];
+          }
+        });
+        __privateGet(this, _refreshTrackingMap).call(this, networkClients);
+      }
+    });
+  }
+  initialize() {
+    if (!__privateGet(this, _isMultichainEnabled)) {
+      return;
+    }
+    const networkClients = __privateGet(this, _getNetworkClientRegistry).call(this);
+    __privateGet(this, _refreshTrackingMap).call(this, networkClients);
+  }
+  has(networkClientId) {
+    return __privateGet(this, _trackingMap).has(networkClientId);
+  }
+  getEthQuery({
+    networkClientId,
+    chainId
+  } = {}) {
+    return new EthQuery(this.getProvider({ networkClientId, chainId }));
+  }
+  getProvider({
+    networkClientId,
+    chainId
+  } = {}) {
+    if (!__privateGet(this, _isMultichainEnabled)) {
+      return __privateGet(this, _provider);
+    }
+    const networkClient = __privateMethod(this, _getNetworkClient, getNetworkClient_fn).call(this, {
+      networkClientId,
+      chainId
+    });
+    return networkClient?.provider || __privateGet(this, _provider);
+  }
+  /**
+   * Gets the mutex intended to guard the nonceTracker for a particular chainId and key .
+   *
+   * @param opts - The options object.
+   * @param opts.chainId - The hex chainId.
+   * @param opts.key - The hex address (or constant) pertaining to the chainId
+   * @returns Mutex instance for the given chainId and key pair
+   */
+  async acquireNonceLockForChainIdKey({
+    chainId,
+    key = "global"
+  }) {
+    let nonceMutexesForChainId = __privateGet(this, _nonceMutexesByChainId).get(chainId);
+    if (!nonceMutexesForChainId) {
+      nonceMutexesForChainId = /* @__PURE__ */ new Map();
+      __privateGet(this, _nonceMutexesByChainId).set(chainId, nonceMutexesForChainId);
+    }
+    let nonceMutexForKey = nonceMutexesForChainId.get(key);
+    if (!nonceMutexForKey) {
+      nonceMutexForKey = new Mutex();
+      nonceMutexesForChainId.set(key, nonceMutexForKey);
+    }
+    return await nonceMutexForKey.acquire();
+  }
+  /**
+   * Gets the next nonce according to the nonce-tracker.
+   * Ensure `releaseLock` is called once processing of the `nonce` value is complete.
+   *
+   * @param address - The hex string address for the transaction.
+   * @param networkClientId - The network client ID for the transaction, used to fetch the correct nonce tracker.
+   * @returns object with the `nextNonce` `nonceDetails`, and the releaseLock.
+   */
+  async getNonceLock(address, networkClientId) {
+    let releaseLockForChainIdKey;
+    let nonceTracker = __privateGet(this, _nonceTracker);
+    if (networkClientId && __privateGet(this, _isMultichainEnabled)) {
+      const networkClient = __privateGet(this, _getNetworkClientById).call(this, networkClientId);
+      releaseLockForChainIdKey = await this.acquireNonceLockForChainIdKey({
+        chainId: networkClient.configuration.chainId,
+        key: address
+      });
+      const trackers = __privateGet(this, _trackingMap).get(networkClientId);
+      if (!trackers) {
+        throw new Error("missing nonceTracker for networkClientId");
+      }
+      nonceTracker = trackers.nonceTracker;
+    }
+    try {
+      const nonceLock = await nonceTracker.getNonceLock(address);
+      return {
+        ...nonceLock,
+        releaseLock: () => {
+          nonceLock.releaseLock();
+          releaseLockForChainIdKey?.();
+        }
+      };
+    } catch (err) {
+      releaseLockForChainIdKey?.();
+      throw err;
+    }
+  }
+  startIncomingTransactionPolling(networkClientIds = []) {
+    networkClientIds.forEach((networkClientId) => {
+      __privateGet(this, _trackingMap).get(networkClientId)?.incomingTransactionHelper.start();
+    });
+  }
+  stopIncomingTransactionPolling(networkClientIds = []) {
+    networkClientIds.forEach((networkClientId) => {
+      __privateGet(this, _trackingMap).get(networkClientId)?.incomingTransactionHelper.stop();
+    });
+  }
+  stopAllIncomingTransactionPolling() {
+    for (const [, trackers] of __privateGet(this, _trackingMap)) {
+      trackers.incomingTransactionHelper.stop();
+    }
+  }
+  async updateIncomingTransactions(networkClientIds = []) {
+    const promises = await Promise.allSettled(
+      networkClientIds.map(async (networkClientId) => {
+        return await __privateGet(this, _trackingMap).get(networkClientId)?.incomingTransactionHelper.update();
+      })
+    );
+    promises.filter((result) => result.status === "rejected").forEach((result) => {
+      incomingTransactionsLogger(
+        "failed to update incoming transactions",
+        result.reason
+      );
+    });
+  }
+  stopAllTracking() {
+    for (const [networkClientId] of __privateGet(this, _trackingMap)) {
+      __privateMethod(this, _stopTrackingByNetworkClientId, stopTrackingByNetworkClientId_fn).call(this, networkClientId);
+    }
+  }
+};
+_isMultichainEnabled = new WeakMap();
+_provider = new WeakMap();
+_nonceTracker = new WeakMap();
+_incomingTransactionOptions = new WeakMap();
+_findNetworkClientIdByChainId = new WeakMap();
+_getNetworkClientById = new WeakMap();
+_getNetworkClientRegistry = new WeakMap();
+_removeIncomingTransactionHelperListeners = new WeakMap();
+_removePendingTransactionTrackerListeners = new WeakMap();
+_createNonceTracker = new WeakMap();
+_createIncomingTransactionHelper = new WeakMap();
+_createPendingTransactionTracker = new WeakMap();
+_nonceMutexesByChainId = new WeakMap();
+_trackingMap = new WeakMap();
+_etherscanRemoteTransactionSourcesMap = new WeakMap();
+_refreshTrackingMap = new WeakMap();
+_stopTrackingByNetworkClientId = new WeakSet();
+stopTrackingByNetworkClientId_fn = function(networkClientId) {
+  const trackers = __privateGet(this, _trackingMap).get(networkClientId);
+  if (trackers) {
+    trackers.pendingTransactionTracker.stop();
+    __privateGet(this, _removePendingTransactionTrackerListeners).call(this, trackers.pendingTransactionTracker);
+    trackers.incomingTransactionHelper.stop();
+    __privateGet(this, _removeIncomingTransactionHelperListeners).call(this, trackers.incomingTransactionHelper);
+    __privateGet(this, _trackingMap).delete(networkClientId);
+  }
+};
+_startTrackingByNetworkClientId = new WeakSet();
+startTrackingByNetworkClientId_fn = function(networkClientId) {
+  const trackers = __privateGet(this, _trackingMap).get(networkClientId);
+  if (trackers) {
+    return;
+  }
+  const {
+    provider,
+    blockTracker,
+    configuration: { chainId }
+  } = __privateGet(this, _getNetworkClientById).call(this, networkClientId);
+  let etherscanRemoteTransactionSource = __privateGet(this, _etherscanRemoteTransactionSourcesMap).get(chainId);
+  if (!etherscanRemoteTransactionSource) {
+    etherscanRemoteTransactionSource = new EtherscanRemoteTransactionSource({
+      includeTokenTransfers: __privateGet(this, _incomingTransactionOptions).includeTokenTransfers
+    });
+    __privateGet(this, _etherscanRemoteTransactionSourcesMap).set(
+      chainId,
+      etherscanRemoteTransactionSource
+    );
+  }
+  const nonceTracker = __privateGet(this, _createNonceTracker).call(this, {
+    provider,
+    blockTracker,
+    chainId
+  });
+  const incomingTransactionHelper = __privateGet(this, _createIncomingTransactionHelper).call(this, {
+    blockTracker,
+    etherscanRemoteTransactionSource,
+    chainId
+  });
+  const pendingTransactionTracker = __privateGet(this, _createPendingTransactionTracker).call(this, {
+    provider,
+    blockTracker,
+    chainId
+  });
+  __privateGet(this, _trackingMap).set(networkClientId, {
+    nonceTracker,
+    incomingTransactionHelper,
+    pendingTransactionTracker
+  });
+};
+_refreshEtherscanRemoteTransactionSources = new WeakMap();
+_getNetworkClient = new WeakSet();
+getNetworkClient_fn = function({
+  networkClientId,
+  chainId
+} = {}) {
+  let networkClient;
+  if (networkClientId) {
+    try {
+      networkClient = __privateGet(this, _getNetworkClientById).call(this, networkClientId);
+    } catch (err) {
+      incomingTransactionsLogger("failed to get network client by networkClientId");
+    }
+  }
+  if (!networkClient && chainId) {
+    try {
+      const networkClientIdForChainId = __privateGet(this, _findNetworkClientIdByChainId).call(this, chainId);
+      networkClient = __privateGet(this, _getNetworkClientById).call(this, networkClientIdForChainId);
+    } catch (err) {
+      incomingTransactionsLogger("failed to get network client by chainId");
+    }
+  }
+  return networkClient;
+};
+
+export {
+  MultichainTrackingHelper
+};
+//# sourceMappingURL=chunk-F6E3TTR3.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-FDUCRHYT.js b/node_modules/@metamask/transaction-controller/dist/chunk-FDUCRHYT.js
new file mode 100644
index 0000000..712462d
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-FDUCRHYT.js
@@ -0,0 +1,85 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+// src/utils/etherscan.ts
+var _controllerutils = require('@metamask/controller-utils');
+async function fetchEtherscanTransactions({
+  address,
+  chainId,
+  fromBlock,
+  limit
+}) {
+  return await fetchTransactions("txlist", {
+    address,
+    chainId,
+    fromBlock,
+    limit
+  });
+}
+async function fetchEtherscanTokenTransactions({
+  address,
+  chainId,
+  fromBlock,
+  limit
+}) {
+  return await fetchTransactions("tokentx", {
+    address,
+    chainId,
+    fromBlock,
+    limit
+  });
+}
+async function fetchTransactions(action, {
+  address,
+  chainId,
+  fromBlock,
+  limit
+}) {
+  const urlParams = {
+    module: "account",
+    address,
+    startBlock: fromBlock?.toString(),
+    offset: limit?.toString(),
+    sort: "desc"
+  };
+  const etherscanTxUrl = getEtherscanApiUrl(chainId, {
+    ...urlParams,
+    action
+  });
+  _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, "Sending Etherscan request", etherscanTxUrl);
+  const response = await _controllerutils.handleFetch.call(void 0, 
+    etherscanTxUrl
+  );
+  return response;
+}
+function getEtherscanApiUrl(chainId, urlParams) {
+  const apiUrl = getEtherscanApiHost(chainId);
+  let url = `${apiUrl}/api?`;
+  for (const paramKey of Object.keys(urlParams)) {
+    const value = urlParams[paramKey];
+    if (!value) {
+      continue;
+    }
+    url += `${paramKey}=${value}&`;
+  }
+  url += "tag=latest&page=1";
+  return url;
+}
+function getEtherscanApiHost(chainId) {
+  const networkInfo = _chunkUGN7PBONjs.ETHERSCAN_SUPPORTED_NETWORKS[chainId];
+  if (!networkInfo) {
+    throw new Error(`Etherscan does not support chain with ID: ${chainId}`);
+  }
+  return `https://${networkInfo.subdomain}.${networkInfo.domain}`;
+}
+
+
+
+
+
+exports.fetchEtherscanTransactions = fetchEtherscanTransactions; exports.fetchEtherscanTokenTransactions = fetchEtherscanTokenTransactions; exports.getEtherscanApiHost = getEtherscanApiHost;
+//# sourceMappingURL=chunk-FDUCRHYT.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-FG74Z3F5.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-FG74Z3F5.mjs
new file mode 100644
index 0000000..005ecd4
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-FG74Z3F5.mjs
@@ -0,0 +1,102 @@
+import {
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+import {
+  __privateAdd,
+  __privateGet,
+  __privateMethod,
+  __privateSet
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/gas-flows/OracleLayer1GasFeeFlow.ts
+import { Common, Hardfork } from "@ethereumjs/common";
+import { TransactionFactory } from "@ethereumjs/tx";
+import { Contract } from "@ethersproject/contracts";
+import { Web3Provider } from "@ethersproject/providers";
+import { createModuleLogger } from "@metamask/utils";
+import { omit } from "lodash";
+var log = createModuleLogger(projectLogger, "oracle-layer1-gas-fee-flow");
+var DUMMY_KEY = "abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789";
+var GAS_PRICE_ORACLE_ABI = [
+  {
+    inputs: [{ internalType: "bytes", name: "_data", type: "bytes" }],
+    name: "getL1Fee",
+    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
+    stateMutability: "view",
+    type: "function"
+  }
+];
+var _oracleAddress, _signTransaction, _getOracleLayer1GasFee, getOracleLayer1GasFee_fn, _buildUnserializedTransaction, buildUnserializedTransaction_fn, _buildTransactionParams, buildTransactionParams_fn, _buildTransactionCommon, buildTransactionCommon_fn;
+var OracleLayer1GasFeeFlow = class {
+  constructor(oracleAddress, signTransaction) {
+    __privateAdd(this, _getOracleLayer1GasFee);
+    __privateAdd(this, _buildUnserializedTransaction);
+    __privateAdd(this, _buildTransactionParams);
+    __privateAdd(this, _buildTransactionCommon);
+    __privateAdd(this, _oracleAddress, void 0);
+    __privateAdd(this, _signTransaction, void 0);
+    __privateSet(this, _oracleAddress, oracleAddress);
+    __privateSet(this, _signTransaction, signTransaction ?? false);
+  }
+  async getLayer1Fee(request) {
+    try {
+      return await __privateMethod(this, _getOracleLayer1GasFee, getOracleLayer1GasFee_fn).call(this, request);
+    } catch (error) {
+      log("Failed to get oracle layer 1 gas fee", error);
+      throw new Error(`Failed to get oracle layer 1 gas fee`);
+    }
+  }
+};
+_oracleAddress = new WeakMap();
+_signTransaction = new WeakMap();
+_getOracleLayer1GasFee = new WeakSet();
+getOracleLayer1GasFee_fn = async function(request) {
+  const { provider, transactionMeta } = request;
+  const contract = new Contract(
+    __privateGet(this, _oracleAddress),
+    GAS_PRICE_ORACLE_ABI,
+    // Network controller provider type is incompatible with ethers provider
+    new Web3Provider(provider)
+  );
+  const serializedTransaction = __privateMethod(this, _buildUnserializedTransaction, buildUnserializedTransaction_fn).call(this, transactionMeta, __privateGet(this, _signTransaction)).serialize();
+  const result = await contract.getL1Fee(serializedTransaction);
+  if (result === void 0) {
+    throw new Error("No value returned from oracle contract");
+  }
+  return {
+    layer1Fee: result.toHexString()
+  };
+};
+_buildUnserializedTransaction = new WeakSet();
+buildUnserializedTransaction_fn = function(transactionMeta, sign) {
+  const txParams = __privateMethod(this, _buildTransactionParams, buildTransactionParams_fn).call(this, transactionMeta);
+  const common = __privateMethod(this, _buildTransactionCommon, buildTransactionCommon_fn).call(this, transactionMeta);
+  let unserializedTransaction = TransactionFactory.fromTxData(txParams, {
+    common
+  });
+  if (sign) {
+    const keyBuffer = Buffer.from(DUMMY_KEY, "hex");
+    unserializedTransaction = unserializedTransaction.sign(keyBuffer);
+  }
+  return unserializedTransaction;
+};
+_buildTransactionParams = new WeakSet();
+buildTransactionParams_fn = function(transactionMeta) {
+  return {
+    ...omit(transactionMeta.txParams, "gas"),
+    gasLimit: transactionMeta.txParams.gas
+  };
+};
+_buildTransactionCommon = new WeakSet();
+buildTransactionCommon_fn = function(transactionMeta) {
+  const chainId = Number(transactionMeta.chainId);
+  return Common.custom({
+    chainId,
+    defaultHardfork: Hardfork.London
+  });
+};
+
+export {
+  OracleLayer1GasFeeFlow
+};
+//# sourceMappingURL=chunk-FG74Z3F5.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-FMRLPVFZ.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-FMRLPVFZ.mjs
new file mode 100644
index 0000000..3539c71
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-FMRLPVFZ.mjs
@@ -0,0 +1,66 @@
+import {
+  __privateAdd,
+  __privateGet,
+  __privateMethod,
+  __privateSet
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/gas-flows/TestGasFeeFlow.ts
+import { toHex } from "@metamask/controller-utils";
+var INCREMENT = 1e15;
+var LEVEL_DIFFERENCE = 0.5;
+var _counter, _getValueForTotalFee, getValueForTotalFee_fn;
+var TestGasFeeFlow = class {
+  constructor() {
+    __privateAdd(this, _getValueForTotalFee);
+    __privateAdd(this, _counter, 1);
+  }
+  matchesTransaction(_transactionMeta) {
+    return true;
+  }
+  async getGasFees(request) {
+    const { transactionMeta } = request;
+    const { txParams } = transactionMeta;
+    const { gas: gasHex } = txParams;
+    if (!gasHex) {
+      throw new Error("Cannot estimate fee without gas value");
+    }
+    const gasDecimal = parseInt(gasHex, 16);
+    const difference = INCREMENT * LEVEL_DIFFERENCE;
+    const mediumMaxTarget = (__privateGet(this, _counter) + 1) * INCREMENT;
+    const mediumPriorityTarget = __privateGet(this, _counter) * INCREMENT;
+    const lowMaxTarget = mediumMaxTarget - difference;
+    const lowPriorityTarget = mediumPriorityTarget - difference;
+    const highMaxTarget = mediumMaxTarget + difference;
+    const highPriorityTarget = mediumPriorityTarget + difference;
+    __privateSet(this, _counter, __privateGet(this, _counter) + 1);
+    return {
+      estimates: {
+        type: "fee-market" /* FeeMarket */,
+        low: {
+          maxFeePerGas: __privateMethod(this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, lowMaxTarget, gasDecimal),
+          maxPriorityFeePerGas: __privateMethod(this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, lowPriorityTarget, gasDecimal)
+        },
+        medium: {
+          maxFeePerGas: __privateMethod(this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, mediumMaxTarget, gasDecimal),
+          maxPriorityFeePerGas: __privateMethod(this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, mediumPriorityTarget, gasDecimal)
+        },
+        high: {
+          maxFeePerGas: __privateMethod(this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, highMaxTarget, gasDecimal),
+          maxPriorityFeePerGas: __privateMethod(this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, highPriorityTarget, gasDecimal)
+        }
+      }
+    };
+  }
+};
+_counter = new WeakMap();
+_getValueForTotalFee = new WeakSet();
+getValueForTotalFee_fn = function(totalFee, gas) {
+  const feeDecimal = Math.ceil(totalFee / gas);
+  return toHex(feeDecimal);
+};
+
+export {
+  TestGasFeeFlow
+};
+//# sourceMappingURL=chunk-FMRLPVFZ.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-FRKQ3Z2L.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-FRKQ3Z2L.mjs
new file mode 100644
index 0000000..3d592d5
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-FRKQ3Z2L.mjs
@@ -0,0 +1,40 @@
+// src/utils/external-transactions.ts
+import { rpcErrors } from "@metamask/rpc-errors";
+function validateConfirmedExternalTransaction(transactionMeta, confirmedTxs, pendingTxs) {
+  if (!transactionMeta || !transactionMeta.txParams) {
+    throw rpcErrors.invalidParams(
+      '"transactionMeta" or "transactionMeta.txParams" is missing'
+    );
+  }
+  if (transactionMeta.status !== "confirmed" /* confirmed */) {
+    throw rpcErrors.invalidParams(
+      'External transaction status should be "confirmed"'
+    );
+  }
+  const externalTxNonce = transactionMeta.txParams.nonce;
+  if (pendingTxs && pendingTxs.length > 0) {
+    const foundPendingTxByNonce = pendingTxs.find(
+      (tx) => tx.txParams?.nonce === externalTxNonce
+    );
+    if (foundPendingTxByNonce) {
+      throw rpcErrors.invalidParams(
+        "External transaction nonce should not be in pending txs"
+      );
+    }
+  }
+  if (confirmedTxs && confirmedTxs.length > 0) {
+    const foundConfirmedTxByNonce = confirmedTxs.find(
+      (tx) => tx.txParams?.nonce === externalTxNonce
+    );
+    if (foundConfirmedTxByNonce) {
+      throw rpcErrors.invalidParams(
+        "External transaction nonce should not be in confirmed txs"
+      );
+    }
+  }
+}
+
+export {
+  validateConfirmedExternalTransaction
+};
+//# sourceMappingURL=chunk-FRKQ3Z2L.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-HMOSP33F.js b/node_modules/@metamask/transaction-controller/dist/chunk-HMOSP33F.js
new file mode 100644
index 0000000..a6bca3e
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-HMOSP33F.js
@@ -0,0 +1,36 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/errors.ts
+var SimulationError = class extends Error {
+  constructor(message, code) {
+    super(message ?? "Simulation failed");
+    this.code = code;
+  }
+};
+var SimulationChainNotSupportedError = class extends SimulationError {
+  constructor(chainId) {
+    super(
+      `Chain is not supported: ${chainId}`,
+      "chain-not-supported" /* ChainNotSupported */
+    );
+  }
+};
+var SimulationInvalidResponseError = class extends SimulationError {
+  constructor() {
+    super(
+      "Invalid response from simulation API",
+      "invalid-response" /* InvalidResponse */
+    );
+  }
+};
+var SimulationRevertedError = class extends SimulationError {
+  constructor() {
+    super("Transaction was reverted", "reverted" /* Reverted */);
+  }
+};
+
+
+
+
+
+
+exports.SimulationError = SimulationError; exports.SimulationChainNotSupportedError = SimulationChainNotSupportedError; exports.SimulationInvalidResponseError = SimulationInvalidResponseError; exports.SimulationRevertedError = SimulationRevertedError;
+//# sourceMappingURL=chunk-HMOSP33F.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-HQSNKCXI.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-HQSNKCXI.mjs
new file mode 100644
index 0000000..a2b2ac4
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-HQSNKCXI.mjs
@@ -0,0 +1,36 @@
+// src/errors.ts
+var SimulationError = class extends Error {
+  constructor(message, code) {
+    super(message ?? "Simulation failed");
+    this.code = code;
+  }
+};
+var SimulationChainNotSupportedError = class extends SimulationError {
+  constructor(chainId) {
+    super(
+      `Chain is not supported: ${chainId}`,
+      "chain-not-supported" /* ChainNotSupported */
+    );
+  }
+};
+var SimulationInvalidResponseError = class extends SimulationError {
+  constructor() {
+    super(
+      "Invalid response from simulation API",
+      "invalid-response" /* InvalidResponse */
+    );
+  }
+};
+var SimulationRevertedError = class extends SimulationError {
+  constructor() {
+    super("Transaction was reverted", "reverted" /* Reverted */);
+  }
+};
+
+export {
+  SimulationError,
+  SimulationChainNotSupportedError,
+  SimulationInvalidResponseError,
+  SimulationRevertedError
+};
+//# sourceMappingURL=chunk-HQSNKCXI.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-J56A7UCK.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-J56A7UCK.mjs
new file mode 100644
index 0000000..c8dd229
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-J56A7UCK.mjs
@@ -0,0 +1,123 @@
+// src/utils/utils.ts
+import { convertHexToDecimal } from "@metamask/controller-utils";
+import {
+  add0x,
+  getKnownPropertyNames,
+  isStrictHexString
+} from "@metamask/utils";
+var ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
+var NORMALIZERS = {
+  data: (data) => add0x(padHexToEvenLength(data)),
+  from: (from) => add0x(from).toLowerCase(),
+  gas: (gas) => add0x(gas),
+  gasLimit: (gas) => add0x(gas),
+  gasPrice: (gasPrice) => add0x(gasPrice),
+  nonce: (nonce) => add0x(nonce),
+  to: (to) => add0x(to).toLowerCase(),
+  value: (value) => add0x(value),
+  maxFeePerGas: (maxFeePerGas) => add0x(maxFeePerGas),
+  maxPriorityFeePerGas: (maxPriorityFeePerGas) => add0x(maxPriorityFeePerGas),
+  estimatedBaseFee: (maxPriorityFeePerGas) => add0x(maxPriorityFeePerGas),
+  type: (type) => add0x(type)
+};
+function normalizeTransactionParams(txParams) {
+  const normalizedTxParams = { from: "" };
+  for (const key of getKnownPropertyNames(NORMALIZERS)) {
+    if (txParams[key]) {
+      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);
+    }
+  }
+  if (!normalizedTxParams.value) {
+    normalizedTxParams.value = "0x0";
+  }
+  return normalizedTxParams;
+}
+function isEIP1559Transaction(txParams) {
+  const hasOwnProp = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);
+  return hasOwnProp(txParams, "maxFeePerGas") && hasOwnProp(txParams, "maxPriorityFeePerGas");
+}
+var validateGasValues = (gasValues) => {
+  Object.keys(gasValues).forEach((key) => {
+    const value = gasValues[key];
+    if (typeof value !== "string" || !isStrictHexString(value)) {
+      throw new TypeError(
+        `expected hex string for ${key} but received: ${value}`
+      );
+    }
+  });
+};
+var isFeeMarketEIP1559Values = (gasValues) => gasValues?.maxFeePerGas !== void 0 || gasValues?.maxPriorityFeePerGas !== void 0;
+var isGasPriceValue = (gasValues) => gasValues?.gasPrice !== void 0;
+var getIncreasedPriceHex = (value, rate) => add0x(`${parseInt(`${value * rate}`, 10).toString(16)}`);
+var getIncreasedPriceFromExisting = (value, rate) => {
+  return getIncreasedPriceHex(convertHexToDecimal(value), rate);
+};
+function validateMinimumIncrease(proposed, min) {
+  const proposedDecimal = convertHexToDecimal(proposed);
+  const minDecimal = convertHexToDecimal(min);
+  if (proposedDecimal >= minDecimal) {
+    return proposed;
+  }
+  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;
+  throw new Error(errorMsg);
+}
+function validateIfTransactionUnapproved(transactionMeta, fnName) {
+  if (transactionMeta?.status !== "unapproved" /* unapproved */) {
+    throw new Error(
+      `TransactionsController: Can only call ${fnName} on an unapproved transaction.
+      Current tx status: ${transactionMeta?.status}`
+    );
+  }
+}
+function normalizeTxError(error) {
+  return {
+    name: error.name,
+    message: error.message,
+    stack: error.stack,
+    code: error.code,
+    rpc: isJsonCompatible(error.value) ? error.value : void 0
+  };
+}
+function normalizeGasFeeValues(gasFeeValues) {
+  const normalize = (value) => typeof value === "string" ? add0x(value) : value;
+  if ("gasPrice" in gasFeeValues) {
+    return {
+      gasPrice: normalize(gasFeeValues.gasPrice)
+    };
+  }
+  return {
+    maxFeePerGas: normalize(gasFeeValues.maxFeePerGas),
+    maxPriorityFeePerGas: normalize(gasFeeValues.maxPriorityFeePerGas)
+  };
+}
+function isJsonCompatible(value) {
+  try {
+    JSON.parse(JSON.stringify(value));
+    return true;
+  } catch {
+    return false;
+  }
+}
+function padHexToEvenLength(hex) {
+  const prefix = hex.toLowerCase().startsWith("0x") ? hex.slice(0, 2) : "";
+  const data = prefix ? hex.slice(2) : hex;
+  const evenData = data.length % 2 === 0 ? data : `0${data}`;
+  return prefix + evenData;
+}
+
+export {
+  ESTIMATE_GAS_ERROR,
+  normalizeTransactionParams,
+  isEIP1559Transaction,
+  validateGasValues,
+  isFeeMarketEIP1559Values,
+  isGasPriceValue,
+  getIncreasedPriceHex,
+  getIncreasedPriceFromExisting,
+  validateMinimumIncrease,
+  validateIfTransactionUnapproved,
+  normalizeTxError,
+  normalizeGasFeeValues,
+  padHexToEvenLength
+};
+//# sourceMappingURL=chunk-J56A7UCK.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-K4KOSAGM.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-K4KOSAGM.mjs
new file mode 100644
index 0000000..43c4367
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-K4KOSAGM.mjs
@@ -0,0 +1,61 @@
+import {
+  SimulationChainNotSupportedError,
+  SimulationError
+} from "./chunk-HQSNKCXI.mjs";
+import {
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+
+// src/utils/simulation-api.ts
+import { convertHexToDecimal } from "@metamask/controller-utils";
+import { createModuleLogger } from "@metamask/utils";
+var log = createModuleLogger(projectLogger, "simulation-api");
+var RPC_METHOD = "infura_simulateTransactions";
+var BASE_URL = "https://tx-sentinel-{0}.api.cx.metamask.io/";
+var ENDPOINT_NETWORKS = "networks";
+var requestIdCounter = 0;
+async function simulateTransactions(chainId, request) {
+  const url = await getSimulationUrl(chainId);
+  log("Sending request", url, request);
+  const requestId = requestIdCounter;
+  requestIdCounter += 1;
+  const response = await fetch(url, {
+    method: "POST",
+    body: JSON.stringify({
+      id: String(requestId),
+      jsonrpc: "2.0",
+      method: RPC_METHOD,
+      params: [request]
+    })
+  });
+  const responseJson = await response.json();
+  log("Received response", responseJson);
+  if (responseJson.error) {
+    const { code, message } = responseJson.error;
+    throw new SimulationError(message, code);
+  }
+  return responseJson?.result;
+}
+async function getSimulationUrl(chainId) {
+  const networkData = await getNetworkData();
+  const chainIdDecimal = convertHexToDecimal(chainId);
+  const network = networkData[chainIdDecimal];
+  if (!network?.confirmations) {
+    log("Chain is not supported", chainId);
+    throw new SimulationChainNotSupportedError(chainId);
+  }
+  return getUrl(network.network);
+}
+async function getNetworkData() {
+  const url = `${getUrl("ethereum-mainnet")}${ENDPOINT_NETWORKS}`;
+  const response = await fetch(url);
+  return response.json();
+}
+function getUrl(subdomain) {
+  return BASE_URL.replace("{0}", subdomain);
+}
+
+export {
+  simulateTransactions
+};
+//# sourceMappingURL=chunk-K4KOSAGM.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-KG4UW4K4.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-KG4UW4K4.mjs
new file mode 100644
index 0000000..56902c3
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-KG4UW4K4.mjs
@@ -0,0 +1,88 @@
+// src/utils/transaction-type.ts
+import { Interface } from "@ethersproject/abi";
+import { query } from "@metamask/controller-utils";
+import {
+  abiERC721,
+  abiERC20,
+  abiERC1155,
+  abiFiatTokenV2
+} from "@metamask/metamask-eth-abis";
+var ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
+var ERC20Interface = new Interface(abiERC20);
+var ERC721Interface = new Interface(abiERC721);
+var ERC1155Interface = new Interface(abiERC1155);
+var USDCInterface = new Interface(abiFiatTokenV2);
+async function determineTransactionType(txParams, ethQuery) {
+  const { data, to } = txParams;
+  if (data && !to) {
+    return { type: "contractDeployment" /* deployContract */, getCodeResponse: void 0 };
+  }
+  const { contractCode: getCodeResponse, isContractAddress } = await readAddressAsContract(ethQuery, to);
+  if (!isContractAddress) {
+    return { type: "simpleSend" /* simpleSend */, getCodeResponse };
+  }
+  const hasValue = Number(txParams.value ?? "0") !== 0;
+  const contractInteractionResult = {
+    type: "contractInteraction" /* contractInteraction */,
+    getCodeResponse
+  };
+  if (!data || hasValue) {
+    return contractInteractionResult;
+  }
+  const name = parseStandardTokenTransactionData(data)?.name;
+  if (!name) {
+    return contractInteractionResult;
+  }
+  const tokenMethodName = [
+    "approve" /* tokenMethodApprove */,
+    "setapprovalforall" /* tokenMethodSetApprovalForAll */,
+    "transfer" /* tokenMethodTransfer */,
+    "transferfrom" /* tokenMethodTransferFrom */,
+    "safetransferfrom" /* tokenMethodSafeTransferFrom */,
+    "increaseAllowance" /* tokenMethodIncreaseAllowance */
+  ].find(
+    (methodName) => methodName.toLowerCase() === name.toLowerCase()
+  );
+  if (tokenMethodName) {
+    return { type: tokenMethodName, getCodeResponse };
+  }
+  return contractInteractionResult;
+}
+function parseStandardTokenTransactionData(data) {
+  if (!data) {
+    return void 0;
+  }
+  try {
+    return ERC20Interface.parseTransaction({ data });
+  } catch {
+  }
+  try {
+    return ERC721Interface.parseTransaction({ data });
+  } catch {
+  }
+  try {
+    return ERC1155Interface.parseTransaction({ data });
+  } catch {
+  }
+  try {
+    return USDCInterface.parseTransaction({ data });
+  } catch {
+  }
+  return void 0;
+}
+async function readAddressAsContract(ethQuery, address) {
+  let contractCode;
+  try {
+    contractCode = await query(ethQuery, "getCode", [address]);
+  } catch (e) {
+    contractCode = null;
+  }
+  const isContractAddress = contractCode ? contractCode !== "0x" && contractCode !== "0x0" : false;
+  return { contractCode, isContractAddress };
+}
+
+export {
+  ESTIMATE_GAS_ERROR,
+  determineTransactionType
+};
+//# sourceMappingURL=chunk-KG4UW4K4.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-KNYSD4JP.js b/node_modules/@metamask/transaction-controller/dist/chunk-KNYSD4JP.js
new file mode 100644
index 0000000..a65d313
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-KNYSD4JP.js
@@ -0,0 +1,224 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkC2LNDHP4js = require('./chunk-C2LNDHP4.js');
+
+
+var _chunkEMDU4XLMjs = require('./chunk-EMDU4XLM.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+// src/utils/gas-fees.ts
+
+
+
+
+
+var _controllerutils = require('@metamask/controller-utils');
+var _utils = require('@metamask/utils');
+var log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "gas-fees");
+async function updateGasFees(request) {
+  const { txMeta } = request;
+  const initialParams = { ...txMeta.txParams };
+  const isSwap = _chunkC2LNDHP4js.SWAP_TRANSACTION_TYPES.includes(
+    txMeta.type
+  );
+  const savedGasFees = isSwap ? void 0 : request.getSavedGasFees(txMeta.chainId);
+  const suggestedGasFees = await getSuggestedGasFees(request);
+  log("Suggested gas fees", suggestedGasFees);
+  const getGasFeeRequest = {
+    ...request,
+    initialParams,
+    savedGasFees,
+    suggestedGasFees
+  };
+  txMeta.txParams.maxFeePerGas = getMaxFeePerGas(getGasFeeRequest);
+  txMeta.txParams.maxPriorityFeePerGas = getMaxPriorityFeePerGas(getGasFeeRequest);
+  txMeta.txParams.gasPrice = getGasPrice(getGasFeeRequest);
+  txMeta.userFeeLevel = getUserFeeLevel(getGasFeeRequest);
+  log("Updated gas fee properties", {
+    maxFeePerGas: txMeta.txParams.maxFeePerGas,
+    maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,
+    gasPrice: txMeta.txParams.gasPrice
+  });
+  if (txMeta.txParams.maxFeePerGas || txMeta.txParams.maxPriorityFeePerGas) {
+    delete txMeta.txParams.gasPrice;
+  }
+  if (txMeta.txParams.gasPrice) {
+    delete txMeta.txParams.maxFeePerGas;
+    delete txMeta.txParams.maxPriorityFeePerGas;
+  }
+  updateDefaultGasEstimates(txMeta);
+}
+function gweiDecimalToWeiHex(value) {
+  return _controllerutils.toHex.call(void 0, _controllerutils.gweiDecToWEIBN.call(void 0, value));
+}
+function getMaxFeePerGas(request) {
+  const { savedGasFees, eip1559, initialParams, suggestedGasFees } = request;
+  if (!eip1559) {
+    return void 0;
+  }
+  if (savedGasFees) {
+    const maxFeePerGas = gweiDecimalToWeiHex(savedGasFees.maxBaseFee);
+    log("Using maxFeePerGas from savedGasFees", maxFeePerGas);
+    return maxFeePerGas;
+  }
+  if (initialParams.maxFeePerGas) {
+    log("Using maxFeePerGas from request", initialParams.maxFeePerGas);
+    return initialParams.maxFeePerGas;
+  }
+  if (initialParams.gasPrice && !initialParams.maxPriorityFeePerGas) {
+    log(
+      "Setting maxFeePerGas to gasPrice from request",
+      initialParams.gasPrice
+    );
+    return initialParams.gasPrice;
+  }
+  if (suggestedGasFees.maxFeePerGas) {
+    log("Using suggested maxFeePerGas", suggestedGasFees.maxFeePerGas);
+    return suggestedGasFees.maxFeePerGas;
+  }
+  if (suggestedGasFees.gasPrice) {
+    log(
+      "Setting maxFeePerGas to suggested gasPrice",
+      suggestedGasFees.gasPrice
+    );
+    return suggestedGasFees.gasPrice;
+  }
+  log("maxFeePerGas not set");
+  return void 0;
+}
+function getMaxPriorityFeePerGas(request) {
+  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } = request;
+  if (!eip1559) {
+    return void 0;
+  }
+  if (savedGasFees) {
+    const maxPriorityFeePerGas = gweiDecimalToWeiHex(savedGasFees.priorityFee);
+    log(
+      "Using maxPriorityFeePerGas from savedGasFees.priorityFee",
+      maxPriorityFeePerGas
+    );
+    return maxPriorityFeePerGas;
+  }
+  if (initialParams.maxPriorityFeePerGas) {
+    log(
+      "Using maxPriorityFeePerGas from request",
+      initialParams.maxPriorityFeePerGas
+    );
+    return initialParams.maxPriorityFeePerGas;
+  }
+  if (initialParams.gasPrice && !initialParams.maxFeePerGas) {
+    log(
+      "Setting maxPriorityFeePerGas to gasPrice from request",
+      initialParams.gasPrice
+    );
+    return initialParams.gasPrice;
+  }
+  if (suggestedGasFees.maxPriorityFeePerGas) {
+    log(
+      "Using suggested maxPriorityFeePerGas",
+      suggestedGasFees.maxPriorityFeePerGas
+    );
+    return suggestedGasFees.maxPriorityFeePerGas;
+  }
+  if (txMeta.txParams.maxFeePerGas) {
+    log(
+      "Setting maxPriorityFeePerGas to maxFeePerGas",
+      txMeta.txParams.maxFeePerGas
+    );
+    return txMeta.txParams.maxFeePerGas;
+  }
+  log("maxPriorityFeePerGas not set");
+  return void 0;
+}
+function getGasPrice(request) {
+  const { eip1559, initialParams, suggestedGasFees } = request;
+  if (eip1559) {
+    return void 0;
+  }
+  if (initialParams.gasPrice) {
+    log("Using gasPrice from request", initialParams.gasPrice);
+    return initialParams.gasPrice;
+  }
+  if (suggestedGasFees.maxFeePerGas) {
+    log("Using suggested maxFeePerGas", suggestedGasFees.maxFeePerGas);
+    return suggestedGasFees.maxFeePerGas;
+  }
+  if (suggestedGasFees.gasPrice) {
+    log("Using suggested gasPrice", suggestedGasFees.gasPrice);
+    return suggestedGasFees.gasPrice;
+  }
+  log("gasPrice not set");
+  return void 0;
+}
+function getUserFeeLevel(request) {
+  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } = request;
+  if (!eip1559) {
+    return void 0;
+  }
+  if (savedGasFees) {
+    return "custom" /* CUSTOM */;
+  }
+  if (!initialParams.maxFeePerGas && !initialParams.maxPriorityFeePerGas && initialParams.gasPrice) {
+    return txMeta.origin === _controllerutils.ORIGIN_METAMASK ? "custom" /* CUSTOM */ : "dappSuggested" /* DAPP_SUGGESTED */;
+  }
+  if (!initialParams.maxFeePerGas && !initialParams.maxPriorityFeePerGas && suggestedGasFees.maxFeePerGas && suggestedGasFees.maxPriorityFeePerGas) {
+    return "medium" /* MEDIUM */;
+  }
+  if (txMeta.origin === _controllerutils.ORIGIN_METAMASK) {
+    return "medium" /* MEDIUM */;
+  }
+  return "dappSuggested" /* DAPP_SUGGESTED */;
+}
+function updateDefaultGasEstimates(txMeta) {
+  if (!txMeta.defaultGasEstimates) {
+    txMeta.defaultGasEstimates = {};
+  }
+  txMeta.defaultGasEstimates.maxFeePerGas = txMeta.txParams.maxFeePerGas;
+  txMeta.defaultGasEstimates.maxPriorityFeePerGas = txMeta.txParams.maxPriorityFeePerGas;
+  txMeta.defaultGasEstimates.gasPrice = txMeta.txParams.gasPrice;
+  txMeta.defaultGasEstimates.estimateType = txMeta.userFeeLevel;
+}
+async function getSuggestedGasFees(request) {
+  const { eip1559, ethQuery, gasFeeFlows, getGasFeeEstimates, txMeta } = request;
+  const { networkClientId } = txMeta;
+  if (!eip1559 && txMeta.txParams.gasPrice || eip1559 && txMeta.txParams.maxFeePerGas && txMeta.txParams.maxPriorityFeePerGas) {
+    return {};
+  }
+  const gasFeeFlow = _chunkEMDU4XLMjs.getGasFeeFlow.call(void 0, txMeta, gasFeeFlows);
+  try {
+    const gasFeeControllerData = await getGasFeeEstimates({ networkClientId });
+    const response = await gasFeeFlow.getGasFees({
+      ethQuery,
+      gasFeeControllerData,
+      transactionMeta: txMeta
+    });
+    const gasFeeEstimateType = response.estimates?.type;
+    switch (gasFeeEstimateType) {
+      case "fee-market" /* FeeMarket */:
+        return response.estimates.medium;
+      case "legacy" /* Legacy */:
+        return {
+          gasPrice: response.estimates.medium
+        };
+      case "eth_gasPrice" /* GasPrice */:
+        return { gasPrice: response.estimates.gasPrice };
+      default:
+        throw new Error(
+          `Unsupported gas fee estimate type returned from flow: ${gasFeeEstimateType}`
+        );
+    }
+  } catch (error) {
+    log("Failed to get suggested gas fees", error);
+  }
+  const gasPriceDecimal = await _controllerutils.query.call(void 0, ethQuery, "gasPrice");
+  const gasPrice = gasPriceDecimal ? _utils.add0x.call(void 0, gasPriceDecimal.toString(16)) : void 0;
+  return { gasPrice };
+}
+
+
+
+
+exports.updateGasFees = updateGasFees; exports.gweiDecimalToWeiHex = gweiDecimalToWeiHex;
+//# sourceMappingURL=chunk-KNYSD4JP.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-KT6UAKBB.js b/node_modules/@metamask/transaction-controller/dist/chunk-KT6UAKBB.js
new file mode 100644
index 0000000..24ddd9d
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-KT6UAKBB.js
@@ -0,0 +1,61 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+var _chunkHMOSP33Fjs = require('./chunk-HMOSP33F.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+// src/utils/simulation-api.ts
+var _controllerutils = require('@metamask/controller-utils');
+var _utils = require('@metamask/utils');
+var log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "simulation-api");
+var RPC_METHOD = "infura_simulateTransactions";
+var BASE_URL = "https://tx-sentinel-{0}.api.cx.metamask.io/";
+var ENDPOINT_NETWORKS = "networks";
+var requestIdCounter = 0;
+async function simulateTransactions(chainId, request) {
+  const url = await getSimulationUrl(chainId);
+  log("Sending request", url, request);
+  const requestId = requestIdCounter;
+  requestIdCounter += 1;
+  const response = await fetch(url, {
+    method: "POST",
+    body: JSON.stringify({
+      id: String(requestId),
+      jsonrpc: "2.0",
+      method: RPC_METHOD,
+      params: [request]
+    })
+  });
+  const responseJson = await response.json();
+  log("Received response", responseJson);
+  if (responseJson.error) {
+    const { code, message } = responseJson.error;
+    throw new (0, _chunkHMOSP33Fjs.SimulationError)(message, code);
+  }
+  return responseJson?.result;
+}
+async function getSimulationUrl(chainId) {
+  const networkData = await getNetworkData();
+  const chainIdDecimal = _controllerutils.convertHexToDecimal.call(void 0, chainId);
+  const network = networkData[chainIdDecimal];
+  if (!network?.confirmations) {
+    log("Chain is not supported", chainId);
+    throw new (0, _chunkHMOSP33Fjs.SimulationChainNotSupportedError)(chainId);
+  }
+  return getUrl(network.network);
+}
+async function getNetworkData() {
+  const url = `${getUrl("ethereum-mainnet")}${ENDPOINT_NETWORKS}`;
+  const response = await fetch(url);
+  return response.json();
+}
+function getUrl(subdomain) {
+  return BASE_URL.replace("{0}", subdomain);
+}
+
+
+
+exports.simulateTransactions = simulateTransactions;
+//# sourceMappingURL=chunk-KT6UAKBB.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-MDRMMUMS.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-MDRMMUMS.mjs
new file mode 100644
index 0000000..378dd50
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-MDRMMUMS.mjs
@@ -0,0 +1,350 @@
+import {
+  simulateTransactions
+} from "./chunk-K4KOSAGM.mjs";
+import {
+  SimulationError,
+  SimulationInvalidResponseError,
+  SimulationRevertedError
+} from "./chunk-HQSNKCXI.mjs";
+import {
+  ABI_SIMULATION_ERC20_WRAPPED,
+  ABI_SIMULATION_ERC721_LEGACY
+} from "./chunk-O6ZZVIFH.mjs";
+import {
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+
+// src/utils/simulation.ts
+import { Interface } from "@ethersproject/abi";
+import { hexToBN, toHex } from "@metamask/controller-utils";
+import { abiERC20, abiERC721, abiERC1155 } from "@metamask/metamask-eth-abis";
+import { createModuleLogger } from "@metamask/utils";
+var SupportedToken = /* @__PURE__ */ ((SupportedToken2) => {
+  SupportedToken2["ERC20"] = "erc20";
+  SupportedToken2["ERC721"] = "erc721";
+  SupportedToken2["ERC1155"] = "erc1155";
+  SupportedToken2["ERC20_WRAPPED"] = "erc20Wrapped";
+  SupportedToken2["ERC721_LEGACY"] = "erc721Legacy";
+  return SupportedToken2;
+})(SupportedToken || {});
+var log = createModuleLogger(projectLogger, "simulation");
+var SUPPORTED_EVENTS = [
+  "Transfer",
+  "TransferSingle",
+  "TransferBatch",
+  "Deposit",
+  "Withdrawal"
+];
+var SUPPORTED_TOKEN_ABIS = {
+  ["erc20" /* ERC20 */]: {
+    abi: abiERC20,
+    standard: "erc20" /* erc20 */
+  },
+  ["erc721" /* ERC721 */]: {
+    abi: abiERC721,
+    standard: "erc721" /* erc721 */
+  },
+  ["erc1155" /* ERC1155 */]: {
+    abi: abiERC1155,
+    standard: "erc1155" /* erc1155 */
+  },
+  ["erc20Wrapped" /* ERC20_WRAPPED */]: {
+    abi: ABI_SIMULATION_ERC20_WRAPPED,
+    standard: "erc20" /* erc20 */
+  },
+  ["erc721Legacy" /* ERC721_LEGACY */]: {
+    abi: ABI_SIMULATION_ERC721_LEGACY,
+    standard: "erc721" /* erc721 */
+  }
+};
+var REVERTED_ERRORS = ["execution reverted", "insufficient funds for gas"];
+async function getSimulationData(request) {
+  const { chainId, from, to, value, data } = request;
+  log("Getting simulation data", request);
+  try {
+    const response = await simulateTransactions(chainId, {
+      transactions: [
+        {
+          data,
+          from,
+          maxFeePerGas: "0x0",
+          maxPriorityFeePerGas: "0x0",
+          to,
+          value
+        }
+      ],
+      withCallTrace: true,
+      withLogs: true
+    });
+    const transactionError = response.transactions?.[0]?.error;
+    if (transactionError) {
+      throw new SimulationError(transactionError);
+    }
+    const nativeBalanceChange = getNativeBalanceChange(request.from, response);
+    const events = getEvents(response);
+    log("Parsed events", events);
+    const tokenBalanceChanges = await getTokenBalanceChanges(request, events);
+    return {
+      nativeBalanceChange,
+      tokenBalanceChanges
+    };
+  } catch (error) {
+    log("Failed to get simulation data", error, request);
+    let simulationError = error;
+    if (REVERTED_ERRORS.some(
+      (revertErrorMessage) => simulationError.message?.includes(revertErrorMessage)
+    )) {
+      simulationError = new SimulationRevertedError();
+    }
+    const { code, message } = simulationError;
+    return {
+      tokenBalanceChanges: [],
+      error: {
+        code,
+        message
+      }
+    };
+  }
+}
+function getNativeBalanceChange(userAddress, response) {
+  const transactionResponse = response.transactions[0];
+  if (!transactionResponse) {
+    return void 0;
+  }
+  const { stateDiff } = transactionResponse;
+  const previousBalance = stateDiff?.pre?.[userAddress]?.balance;
+  const newBalance = stateDiff?.post?.[userAddress]?.balance;
+  if (!previousBalance || !newBalance) {
+    return void 0;
+  }
+  return getSimulationBalanceChange(previousBalance, newBalance);
+}
+function getEvents(response) {
+  const logs = extractLogs(
+    response.transactions[0]?.callTrace ?? {}
+  );
+  log("Extracted logs", logs);
+  const interfaces = getContractInterfaces();
+  return logs.map((currentLog) => {
+    const event = parseLog(currentLog, interfaces);
+    if (!event) {
+      log("Failed to parse log", currentLog);
+      return void 0;
+    }
+    const inputs = event.abi.find((e) => e.name === event.name)?.inputs;
+    if (!inputs) {
+      log("Failed to find inputs for event", event);
+      return void 0;
+    }
+    const args = parseEventArgs(event.args, inputs);
+    return {
+      contractAddress: currentLog.address,
+      tokenStandard: event.standard,
+      name: event.name,
+      args,
+      abi: event.abi
+    };
+  }).filter((e) => e !== void 0);
+}
+function parseEventArgs(args, abiInputs) {
+  return args.reduce((result, arg, index) => {
+    const name = abiInputs[index].name.replace("_", "");
+    const value = parseEventArgValue(arg);
+    result[name] = value;
+    return result;
+  }, {});
+}
+function parseEventArgValue(value) {
+  if (Array.isArray(value)) {
+    return value.map(parseEventArgValue);
+  }
+  return (value.toHexString?.() ?? value).toLowerCase();
+}
+async function getTokenBalanceChanges(request, events) {
+  const balanceTxs = getTokenBalanceTransactions(request, events);
+  log("Generated balance transactions", [...balanceTxs.after.values()]);
+  const transactions = [
+    ...balanceTxs.before.values(),
+    request,
+    ...balanceTxs.after.values()
+  ];
+  if (transactions.length === 1) {
+    return [];
+  }
+  const response = await simulateTransactions(request.chainId, {
+    transactions
+  });
+  log("Balance simulation response", response);
+  if (response.transactions.length !== transactions.length) {
+    throw new SimulationInvalidResponseError();
+  }
+  return [...balanceTxs.after.keys()].map((token, index) => {
+    const previousBalanceCheckSkipped = !balanceTxs.before.get(token);
+    const previousBalance = previousBalanceCheckSkipped ? "0x0" : getValueFromBalanceTransaction(
+      request.from,
+      token,
+      response.transactions[index]
+    );
+    const newBalance = getValueFromBalanceTransaction(
+      request.from,
+      token,
+      response.transactions[index + balanceTxs.before.size + 1]
+    );
+    const balanceChange = getSimulationBalanceChange(
+      previousBalance,
+      newBalance
+    );
+    if (!balanceChange) {
+      return void 0;
+    }
+    return {
+      ...token,
+      ...balanceChange
+    };
+  }).filter((change) => change !== void 0);
+}
+function getTokenBalanceTransactions(request, events) {
+  const tokenKeys = /* @__PURE__ */ new Set();
+  const before = /* @__PURE__ */ new Map();
+  const after = /* @__PURE__ */ new Map();
+  const userEvents = events.filter(
+    (event) => SUPPORTED_EVENTS.includes(event.name) && [event.args.from, event.args.to].includes(request.from)
+  );
+  log("Filtered user events", userEvents);
+  for (const event of userEvents) {
+    const tokenIds = getEventTokenIds(event);
+    log("Extracted token ids", tokenIds);
+    for (const tokenId of tokenIds) {
+      const simulationToken = {
+        address: event.contractAddress,
+        standard: event.tokenStandard,
+        id: tokenId
+      };
+      const tokenKey = JSON.stringify(simulationToken);
+      if (tokenKeys.has(tokenKey)) {
+        log(
+          "Ignoring additional event with same contract and token ID",
+          simulationToken
+        );
+        continue;
+      }
+      tokenKeys.add(tokenKey);
+      const data = getBalanceTransactionData(
+        event.tokenStandard,
+        request.from,
+        tokenId
+      );
+      const transaction = {
+        from: request.from,
+        to: event.contractAddress,
+        data
+      };
+      if (skipPriorBalanceCheck(event)) {
+        after.set(simulationToken, transaction);
+      } else {
+        before.set(simulationToken, transaction);
+        after.set(simulationToken, transaction);
+      }
+    }
+  }
+  return { before, after };
+}
+function skipPriorBalanceCheck(event) {
+  return event.name === "Transfer" && event.tokenStandard === "erc721" /* erc721 */ && parseInt(event.args.from, 16) === 0;
+}
+function getEventTokenIds(event) {
+  if (event.tokenStandard === "erc721" /* erc721 */) {
+    return [event.args.tokenId];
+  }
+  if (event.tokenStandard === "erc1155" /* erc1155 */ && event.name === "TransferSingle") {
+    return [event.args.id];
+  }
+  if (event.tokenStandard === "erc1155" /* erc1155 */ && event.name === "TransferBatch") {
+    return event.args.ids;
+  }
+  return [void 0];
+}
+function getValueFromBalanceTransaction(from, token, response) {
+  const normalizedReturn = normalizeReturnValue(response.return);
+  if (token.standard === "erc721" /* erc721 */) {
+    return normalizedReturn === from ? "0x1" : "0x0";
+  }
+  return normalizedReturn;
+}
+function getBalanceTransactionData(tokenStandard, from, tokenId) {
+  switch (tokenStandard) {
+    case "erc721" /* erc721 */:
+      return new Interface(abiERC721).encodeFunctionData("ownerOf", [
+        tokenId
+      ]);
+    case "erc1155" /* erc1155 */:
+      return new Interface(abiERC1155).encodeFunctionData("balanceOf", [
+        from,
+        tokenId
+      ]);
+    default:
+      return new Interface(abiERC20).encodeFunctionData("balanceOf", [
+        from
+      ]);
+  }
+}
+function parseLog(eventLog, interfaces) {
+  const supportedTokens = Object.values(SupportedToken);
+  for (const token of supportedTokens) {
+    try {
+      const contractInterface = interfaces.get(token);
+      const { abi, standard } = SUPPORTED_TOKEN_ABIS[token];
+      return {
+        ...contractInterface.parseLog(eventLog),
+        abi,
+        standard
+      };
+    } catch (e) {
+      continue;
+    }
+  }
+  return void 0;
+}
+function extractLogs(call) {
+  const logs = call.logs ?? [];
+  const nestedCalls = call.calls ?? [];
+  return [
+    ...logs,
+    ...nestedCalls.map((nestedCall) => extractLogs(nestedCall)).flat()
+  ];
+}
+function getSimulationBalanceChange(previousBalance, newBalance) {
+  const differenceBN = hexToBN(newBalance).sub(hexToBN(previousBalance));
+  const isDecrease = differenceBN.isNeg();
+  const difference = toHex(differenceBN.abs());
+  if (differenceBN.isZero()) {
+    log("Balance change is zero");
+    return void 0;
+  }
+  return {
+    previousBalance,
+    newBalance,
+    difference,
+    isDecrease
+  };
+}
+function normalizeReturnValue(value) {
+  return toHex(hexToBN(value));
+}
+function getContractInterfaces() {
+  const supportedTokens = Object.values(SupportedToken);
+  return new Map(
+    supportedTokens.map((tokenType) => {
+      const { abi } = SUPPORTED_TOKEN_ABIS[tokenType];
+      const contractInterface = new Interface(abi);
+      return [tokenType, contractInterface];
+    })
+  );
+}
+
+export {
+  SupportedToken,
+  getSimulationData,
+  getEvents
+};
+//# sourceMappingURL=chunk-MDRMMUMS.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-N55SEKK7.js b/node_modules/@metamask/transaction-controller/dist/chunk-N55SEKK7.js
new file mode 100644
index 0000000..c89cb32
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-N55SEKK7.js
@@ -0,0 +1,2550 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+
+var _chunkZNZEJDOEjs = require('./chunk-ZNZEJDOE.js');
+
+
+var _chunkX3KACH5Pjs = require('./chunk-X3KACH5P.js');
+
+
+var _chunkSD6CWFDFjs = require('./chunk-SD6CWFDF.js');
+
+
+
+var _chunkVH47Q6TSjs = require('./chunk-VH47Q6TS.js');
+
+
+var _chunk5KMU2IATjs = require('./chunk-5KMU2IAT.js');
+
+
+var _chunk7LXE4KHVjs = require('./chunk-7LXE4KHV.js');
+
+
+
+
+var _chunkV72C4MCRjs = require('./chunk-V72C4MCR.js');
+
+
+
+var _chunkQP75SWIQjs = require('./chunk-QP75SWIQ.js');
+
+
+var _chunkNYKRCWBGjs = require('./chunk-NYKRCWBG.js');
+
+
+var _chunkWR5F34OWjs = require('./chunk-WR5F34OW.js');
+
+
+var _chunkTJMQEH57js = require('./chunk-TJMQEH57.js');
+
+
+var _chunk7DJO6UZAjs = require('./chunk-7DJO6UZA.js');
+
+
+
+var _chunk2XKEAKQGjs = require('./chunk-2XKEAKQG.js');
+
+
+var _chunkDTDTOMTBjs = require('./chunk-DTDTOMTB.js');
+
+
+var _chunk5XQ2KRYLjs = require('./chunk-5XQ2KRYL.js');
+
+
+var _chunkEQT25RSPjs = require('./chunk-EQT25RSP.js');
+
+
+var _chunkDUFOYA4Djs = require('./chunk-DUFOYA4D.js');
+
+
+var _chunkVJYFB7BMjs = require('./chunk-VJYFB7BM.js');
+
+
+var _chunkKNYSD4JPjs = require('./chunk-KNYSD4JP.js');
+
+
+
+var _chunkC2LNDHP4js = require('./chunk-C2LNDHP4.js');
+
+
+
+
+
+
+
+
+
+
+
+var _chunkUGFBA4GVjs = require('./chunk-UGFBA4GV.js');
+
+
+var _chunkEMDU4XLMjs = require('./chunk-EMDU4XLM.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/TransactionController.ts
+var _common = require('@ethereumjs/common');
+var _tx = require('@ethereumjs/tx');
+var _util = require('@ethereumjs/util');
+var _basecontroller = require('@metamask/base-controller');
+
+
+
+
+
+
+var _controllerutils = require('@metamask/controller-utils');
+var _ethquery = require('@metamask/eth-query'); var _ethquery2 = _interopRequireDefault(_ethquery);
+var _networkcontroller = require('@metamask/network-controller');
+var _rpcerrors = require('@metamask/rpc-errors');
+var _utils = require('@metamask/utils');
+var _asyncmutex = require('async-mutex');
+var _ethmethodregistry = require('eth-method-registry');
+var _events = require('events');
+var _lodash = require('lodash');
+var _noncetracker = require('nonce-tracker');
+var _uuid = require('uuid');
+var metadata = {
+  transactions: {
+    persist: true,
+    anonymous: false
+  },
+  methodData: {
+    persist: true,
+    anonymous: false
+  },
+  lastFetchedBlockNumbers: {
+    persist: true,
+    anonymous: false
+  }
+};
+var HARDFORK = _common.Hardfork.London;
+var CANCEL_RATE = 1.1;
+var SPEED_UP_RATE = 1.1;
+var controllerName = "TransactionController";
+var ApprovalState = /* @__PURE__ */ ((ApprovalState2) => {
+  ApprovalState2["Approved"] = "approved";
+  ApprovalState2["NotApproved"] = "not-approved";
+  ApprovalState2["SkippedViaBeforePublishHook"] = "skipped-via-before-publish-hook";
+  return ApprovalState2;
+})(ApprovalState || {});
+function getDefaultTransactionControllerState() {
+  return {
+    methodData: {},
+    transactions: [],
+    lastFetchedBlockNumbers: {}
+  };
+}
+var _internalEvents, _incomingTransactionOptions, _pendingTransactionOptions, _transactionHistoryLimit, _isSimulationEnabled, _testGasFeeFlows, _multichainTrackingHelper, _createNonceTracker, createNonceTracker_fn, _createIncomingTransactionHelper, createIncomingTransactionHelper_fn, _createPendingTransactionTracker, createPendingTransactionTracker_fn, _checkForPendingTransactionAndStartPolling, _stopAllTracking, stopAllTracking_fn, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners_fn, _addIncomingTransactionHelperListeners, addIncomingTransactionHelperListeners_fn, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners_fn, _addPendingTransactionTrackerListeners, addPendingTransactionTrackerListeners_fn, _getNonceTrackerPendingTransactions, getNonceTrackerPendingTransactions_fn, _getGasFeeFlows, getGasFeeFlows_fn, _getLayer1GasFeeFlows, getLayer1GasFeeFlows_fn, _updateTransactionInternal, updateTransactionInternal_fn, _checkIfTransactionParamsUpdated, checkIfTransactionParamsUpdated_fn, _onTransactionParamsUpdated, onTransactionParamsUpdated_fn, _updateSimulationData, updateSimulationData_fn, _onGasFeePollerTransactionUpdate, onGasFeePollerTransactionUpdate_fn, _getNetworkClientId, getNetworkClientId_fn, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn, _getGlobalChainId, getGlobalChainId_fn, _isCustomNetwork, isCustomNetwork_fn;
+var TransactionController = class extends _basecontroller.BaseController {
+  /**
+   * Constructs a TransactionController.
+   *
+   * @param options - The controller options.
+   * @param options.blockTracker - The block tracker used to poll for new blocks data.
+   * @param options.disableHistory - Whether to disable storing history in transaction metadata.
+   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.
+   * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.
+   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.
+   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.
+   * @param options.getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.
+   * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.
+   * @param options.getNetworkClientRegistry - Gets the network client registry.
+   * @param options.getNetworkState - Gets the state of the network controller.
+   * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.
+   * @param options.getSavedGasFees - Gets the saved gas fee config.
+   * @param options.getSelectedAddress - Gets the address of the currently selected account.
+   * @param options.incomingTransactions - Configuration options for incoming transaction support.
+   * @param options.isMultichainEnabled - Enable multichain support.
+   * @param options.isSimulationEnabled - Whether new transactions will be automatically simulated.
+   * @param options.messenger - The controller messenger.
+   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
+   * @param options.pendingTransactions - Configuration options for pending transaction support.
+   * @param options.provider - The provider used to create the underlying EthQuery instance.
+   * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.
+   * @param options.sign - Function used to sign transactions.
+   * @param options.state - Initial state to set on this controller.
+   * @param options.testGasFeeFlows - Whether to use the test gas fee flow.
+   * @param options.transactionHistoryLimit - Transaction history limit.
+   * @param options.hooks - The controller hooks.
+   */
+  constructor({
+    blockTracker,
+    disableHistory,
+    disableSendFlowHistory,
+    disableSwaps,
+    getCurrentAccountEIP1559Compatibility,
+    getCurrentNetworkEIP1559Compatibility,
+    getExternalPendingTransactions,
+    getGasFeeEstimates,
+    getNetworkClientRegistry,
+    getNetworkState,
+    getPermittedAccounts,
+    getSavedGasFees,
+    getSelectedAddress,
+    incomingTransactions = {},
+    isMultichainEnabled = false,
+    isSimulationEnabled,
+    messenger,
+    onNetworkStateChange,
+    pendingTransactions = {},
+    provider,
+    securityProviderRequest,
+    sign,
+    state,
+    testGasFeeFlows,
+    transactionHistoryLimit = 40,
+    hooks
+  }) {
+    super({
+      name: controllerName,
+      metadata,
+      messenger,
+      state: {
+        ...getDefaultTransactionControllerState(),
+        ...state
+      }
+    });
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createNonceTracker);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createIncomingTransactionHelper);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createPendingTransactionTracker);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _stopAllTracking);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _removeIncomingTransactionHelperListeners);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _addIncomingTransactionHelperListeners);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _removePendingTransactionTrackerListeners);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _addPendingTransactionTrackerListeners);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNonceTrackerPendingTransactions);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGasFeeFlows);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLayer1GasFeeFlows);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateTransactionInternal);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _checkIfTransactionParamsUpdated);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onTransactionParamsUpdated);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateSimulationData);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onGasFeePollerTransactionUpdate);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNetworkClientId);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGlobalNetworkClientId);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGlobalChainId);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isCustomNetwork);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalEvents, new (0, _events.EventEmitter)());
+    this.inProcessOfSigning = /* @__PURE__ */ new Set();
+    this.mutex = new (0, _asyncmutex.Mutex)();
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _incomingTransactionOptions, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _pendingTransactionOptions, void 0);
+    this.signAbortCallbacks = /* @__PURE__ */ new Map();
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _transactionHistoryLimit, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isSimulationEnabled, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _testGasFeeFlows, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _multichainTrackingHelper, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _checkForPendingTransactionAndStartPolling, () => {
+      this.pendingTransactionTracker.startIfPendingTransactions();
+      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).checkForPendingTransactionAndStartPolling();
+    });
+    this.messagingSystem = messenger;
+    this.getNetworkState = getNetworkState;
+    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;
+    this.isHistoryDisabled = disableHistory ?? false;
+    this.isSwapsDisabled = disableSwaps ?? false;
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isSimulationEnabled, isSimulationEnabled ?? (() => true));
+    this.registry = new (0, _ethmethodregistry.MethodRegistry)({ provider });
+    this.getSavedGasFees = getSavedGasFees ?? ((_chainId) => void 0);
+    this.getCurrentAccountEIP1559Compatibility = getCurrentAccountEIP1559Compatibility ?? (() => Promise.resolve(true));
+    this.getCurrentNetworkEIP1559Compatibility = getCurrentNetworkEIP1559Compatibility;
+    this.getGasFeeEstimates = getGasFeeEstimates || (() => Promise.resolve({}));
+    this.getPermittedAccounts = getPermittedAccounts;
+    this.getSelectedAddress = getSelectedAddress;
+    this.getExternalPendingTransactions = getExternalPendingTransactions ?? (() => []);
+    this.securityProviderRequest = securityProviderRequest;
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _incomingTransactionOptions, incomingTransactions);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _pendingTransactionOptions, pendingTransactions);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _transactionHistoryLimit, transactionHistoryLimit);
+    this.sign = sign;
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _testGasFeeFlows, testGasFeeFlows === true);
+    this.afterSign = hooks?.afterSign ?? (() => true);
+    this.beforeApproveOnInit = hooks?.beforeApproveOnInit ?? (() => true);
+    this.beforeCheckPendingTransaction = hooks?.beforeCheckPendingTransaction ?? /* istanbul ignore next */
+    (() => true);
+    this.beforePublish = hooks?.beforePublish ?? (() => true);
+    this.getAdditionalSignArguments = hooks?.getAdditionalSignArguments ?? (() => []);
+    this.publish = hooks?.publish ?? (() => Promise.resolve({ transactionHash: void 0 }));
+    this.nonceTracker = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createNonceTracker, createNonceTracker_fn).call(this, {
+      provider,
+      blockTracker
+    });
+    const findNetworkClientIdByChainId = (chainId) => {
+      return this.messagingSystem.call(
+        `NetworkController:findNetworkClientIdByChainId`,
+        chainId
+      );
+    };
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _multichainTrackingHelper, new (0, _chunk5XQ2KRYLjs.MultichainTrackingHelper)({
+      isMultichainEnabled,
+      provider,
+      nonceTracker: this.nonceTracker,
+      incomingTransactionOptions: incomingTransactions,
+      findNetworkClientIdByChainId,
+      getNetworkClientById: (networkClientId) => {
+        return this.messagingSystem.call(
+          `NetworkController:getNetworkClientById`,
+          networkClientId
+        );
+      },
+      getNetworkClientRegistry,
+      removeIncomingTransactionHelperListeners: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners_fn).bind(this),
+      removePendingTransactionTrackerListeners: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners_fn).bind(this),
+      createNonceTracker: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createNonceTracker, createNonceTracker_fn).bind(this),
+      createIncomingTransactionHelper: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createIncomingTransactionHelper, createIncomingTransactionHelper_fn).bind(this),
+      createPendingTransactionTracker: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createPendingTransactionTracker, createPendingTransactionTracker_fn).bind(this),
+      onNetworkStateChange: (listener) => {
+        this.messagingSystem.subscribe(
+          "NetworkController:stateChange",
+          listener
+        );
+      }
+    }));
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).initialize();
+    const etherscanRemoteTransactionSource = new (0, _chunkEQT25RSPjs.EtherscanRemoteTransactionSource)({
+      includeTokenTransfers: incomingTransactions.includeTokenTransfers
+    });
+    this.incomingTransactionHelper = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createIncomingTransactionHelper, createIncomingTransactionHelper_fn).call(this, {
+      blockTracker,
+      etherscanRemoteTransactionSource
+    });
+    this.pendingTransactionTracker = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createPendingTransactionTracker, createPendingTransactionTracker_fn).call(this, {
+      provider,
+      blockTracker
+    });
+    this.gasFeeFlows = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGasFeeFlows, getGasFeeFlows_fn).call(this);
+    this.layer1GasFeeFlows = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLayer1GasFeeFlows, getLayer1GasFeeFlows_fn).call(this);
+    const gasFeePoller = new (0, _chunk7DJO6UZAjs.GasFeePoller)({
+      findNetworkClientIdByChainId,
+      gasFeeFlows: this.gasFeeFlows,
+      getGasFeeControllerEstimates: this.getGasFeeEstimates,
+      getProvider: (chainId, networkClientId) => _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getProvider({
+        networkClientId,
+        chainId
+      }),
+      getTransactions: () => this.state.transactions,
+      layer1GasFeeFlows: this.layer1GasFeeFlows,
+      onStateChange: (listener) => {
+        this.messagingSystem.subscribe(
+          "TransactionController:stateChange",
+          listener
+        );
+      }
+    });
+    gasFeePoller.hub.on(
+      "transaction-updated",
+      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onGasFeePollerTransactionUpdate, onGasFeePollerTransactionUpdate_fn).bind(this)
+    );
+    this.messagingSystem.subscribe(
+      "TransactionController:stateChange",
+      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _checkForPendingTransactionAndStartPolling)
+    );
+    onNetworkStateChange(() => {
+      _chunkS6VGOPUYjs.projectLogger.call(void 0, "Detected network change", this.getChainId());
+      this.pendingTransactionTracker.startIfPendingTransactions();
+      this.onBootCleanup();
+    });
+    this.onBootCleanup();
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _checkForPendingTransactionAndStartPolling).call(this);
+  }
+  failTransaction(transactionMeta, error, actionId) {
+    const newTransactionMeta = _lodash.merge.call(void 0, {}, transactionMeta, {
+      error: _chunkUGFBA4GVjs.normalizeTxError.call(void 0, error),
+      status: "failed" /* failed */
+    });
+    this.messagingSystem.publish(`${controllerName}:transactionFailed`, {
+      actionId,
+      error: error.message,
+      transactionMeta: newTransactionMeta
+    });
+    this.updateTransaction(
+      newTransactionMeta,
+      "TransactionController#failTransaction - Add error message and set status to failed"
+    );
+    this.onTransactionStatusChange(newTransactionMeta);
+    this.messagingSystem.publish(
+      `${controllerName}:transactionFinished`,
+      newTransactionMeta
+    );
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).emit(
+      `${transactionMeta.id}:finished`,
+      newTransactionMeta
+    );
+  }
+  async registryLookup(fourBytePrefix) {
+    const registryMethod = await this.registry.lookup(fourBytePrefix);
+    if (!registryMethod) {
+      return {
+        registryMethod: "",
+        parsedRegistryMethod: { name: void 0, args: void 0 }
+      };
+    }
+    const parsedRegistryMethod = this.registry.parse(registryMethod);
+    return { registryMethod, parsedRegistryMethod };
+  }
+  /**
+   * Stops polling and removes listeners to prepare the controller for garbage collection.
+   */
+  destroy() {
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _stopAllTracking, stopAllTracking_fn).call(this);
+  }
+  /**
+   * Handle new method data request.
+   *
+   * @param fourBytePrefix - The method prefix.
+   * @returns The method data object corresponding to the given signature prefix.
+   */
+  async handleMethodData(fourBytePrefix) {
+    const releaseLock = await this.mutex.acquire();
+    try {
+      const { methodData } = this.state;
+      const knownMethod = Object.keys(methodData).find(
+        (knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix
+      );
+      if (knownMethod) {
+        return methodData[fourBytePrefix];
+      }
+      const registry = await this.registryLookup(fourBytePrefix);
+      this.update((state) => {
+        state.methodData[fourBytePrefix] = registry;
+      });
+      return registry;
+    } finally {
+      releaseLock();
+    }
+  }
+  /**
+   * Add a new unapproved transaction to state. Parameters will be validated, a
+   * unique transaction id will be generated, and gas and gasPrice will be calculated
+   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.
+   *
+   * @param txParams - Standard parameters for an Ethereum transaction.
+   * @param opts - Additional options to control how the transaction is added.
+   * @param opts.actionId - Unique ID to prevent duplicate requests.
+   * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
+   * @param opts.method - RPC method that requested the transaction.
+   * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
+   * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.
+   * @param opts.securityAlertResponse - Response from security validator.
+   * @param opts.sendFlowHistory - The sendFlowHistory entries to add.
+   * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.
+   * @param opts.swaps - Options for swaps transactions.
+   * @param opts.swaps.hasApproveTx - Whether the transaction has an approval transaction.
+   * @param opts.swaps.meta - Metadata for swap transaction.
+   * @param opts.networkClientId - The id of the network client for this transaction.
+   * @returns Object containing a promise resolving to the transaction hash if approved.
+   */
+  async addTransaction(txParams, {
+    actionId,
+    deviceConfirmedOn,
+    method,
+    origin,
+    requireApproval,
+    securityAlertResponse,
+    sendFlowHistory,
+    swaps = {},
+    type,
+    networkClientId: requestNetworkClientId
+  } = {}) {
+    _chunkS6VGOPUYjs.projectLogger.call(void 0, "Adding transaction", txParams);
+    txParams = _chunkUGFBA4GVjs.normalizeTransactionParams.call(void 0, txParams);
+    if (requestNetworkClientId && !_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).has(requestNetworkClientId)) {
+      throw new Error(
+        "The networkClientId for this transaction could not be found"
+      );
+    }
+    const networkClientId = requestNetworkClientId ?? _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);
+    const isEIP1559Compatible = await this.getEIP1559Compatibility(
+      networkClientId
+    );
+    _chunkVH47Q6TSjs.validateTxParams.call(void 0, txParams, isEIP1559Compatible);
+    if (origin) {
+      await _chunkVH47Q6TSjs.validateTransactionOrigin.call(void 0, 
+        await this.getPermittedAccounts(origin),
+        this.getSelectedAddress(),
+        txParams.from,
+        origin
+      );
+    }
+    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(
+      txParams,
+      origin
+    );
+    const chainId = this.getChainId(networkClientId);
+    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({
+      networkClientId,
+      chainId
+    });
+    const transactionType = type ?? (await _chunkSD6CWFDFjs.determineTransactionType.call(void 0, txParams, ethQuery)).type;
+    const existingTransactionMeta = this.getTransactionWithActionId(actionId);
+    let addedTransactionMeta = existingTransactionMeta ? _lodash.cloneDeep.call(void 0, existingTransactionMeta) : {
+      // Add actionId to txMeta to check if same actionId is seen again
+      actionId,
+      chainId,
+      dappSuggestedGasFees,
+      deviceConfirmedOn,
+      id: _uuid.v1.call(void 0, ),
+      origin,
+      securityAlertResponse,
+      status: "unapproved" /* unapproved */,
+      time: Date.now(),
+      txParams,
+      userEditedGasLimit: false,
+      verifiedOnBlockchain: false,
+      type: transactionType,
+      networkClientId
+    };
+    await this.updateGasProperties(addedTransactionMeta);
+    if (!existingTransactionMeta) {
+      if (method && this.securityProviderRequest) {
+        const securityProviderResponse = await this.securityProviderRequest(
+          addedTransactionMeta,
+          method
+        );
+        addedTransactionMeta.securityProviderResponse = securityProviderResponse;
+      }
+      if (!this.isSendFlowHistoryDisabled) {
+        addedTransactionMeta.sendFlowHistory = sendFlowHistory ?? [];
+      }
+      if (!this.isHistoryDisabled) {
+        addedTransactionMeta = _chunkQP75SWIQjs.addInitialHistorySnapshot.call(void 0, addedTransactionMeta);
+      }
+      addedTransactionMeta = _chunkC2LNDHP4js.updateSwapsTransaction.call(void 0, 
+        addedTransactionMeta,
+        transactionType,
+        swaps,
+        {
+          isSwapsDisabled: this.isSwapsDisabled,
+          cancelTransaction: this.cancelTransaction.bind(this),
+          messenger: this.messagingSystem
+        }
+      );
+      this.addMetadata(addedTransactionMeta);
+      if (requireApproval !== false) {
+        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateSimulationData, updateSimulationData_fn).call(this, addedTransactionMeta);
+      } else {
+        _chunkS6VGOPUYjs.projectLogger.call(void 0, "Skipping simulation as approval not required");
+      }
+      this.messagingSystem.publish(
+        `${controllerName}:unapprovedTransactionAdded`,
+        addedTransactionMeta
+      );
+    }
+    return {
+      result: this.processApproval(addedTransactionMeta, {
+        isExisting: Boolean(existingTransactionMeta),
+        requireApproval,
+        actionId
+      }),
+      transactionMeta: addedTransactionMeta
+    };
+  }
+  startIncomingTransactionPolling(networkClientIds = []) {
+    if (networkClientIds.length === 0) {
+      this.incomingTransactionHelper.start();
+      return;
+    }
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).startIncomingTransactionPolling(
+      networkClientIds
+    );
+  }
+  stopIncomingTransactionPolling(networkClientIds = []) {
+    if (networkClientIds.length === 0) {
+      this.incomingTransactionHelper.stop();
+      return;
+    }
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).stopIncomingTransactionPolling(
+      networkClientIds
+    );
+  }
+  stopAllIncomingTransactionPolling() {
+    this.incomingTransactionHelper.stop();
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).stopAllIncomingTransactionPolling();
+  }
+  async updateIncomingTransactions(networkClientIds = []) {
+    if (networkClientIds.length === 0) {
+      await this.incomingTransactionHelper.update();
+      return;
+    }
+    await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).updateIncomingTransactions(
+      networkClientIds
+    );
+  }
+  /**
+   * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
+   * and emitting a `<tx.id>:finished` hub event.
+   *
+   * @param transactionId - The ID of the transaction to cancel.
+   * @param gasValues - The gas values to use for the cancellation transaction.
+   * @param options - The options for the cancellation transaction.
+   * @param options.actionId - Unique ID to prevent duplicate requests.
+   * @param options.estimatedBaseFee - The estimated base fee of the transaction.
+   */
+  async stopTransaction(transactionId, gasValues, {
+    estimatedBaseFee,
+    actionId
+  } = {}) {
+    if (this.getTransactionWithActionId(actionId)) {
+      return;
+    }
+    if (gasValues) {
+      gasValues = _chunkUGFBA4GVjs.normalizeGasFeeValues.call(void 0, gasValues);
+      _chunkUGFBA4GVjs.validateGasValues.call(void 0, gasValues);
+    }
+    _chunkS6VGOPUYjs.projectLogger.call(void 0, "Creating cancel transaction", transactionId, gasValues);
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      return;
+    }
+    if (!this.sign) {
+      throw new Error("No sign method defined.");
+    }
+    const minGasPrice = _chunkUGFBA4GVjs.getIncreasedPriceFromExisting.call(void 0, 
+      transactionMeta.txParams.gasPrice,
+      CANCEL_RATE
+    );
+    const gasPriceFromValues = _chunkUGFBA4GVjs.isGasPriceValue.call(void 0, gasValues) && gasValues.gasPrice;
+    const newGasPrice = gasPriceFromValues && _chunkUGFBA4GVjs.validateMinimumIncrease.call(void 0, gasPriceFromValues, minGasPrice) || minGasPrice;
+    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;
+    const minMaxFeePerGas = _chunkUGFBA4GVjs.getIncreasedPriceFromExisting.call(void 0, 
+      existingMaxFeePerGas,
+      CANCEL_RATE
+    );
+    const maxFeePerGasValues = _chunkUGFBA4GVjs.isFeeMarketEIP1559Values.call(void 0, gasValues) && gasValues.maxFeePerGas;
+    const newMaxFeePerGas = maxFeePerGasValues && _chunkUGFBA4GVjs.validateMinimumIncrease.call(void 0, maxFeePerGasValues, minMaxFeePerGas) || existingMaxFeePerGas && minMaxFeePerGas;
+    const existingMaxPriorityFeePerGas = transactionMeta.txParams?.maxPriorityFeePerGas;
+    const minMaxPriorityFeePerGas = _chunkUGFBA4GVjs.getIncreasedPriceFromExisting.call(void 0, 
+      existingMaxPriorityFeePerGas,
+      CANCEL_RATE
+    );
+    const maxPriorityFeePerGasValues = _chunkUGFBA4GVjs.isFeeMarketEIP1559Values.call(void 0, gasValues) && gasValues.maxPriorityFeePerGas;
+    const newMaxPriorityFeePerGas = maxPriorityFeePerGasValues && _chunkUGFBA4GVjs.validateMinimumIncrease.call(void 0, 
+      maxPriorityFeePerGasValues,
+      minMaxPriorityFeePerGas
+    ) || existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas;
+    const newTxParams = newMaxFeePerGas && newMaxPriorityFeePerGas ? {
+      from: transactionMeta.txParams.from,
+      gasLimit: transactionMeta.txParams.gas,
+      maxFeePerGas: newMaxFeePerGas,
+      maxPriorityFeePerGas: newMaxPriorityFeePerGas,
+      type: "0x2" /* feeMarket */,
+      nonce: transactionMeta.txParams.nonce,
+      to: transactionMeta.txParams.from,
+      value: "0x0"
+    } : {
+      from: transactionMeta.txParams.from,
+      gasLimit: transactionMeta.txParams.gas,
+      gasPrice: newGasPrice,
+      nonce: transactionMeta.txParams.nonce,
+      to: transactionMeta.txParams.from,
+      value: "0x0"
+    };
+    const unsignedEthTx = this.prepareUnsignedEthTx(
+      transactionMeta.chainId,
+      newTxParams
+    );
+    const signedTx = await this.sign(
+      unsignedEthTx,
+      transactionMeta.txParams.from
+    );
+    const rawTx = _util.bufferToHex.call(void 0, signedTx.serialize());
+    const newFee = newTxParams.maxFeePerGas ?? newTxParams.gasPrice;
+    const oldFee = newTxParams.maxFeePerGas ? transactionMeta.txParams.maxFeePerGas : transactionMeta.txParams.gasPrice;
+    _chunkS6VGOPUYjs.projectLogger.call(void 0, "Submitting cancel transaction", {
+      oldFee,
+      newFee,
+      txParams: newTxParams
+    });
+    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({
+      networkClientId: transactionMeta.networkClientId,
+      chainId: transactionMeta.chainId
+    });
+    const hash = await this.publishTransactionForRetry(
+      ethQuery,
+      rawTx,
+      transactionMeta
+    );
+    const cancelTransactionMeta = {
+      actionId,
+      chainId: transactionMeta.chainId,
+      networkClientId: transactionMeta.networkClientId,
+      estimatedBaseFee,
+      hash,
+      id: _uuid.v1.call(void 0, ),
+      originalGasEstimate: transactionMeta.txParams.gas,
+      status: "submitted" /* submitted */,
+      time: Date.now(),
+      type: "cancel" /* cancel */,
+      txParams: newTxParams
+    };
+    this.addMetadata(cancelTransactionMeta);
+    this.messagingSystem.publish(`${controllerName}:transactionApproved`, {
+      transactionMeta: cancelTransactionMeta,
+      actionId
+    });
+    this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {
+      transactionMeta: cancelTransactionMeta,
+      actionId
+    });
+    this.messagingSystem.publish(
+      `${controllerName}:transactionFinished`,
+      cancelTransactionMeta
+    );
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).emit(
+      `${transactionMeta.id}:finished`,
+      cancelTransactionMeta
+    );
+  }
+  /**
+   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.
+   *
+   * @param transactionId - The ID of the transaction to speed up.
+   * @param gasValues - The gas values to use for the speed up transaction.
+   * @param options - The options for the speed up transaction.
+   * @param options.actionId - Unique ID to prevent duplicate requests
+   * @param options.estimatedBaseFee - The estimated base fee of the transaction.
+   */
+  async speedUpTransaction(transactionId, gasValues, {
+    actionId,
+    estimatedBaseFee
+  } = {}) {
+    if (this.getTransactionWithActionId(actionId)) {
+      return;
+    }
+    if (gasValues) {
+      gasValues = _chunkUGFBA4GVjs.normalizeGasFeeValues.call(void 0, gasValues);
+      _chunkUGFBA4GVjs.validateGasValues.call(void 0, gasValues);
+    }
+    _chunkS6VGOPUYjs.projectLogger.call(void 0, "Creating speed up transaction", transactionId, gasValues);
+    const transactionMeta = this.state.transactions.find(
+      ({ id }) => id === transactionId
+    );
+    if (!transactionMeta) {
+      return;
+    }
+    if (!this.sign) {
+      throw new Error("No sign method defined.");
+    }
+    const minGasPrice = _chunkUGFBA4GVjs.getIncreasedPriceFromExisting.call(void 0, 
+      transactionMeta.txParams.gasPrice,
+      SPEED_UP_RATE
+    );
+    const gasPriceFromValues = _chunkUGFBA4GVjs.isGasPriceValue.call(void 0, gasValues) && gasValues.gasPrice;
+    const newGasPrice = gasPriceFromValues && _chunkUGFBA4GVjs.validateMinimumIncrease.call(void 0, gasPriceFromValues, minGasPrice) || minGasPrice;
+    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;
+    const minMaxFeePerGas = _chunkUGFBA4GVjs.getIncreasedPriceFromExisting.call(void 0, 
+      existingMaxFeePerGas,
+      SPEED_UP_RATE
+    );
+    const maxFeePerGasValues = _chunkUGFBA4GVjs.isFeeMarketEIP1559Values.call(void 0, gasValues) && gasValues.maxFeePerGas;
+    const newMaxFeePerGas = maxFeePerGasValues && _chunkUGFBA4GVjs.validateMinimumIncrease.call(void 0, maxFeePerGasValues, minMaxFeePerGas) || existingMaxFeePerGas && minMaxFeePerGas;
+    const existingMaxPriorityFeePerGas = transactionMeta.txParams?.maxPriorityFeePerGas;
+    const minMaxPriorityFeePerGas = _chunkUGFBA4GVjs.getIncreasedPriceFromExisting.call(void 0, 
+      existingMaxPriorityFeePerGas,
+      SPEED_UP_RATE
+    );
+    const maxPriorityFeePerGasValues = _chunkUGFBA4GVjs.isFeeMarketEIP1559Values.call(void 0, gasValues) && gasValues.maxPriorityFeePerGas;
+    const newMaxPriorityFeePerGas = maxPriorityFeePerGasValues && _chunkUGFBA4GVjs.validateMinimumIncrease.call(void 0, 
+      maxPriorityFeePerGasValues,
+      minMaxPriorityFeePerGas
+    ) || existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas;
+    const txParams = newMaxFeePerGas && newMaxPriorityFeePerGas ? {
+      ...transactionMeta.txParams,
+      gasLimit: transactionMeta.txParams.gas,
+      maxFeePerGas: newMaxFeePerGas,
+      maxPriorityFeePerGas: newMaxPriorityFeePerGas,
+      type: "0x2" /* feeMarket */
+    } : {
+      ...transactionMeta.txParams,
+      gasLimit: transactionMeta.txParams.gas,
+      gasPrice: newGasPrice
+    };
+    const unsignedEthTx = this.prepareUnsignedEthTx(
+      transactionMeta.chainId,
+      txParams
+    );
+    const signedTx = await this.sign(
+      unsignedEthTx,
+      transactionMeta.txParams.from
+    );
+    const transactionMetaWithRsv = await this.updateTransactionMetaRSV(
+      transactionMeta,
+      signedTx
+    );
+    const rawTx = _util.bufferToHex.call(void 0, signedTx.serialize());
+    const newFee = txParams.maxFeePerGas ?? txParams.gasPrice;
+    const oldFee = txParams.maxFeePerGas ? transactionMetaWithRsv.txParams.maxFeePerGas : transactionMetaWithRsv.txParams.gasPrice;
+    _chunkS6VGOPUYjs.projectLogger.call(void 0, "Submitting speed up transaction", { oldFee, newFee, txParams });
+    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({
+      networkClientId: transactionMeta.networkClientId,
+      chainId: transactionMeta.chainId
+    });
+    const hash = await this.publishTransactionForRetry(
+      ethQuery,
+      rawTx,
+      transactionMeta
+    );
+    const baseTransactionMeta = {
+      ...transactionMetaWithRsv,
+      estimatedBaseFee,
+      id: _uuid.v1.call(void 0, ),
+      time: Date.now(),
+      hash,
+      actionId,
+      originalGasEstimate: transactionMeta.txParams.gas,
+      type: "retry" /* retry */,
+      originalType: transactionMeta.type
+    };
+    const newTransactionMeta = newMaxFeePerGas && newMaxPriorityFeePerGas ? {
+      ...baseTransactionMeta,
+      txParams: {
+        ...transactionMeta.txParams,
+        maxFeePerGas: newMaxFeePerGas,
+        maxPriorityFeePerGas: newMaxPriorityFeePerGas
+      }
+    } : {
+      ...baseTransactionMeta,
+      txParams: {
+        ...transactionMeta.txParams,
+        gasPrice: newGasPrice
+      }
+    };
+    this.addMetadata(newTransactionMeta);
+    this.messagingSystem.publish(`${controllerName}:transactionApproved`, {
+      transactionMeta: newTransactionMeta,
+      actionId
+    });
+    this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {
+      transactionMeta: newTransactionMeta,
+      actionId
+    });
+    this.messagingSystem.publish(
+      `${controllerName}:speedupTransactionAdded`,
+      newTransactionMeta
+    );
+  }
+  /**
+   * Estimates required gas for a given transaction.
+   *
+   * @param transaction - The transaction to estimate gas for.
+   * @param networkClientId - The network client id to use for the estimate.
+   * @returns The gas and gas price.
+   */
+  async estimateGas(transaction, networkClientId) {
+    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({
+      networkClientId
+    });
+    const { estimatedGas, simulationFails } = await _chunkV72C4MCRjs.estimateGas.call(void 0, 
+      transaction,
+      ethQuery
+    );
+    return { gas: estimatedGas, simulationFails };
+  }
+  /**
+   * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.
+   *
+   * @param transaction - The transaction params to estimate gas for.
+   * @param multiplier - The multiplier to use for the gas buffer.
+   * @param networkClientId - The network client id to use for the estimate.
+   */
+  async estimateGasBuffered(transaction, multiplier, networkClientId) {
+    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({
+      networkClientId
+    });
+    const { blockGasLimit, estimatedGas, simulationFails } = await _chunkV72C4MCRjs.estimateGas.call(void 0, 
+      transaction,
+      ethQuery
+    );
+    const gas = _chunkV72C4MCRjs.addGasBuffer.call(void 0, estimatedGas, blockGasLimit, multiplier);
+    return {
+      gas,
+      simulationFails
+    };
+  }
+  /**
+   * Updates an existing transaction in state.
+   *
+   * @param transactionMeta - The new transaction to store in state.
+   * @param note - A note or update reason to include in the transaction history.
+   */
+  updateTransaction(transactionMeta, note) {
+    const { id: transactionId } = transactionMeta;
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, { transactionId, note, skipHistory: this.isHistoryDisabled }, () => ({ ...transactionMeta }));
+  }
+  /**
+   * Update the security alert response for a transaction.
+   *
+   * @param transactionId - ID of the transaction.
+   * @param securityAlertResponse - The new security alert response for the transaction.
+   */
+  updateSecurityAlertResponse(transactionId, securityAlertResponse) {
+    if (!securityAlertResponse) {
+      throw new Error(
+        "updateSecurityAlertResponse: securityAlertResponse should not be null"
+      );
+    }
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update security alert response as no transaction metadata found`
+      );
+    }
+    const updatedTransactionMeta = {
+      ...transactionMeta,
+      securityAlertResponse
+    };
+    this.updateTransaction(
+      updatedTransactionMeta,
+      `${controllerName}:updatesecurityAlertResponse - securityAlertResponse updated`
+    );
+  }
+  /**
+   * Removes all transactions from state, optionally based on the current network.
+   *
+   * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the
+   * current network. If `true`, all transactions are wiped.
+   * @param address - If specified, only transactions originating from this address will be
+   * wiped on current network.
+   */
+  wipeTransactions(ignoreNetwork, address) {
+    if (ignoreNetwork && !address) {
+      this.update((state) => {
+        state.transactions = [];
+      });
+      return;
+    }
+    const currentChainId = this.getChainId();
+    const newTransactions = this.state.transactions.filter(
+      ({ chainId, txParams }) => {
+        const isMatchingNetwork = ignoreNetwork || chainId === currentChainId;
+        if (!isMatchingNetwork) {
+          return true;
+        }
+        const isMatchingAddress = !address || txParams.from?.toLowerCase() === address.toLowerCase();
+        return !isMatchingAddress;
+      }
+    );
+    this.update((state) => {
+      state.transactions = this.trimTransactionsForState(newTransactions);
+    });
+  }
+  /**
+   * Adds external provided transaction to state as confirmed transaction.
+   *
+   * @param transactionMeta - TransactionMeta to add transactions.
+   * @param transactionReceipt - TransactionReceipt of the external transaction.
+   * @param baseFeePerGas - Base fee per gas of the external transaction.
+   */
+  async confirmExternalTransaction(transactionMeta, transactionReceipt, baseFeePerGas) {
+    const newTransactionMeta = this.addExternalTransaction(transactionMeta);
+    try {
+      const transactionId = newTransactionMeta.id;
+      const updatedTransactionMeta = {
+        ...newTransactionMeta,
+        status: "confirmed" /* confirmed */,
+        txReceipt: transactionReceipt
+      };
+      if (baseFeePerGas) {
+        updatedTransactionMeta.baseFeePerGas = baseFeePerGas;
+      }
+      this.markNonceDuplicatesDropped(transactionId);
+      this.updateTransaction(
+        updatedTransactionMeta,
+        `${controllerName}:confirmExternalTransaction - Add external transaction`
+      );
+      this.onTransactionStatusChange(updatedTransactionMeta);
+      this.updatePostBalance(updatedTransactionMeta);
+      this.messagingSystem.publish(
+        `${controllerName}:transactionConfirmed`,
+        updatedTransactionMeta
+      );
+    } catch (error) {
+      console.error("Failed to confirm external transaction", error);
+    }
+  }
+  /**
+   * Append new send flow history to a transaction.
+   *
+   * @param transactionID - The ID of the transaction to update.
+   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.
+   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.
+   * @returns The updated transactionMeta.
+   */
+  updateTransactionSendFlowHistory(transactionID, currentSendFlowHistoryLength, sendFlowHistoryToAdd) {
+    if (this.isSendFlowHistoryDisabled) {
+      throw new Error(
+        "Send flow history is disabled for the current transaction controller"
+      );
+    }
+    const transactionMeta = this.getTransaction(transactionID);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update send flow history as no transaction metadata found`
+      );
+    }
+    _chunkUGFBA4GVjs.validateIfTransactionUnapproved.call(void 0, 
+      transactionMeta,
+      "updateTransactionSendFlowHistory"
+    );
+    const sendFlowHistory = transactionMeta.sendFlowHistory ?? [];
+    if (currentSendFlowHistoryLength === sendFlowHistory.length) {
+      const updatedTransactionMeta = {
+        ...transactionMeta,
+        sendFlowHistory: [...sendFlowHistory, ...sendFlowHistoryToAdd]
+      };
+      this.updateTransaction(
+        updatedTransactionMeta,
+        `${controllerName}:updateTransactionSendFlowHistory - sendFlowHistory updated`
+      );
+    }
+    return this.getTransaction(transactionID);
+  }
+  /**
+   * Update the gas values of a transaction.
+   *
+   * @param transactionId - The ID of the transaction to update.
+   * @param gasValues - Gas values to update.
+   * @param gasValues.gas - Same as transaction.gasLimit.
+   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.
+   * @param gasValues.gasPrice - Price per gas for legacy transactions.
+   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.
+   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.
+   * @param gasValues.estimateUsed - Which estimate level was used.
+   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.
+   * @param gasValues.defaultGasEstimates - The default estimate for gas.
+   * @param gasValues.originalGasEstimate - Original estimate for gas.
+   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.
+   * @param gasValues.userFeeLevel - Estimate level user selected.
+   * @returns The updated transactionMeta.
+   */
+  updateTransactionGasFees(transactionId, {
+    defaultGasEstimates,
+    estimateUsed,
+    estimateSuggested,
+    gas,
+    gasLimit,
+    gasPrice,
+    maxPriorityFeePerGas,
+    maxFeePerGas,
+    originalGasEstimate,
+    userEditedGasLimit,
+    userFeeLevel
+  }) {
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update transaction as no transaction metadata found`
+      );
+    }
+    _chunkUGFBA4GVjs.validateIfTransactionUnapproved.call(void 0, 
+      transactionMeta,
+      "updateTransactionGasFees"
+    );
+    let transactionGasFees = {
+      txParams: {
+        gas,
+        gasLimit,
+        gasPrice,
+        maxPriorityFeePerGas,
+        maxFeePerGas
+      },
+      defaultGasEstimates,
+      estimateUsed,
+      estimateSuggested,
+      originalGasEstimate,
+      userEditedGasLimit,
+      userFeeLevel
+      // TODO: Replace `any` with type
+      // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    };
+    transactionGasFees.txParams = _lodash.pickBy.call(void 0, transactionGasFees.txParams);
+    transactionGasFees = _lodash.pickBy.call(void 0, transactionGasFees);
+    const updatedMeta = _lodash.merge.call(void 0, {}, transactionMeta, transactionGasFees);
+    this.updateTransaction(
+      updatedMeta,
+      `${controllerName}:updateTransactionGasFees - gas values updated`
+    );
+    return this.getTransaction(transactionId);
+  }
+  /**
+   * Update the previous gas values of a transaction.
+   *
+   * @param transactionId - The ID of the transaction to update.
+   * @param previousGas - Previous gas values to update.
+   * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.
+   * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.
+   * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.
+   * @returns The updated transactionMeta.
+   */
+  updatePreviousGasParams(transactionId, {
+    gasLimit,
+    maxFeePerGas,
+    maxPriorityFeePerGas
+  }) {
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update transaction as no transaction metadata found`
+      );
+    }
+    _chunkUGFBA4GVjs.validateIfTransactionUnapproved.call(void 0, transactionMeta, "updatePreviousGasParams");
+    const transactionPreviousGas = {
+      previousGas: {
+        gasLimit,
+        maxFeePerGas,
+        maxPriorityFeePerGas
+      }
+      // TODO: Replace `any` with type
+      // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    };
+    transactionPreviousGas.previousGas = _lodash.pickBy.call(void 0, 
+      transactionPreviousGas.previousGas
+    );
+    const updatedMeta = _lodash.merge.call(void 0, {}, transactionMeta, transactionPreviousGas);
+    this.updateTransaction(
+      updatedMeta,
+      `${controllerName}:updatePreviousGasParams - Previous gas values updated`
+    );
+    return this.getTransaction(transactionId);
+  }
+  async getNonceLock(address, networkClientId) {
+    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getNonceLock(
+      address,
+      networkClientId
+    );
+  }
+  /**
+   * Updates the editable parameters of a transaction.
+   *
+   * @param txId - The ID of the transaction to update.
+   * @param params - The editable parameters to update.
+   * @param params.data - Data to pass with the transaction.
+   * @param params.gas - Maximum number of units of gas to use for the transaction.
+   * @param params.gasPrice - Price per gas for legacy transactions.
+   * @param params.from - Address to send the transaction from.
+   * @param params.to - Address to send the transaction to.
+   * @param params.value - Value associated with the transaction.
+   * @returns The updated transaction metadata.
+   */
+  async updateEditableParams(txId, {
+    data,
+    gas,
+    gasPrice,
+    from,
+    to,
+    value
+  }) {
+    const transactionMeta = this.getTransaction(txId);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update editable params as no transaction metadata found`
+      );
+    }
+    _chunkUGFBA4GVjs.validateIfTransactionUnapproved.call(void 0, transactionMeta, "updateEditableParams");
+    const editableParams = {
+      txParams: {
+        data,
+        from,
+        to,
+        value,
+        gas,
+        gasPrice
+      }
+    };
+    editableParams.txParams = _lodash.pickBy.call(void 0, 
+      editableParams.txParams
+    );
+    const updatedTransaction = _lodash.merge.call(void 0, {}, transactionMeta, editableParams);
+    const provider = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getProvider({
+      chainId: transactionMeta.chainId,
+      networkClientId: transactionMeta.networkClientId
+    });
+    const ethQuery = new (0, _ethquery2.default)(provider);
+    const { type } = await _chunkSD6CWFDFjs.determineTransactionType.call(void 0, 
+      updatedTransaction.txParams,
+      ethQuery
+    );
+    updatedTransaction.type = type;
+    await _chunk2XKEAKQGjs.updateTransactionLayer1GasFee.call(void 0, {
+      layer1GasFeeFlows: this.layer1GasFeeFlows,
+      provider,
+      transactionMeta: updatedTransaction
+    });
+    this.updateTransaction(
+      updatedTransaction,
+      `Update Editable Params for ${txId}`
+    );
+    return this.getTransaction(txId);
+  }
+  /**
+   * Signs and returns the raw transaction data for provided transaction params list.
+   *
+   * @param listOfTxParams - The list of transaction params to approve.
+   * @param opts - Options bag.
+   * @param opts.hasNonce - Whether the transactions already have a nonce.
+   * @returns The raw transactions.
+   */
+  async approveTransactionsWithSameNonce(listOfTxParams = [], { hasNonce } = {}) {
+    _chunkS6VGOPUYjs.projectLogger.call(void 0, "Approving transactions with same nonce", {
+      transactions: listOfTxParams
+    });
+    if (listOfTxParams.length === 0) {
+      return "";
+    }
+    const initialTx = listOfTxParams[0];
+    const common = this.getCommonConfiguration(initialTx.chainId);
+    let networkClientId;
+    try {
+      networkClientId = this.messagingSystem.call(
+        `NetworkController:findNetworkClientIdByChainId`,
+        initialTx.chainId
+      );
+    } catch (err) {
+      _chunkS6VGOPUYjs.projectLogger.call(void 0, "failed to find networkClientId from chainId", err);
+    }
+    const initialTxAsEthTx = _tx.TransactionFactory.fromTxData(initialTx, {
+      common
+    });
+    const initialTxAsSerializedHex = _util.bufferToHex.call(void 0, initialTxAsEthTx.serialize());
+    if (this.inProcessOfSigning.has(initialTxAsSerializedHex)) {
+      return "";
+    }
+    this.inProcessOfSigning.add(initialTxAsSerializedHex);
+    let rawTransactions, nonceLock;
+    try {
+      const fromAddress = initialTx.from;
+      const requiresNonce = hasNonce !== true;
+      nonceLock = requiresNonce ? await this.getNonceLock(fromAddress, networkClientId) : void 0;
+      const nonce = nonceLock ? _utils.add0x.call(void 0, nonceLock.nextNonce.toString(16)) : initialTx.nonce;
+      if (nonceLock) {
+        _chunkS6VGOPUYjs.projectLogger.call(void 0, "Using nonce from nonce tracker", nonce, nonceLock.nonceDetails);
+      }
+      rawTransactions = await Promise.all(
+        listOfTxParams.map((txParams) => {
+          txParams.nonce = nonce;
+          return this.signExternalTransaction(txParams.chainId, txParams);
+        })
+      );
+    } catch (err) {
+      _chunkS6VGOPUYjs.projectLogger.call(void 0, "Error while signing transactions with same nonce", err);
+      throw err;
+    } finally {
+      nonceLock?.releaseLock();
+      this.inProcessOfSigning.delete(initialTxAsSerializedHex);
+    }
+    return rawTransactions;
+  }
+  /**
+   * Update a custodial transaction.
+   *
+   * @param transactionId - The ID of the transaction to update.
+   * @param options - The custodial transaction options to update.
+   * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.
+   * @param options.hash - The new hash value to be assigned.
+   * @param options.status - The new status value to be assigned.
+   */
+  updateCustodialTransaction(transactionId, {
+    errorMessage,
+    hash,
+    status
+  }) {
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      throw new Error(
+        `Cannot update custodial transaction as no transaction metadata found`
+      );
+    }
+    if (!transactionMeta.custodyId) {
+      throw new Error("Transaction must be a custodian transaction");
+    }
+    if (status && ![
+      "submitted" /* submitted */,
+      "signed" /* signed */,
+      "failed" /* failed */
+    ].includes(status)) {
+      throw new Error(
+        `Cannot update custodial transaction with status: ${status}`
+      );
+    }
+    const updatedTransactionMeta = _lodash.merge.call(void 0, 
+      {},
+      transactionMeta,
+      _lodash.pickBy.call(void 0, { hash, status })
+    );
+    if (status === "submitted" /* submitted */) {
+      updatedTransactionMeta.submittedTime = (/* @__PURE__ */ new Date()).getTime();
+    }
+    if (status === "failed" /* failed */) {
+      updatedTransactionMeta.error = _chunkUGFBA4GVjs.normalizeTxError.call(void 0, new Error(errorMessage));
+    }
+    this.updateTransaction(
+      updatedTransactionMeta,
+      `${controllerName}:updateCustodialTransaction - Custodial transaction updated`
+    );
+    if (["submitted" /* submitted */, "failed" /* failed */].includes(
+      status
+    )) {
+      this.messagingSystem.publish(
+        `${controllerName}:transactionFinished`,
+        updatedTransactionMeta
+      );
+      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).emit(
+        `${updatedTransactionMeta.id}:finished`,
+        updatedTransactionMeta
+      );
+    }
+  }
+  /**
+   * Creates approvals for all unapproved transactions persisted.
+   */
+  initApprovals() {
+    const chainId = this.getChainId();
+    const unapprovedTxs = this.state.transactions.filter(
+      (transaction) => transaction.status === "unapproved" /* unapproved */ && transaction.chainId === chainId && !transaction.isUserOperation
+    );
+    for (const txMeta of unapprovedTxs) {
+      this.processApproval(txMeta, {
+        shouldShowRequest: false
+      }).catch((error) => {
+        if (error?.code === _rpcerrors.errorCodes.provider.userRejectedRequest) {
+          return;
+        }
+        console.error("Error during persisted transaction approval", error);
+      });
+    }
+  }
+  /**
+   * Search transaction metadata for matching entries.
+   *
+   * @param opts - Options bag.
+   * @param opts.searchCriteria - An object containing values or functions for transaction properties to filter transactions with.
+   * @param opts.initialList - The transactions to search. Defaults to the current state.
+   * @param opts.filterToCurrentNetwork - Whether to filter the results to the current network. Defaults to true.
+   * @param opts.limit - The maximum number of transactions to return. No limit by default.
+   * @returns An array of transactions matching the provided options.
+   */
+  getTransactions({
+    searchCriteria = {},
+    initialList,
+    filterToCurrentNetwork = true,
+    limit
+  } = {}) {
+    const chainId = this.getChainId();
+    const predicateMethods = _lodash.mapValues.call(void 0, searchCriteria, (predicate) => {
+      return typeof predicate === "function" ? predicate : (
+        // TODO: Replace `any` with type
+        // eslint-disable-next-line @typescript-eslint/no-explicit-any
+        (v) => v === predicate
+      );
+    });
+    const transactionsToFilter = initialList ?? this.state.transactions;
+    const filteredTransactions = _lodash.sortBy.call(void 0, 
+      _lodash.pickBy.call(void 0, transactionsToFilter, (transaction) => {
+        if (filterToCurrentNetwork && transaction.chainId !== chainId) {
+          return false;
+        }
+        for (const [key, predicate] of Object.entries(predicateMethods)) {
+          if (key in transaction.txParams) {
+            if (predicate(transaction.txParams[key]) === false) {
+              return false;
+            }
+          } else if (predicate(transaction[key]) === false) {
+            return false;
+          }
+        }
+        return true;
+      }),
+      "time"
+    );
+    if (limit !== void 0) {
+      const nonces = /* @__PURE__ */ new Set();
+      const txs = [];
+      for (let i = filteredTransactions.length - 1; i > -1; i--) {
+        const txMeta = filteredTransactions[i];
+        const { nonce } = txMeta.txParams;
+        if (!nonces.has(nonce)) {
+          if (nonces.size < limit) {
+            nonces.add(nonce);
+          } else {
+            continue;
+          }
+        }
+        txs.unshift(txMeta);
+      }
+      return txs;
+    }
+    return filteredTransactions;
+  }
+  async estimateGasFee({
+    transactionParams,
+    chainId,
+    networkClientId: requestNetworkClientId
+  }) {
+    const networkClientId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNetworkClientId, getNetworkClientId_fn).call(this, {
+      networkClientId: requestNetworkClientId,
+      chainId
+    });
+    const transactionMeta = {
+      txParams: transactionParams,
+      chainId,
+      networkClientId
+    };
+    const gasFeeFlow = _chunkEMDU4XLMjs.getGasFeeFlow.call(void 0, 
+      transactionMeta,
+      this.gasFeeFlows
+    );
+    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({
+      networkClientId,
+      chainId
+    });
+    const gasFeeControllerData = await this.getGasFeeEstimates({
+      networkClientId
+    });
+    return gasFeeFlow.getGasFees({
+      ethQuery,
+      gasFeeControllerData,
+      transactionMeta
+    });
+  }
+  /**
+   * Determine the layer 1 gas fee for the given transaction parameters.
+   *
+   * @param request - The request object.
+   * @param request.transactionParams - The transaction parameters to estimate the layer 1 gas fee for.
+   * @param request.chainId - The ID of the chain where the transaction will be executed.
+   * @param request.networkClientId - The ID of a specific network client to process the transaction.
+   */
+  async getLayer1GasFee({
+    transactionParams,
+    chainId,
+    networkClientId
+  }) {
+    const provider = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getProvider({
+      networkClientId,
+      chainId
+    });
+    return await _chunk2XKEAKQGjs.getTransactionLayer1GasFee.call(void 0, {
+      layer1GasFeeFlows: this.layer1GasFeeFlows,
+      provider,
+      transactionMeta: {
+        txParams: transactionParams,
+        chainId
+      }
+    });
+  }
+  async signExternalTransaction(chainId, transactionParams) {
+    if (!this.sign) {
+      throw new Error("No sign method defined.");
+    }
+    const normalizedTransactionParams = _chunkUGFBA4GVjs.normalizeTransactionParams.call(void 0, transactionParams);
+    const type = _chunkUGFBA4GVjs.isEIP1559Transaction.call(void 0, normalizedTransactionParams) ? "0x2" /* feeMarket */ : "0x0" /* legacy */;
+    const updatedTransactionParams = {
+      ...normalizedTransactionParams,
+      type,
+      gasLimit: normalizedTransactionParams.gas,
+      chainId
+    };
+    const { from } = updatedTransactionParams;
+    const common = this.getCommonConfiguration(chainId);
+    const unsignedTransaction = _tx.TransactionFactory.fromTxData(
+      updatedTransactionParams,
+      { common }
+    );
+    const signedTransaction = await this.sign(unsignedTransaction, from);
+    const rawTransaction = _util.bufferToHex.call(void 0, signedTransaction.serialize());
+    return rawTransaction;
+  }
+  /**
+   * Removes unapproved transactions from state.
+   */
+  clearUnapprovedTransactions() {
+    const transactions = this.state.transactions.filter(
+      ({ status }) => status !== "unapproved" /* unapproved */
+    );
+    this.update((state) => {
+      state.transactions = this.trimTransactionsForState(transactions);
+    });
+  }
+  /**
+   * Stop the signing process for a specific transaction.
+   * Throws an error causing the transaction status to be set to failed.
+   * @param transactionId - The ID of the transaction to stop signing.
+   */
+  abortTransactionSigning(transactionId) {
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      throw new Error(`Cannot abort signing as no transaction metadata found`);
+    }
+    const abortCallback = this.signAbortCallbacks.get(transactionId);
+    if (!abortCallback) {
+      throw new Error(
+        `Cannot abort signing as transaction is not waiting for signing`
+      );
+    }
+    abortCallback();
+    this.signAbortCallbacks.delete(transactionId);
+  }
+  addMetadata(transactionMeta) {
+    this.update((state) => {
+      state.transactions = this.trimTransactionsForState([
+        ...state.transactions,
+        transactionMeta
+      ]);
+    });
+  }
+  async updateGasProperties(transactionMeta) {
+    const isEIP1559Compatible = await this.getEIP1559Compatibility(transactionMeta.networkClientId) && transactionMeta.txParams.type !== "0x0" /* legacy */;
+    const { networkClientId, chainId } = transactionMeta;
+    const isCustomNetwork = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isCustomNetwork, isCustomNetwork_fn).call(this, networkClientId);
+    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({
+      networkClientId,
+      chainId
+    });
+    const provider = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getProvider({
+      networkClientId,
+      chainId
+    });
+    await _chunkV72C4MCRjs.updateGas.call(void 0, {
+      ethQuery,
+      chainId,
+      isCustomNetwork,
+      txMeta: transactionMeta
+    });
+    await _chunkKNYSD4JPjs.updateGasFees.call(void 0, {
+      eip1559: isEIP1559Compatible,
+      ethQuery,
+      gasFeeFlows: this.gasFeeFlows,
+      getGasFeeEstimates: this.getGasFeeEstimates,
+      getSavedGasFees: this.getSavedGasFees.bind(this),
+      txMeta: transactionMeta
+    });
+    await _chunk2XKEAKQGjs.updateTransactionLayer1GasFee.call(void 0, {
+      layer1GasFeeFlows: this.layer1GasFeeFlows,
+      provider,
+      transactionMeta
+    });
+  }
+  onBootCleanup() {
+    this.submitApprovedTransactions();
+  }
+  /**
+   * Force submit approved transactions for all chains.
+   */
+  submitApprovedTransactions() {
+    const approvedTransactions = this.state.transactions.filter(
+      (transaction) => transaction.status === "approved" /* approved */
+    );
+    for (const transactionMeta of approvedTransactions) {
+      if (this.beforeApproveOnInit(transactionMeta)) {
+        this.approveTransaction(transactionMeta.id).catch((error) => {
+          console.error("Error while submitting persisted transaction", error);
+        });
+      }
+    }
+  }
+  async processApproval(transactionMeta, {
+    isExisting = false,
+    requireApproval,
+    shouldShowRequest = true,
+    actionId
+  }) {
+    const transactionId = transactionMeta.id;
+    let resultCallbacks;
+    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);
+    const finishedPromise = isCompleted ? Promise.resolve(meta) : this.waitForTransactionFinished(transactionId);
+    if (meta && !isExisting && !isCompleted) {
+      try {
+        if (requireApproval !== false) {
+          const acceptResult = await this.requestApproval(transactionMeta, {
+            shouldShowRequest
+          });
+          resultCallbacks = acceptResult.resultCallbacks;
+          const approvalValue = acceptResult.value;
+          const updatedTransaction = approvalValue?.txMeta;
+          if (updatedTransaction) {
+            _chunkS6VGOPUYjs.projectLogger.call(void 0, "Updating transaction with approval data", {
+              customNonce: updatedTransaction.customNonceValue,
+              params: updatedTransaction.txParams
+            });
+            this.updateTransaction(
+              updatedTransaction,
+              "TransactionController#processApproval - Updated with approval data"
+            );
+          }
+        }
+        const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);
+        if (!isTxCompleted) {
+          const approvalResult = await this.approveTransaction(transactionId);
+          if (approvalResult === "skipped-via-before-publish-hook" /* SkippedViaBeforePublishHook */ && resultCallbacks) {
+            resultCallbacks.success();
+          }
+          const updatedTransactionMeta = this.getTransaction(
+            transactionId
+          );
+          this.messagingSystem.publish(
+            `${controllerName}:transactionApproved`,
+            {
+              transactionMeta: updatedTransactionMeta,
+              actionId
+            }
+          );
+        }
+      } catch (error) {
+        const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);
+        if (!isTxCompleted) {
+          if (error?.code === _rpcerrors.errorCodes.provider.userRejectedRequest) {
+            this.cancelTransaction(transactionId, actionId);
+            throw _rpcerrors.providerErrors.userRejectedRequest(
+              "MetaMask Tx Signature: User denied transaction signature."
+            );
+          } else {
+            this.failTransaction(meta, error, actionId);
+          }
+        }
+      }
+    }
+    const finalMeta = await finishedPromise;
+    switch (finalMeta?.status) {
+      case "failed" /* failed */:
+        resultCallbacks?.error(finalMeta.error);
+        throw _rpcerrors.rpcErrors.internal(finalMeta.error.message);
+      case "submitted" /* submitted */:
+        resultCallbacks?.success();
+        return finalMeta.hash;
+      default:
+        const internalError = _rpcerrors.rpcErrors.internal(
+          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(
+            finalMeta || transactionId
+          )}`
+        );
+        resultCallbacks?.error(internalError);
+        throw internalError;
+    }
+  }
+  /**
+   * Approves a transaction and updates it's status in state. If this is not a
+   * retry transaction, a nonce will be generated. The transaction is signed
+   * using the sign configuration property, then published to the blockchain.
+   * A `<tx.id>:finished` hub event is fired after success or failure.
+   *
+   * @param transactionId - The ID of the transaction to approve.
+   */
+  async approveTransaction(transactionId) {
+    const { transactions } = this.state;
+    const releaseLock = await this.mutex.acquire();
+    const index = transactions.findIndex(({ id }) => transactionId === id);
+    const transactionMeta = transactions[index];
+    const updatedTransactionMeta = _lodash.cloneDeep.call(void 0, transactionMeta);
+    const {
+      txParams: { from },
+      networkClientId
+    } = transactionMeta;
+    let releaseNonceLock;
+    try {
+      if (!this.sign) {
+        releaseLock();
+        this.failTransaction(
+          transactionMeta,
+          new Error("No sign method defined.")
+        );
+        return "not-approved" /* NotApproved */;
+      } else if (!transactionMeta.chainId) {
+        releaseLock();
+        this.failTransaction(transactionMeta, new Error("No chainId defined."));
+        return "not-approved" /* NotApproved */;
+      }
+      if (this.inProcessOfSigning.has(transactionId)) {
+        _chunkS6VGOPUYjs.projectLogger.call(void 0, "Skipping approval as signing in progress", transactionId);
+        return "not-approved" /* NotApproved */;
+      }
+      const [nonce, releaseNonce] = await _chunkZNZEJDOEjs.getNextNonce.call(void 0, 
+        transactionMeta,
+        (address) => _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getNonceLock(address, networkClientId)
+      );
+      releaseNonceLock = releaseNonce;
+      updatedTransactionMeta.status = "approved" /* approved */;
+      updatedTransactionMeta.txParams = {
+        ...updatedTransactionMeta.txParams,
+        nonce,
+        chainId: transactionMeta.chainId
+      };
+      const baseTxParams = {
+        ...updatedTransactionMeta.txParams,
+        gasLimit: updatedTransactionMeta.txParams.gas
+      };
+      this.updateTransaction(
+        updatedTransactionMeta,
+        "TransactionController#approveTransaction - Transaction approved"
+      );
+      this.onTransactionStatusChange(updatedTransactionMeta);
+      const isEIP1559 = _chunkUGFBA4GVjs.isEIP1559Transaction.call(void 0, updatedTransactionMeta.txParams);
+      const txParams = isEIP1559 ? {
+        ...baseTxParams,
+        estimatedBaseFee: updatedTransactionMeta.txParams.estimatedBaseFee,
+        type: "0x2" /* feeMarket */
+      } : baseTxParams;
+      const rawTx = await this.signTransaction(
+        updatedTransactionMeta,
+        txParams
+      );
+      if (!this.beforePublish(updatedTransactionMeta)) {
+        _chunkS6VGOPUYjs.projectLogger.call(void 0, "Skipping publishing transaction based on hook");
+        this.messagingSystem.publish(
+          `${controllerName}:transactionPublishingSkipped`,
+          updatedTransactionMeta
+        );
+        return "skipped-via-before-publish-hook" /* SkippedViaBeforePublishHook */;
+      }
+      if (!rawTx) {
+        return "not-approved" /* NotApproved */;
+      }
+      const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({
+        networkClientId: transactionMeta.networkClientId,
+        chainId: transactionMeta.chainId
+      });
+      if (transactionMeta.type === "swap" /* swap */) {
+        _chunkS6VGOPUYjs.projectLogger.call(void 0, "Determining pre-transaction balance");
+        const preTxBalance = await _controllerutils.query.call(void 0, ethQuery, "getBalance", [from]);
+        updatedTransactionMeta.preTxBalance = preTxBalance;
+        _chunkS6VGOPUYjs.projectLogger.call(void 0, 
+          "Updated pre-transaction balance",
+          updatedTransactionMeta.preTxBalance
+        );
+      }
+      _chunkS6VGOPUYjs.projectLogger.call(void 0, "Publishing transaction", txParams);
+      let { transactionHash: hash } = await this.publish(
+        updatedTransactionMeta,
+        rawTx
+      );
+      if (hash === void 0) {
+        hash = await this.publishTransaction(ethQuery, rawTx);
+      }
+      _chunkS6VGOPUYjs.projectLogger.call(void 0, "Publish successful", hash);
+      updatedTransactionMeta.hash = hash;
+      updatedTransactionMeta.status = "submitted" /* submitted */;
+      updatedTransactionMeta.submittedTime = (/* @__PURE__ */ new Date()).getTime();
+      this.updateTransaction(
+        updatedTransactionMeta,
+        "TransactionController#approveTransaction - Transaction submitted"
+      );
+      this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {
+        transactionMeta: updatedTransactionMeta
+      });
+      this.messagingSystem.publish(
+        `${controllerName}:transactionFinished`,
+        updatedTransactionMeta
+      );
+      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).emit(
+        `${updatedTransactionMeta.id}:finished`,
+        updatedTransactionMeta
+      );
+      this.onTransactionStatusChange(updatedTransactionMeta);
+      return "approved" /* Approved */;
+    } catch (error) {
+      this.failTransaction(transactionMeta, error);
+      return "not-approved" /* NotApproved */;
+    } finally {
+      this.inProcessOfSigning.delete(transactionId);
+      releaseNonceLock?.();
+      releaseLock();
+    }
+  }
+  async publishTransaction(ethQuery, rawTransaction) {
+    return await _controllerutils.query.call(void 0, ethQuery, "sendRawTransaction", [rawTransaction]);
+  }
+  /**
+   * Cancels a transaction based on its ID by setting its status to "rejected"
+   * and emitting a `<tx.id>:finished` hub event.
+   *
+   * @param transactionId - The ID of the transaction to cancel.
+   * @param actionId - The actionId passed from UI
+   */
+  cancelTransaction(transactionId, actionId) {
+    const transactionMeta = this.state.transactions.find(
+      ({ id }) => id === transactionId
+    );
+    if (!transactionMeta) {
+      return;
+    }
+    this.update((state) => {
+      const transactions = state.transactions.filter(
+        ({ id }) => id !== transactionId
+      );
+      state.transactions = this.trimTransactionsForState(transactions);
+    });
+    const updatedTransactionMeta = {
+      ...transactionMeta,
+      status: "rejected" /* rejected */
+    };
+    this.messagingSystem.publish(
+      `${controllerName}:transactionFinished`,
+      updatedTransactionMeta
+    );
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).emit(
+      `${transactionMeta.id}:finished`,
+      updatedTransactionMeta
+    );
+    this.messagingSystem.publish(`${controllerName}:transactionRejected`, {
+      transactionMeta: updatedTransactionMeta,
+      actionId
+    });
+    this.onTransactionStatusChange(updatedTransactionMeta);
+  }
+  /**
+   * Trim the amount of transactions that are set on the state. Checks
+   * if the length of the tx history is longer then desired persistence
+   * limit and then if it is removes the oldest confirmed or rejected tx.
+   * Pending or unapproved transactions will not be removed by this
+   * operation. For safety of presenting a fully functional transaction UI
+   * representation, this function will not break apart transactions with the
+   * same nonce, created on the same day, per network. Not accounting for
+   * transactions of the same nonce, same day and network combo can result in
+   * confusing or broken experiences in the UI.
+   *
+   * @param transactions - The transactions to be applied to the state.
+   * @returns The trimmed list of transactions.
+   */
+  trimTransactionsForState(transactions) {
+    const nonceNetworkSet = /* @__PURE__ */ new Set();
+    const txsToKeep = [...transactions].sort((a, b) => a.time > b.time ? -1 : 1).filter((tx) => {
+      const { chainId, status, txParams, time } = tx;
+      if (txParams) {
+        const key = `${String(txParams.nonce)}-${_controllerutils.convertHexToDecimal.call(void 0, 
+          chainId
+        )}-${new Date(time).toDateString()}`;
+        if (nonceNetworkSet.has(key)) {
+          return true;
+        } else if (nonceNetworkSet.size < _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _transactionHistoryLimit) || !this.isFinalState(status)) {
+          nonceNetworkSet.add(key);
+          return true;
+        }
+      }
+      return false;
+    });
+    txsToKeep.reverse();
+    return txsToKeep;
+  }
+  /**
+   * Determines if the transaction is in a final state.
+   *
+   * @param status - The transaction status.
+   * @returns Whether the transaction is in a final state.
+   */
+  isFinalState(status) {
+    return status === "rejected" /* rejected */ || status === "confirmed" /* confirmed */ || status === "failed" /* failed */;
+  }
+  /**
+   * Whether the transaction has at least completed all local processing.
+   *
+   * @param status - The transaction status.
+   * @returns Whether the transaction is in a final state.
+   */
+  isLocalFinalState(status) {
+    return [
+      "confirmed" /* confirmed */,
+      "failed" /* failed */,
+      "rejected" /* rejected */,
+      "submitted" /* submitted */
+    ].includes(status);
+  }
+  async requestApproval(txMeta, { shouldShowRequest }) {
+    const id = this.getApprovalId(txMeta);
+    const { origin } = txMeta;
+    const type = _controllerutils.ApprovalType.Transaction;
+    const requestData = { txId: txMeta.id };
+    return await this.messagingSystem.call(
+      "ApprovalController:addRequest",
+      {
+        id,
+        origin: origin || _controllerutils.ORIGIN_METAMASK,
+        type,
+        requestData,
+        expectsResult: true
+      },
+      shouldShowRequest
+    );
+  }
+  getTransaction(transactionId) {
+    const { transactions } = this.state;
+    return transactions.find(({ id }) => id === transactionId);
+  }
+  getApprovalId(txMeta) {
+    return String(txMeta.id);
+  }
+  isTransactionCompleted(transactionId) {
+    const transaction = this.getTransaction(transactionId);
+    if (!transaction) {
+      return { meta: void 0, isCompleted: false };
+    }
+    const isCompleted = this.isLocalFinalState(transaction.status);
+    return { meta: transaction, isCompleted };
+  }
+  getChainId(networkClientId) {
+    const globalChainId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalChainId, getGlobalChainId_fn).call(this);
+    const globalNetworkClientId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);
+    if (!networkClientId || networkClientId === globalNetworkClientId) {
+      return globalChainId;
+    }
+    return this.messagingSystem.call(
+      `NetworkController:getNetworkClientById`,
+      networkClientId
+    ).configuration.chainId;
+  }
+  prepareUnsignedEthTx(chainId, txParams) {
+    return _tx.TransactionFactory.fromTxData(txParams, {
+      freeze: false,
+      common: this.getCommonConfiguration(chainId)
+    });
+  }
+  /**
+   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for
+   * specifying which chain, network, hardfork and EIPs to support for
+   * a transaction. By referencing this configuration, and analyzing the fields
+   * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718
+   * transaction type to use.
+   *
+   * @param chainId - The chainId to use for the configuration.
+   * @returns common configuration object
+   */
+  getCommonConfiguration(chainId) {
+    const customChainParams = {
+      chainId: parseInt(chainId, 16),
+      defaultHardfork: HARDFORK
+    };
+    return _common.Common.custom(customChainParams);
+  }
+  onIncomingTransactions({
+    added,
+    updated
+  }) {
+    this.update((state) => {
+      const { transactions: currentTransactions } = state;
+      const updatedTransactions = [
+        ...added,
+        ...currentTransactions.map((originalTransaction) => {
+          const updatedTransaction = updated.find(
+            ({ hash }) => hash === originalTransaction.hash
+          );
+          return updatedTransaction ?? originalTransaction;
+        })
+      ];
+      state.transactions = this.trimTransactionsForState(updatedTransactions);
+    });
+  }
+  onUpdatedLastFetchedBlockNumbers({
+    lastFetchedBlockNumbers,
+    blockNumber
+  }) {
+    this.update((state) => {
+      state.lastFetchedBlockNumbers = lastFetchedBlockNumbers;
+    });
+    this.messagingSystem.publish(
+      `${controllerName}:incomingTransactionBlockReceived`,
+      blockNumber
+    );
+  }
+  generateDappSuggestedGasFees(txParams, origin) {
+    if (!origin || origin === _controllerutils.ORIGIN_METAMASK) {
+      return void 0;
+    }
+    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;
+    if (gasPrice === void 0 && maxFeePerGas === void 0 && maxPriorityFeePerGas === void 0 && gas === void 0) {
+      return void 0;
+    }
+    const dappSuggestedGasFees = {};
+    if (gasPrice !== void 0) {
+      dappSuggestedGasFees.gasPrice = gasPrice;
+    } else if (maxFeePerGas !== void 0 || maxPriorityFeePerGas !== void 0) {
+      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;
+      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;
+    }
+    if (gas !== void 0) {
+      dappSuggestedGasFees.gas = gas;
+    }
+    return dappSuggestedGasFees;
+  }
+  /**
+   * Validates and adds external provided transaction to state.
+   *
+   * @param transactionMeta - Nominated external transaction to be added to state.
+   * @returns The new transaction.
+   */
+  addExternalTransaction(transactionMeta) {
+    const { chainId } = transactionMeta;
+    const { transactions } = this.state;
+    const fromAddress = transactionMeta?.txParams?.from;
+    const sameFromAndNetworkTransactions = transactions.filter(
+      (transaction) => transaction.txParams.from === fromAddress && transaction.chainId === chainId
+    );
+    const confirmedTxs = sameFromAndNetworkTransactions.filter(
+      (transaction) => transaction.status === "confirmed" /* confirmed */
+    );
+    const pendingTxs = sameFromAndNetworkTransactions.filter(
+      (transaction) => transaction.status === "submitted" /* submitted */
+    );
+    _chunk7LXE4KHVjs.validateConfirmedExternalTransaction.call(void 0, 
+      transactionMeta,
+      confirmedTxs,
+      pendingTxs
+    );
+    const newTransactionMeta = (transactionMeta.history ?? []).length === 0 && !this.isHistoryDisabled ? _chunkQP75SWIQjs.addInitialHistorySnapshot.call(void 0, transactionMeta) : transactionMeta;
+    this.update((state) => {
+      state.transactions = this.trimTransactionsForState([
+        ...state.transactions,
+        newTransactionMeta
+      ]);
+    });
+    return newTransactionMeta;
+  }
+  /**
+   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions
+   * in the transactions have the same nonce.
+   *
+   * @param transactionId - Used to identify original transaction.
+   */
+  markNonceDuplicatesDropped(transactionId) {
+    const transactionMeta = this.getTransaction(transactionId);
+    if (!transactionMeta) {
+      return;
+    }
+    const nonce = transactionMeta.txParams?.nonce;
+    const from = transactionMeta.txParams?.from;
+    const { chainId } = transactionMeta;
+    const sameNonceTransactions = this.state.transactions.filter(
+      (transaction) => transaction.id !== transactionId && transaction.txParams.from === from && transaction.txParams.nonce === nonce && transaction.chainId === chainId && transaction.type !== "incoming" /* incoming */
+    );
+    const sameNonceTransactionIds = sameNonceTransactions.map(
+      (transaction) => transaction.id
+    );
+    if (sameNonceTransactions.length === 0) {
+      return;
+    }
+    this.update((state) => {
+      for (const transaction of state.transactions) {
+        if (sameNonceTransactionIds.includes(transaction.id)) {
+          transaction.replacedBy = transactionMeta?.hash;
+          transaction.replacedById = transactionMeta?.id;
+        }
+      }
+    });
+    for (const transaction of this.state.transactions) {
+      if (sameNonceTransactionIds.includes(transaction.id) && transaction.status !== "failed" /* failed */) {
+        this.setTransactionStatusDropped(transaction);
+      }
+    }
+  }
+  /**
+   * Method to set transaction status to dropped.
+   *
+   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.
+   */
+  setTransactionStatusDropped(transactionMeta) {
+    const updatedTransactionMeta = {
+      ...transactionMeta,
+      status: "dropped" /* dropped */
+    };
+    this.messagingSystem.publish(`${controllerName}:transactionDropped`, {
+      transactionMeta: updatedTransactionMeta
+    });
+    this.updateTransaction(
+      updatedTransactionMeta,
+      "TransactionController#setTransactionStatusDropped - Transaction dropped"
+    );
+    this.onTransactionStatusChange(updatedTransactionMeta);
+  }
+  /**
+   * Get transaction with provided actionId.
+   *
+   * @param actionId - Unique ID to prevent duplicate requests
+   * @returns the filtered transaction
+   */
+  getTransactionWithActionId(actionId) {
+    return this.state.transactions.find(
+      (transaction) => actionId && transaction.actionId === actionId
+    );
+  }
+  async waitForTransactionFinished(transactionId) {
+    return new Promise((resolve) => {
+      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).once(`${transactionId}:finished`, (txMeta) => {
+        resolve(txMeta);
+      });
+    });
+  }
+  /**
+   * Updates the r, s, and v properties of a TransactionMeta object
+   * with values from a signed transaction.
+   *
+   * @param transactionMeta - The TransactionMeta object to update.
+   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.
+   */
+  async updateTransactionMetaRSV(transactionMeta, signedTx) {
+    const transactionMetaWithRsv = _lodash.cloneDeep.call(void 0, transactionMeta);
+    for (const key of ["r", "s", "v"]) {
+      const value = signedTx[key];
+      if (value === void 0 || value === null) {
+        continue;
+      }
+      transactionMetaWithRsv[key] = _utils.add0x.call(void 0, value.toString(16));
+    }
+    return transactionMetaWithRsv;
+  }
+  async getEIP1559Compatibility(networkClientId) {
+    const currentNetworkIsEIP1559Compatible = await this.getCurrentNetworkEIP1559Compatibility(networkClientId);
+    const currentAccountIsEIP1559Compatible = await this.getCurrentAccountEIP1559Compatibility();
+    return currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible;
+  }
+  async signTransaction(transactionMeta, txParams) {
+    _chunkS6VGOPUYjs.projectLogger.call(void 0, "Signing transaction", txParams);
+    const unsignedEthTx = this.prepareUnsignedEthTx(
+      transactionMeta.chainId,
+      txParams
+    );
+    this.inProcessOfSigning.add(transactionMeta.id);
+    const signedTx = await new Promise((resolve, reject) => {
+      this.sign?.(
+        unsignedEthTx,
+        txParams.from,
+        ...this.getAdditionalSignArguments(transactionMeta)
+      ).then(resolve, reject);
+      this.signAbortCallbacks.set(
+        transactionMeta.id,
+        () => reject(new Error("Signing aborted by user"))
+      );
+    });
+    this.signAbortCallbacks.delete(transactionMeta.id);
+    if (!signedTx) {
+      _chunkS6VGOPUYjs.projectLogger.call(void 0, "Skipping signed status as no signed transaction");
+      return void 0;
+    }
+    if (!this.afterSign(transactionMeta, signedTx)) {
+      this.updateTransaction(
+        transactionMeta,
+        "TransactionController#signTransaction - Update after sign"
+      );
+      _chunkS6VGOPUYjs.projectLogger.call(void 0, "Skipping signed status based on hook");
+      return void 0;
+    }
+    const transactionMetaWithRsv = {
+      ...await this.updateTransactionMetaRSV(transactionMeta, signedTx),
+      status: "signed" /* signed */
+    };
+    this.updateTransaction(
+      transactionMetaWithRsv,
+      "TransactionController#approveTransaction - Transaction signed"
+    );
+    this.onTransactionStatusChange(transactionMetaWithRsv);
+    const rawTx = _util.bufferToHex.call(void 0, signedTx.serialize());
+    const transactionMetaWithRawTx = _lodash.merge.call(void 0, {}, transactionMetaWithRsv, {
+      rawTx
+    });
+    this.updateTransaction(
+      transactionMetaWithRawTx,
+      "TransactionController#approveTransaction - RawTransaction added"
+    );
+    return rawTx;
+  }
+  onTransactionStatusChange(transactionMeta) {
+    this.messagingSystem.publish(`${controllerName}:transactionStatusUpdated`, {
+      transactionMeta
+    });
+  }
+  getNonceTrackerTransactions(status, address, chainId = this.getChainId()) {
+    return _chunkZNZEJDOEjs.getAndFormatTransactionsForNonceTracker.call(void 0, 
+      chainId,
+      address,
+      status,
+      this.state.transactions
+    );
+  }
+  onConfirmedTransaction(transactionMeta) {
+    _chunkS6VGOPUYjs.projectLogger.call(void 0, "Processing confirmed transaction", transactionMeta.id);
+    this.markNonceDuplicatesDropped(transactionMeta.id);
+    this.messagingSystem.publish(
+      `${controllerName}:transactionConfirmed`,
+      transactionMeta
+    );
+    this.onTransactionStatusChange(transactionMeta);
+    this.updatePostBalance(transactionMeta);
+  }
+  async updatePostBalance(transactionMeta) {
+    try {
+      if (transactionMeta.type !== "swap" /* swap */) {
+        return;
+      }
+      const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({
+        networkClientId: transactionMeta.networkClientId,
+        chainId: transactionMeta.chainId
+      });
+      const { updatedTransactionMeta, approvalTransactionMeta } = await _chunkC2LNDHP4js.updatePostTransactionBalance.call(void 0, transactionMeta, {
+        ethQuery,
+        getTransaction: this.getTransaction.bind(this),
+        updateTransaction: this.updateTransaction.bind(this)
+      });
+      this.messagingSystem.publish(
+        `${controllerName}:postTransactionBalanceUpdated`,
+        {
+          transactionMeta: updatedTransactionMeta,
+          approvalTransactionMeta
+        }
+      );
+    } catch (error) {
+      _chunkS6VGOPUYjs.projectLogger.call(void 0, "Error while updating post transaction balance", error);
+    }
+  }
+  async publishTransactionForRetry(ethQuery, rawTx, transactionMeta) {
+    try {
+      const hash = await this.publishTransaction(ethQuery, rawTx);
+      return hash;
+    } catch (error) {
+      if (this.isTransactionAlreadyConfirmedError(error)) {
+        await this.pendingTransactionTracker.forceCheckTransaction(
+          transactionMeta
+        );
+        throw new Error("Previous transaction is already confirmed");
+      }
+      throw error;
+    }
+  }
+  /**
+   * Ensures that error is a nonce issue
+   *
+   * @param error - The error to check
+   * @returns Whether or not the error is a nonce issue
+   */
+  // TODO: Replace `any` with type
+  // Some networks are returning original error in the data field
+  // eslint-disable-next-line @typescript-eslint/no-explicit-any
+  isTransactionAlreadyConfirmedError(error) {
+    return error?.message?.includes("nonce too low") || error?.data?.message?.includes("nonce too low");
+  }
+};
+_internalEvents = new WeakMap();
+_incomingTransactionOptions = new WeakMap();
+_pendingTransactionOptions = new WeakMap();
+_transactionHistoryLimit = new WeakMap();
+_isSimulationEnabled = new WeakMap();
+_testGasFeeFlows = new WeakMap();
+_multichainTrackingHelper = new WeakMap();
+_createNonceTracker = new WeakSet();
+createNonceTracker_fn = function({
+  provider,
+  blockTracker,
+  chainId
+}) {
+  return new (0, _noncetracker.NonceTracker)({
+    // TODO: Replace `any` with type
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    provider,
+    blockTracker,
+    getPendingTransactions: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNonceTrackerPendingTransactions, getNonceTrackerPendingTransactions_fn).bind(
+      this,
+      chainId
+    ),
+    getConfirmedTransactions: this.getNonceTrackerTransactions.bind(
+      this,
+      "confirmed" /* confirmed */
+    )
+  });
+};
+_createIncomingTransactionHelper = new WeakSet();
+createIncomingTransactionHelper_fn = function({
+  blockTracker,
+  etherscanRemoteTransactionSource,
+  chainId
+}) {
+  const incomingTransactionHelper = new (0, _chunkDTDTOMTBjs.IncomingTransactionHelper)({
+    blockTracker,
+    getCurrentAccount: this.getSelectedAddress,
+    getLastFetchedBlockNumbers: () => this.state.lastFetchedBlockNumbers,
+    getChainId: chainId ? () => chainId : this.getChainId.bind(this),
+    isEnabled: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _incomingTransactionOptions).isEnabled,
+    queryEntireHistory: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _incomingTransactionOptions).queryEntireHistory,
+    remoteTransactionSource: etherscanRemoteTransactionSource,
+    transactionLimit: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _transactionHistoryLimit),
+    updateTransactions: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _incomingTransactionOptions).updateTransactions
+  });
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _addIncomingTransactionHelperListeners, addIncomingTransactionHelperListeners_fn).call(this, incomingTransactionHelper);
+  return incomingTransactionHelper;
+};
+_createPendingTransactionTracker = new WeakSet();
+createPendingTransactionTracker_fn = function({
+  provider,
+  blockTracker,
+  chainId
+}) {
+  const ethQuery = new (0, _ethquery2.default)(provider);
+  const getChainId = chainId ? () => chainId : this.getChainId.bind(this);
+  const pendingTransactionTracker = new (0, _chunk5KMU2IATjs.PendingTransactionTracker)({
+    approveTransaction: async (transactionId) => {
+      await this.approveTransaction(transactionId);
+    },
+    blockTracker,
+    getChainId,
+    getEthQuery: () => ethQuery,
+    getTransactions: () => this.state.transactions,
+    isResubmitEnabled: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _pendingTransactionOptions).isResubmitEnabled,
+    getGlobalLock: () => _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).acquireNonceLockForChainIdKey({
+      chainId: getChainId()
+    }),
+    publishTransaction: this.publishTransaction.bind(this),
+    hooks: {
+      beforeCheckPendingTransaction: this.beforeCheckPendingTransaction.bind(this),
+      beforePublish: this.beforePublish.bind(this)
+    }
+  });
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _addPendingTransactionTrackerListeners, addPendingTransactionTrackerListeners_fn).call(this, pendingTransactionTracker);
+  return pendingTransactionTracker;
+};
+_checkForPendingTransactionAndStartPolling = new WeakMap();
+_stopAllTracking = new WeakSet();
+stopAllTracking_fn = function() {
+  this.pendingTransactionTracker.stop();
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners_fn).call(this, this.pendingTransactionTracker);
+  this.incomingTransactionHelper.stop();
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners_fn).call(this, this.incomingTransactionHelper);
+  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).stopAllTracking();
+};
+_removeIncomingTransactionHelperListeners = new WeakSet();
+removeIncomingTransactionHelperListeners_fn = function(incomingTransactionHelper) {
+  incomingTransactionHelper.hub.removeAllListeners("transactions");
+  incomingTransactionHelper.hub.removeAllListeners(
+    "updatedLastFetchedBlockNumbers"
+  );
+};
+_addIncomingTransactionHelperListeners = new WeakSet();
+addIncomingTransactionHelperListeners_fn = function(incomingTransactionHelper) {
+  incomingTransactionHelper.hub.on(
+    "transactions",
+    this.onIncomingTransactions.bind(this)
+  );
+  incomingTransactionHelper.hub.on(
+    "updatedLastFetchedBlockNumbers",
+    this.onUpdatedLastFetchedBlockNumbers.bind(this)
+  );
+};
+_removePendingTransactionTrackerListeners = new WeakSet();
+removePendingTransactionTrackerListeners_fn = function(pendingTransactionTracker) {
+  pendingTransactionTracker.hub.removeAllListeners("transaction-confirmed");
+  pendingTransactionTracker.hub.removeAllListeners("transaction-dropped");
+  pendingTransactionTracker.hub.removeAllListeners("transaction-failed");
+  pendingTransactionTracker.hub.removeAllListeners("transaction-updated");
+};
+_addPendingTransactionTrackerListeners = new WeakSet();
+addPendingTransactionTrackerListeners_fn = function(pendingTransactionTracker) {
+  pendingTransactionTracker.hub.on(
+    "transaction-confirmed",
+    this.onConfirmedTransaction.bind(this)
+  );
+  pendingTransactionTracker.hub.on(
+    "transaction-dropped",
+    this.setTransactionStatusDropped.bind(this)
+  );
+  pendingTransactionTracker.hub.on(
+    "transaction-failed",
+    this.failTransaction.bind(this)
+  );
+  pendingTransactionTracker.hub.on(
+    "transaction-updated",
+    this.updateTransaction.bind(this)
+  );
+};
+_getNonceTrackerPendingTransactions = new WeakSet();
+getNonceTrackerPendingTransactions_fn = function(chainId, address) {
+  const standardPendingTransactions = this.getNonceTrackerTransactions(
+    "submitted" /* submitted */,
+    address,
+    chainId
+  );
+  const externalPendingTransactions = this.getExternalPendingTransactions(
+    address,
+    chainId
+  );
+  return [...standardPendingTransactions, ...externalPendingTransactions];
+};
+_getGasFeeFlows = new WeakSet();
+getGasFeeFlows_fn = function() {
+  if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _testGasFeeFlows)) {
+    return [new (0, _chunkTJMQEH57js.TestGasFeeFlow)()];
+  }
+  return [new (0, _chunkDUFOYA4Djs.LineaGasFeeFlow)(), new (0, _chunkVJYFB7BMjs.DefaultGasFeeFlow)()];
+};
+_getLayer1GasFeeFlows = new WeakSet();
+getLayer1GasFeeFlows_fn = function() {
+  return [new (0, _chunkNYKRCWBGjs.OptimismLayer1GasFeeFlow)(), new (0, _chunkWR5F34OWjs.ScrollLayer1GasFeeFlow)()];
+};
+_updateTransactionInternal = new WeakSet();
+updateTransactionInternal_fn = function({
+  transactionId,
+  note,
+  skipHistory
+}, callback) {
+  let updatedTransactionParams = [];
+  this.update((state) => {
+    const index = state.transactions.findIndex(
+      ({ id }) => id === transactionId
+    );
+    let transactionMeta2 = state.transactions[index];
+    transactionMeta2 = callback(transactionMeta2) ?? transactionMeta2;
+    transactionMeta2.txParams = _chunkUGFBA4GVjs.normalizeTransactionParams.call(void 0, 
+      transactionMeta2.txParams
+    );
+    _chunkVH47Q6TSjs.validateTxParams.call(void 0, transactionMeta2.txParams);
+    updatedTransactionParams = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _checkIfTransactionParamsUpdated, checkIfTransactionParamsUpdated_fn).call(this, transactionMeta2);
+    if (skipHistory !== true) {
+      transactionMeta2 = _chunkQP75SWIQjs.updateTransactionHistory.call(void 0, 
+        transactionMeta2,
+        note ?? "Transaction updated"
+      );
+    }
+    state.transactions[index] = transactionMeta2;
+  });
+  const transactionMeta = this.getTransaction(
+    transactionId
+  );
+  if (updatedTransactionParams.length > 0) {
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onTransactionParamsUpdated, onTransactionParamsUpdated_fn).call(this, transactionMeta, updatedTransactionParams);
+  }
+};
+_checkIfTransactionParamsUpdated = new WeakSet();
+checkIfTransactionParamsUpdated_fn = function(newTransactionMeta) {
+  const { id: transactionId, txParams: newParams } = newTransactionMeta;
+  const originalParams = this.getTransaction(transactionId)?.txParams;
+  if (!originalParams || _lodash.isEqual.call(void 0, originalParams, newParams)) {
+    return [];
+  }
+  const params = Object.keys(newParams);
+  const updatedProperties = params.filter(
+    (param) => newParams[param] !== originalParams[param]
+  );
+  _chunkS6VGOPUYjs.projectLogger.call(void 0, 
+    "Transaction parameters have been updated",
+    transactionId,
+    updatedProperties,
+    originalParams,
+    newParams
+  );
+  return updatedProperties;
+};
+_onTransactionParamsUpdated = new WeakSet();
+onTransactionParamsUpdated_fn = function(transactionMeta, updatedParams) {
+  if (["to", "value", "data"].some(
+    (param) => updatedParams.includes(param)
+  )) {
+    _chunkS6VGOPUYjs.projectLogger.call(void 0, "Updating simulation data due to transaction parameter update");
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateSimulationData, updateSimulationData_fn).call(this, transactionMeta);
+  }
+};
+_updateSimulationData = new WeakSet();
+updateSimulationData_fn = async function(transactionMeta) {
+  const { id: transactionId, chainId, txParams } = transactionMeta;
+  const { from, to, value, data } = txParams;
+  let simulationData = {
+    error: {
+      code: "disabled" /* Disabled */,
+      message: "Simulation disabled"
+    },
+    tokenBalanceChanges: []
+  };
+  if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isSimulationEnabled).call(this)) {
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, { transactionId, skipHistory: true }, (txMeta) => {
+      txMeta.simulationData = void 0;
+    });
+    simulationData = await _chunkX3KACH5Pjs.getSimulationData.call(void 0, {
+      chainId,
+      from,
+      to,
+      value,
+      data
+    });
+  }
+  const finalTransactionMeta = this.getTransaction(transactionId);
+  if (!finalTransactionMeta) {
+    _chunkS6VGOPUYjs.projectLogger.call(void 0, 
+      "Cannot update simulation data as transaction not found",
+      transactionId,
+      simulationData
+    );
+    return;
+  }
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, {
+    transactionId,
+    note: "TransactionController#updateSimulationData - Update simulation data"
+  }, (txMeta) => {
+    txMeta.simulationData = simulationData;
+  });
+  _chunkS6VGOPUYjs.projectLogger.call(void 0, "Updated simulation data", transactionId, simulationData);
+};
+_onGasFeePollerTransactionUpdate = new WeakSet();
+onGasFeePollerTransactionUpdate_fn = function({
+  transactionId,
+  gasFeeEstimates,
+  gasFeeEstimatesLoaded,
+  layer1GasFee
+}) {
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, { transactionId, skipHistory: true }, (txMeta) => {
+    if (gasFeeEstimates) {
+      txMeta.gasFeeEstimates = gasFeeEstimates;
+    }
+    if (gasFeeEstimatesLoaded !== void 0) {
+      txMeta.gasFeeEstimatesLoaded = gasFeeEstimatesLoaded;
+    }
+    if (layer1GasFee) {
+      txMeta.layer1GasFee = layer1GasFee;
+    }
+  });
+};
+_getNetworkClientId = new WeakSet();
+getNetworkClientId_fn = function({
+  networkClientId: requestNetworkClientId,
+  chainId
+}) {
+  const globalChainId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalChainId, getGlobalChainId_fn).call(this);
+  const globalNetworkClientId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);
+  if (requestNetworkClientId) {
+    return requestNetworkClientId;
+  }
+  if (!chainId || chainId === globalChainId) {
+    return globalNetworkClientId;
+  }
+  return this.messagingSystem.call(
+    `NetworkController:findNetworkClientIdByChainId`,
+    chainId
+  );
+};
+_getGlobalNetworkClientId = new WeakSet();
+getGlobalNetworkClientId_fn = function() {
+  return this.getNetworkState().selectedNetworkClientId;
+};
+_getGlobalChainId = new WeakSet();
+getGlobalChainId_fn = function() {
+  return this.getNetworkState().providerConfig.chainId;
+};
+_isCustomNetwork = new WeakSet();
+isCustomNetwork_fn = function(networkClientId) {
+  const globalNetworkClientId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);
+  if (!networkClientId || networkClientId === globalNetworkClientId) {
+    return this.getNetworkState().providerConfig.type === _controllerutils.NetworkType.rpc;
+  }
+  return this.messagingSystem.call(
+    `NetworkController:getNetworkClientById`,
+    networkClientId
+  ).configuration.type === _networkcontroller.NetworkClientType.Custom;
+};
+
+
+
+
+
+
+
+exports.HARDFORK = HARDFORK; exports.CANCEL_RATE = CANCEL_RATE; exports.SPEED_UP_RATE = SPEED_UP_RATE; exports.ApprovalState = ApprovalState; exports.TransactionController = TransactionController;
+//# sourceMappingURL=chunk-N55SEKK7.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-N6JXPWLY.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-N6JXPWLY.mjs
new file mode 100644
index 0000000..be210a7
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-N6JXPWLY.mjs
@@ -0,0 +1,92 @@
+// src/types.ts
+var TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {
+  TransactionStatus2["approved"] = "approved";
+  TransactionStatus2["cancelled"] = "cancelled";
+  TransactionStatus2["confirmed"] = "confirmed";
+  TransactionStatus2["dropped"] = "dropped";
+  TransactionStatus2["failed"] = "failed";
+  TransactionStatus2["rejected"] = "rejected";
+  TransactionStatus2["signed"] = "signed";
+  TransactionStatus2["submitted"] = "submitted";
+  TransactionStatus2["unapproved"] = "unapproved";
+  return TransactionStatus2;
+})(TransactionStatus || {});
+var WalletDevice = /* @__PURE__ */ ((WalletDevice2) => {
+  WalletDevice2["MM_MOBILE"] = "metamask_mobile";
+  WalletDevice2["MM_EXTENSION"] = "metamask_extension";
+  WalletDevice2["OTHER"] = "other_device";
+  return WalletDevice2;
+})(WalletDevice || {});
+var TransactionType = /* @__PURE__ */ ((TransactionType2) => {
+  TransactionType2["cancel"] = "cancel";
+  TransactionType2["contractInteraction"] = "contractInteraction";
+  TransactionType2["deployContract"] = "contractDeployment";
+  TransactionType2["ethDecrypt"] = "eth_decrypt";
+  TransactionType2["ethGetEncryptionPublicKey"] = "eth_getEncryptionPublicKey";
+  TransactionType2["incoming"] = "incoming";
+  TransactionType2["personalSign"] = "personal_sign";
+  TransactionType2["retry"] = "retry";
+  TransactionType2["simpleSend"] = "simpleSend";
+  TransactionType2["sign"] = "eth_sign";
+  TransactionType2["signTypedData"] = "eth_signTypedData";
+  TransactionType2["smart"] = "smart";
+  TransactionType2["swap"] = "swap";
+  TransactionType2["swapApproval"] = "swapApproval";
+  TransactionType2["tokenMethodApprove"] = "approve";
+  TransactionType2["tokenMethodSafeTransferFrom"] = "safetransferfrom";
+  TransactionType2["tokenMethodTransfer"] = "transfer";
+  TransactionType2["tokenMethodTransferFrom"] = "transferfrom";
+  TransactionType2["tokenMethodSetApprovalForAll"] = "setapprovalforall";
+  TransactionType2["tokenMethodIncreaseAllowance"] = "increaseAllowance";
+  return TransactionType2;
+})(TransactionType || {});
+var TransactionEnvelopeType = /* @__PURE__ */ ((TransactionEnvelopeType2) => {
+  TransactionEnvelopeType2["legacy"] = "0x0";
+  TransactionEnvelopeType2["accessList"] = "0x1";
+  TransactionEnvelopeType2["feeMarket"] = "0x2";
+  return TransactionEnvelopeType2;
+})(TransactionEnvelopeType || {});
+var UserFeeLevel = /* @__PURE__ */ ((UserFeeLevel2) => {
+  UserFeeLevel2["CUSTOM"] = "custom";
+  UserFeeLevel2["DAPP_SUGGESTED"] = "dappSuggested";
+  UserFeeLevel2["MEDIUM"] = "medium";
+  return UserFeeLevel2;
+})(UserFeeLevel || {});
+var GasFeeEstimateLevel = /* @__PURE__ */ ((GasFeeEstimateLevel2) => {
+  GasFeeEstimateLevel2["Low"] = "low";
+  GasFeeEstimateLevel2["Medium"] = "medium";
+  GasFeeEstimateLevel2["High"] = "high";
+  return GasFeeEstimateLevel2;
+})(GasFeeEstimateLevel || {});
+var GasFeeEstimateType = /* @__PURE__ */ ((GasFeeEstimateType2) => {
+  GasFeeEstimateType2["FeeMarket"] = "fee-market";
+  GasFeeEstimateType2["Legacy"] = "legacy";
+  GasFeeEstimateType2["GasPrice"] = "eth_gasPrice";
+  return GasFeeEstimateType2;
+})(GasFeeEstimateType || {});
+var SimulationTokenStandard = /* @__PURE__ */ ((SimulationTokenStandard2) => {
+  SimulationTokenStandard2["erc20"] = "erc20";
+  SimulationTokenStandard2["erc721"] = "erc721";
+  SimulationTokenStandard2["erc1155"] = "erc1155";
+  return SimulationTokenStandard2;
+})(SimulationTokenStandard || {});
+var SimulationErrorCode = /* @__PURE__ */ ((SimulationErrorCode2) => {
+  SimulationErrorCode2["ChainNotSupported"] = "chain-not-supported";
+  SimulationErrorCode2["Disabled"] = "disabled";
+  SimulationErrorCode2["InvalidResponse"] = "invalid-response";
+  SimulationErrorCode2["Reverted"] = "reverted";
+  return SimulationErrorCode2;
+})(SimulationErrorCode || {});
+
+export {
+  TransactionStatus,
+  WalletDevice,
+  TransactionType,
+  TransactionEnvelopeType,
+  UserFeeLevel,
+  GasFeeEstimateLevel,
+  GasFeeEstimateType,
+  SimulationTokenStandard,
+  SimulationErrorCode
+};
+//# sourceMappingURL=chunk-N6JXPWLY.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-NHRBO3LU.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-NHRBO3LU.mjs
new file mode 100644
index 0000000..e7ec990
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-NHRBO3LU.mjs
@@ -0,0 +1,50 @@
+import {
+  createModuleLogger,
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+
+// src/utils/nonce.ts
+import { toHex } from "@metamask/controller-utils";
+var log = createModuleLogger(projectLogger, "nonce");
+async function getNextNonce(txMeta, getNonceLock) {
+  const {
+    customNonceValue,
+    txParams: { from, nonce: existingNonce }
+  } = txMeta;
+  const customNonce = customNonceValue ? toHex(customNonceValue) : void 0;
+  if (customNonce) {
+    log("Using custom nonce", customNonce);
+    return [customNonce, void 0];
+  }
+  if (existingNonce) {
+    log("Using existing nonce", existingNonce);
+    return [existingNonce, void 0];
+  }
+  const nonceLock = await getNonceLock(from);
+  const nonce = toHex(nonceLock.nextNonce);
+  const releaseLock = nonceLock.releaseLock.bind(nonceLock);
+  log("Using nonce from nonce tracker", nonce, nonceLock.nonceDetails);
+  return [nonce, releaseLock];
+}
+function getAndFormatTransactionsForNonceTracker(currentChainId, fromAddress, transactionStatus, transactions) {
+  return transactions.filter(
+    ({ chainId, isTransfer, isUserOperation, status, txParams: { from } }) => !isTransfer && !isUserOperation && chainId === currentChainId && status === transactionStatus && from.toLowerCase() === fromAddress.toLowerCase()
+  ).map(({ status, txParams: { from, gas, value, nonce } }) => {
+    return {
+      status,
+      history: [{}],
+      txParams: {
+        from: from ?? "",
+        gas: gas ?? "",
+        value: value ?? "",
+        nonce: nonce ?? ""
+      }
+    };
+  });
+}
+
+export {
+  getNextNonce,
+  getAndFormatTransactionsForNonceTracker
+};
+//# sourceMappingURL=chunk-NHRBO3LU.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-NM6OYEPP.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-NM6OYEPP.mjs
new file mode 100644
index 0000000..c0ca861
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-NM6OYEPP.mjs
@@ -0,0 +1,182 @@
+import {
+  isEIP1559Transaction
+} from "./chunk-J56A7UCK.mjs";
+
+// src/utils/validation.ts
+import { Interface } from "@ethersproject/abi";
+import { ORIGIN_METAMASK, isValidHexAddress } from "@metamask/controller-utils";
+import { abiERC20 } from "@metamask/metamask-eth-abis";
+import { providerErrors, rpcErrors } from "@metamask/rpc-errors";
+async function validateTransactionOrigin(permittedAddresses, selectedAddress, from, origin) {
+  if (origin === ORIGIN_METAMASK) {
+    if (from !== selectedAddress) {
+      throw rpcErrors.internal({
+        message: `Internally initiated transaction is using invalid account.`,
+        data: {
+          origin,
+          fromAddress: from,
+          selectedAddress
+        }
+      });
+    }
+    return;
+  }
+  if (!permittedAddresses.includes(from)) {
+    throw providerErrors.unauthorized({ data: { origin } });
+  }
+}
+function validateTxParams(txParams, isEIP1559Compatible = true) {
+  validateEIP1559Compatibility(txParams, isEIP1559Compatible);
+  validateParamFrom(txParams.from);
+  validateParamRecipient(txParams);
+  validateParamValue(txParams.value);
+  validateParamData(txParams.data);
+  validateParamChainId(txParams.chainId);
+  validateGasFeeParams(txParams);
+}
+function validateEIP1559Compatibility(txParams, isEIP1559Compatible) {
+  if (isEIP1559Transaction(txParams) && !isEIP1559Compatible) {
+    throw rpcErrors.invalidParams(
+      "Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559"
+    );
+  }
+}
+function validateParamValue(value) {
+  if (value !== void 0) {
+    if (value.includes("-")) {
+      throw rpcErrors.invalidParams(
+        `Invalid transaction value "${value}": not a positive number.`
+      );
+    }
+    if (value.includes(".")) {
+      throw rpcErrors.invalidParams(
+        `Invalid transaction value "${value}": number must be in wei.`
+      );
+    }
+    const intValue = parseInt(value, 10);
+    const isValid = Number.isFinite(intValue) && !Number.isNaN(intValue) && !isNaN(Number(value)) && Number.isSafeInteger(intValue);
+    if (!isValid) {
+      throw rpcErrors.invalidParams(
+        `Invalid transaction value ${value}: number must be a valid number.`
+      );
+    }
+  }
+}
+function validateParamRecipient(txParams) {
+  if (txParams.to === "0x" || txParams.to === void 0) {
+    if (txParams.data) {
+      delete txParams.to;
+    } else {
+      throw rpcErrors.invalidParams(`Invalid "to" address.`);
+    }
+  } else if (txParams.to !== void 0 && !isValidHexAddress(txParams.to)) {
+    throw rpcErrors.invalidParams(`Invalid "to" address.`);
+  }
+}
+function validateParamFrom(from) {
+  if (!from || typeof from !== "string") {
+    throw rpcErrors.invalidParams(
+      `Invalid "from" address ${from}: not a string.`
+    );
+  }
+  if (!isValidHexAddress(from)) {
+    throw rpcErrors.invalidParams('Invalid "from" address.');
+  }
+}
+function validateParamData(value) {
+  if (value) {
+    const ERC20Interface = new Interface(abiERC20);
+    try {
+      ERC20Interface.parseTransaction({ data: value });
+    } catch (error) {
+      if (error.message.match(/BUFFER_OVERRUN/u)) {
+        throw rpcErrors.invalidParams(
+          "Invalid transaction params: data out-of-bounds, BUFFER_OVERRUN."
+        );
+      }
+    }
+  }
+}
+function validateParamChainId(chainId) {
+  if (chainId !== void 0 && typeof chainId !== "number" && typeof chainId !== "string") {
+    throw rpcErrors.invalidParams(
+      `Invalid transaction params: chainId is not a Number or hex string. got: (${chainId})`
+    );
+  }
+}
+function validateGasFeeParams(txParams) {
+  if (txParams.gasPrice) {
+    ensureProperTransactionEnvelopeTypeProvided(txParams, "gasPrice");
+    ensureMutuallyExclusiveFieldsNotProvided(
+      txParams,
+      "gasPrice",
+      "maxFeePerGas"
+    );
+    ensureMutuallyExclusiveFieldsNotProvided(
+      txParams,
+      "gasPrice",
+      "maxPriorityFeePerGas"
+    );
+    ensureFieldIsString(txParams, "gasPrice");
+  }
+  if (txParams.maxFeePerGas) {
+    ensureProperTransactionEnvelopeTypeProvided(txParams, "maxFeePerGas");
+    ensureMutuallyExclusiveFieldsNotProvided(
+      txParams,
+      "maxFeePerGas",
+      "gasPrice"
+    );
+    ensureFieldIsString(txParams, "maxFeePerGas");
+  }
+  if (txParams.maxPriorityFeePerGas) {
+    ensureProperTransactionEnvelopeTypeProvided(
+      txParams,
+      "maxPriorityFeePerGas"
+    );
+    ensureMutuallyExclusiveFieldsNotProvided(
+      txParams,
+      "maxPriorityFeePerGas",
+      "gasPrice"
+    );
+    ensureFieldIsString(txParams, "maxPriorityFeePerGas");
+  }
+}
+function ensureProperTransactionEnvelopeTypeProvided(txParams, field) {
+  switch (field) {
+    case "maxFeePerGas":
+    case "maxPriorityFeePerGas":
+      if (txParams.type && txParams.type !== "0x2" /* feeMarket */) {
+        throw rpcErrors.invalidParams(
+          `Invalid transaction envelope type: specified type "${txParams.type}" but including maxFeePerGas and maxPriorityFeePerGas requires type: "${"0x2" /* feeMarket */}"`
+        );
+      }
+      break;
+    case "gasPrice":
+    default:
+      if (txParams.type && txParams.type === "0x2" /* feeMarket */) {
+        throw rpcErrors.invalidParams(
+          `Invalid transaction envelope type: specified type "${txParams.type}" but included a gasPrice instead of maxFeePerGas and maxPriorityFeePerGas`
+        );
+      }
+  }
+}
+function ensureMutuallyExclusiveFieldsNotProvided(txParams, fieldBeingValidated, mutuallyExclusiveField) {
+  if (typeof txParams[mutuallyExclusiveField] !== "undefined") {
+    throw rpcErrors.invalidParams(
+      `Invalid transaction params: specified ${fieldBeingValidated} but also included ${mutuallyExclusiveField}, these cannot be mixed`
+    );
+  }
+}
+function ensureFieldIsString(txParams, field) {
+  if (typeof txParams[field] !== "string") {
+    throw rpcErrors.invalidParams(
+      `Invalid transaction params: ${field} is not a string. got: (${txParams[field]})`
+    );
+  }
+}
+
+export {
+  validateTransactionOrigin,
+  validateTxParams
+};
+//# sourceMappingURL=chunk-NM6OYEPP.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-NOHEXQ7Y.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-NOHEXQ7Y.mjs
new file mode 100644
index 0000000..bf77b3b
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-NOHEXQ7Y.mjs
@@ -0,0 +1,55 @@
+import {
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+
+// src/utils/layer1-gas-fee-flow.ts
+import { createModuleLogger } from "@metamask/utils";
+var log = createModuleLogger(projectLogger, "layer-1-gas-fee-flow");
+async function updateTransactionLayer1GasFee(request) {
+  const layer1GasFee = await getTransactionLayer1GasFee(request);
+  if (!layer1GasFee) {
+    return;
+  }
+  const { transactionMeta } = request;
+  transactionMeta.layer1GasFee = layer1GasFee;
+  log("Updated layer 1 gas fee", layer1GasFee, transactionMeta.id);
+}
+function getLayer1GasFeeFlow(transactionMeta, layer1GasFeeFlows) {
+  return layer1GasFeeFlows.find(
+    (layer1GasFeeFlow) => layer1GasFeeFlow.matchesTransaction(transactionMeta)
+  );
+}
+async function getTransactionLayer1GasFee({
+  layer1GasFeeFlows,
+  provider,
+  transactionMeta
+}) {
+  const layer1GasFeeFlow = getLayer1GasFeeFlow(
+    transactionMeta,
+    layer1GasFeeFlows
+  );
+  if (!layer1GasFeeFlow) {
+    return void 0;
+  }
+  log(
+    "Found layer 1 gas fee flow",
+    layer1GasFeeFlow.constructor.name,
+    transactionMeta.id
+  );
+  try {
+    const { layer1Fee } = await layer1GasFeeFlow.getLayer1Fee({
+      provider,
+      transactionMeta
+    });
+    return layer1Fee;
+  } catch (error) {
+    log("Failed to get layer 1 gas fee", transactionMeta.id, error);
+    return void 0;
+  }
+}
+
+export {
+  updateTransactionLayer1GasFee,
+  getTransactionLayer1GasFee
+};
+//# sourceMappingURL=chunk-NOHEXQ7Y.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-NYKRCWBG.js b/node_modules/@metamask/transaction-controller/dist/chunk-NYKRCWBG.js
new file mode 100644
index 0000000..ab67b28
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-NYKRCWBG.js
@@ -0,0 +1,31 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkYVCX6Z75js = require('./chunk-YVCX6Z75.js');
+
+
+var _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');
+
+// src/gas-flows/OptimismLayer1GasFeeFlow.ts
+var OPTIMISM_STACK_CHAIN_IDS = [
+  _chunkUGN7PBONjs.CHAIN_IDS.OPTIMISM,
+  _chunkUGN7PBONjs.CHAIN_IDS.OPTIMISM_TESTNET,
+  _chunkUGN7PBONjs.CHAIN_IDS.BASE,
+  _chunkUGN7PBONjs.CHAIN_IDS.BASE_TESTNET,
+  _chunkUGN7PBONjs.CHAIN_IDS.OPBNB,
+  _chunkUGN7PBONjs.CHAIN_IDS.OPBNB_TESTNET,
+  _chunkUGN7PBONjs.CHAIN_IDS.ZORA
+];
+var OPTIMISM_GAS_PRICE_ORACLE_ADDRESS = "0x420000000000000000000000000000000000000F";
+var OptimismLayer1GasFeeFlow = class extends _chunkYVCX6Z75js.OracleLayer1GasFeeFlow {
+  constructor() {
+    super(OPTIMISM_GAS_PRICE_ORACLE_ADDRESS);
+  }
+  matchesTransaction(transactionMeta) {
+    return OPTIMISM_STACK_CHAIN_IDS.includes(transactionMeta.chainId);
+  }
+};
+
+
+
+exports.OptimismLayer1GasFeeFlow = OptimismLayer1GasFeeFlow;
+//# sourceMappingURL=chunk-NYKRCWBG.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-O6ZZVIFH.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-O6ZZVIFH.mjs
new file mode 100644
index 0000000..34dd8ff
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-O6ZZVIFH.mjs
@@ -0,0 +1,176 @@
+// src/constants.ts
+var CHAIN_IDS = {
+  MAINNET: "0x1",
+  GOERLI: "0x5",
+  BASE: "0x2105",
+  BASE_TESTNET: "0x14a33",
+  BSC: "0x38",
+  BSC_TESTNET: "0x61",
+  OPTIMISM: "0xa",
+  OPTIMISM_TESTNET: "0x1a4",
+  OPBNB: "0xcc",
+  OPBNB_TESTNET: "0x15eb",
+  OPTIMISM_SEPOLIA: "0xaa37dc",
+  POLYGON: "0x89",
+  POLYGON_TESTNET: "0x13881",
+  AVALANCHE: "0xa86a",
+  AVALANCHE_TESTNET: "0xa869",
+  FANTOM: "0xfa",
+  FANTOM_TESTNET: "0xfa2",
+  SEPOLIA: "0xaa36a7",
+  LINEA_GOERLI: "0xe704",
+  LINEA_SEPOLIA: "0xe705",
+  LINEA_MAINNET: "0xe708",
+  MOONBEAM: "0x504",
+  MOONBEAM_TESTNET: "0x507",
+  MOONRIVER: "0x505",
+  GNOSIS: "0x64",
+  ARBITRUM: "0xa4b1",
+  ZKSYNC_ERA: "0x144",
+  ZORA: "0x76adf1",
+  SCROLL: "0x82750",
+  SCROLL_SEPOLIA: "0x8274f"
+};
+var DEFAULT_ETHERSCAN_DOMAIN = "etherscan.io";
+var DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = "api";
+var ETHERSCAN_SUPPORTED_NETWORKS = {
+  [CHAIN_IDS.GOERLI]: {
+    domain: DEFAULT_ETHERSCAN_DOMAIN,
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`
+  },
+  [CHAIN_IDS.MAINNET]: {
+    domain: DEFAULT_ETHERSCAN_DOMAIN,
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.SEPOLIA]: {
+    domain: DEFAULT_ETHERSCAN_DOMAIN,
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`
+  },
+  [CHAIN_IDS.LINEA_GOERLI]: {
+    domain: "lineascan.build",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`
+  },
+  [CHAIN_IDS.LINEA_SEPOLIA]: {
+    domain: "lineascan.build",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`
+  },
+  [CHAIN_IDS.LINEA_MAINNET]: {
+    domain: "lineascan.build",
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.BSC]: {
+    domain: "bscscan.com",
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.BSC_TESTNET]: {
+    domain: "bscscan.com",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`
+  },
+  [CHAIN_IDS.OPTIMISM]: {
+    domain: DEFAULT_ETHERSCAN_DOMAIN,
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-optimistic`
+  },
+  [CHAIN_IDS.OPTIMISM_SEPOLIA]: {
+    domain: DEFAULT_ETHERSCAN_DOMAIN,
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia-optimistic`
+  },
+  [CHAIN_IDS.POLYGON]: {
+    domain: "polygonscan.com",
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.POLYGON_TESTNET]: {
+    domain: "polygonscan.com",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-mumbai`
+  },
+  [CHAIN_IDS.AVALANCHE]: {
+    domain: "snowtrace.io",
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.AVALANCHE_TESTNET]: {
+    domain: "snowtrace.io",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`
+  },
+  [CHAIN_IDS.FANTOM]: {
+    domain: "ftmscan.com",
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.FANTOM_TESTNET]: {
+    domain: "ftmscan.com",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`
+  },
+  [CHAIN_IDS.MOONBEAM]: {
+    domain: "moonscan.io",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbeam`
+  },
+  [CHAIN_IDS.MOONBEAM_TESTNET]: {
+    domain: "moonscan.io",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbase`
+  },
+  [CHAIN_IDS.MOONRIVER]: {
+    domain: "moonscan.io",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonriver`
+  },
+  [CHAIN_IDS.GNOSIS]: {
+    domain: "gnosisscan.io",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-gnosis`
+  }
+};
+var GAS_BUFFER_CHAIN_OVERRIDES = {
+  [CHAIN_IDS.OPTIMISM]: 1,
+  [CHAIN_IDS.OPTIMISM_SEPOLIA]: 1
+};
+var ABI_SIMULATION_ERC20_WRAPPED = [
+  {
+    anonymous: false,
+    inputs: [
+      { indexed: true, name: "to", type: "address" },
+      { indexed: false, name: "wad", type: "uint256" }
+    ],
+    name: "Deposit",
+    type: "event"
+  },
+  {
+    anonymous: false,
+    inputs: [
+      { indexed: true, name: "from", type: "address" },
+      { indexed: false, name: "wad", type: "uint256" }
+    ],
+    name: "Withdrawal",
+    type: "event"
+  }
+];
+var ABI_SIMULATION_ERC721_LEGACY = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        name: "_from",
+        type: "address"
+      },
+      {
+        indexed: false,
+        name: "_to",
+        type: "address"
+      },
+      {
+        indexed: false,
+        name: "_tokenId",
+        type: "uint256"
+      }
+    ],
+    name: "Transfer",
+    type: "event"
+  }
+];
+
+export {
+  CHAIN_IDS,
+  DEFAULT_ETHERSCAN_DOMAIN,
+  DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
+  ETHERSCAN_SUPPORTED_NETWORKS,
+  GAS_BUFFER_CHAIN_OVERRIDES,
+  ABI_SIMULATION_ERC20_WRAPPED,
+  ABI_SIMULATION_ERC721_LEGACY
+};
+//# sourceMappingURL=chunk-O6ZZVIFH.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-QP75SWIQ.js b/node_modules/@metamask/transaction-controller/dist/chunk-QP75SWIQ.js
new file mode 100644
index 0000000..7e2ebf6
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-QP75SWIQ.js
@@ -0,0 +1,53 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/utils/history.ts
+var _fastjsonpatch = require('fast-json-patch'); var _fastjsonpatch2 = _interopRequireDefault(_fastjsonpatch);
+var _lodash = require('lodash');
+function addInitialHistorySnapshot(transactionMeta) {
+  const snapshot = snapshotFromTransactionMeta(transactionMeta);
+  return _lodash.merge.call(void 0, {}, transactionMeta, { history: [snapshot] });
+}
+function updateTransactionHistory(transactionMeta, note) {
+  if (!transactionMeta.history) {
+    return transactionMeta;
+  }
+  const currentState = snapshotFromTransactionMeta(transactionMeta);
+  const previousState = replayHistory(transactionMeta.history);
+  const historyEntry = generateHistoryEntry(previousState, currentState, note);
+  if (historyEntry.length > 0) {
+    return _lodash.merge.call(void 0, {}, transactionMeta, {
+      history: [...transactionMeta.history, historyEntry]
+    });
+  }
+  return transactionMeta;
+}
+function generateHistoryEntry(previousState, currentState, note) {
+  const historyOperationsEntry = _fastjsonpatch2.default.compare(
+    previousState,
+    currentState
+  );
+  if (historyOperationsEntry[0]) {
+    if (note) {
+      historyOperationsEntry[0].note = note;
+    }
+    historyOperationsEntry[0].timestamp = Date.now();
+  }
+  return historyOperationsEntry;
+}
+function replayHistory(transactionHistory) {
+  const shortHistory = _lodash.cloneDeep.call(void 0, transactionHistory);
+  return shortHistory.reduce(
+    // TODO: Replace `any` with type
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    (val, entry) => _fastjsonpatch2.default.applyPatch(val, entry).newDocument
+  );
+}
+function snapshotFromTransactionMeta(transactionMeta) {
+  const snapshot = { ...transactionMeta };
+  delete snapshot.history;
+  return _lodash.cloneDeep.call(void 0, snapshot);
+}
+
+
+
+
+exports.addInitialHistorySnapshot = addInitialHistorySnapshot; exports.updateTransactionHistory = updateTransactionHistory;
+//# sourceMappingURL=chunk-QP75SWIQ.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-QZLPYOGC.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-QZLPYOGC.mjs
new file mode 100644
index 0000000..61358fa
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-QZLPYOGC.mjs
@@ -0,0 +1,85 @@
+import {
+  ETHERSCAN_SUPPORTED_NETWORKS
+} from "./chunk-O6ZZVIFH.mjs";
+import {
+  incomingTransactionsLogger
+} from "./chunk-UQQWZT6C.mjs";
+
+// src/utils/etherscan.ts
+import { handleFetch } from "@metamask/controller-utils";
+async function fetchEtherscanTransactions({
+  address,
+  chainId,
+  fromBlock,
+  limit
+}) {
+  return await fetchTransactions("txlist", {
+    address,
+    chainId,
+    fromBlock,
+    limit
+  });
+}
+async function fetchEtherscanTokenTransactions({
+  address,
+  chainId,
+  fromBlock,
+  limit
+}) {
+  return await fetchTransactions("tokentx", {
+    address,
+    chainId,
+    fromBlock,
+    limit
+  });
+}
+async function fetchTransactions(action, {
+  address,
+  chainId,
+  fromBlock,
+  limit
+}) {
+  const urlParams = {
+    module: "account",
+    address,
+    startBlock: fromBlock?.toString(),
+    offset: limit?.toString(),
+    sort: "desc"
+  };
+  const etherscanTxUrl = getEtherscanApiUrl(chainId, {
+    ...urlParams,
+    action
+  });
+  incomingTransactionsLogger("Sending Etherscan request", etherscanTxUrl);
+  const response = await handleFetch(
+    etherscanTxUrl
+  );
+  return response;
+}
+function getEtherscanApiUrl(chainId, urlParams) {
+  const apiUrl = getEtherscanApiHost(chainId);
+  let url = `${apiUrl}/api?`;
+  for (const paramKey of Object.keys(urlParams)) {
+    const value = urlParams[paramKey];
+    if (!value) {
+      continue;
+    }
+    url += `${paramKey}=${value}&`;
+  }
+  url += "tag=latest&page=1";
+  return url;
+}
+function getEtherscanApiHost(chainId) {
+  const networkInfo = ETHERSCAN_SUPPORTED_NETWORKS[chainId];
+  if (!networkInfo) {
+    throw new Error(`Etherscan does not support chain with ID: ${chainId}`);
+  }
+  return `https://${networkInfo.subdomain}.${networkInfo.domain}`;
+}
+
+export {
+  fetchEtherscanTransactions,
+  fetchEtherscanTokenTransactions,
+  getEtherscanApiHost
+};
+//# sourceMappingURL=chunk-QZLPYOGC.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-REOG6YD4.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-REOG6YD4.mjs
new file mode 100644
index 0000000..6cd5db6
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-REOG6YD4.mjs
@@ -0,0 +1,112 @@
+import {
+  gweiDecimalToWeiHex
+} from "./chunk-4M7FHI4S.mjs";
+import {
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+import {
+  GasFeeEstimateLevel
+} from "./chunk-N6JXPWLY.mjs";
+import {
+  __privateAdd,
+  __privateMethod
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/gas-flows/DefaultGasFeeFlow.ts
+import { GAS_ESTIMATE_TYPES } from "@metamask/gas-fee-controller";
+import { createModuleLogger } from "@metamask/utils";
+var log = createModuleLogger(projectLogger, "default-gas-fee-flow");
+var _getFeeMarkEstimates, getFeeMarkEstimates_fn, _getLegacyEstimates, getLegacyEstimates_fn, _getGasPriceEstimates, getGasPriceEstimates_fn, _getFeeMarketLevel, getFeeMarketLevel_fn, _getLegacyLevel, getLegacyLevel_fn;
+var DefaultGasFeeFlow = class {
+  constructor() {
+    __privateAdd(this, _getFeeMarkEstimates);
+    __privateAdd(this, _getLegacyEstimates);
+    __privateAdd(this, _getGasPriceEstimates);
+    __privateAdd(this, _getFeeMarketLevel);
+    __privateAdd(this, _getLegacyLevel);
+  }
+  matchesTransaction(_transactionMeta) {
+    return true;
+  }
+  async getGasFees(request) {
+    const { gasFeeControllerData } = request;
+    const { gasEstimateType, gasFeeEstimates } = gasFeeControllerData;
+    let response;
+    switch (gasEstimateType) {
+      case GAS_ESTIMATE_TYPES.FEE_MARKET:
+        log("Using fee market estimates", gasFeeEstimates);
+        response = __privateMethod(this, _getFeeMarkEstimates, getFeeMarkEstimates_fn).call(this, gasFeeEstimates);
+        break;
+      case GAS_ESTIMATE_TYPES.LEGACY:
+        log("Using legacy estimates", gasFeeEstimates);
+        response = __privateMethod(this, _getLegacyEstimates, getLegacyEstimates_fn).call(this, gasFeeEstimates);
+        break;
+      case GAS_ESTIMATE_TYPES.ETH_GASPRICE:
+        log("Using eth_gasPrice estimates", gasFeeEstimates);
+        response = __privateMethod(this, _getGasPriceEstimates, getGasPriceEstimates_fn).call(this, gasFeeEstimates);
+        break;
+      default:
+        throw new Error(`Unsupported gas estimate type: ${gasEstimateType}`);
+    }
+    return {
+      estimates: response
+    };
+  }
+};
+_getFeeMarkEstimates = new WeakSet();
+getFeeMarkEstimates_fn = function(gasFeeEstimates) {
+  const levels = Object.values(GasFeeEstimateLevel).reduce(
+    (result, level) => ({
+      ...result,
+      [level]: __privateMethod(this, _getFeeMarketLevel, getFeeMarketLevel_fn).call(this, gasFeeEstimates, level)
+    }),
+    {}
+  );
+  return {
+    type: "fee-market" /* FeeMarket */,
+    ...levels
+  };
+};
+_getLegacyEstimates = new WeakSet();
+getLegacyEstimates_fn = function(gasFeeEstimates) {
+  const levels = Object.values(GasFeeEstimateLevel).reduce(
+    (result, level) => ({
+      ...result,
+      [level]: __privateMethod(this, _getLegacyLevel, getLegacyLevel_fn).call(this, gasFeeEstimates, level)
+    }),
+    {}
+  );
+  return {
+    type: "legacy" /* Legacy */,
+    ...levels
+  };
+};
+_getGasPriceEstimates = new WeakSet();
+getGasPriceEstimates_fn = function(gasFeeEstimates) {
+  return {
+    type: "eth_gasPrice" /* GasPrice */,
+    gasPrice: gweiDecimalToWeiHex(gasFeeEstimates.gasPrice)
+  };
+};
+_getFeeMarketLevel = new WeakSet();
+getFeeMarketLevel_fn = function(gasFeeEstimates, level) {
+  const maxFeePerGas = gweiDecimalToWeiHex(
+    gasFeeEstimates[level].suggestedMaxFeePerGas
+  );
+  const maxPriorityFeePerGas = gweiDecimalToWeiHex(
+    gasFeeEstimates[level].suggestedMaxPriorityFeePerGas
+  );
+  return {
+    maxFeePerGas,
+    maxPriorityFeePerGas
+  };
+};
+_getLegacyLevel = new WeakSet();
+getLegacyLevel_fn = function(gasFeeEstimates, level) {
+  return gweiDecimalToWeiHex(gasFeeEstimates[level]);
+};
+
+export {
+  DefaultGasFeeFlow
+};
+//# sourceMappingURL=chunk-REOG6YD4.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-S6VGOPUY.js b/node_modules/@metamask/transaction-controller/dist/chunk-S6VGOPUY.js
new file mode 100644
index 0000000..524c335
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-S6VGOPUY.js
@@ -0,0 +1,14 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/logger.ts
+var _utils = require('@metamask/utils');
+var projectLogger = _utils.createProjectLogger.call(void 0, "transaction-controller");
+var incomingTransactionsLogger = _utils.createModuleLogger.call(void 0, 
+  projectLogger,
+  "incoming-transactions"
+);
+
+
+
+
+
+exports.createModuleLogger = _utils.createModuleLogger; exports.projectLogger = projectLogger; exports.incomingTransactionsLogger = incomingTransactionsLogger;
+//# sourceMappingURL=chunk-S6VGOPUY.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-SD6CWFDF.js b/node_modules/@metamask/transaction-controller/dist/chunk-SD6CWFDF.js
new file mode 100644
index 0000000..2dfee26
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-SD6CWFDF.js
@@ -0,0 +1,88 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/utils/transaction-type.ts
+var _abi = require('@ethersproject/abi');
+var _controllerutils = require('@metamask/controller-utils');
+
+
+
+
+
+var _metamaskethabis = require('@metamask/metamask-eth-abis');
+var ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
+var ERC20Interface = new (0, _abi.Interface)(_metamaskethabis.abiERC20);
+var ERC721Interface = new (0, _abi.Interface)(_metamaskethabis.abiERC721);
+var ERC1155Interface = new (0, _abi.Interface)(_metamaskethabis.abiERC1155);
+var USDCInterface = new (0, _abi.Interface)(_metamaskethabis.abiFiatTokenV2);
+async function determineTransactionType(txParams, ethQuery) {
+  const { data, to } = txParams;
+  if (data && !to) {
+    return { type: "contractDeployment" /* deployContract */, getCodeResponse: void 0 };
+  }
+  const { contractCode: getCodeResponse, isContractAddress } = await readAddressAsContract(ethQuery, to);
+  if (!isContractAddress) {
+    return { type: "simpleSend" /* simpleSend */, getCodeResponse };
+  }
+  const hasValue = Number(txParams.value ?? "0") !== 0;
+  const contractInteractionResult = {
+    type: "contractInteraction" /* contractInteraction */,
+    getCodeResponse
+  };
+  if (!data || hasValue) {
+    return contractInteractionResult;
+  }
+  const name = parseStandardTokenTransactionData(data)?.name;
+  if (!name) {
+    return contractInteractionResult;
+  }
+  const tokenMethodName = [
+    "approve" /* tokenMethodApprove */,
+    "setapprovalforall" /* tokenMethodSetApprovalForAll */,
+    "transfer" /* tokenMethodTransfer */,
+    "transferfrom" /* tokenMethodTransferFrom */,
+    "safetransferfrom" /* tokenMethodSafeTransferFrom */,
+    "increaseAllowance" /* tokenMethodIncreaseAllowance */
+  ].find(
+    (methodName) => methodName.toLowerCase() === name.toLowerCase()
+  );
+  if (tokenMethodName) {
+    return { type: tokenMethodName, getCodeResponse };
+  }
+  return contractInteractionResult;
+}
+function parseStandardTokenTransactionData(data) {
+  if (!data) {
+    return void 0;
+  }
+  try {
+    return ERC20Interface.parseTransaction({ data });
+  } catch {
+  }
+  try {
+    return ERC721Interface.parseTransaction({ data });
+  } catch {
+  }
+  try {
+    return ERC1155Interface.parseTransaction({ data });
+  } catch {
+  }
+  try {
+    return USDCInterface.parseTransaction({ data });
+  } catch {
+  }
+  return void 0;
+}
+async function readAddressAsContract(ethQuery, address) {
+  let contractCode;
+  try {
+    contractCode = await _controllerutils.query.call(void 0, ethQuery, "getCode", [address]);
+  } catch (e) {
+    contractCode = null;
+  }
+  const isContractAddress = contractCode ? contractCode !== "0x" && contractCode !== "0x0" : false;
+  return { contractCode, isContractAddress };
+}
+
+
+
+
+exports.ESTIMATE_GAS_ERROR = ESTIMATE_GAS_ERROR; exports.determineTransactionType = determineTransactionType;
+//# sourceMappingURL=chunk-SD6CWFDF.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-SL3GHHKG.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-SL3GHHKG.mjs
new file mode 100644
index 0000000..d5acd68
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-SL3GHHKG.mjs
@@ -0,0 +1,228 @@
+import {
+  getTransactionLayer1GasFee
+} from "./chunk-NOHEXQ7Y.mjs";
+import {
+  getGasFeeFlow
+} from "./chunk-AGJNOOBN.mjs";
+import {
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+import {
+  __privateAdd,
+  __privateGet,
+  __privateMethod,
+  __privateSet
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/helpers/GasFeePoller.ts
+import EthQuery from "@metamask/eth-query";
+import { createModuleLogger } from "@metamask/utils";
+import EventEmitter from "events";
+var log = createModuleLogger(projectLogger, "gas-fee-poller");
+var INTERVAL_MILLISECONDS = 1e4;
+var _findNetworkClientIdByChainId, _gasFeeFlows, _getGasFeeControllerEstimates, _getProvider, _getTransactions, _layer1GasFeeFlows, _timeout, _running, _start, start_fn, _stop, stop_fn, _onTimeout, onTimeout_fn, _updateUnapprovedTransactions, updateUnapprovedTransactions_fn, _updateUnapprovedTransaction, updateUnapprovedTransaction_fn, _updateTransactionGasFeeEstimates, updateTransactionGasFeeEstimates_fn, _updateTransactionLayer1GasFee, updateTransactionLayer1GasFee_fn, _getUnapprovedTransactions, getUnapprovedTransactions_fn, _getGasFeeControllerData, getGasFeeControllerData_fn;
+var GasFeePoller = class {
+  /**
+   * Constructs a new instance of the GasFeePoller.
+   * @param options - The options for this instance.
+   * @param options.findNetworkClientIdByChainId - Callback to find the network client ID by chain ID.
+   * @param options.gasFeeFlows - The gas fee flows to use to obtain suitable gas fees.
+   * @param options.getGasFeeControllerEstimates - Callback to obtain the default fee estimates.
+   * @param options.getProvider - Callback to obtain a provider instance.
+   * @param options.getTransactions - Callback to obtain the transaction data.
+   * @param options.layer1GasFeeFlows - The layer 1 gas fee flows to use to obtain suitable layer 1 gas fees.
+   * @param options.onStateChange - Callback to register a listener for controller state changes.
+   */
+  constructor({
+    findNetworkClientIdByChainId,
+    gasFeeFlows,
+    getGasFeeControllerEstimates,
+    getProvider,
+    getTransactions,
+    layer1GasFeeFlows,
+    onStateChange
+  }) {
+    __privateAdd(this, _start);
+    __privateAdd(this, _stop);
+    __privateAdd(this, _onTimeout);
+    __privateAdd(this, _updateUnapprovedTransactions);
+    __privateAdd(this, _updateUnapprovedTransaction);
+    __privateAdd(this, _updateTransactionGasFeeEstimates);
+    __privateAdd(this, _updateTransactionLayer1GasFee);
+    __privateAdd(this, _getUnapprovedTransactions);
+    __privateAdd(this, _getGasFeeControllerData);
+    this.hub = new EventEmitter();
+    __privateAdd(this, _findNetworkClientIdByChainId, void 0);
+    __privateAdd(this, _gasFeeFlows, void 0);
+    __privateAdd(this, _getGasFeeControllerEstimates, void 0);
+    __privateAdd(this, _getProvider, void 0);
+    __privateAdd(this, _getTransactions, void 0);
+    __privateAdd(this, _layer1GasFeeFlows, void 0);
+    __privateAdd(this, _timeout, void 0);
+    __privateAdd(this, _running, false);
+    __privateSet(this, _findNetworkClientIdByChainId, findNetworkClientIdByChainId);
+    __privateSet(this, _gasFeeFlows, gasFeeFlows);
+    __privateSet(this, _layer1GasFeeFlows, layer1GasFeeFlows);
+    __privateSet(this, _getGasFeeControllerEstimates, getGasFeeControllerEstimates);
+    __privateSet(this, _getProvider, getProvider);
+    __privateSet(this, _getTransactions, getTransactions);
+    onStateChange(() => {
+      const unapprovedTransactions = __privateMethod(this, _getUnapprovedTransactions, getUnapprovedTransactions_fn).call(this);
+      if (unapprovedTransactions.length) {
+        __privateMethod(this, _start, start_fn).call(this);
+      } else {
+        __privateMethod(this, _stop, stop_fn).call(this);
+      }
+    });
+  }
+};
+_findNetworkClientIdByChainId = new WeakMap();
+_gasFeeFlows = new WeakMap();
+_getGasFeeControllerEstimates = new WeakMap();
+_getProvider = new WeakMap();
+_getTransactions = new WeakMap();
+_layer1GasFeeFlows = new WeakMap();
+_timeout = new WeakMap();
+_running = new WeakMap();
+_start = new WeakSet();
+start_fn = function() {
+  if (__privateGet(this, _running)) {
+    return;
+  }
+  __privateMethod(this, _onTimeout, onTimeout_fn).call(this);
+  __privateSet(this, _running, true);
+  log("Started polling");
+};
+_stop = new WeakSet();
+stop_fn = function() {
+  if (!__privateGet(this, _running)) {
+    return;
+  }
+  clearTimeout(__privateGet(this, _timeout));
+  __privateSet(this, _timeout, void 0);
+  __privateSet(this, _running, false);
+  log("Stopped polling");
+};
+_onTimeout = new WeakSet();
+onTimeout_fn = async function() {
+  await __privateMethod(this, _updateUnapprovedTransactions, updateUnapprovedTransactions_fn).call(this);
+  __privateSet(this, _timeout, setTimeout(() => __privateMethod(this, _onTimeout, onTimeout_fn).call(this), INTERVAL_MILLISECONDS));
+};
+_updateUnapprovedTransactions = new WeakSet();
+updateUnapprovedTransactions_fn = async function() {
+  const unapprovedTransactions = __privateMethod(this, _getUnapprovedTransactions, getUnapprovedTransactions_fn).call(this);
+  if (!unapprovedTransactions.length) {
+    return;
+  }
+  log("Found unapproved transactions", unapprovedTransactions.length);
+  const gasFeeControllerDataByChainId = await __privateMethod(this, _getGasFeeControllerData, getGasFeeControllerData_fn).call(this, unapprovedTransactions);
+  log("Retrieved gas fee controller data", gasFeeControllerDataByChainId);
+  await Promise.all(
+    unapprovedTransactions.flatMap((tx) => {
+      const { chainId } = tx;
+      const gasFeeControllerData = gasFeeControllerDataByChainId.get(
+        chainId
+      );
+      return __privateMethod(this, _updateUnapprovedTransaction, updateUnapprovedTransaction_fn).call(this, tx, gasFeeControllerData);
+    })
+  );
+};
+_updateUnapprovedTransaction = new WeakSet();
+updateUnapprovedTransaction_fn = async function(transactionMeta, gasFeeControllerData) {
+  const { id } = transactionMeta;
+  const [gasFeeEstimatesResponse, layer1GasFee] = await Promise.all([
+    __privateMethod(this, _updateTransactionGasFeeEstimates, updateTransactionGasFeeEstimates_fn).call(this, transactionMeta, gasFeeControllerData),
+    __privateMethod(this, _updateTransactionLayer1GasFee, updateTransactionLayer1GasFee_fn).call(this, transactionMeta)
+  ]);
+  if (!gasFeeEstimatesResponse && !layer1GasFee) {
+    return;
+  }
+  this.hub.emit("transaction-updated", {
+    transactionId: id,
+    gasFeeEstimates: gasFeeEstimatesResponse?.gasFeeEstimates,
+    gasFeeEstimatesLoaded: gasFeeEstimatesResponse?.gasFeeEstimatesLoaded,
+    layer1GasFee
+  });
+};
+_updateTransactionGasFeeEstimates = new WeakSet();
+updateTransactionGasFeeEstimates_fn = async function(transactionMeta, gasFeeControllerData) {
+  const { chainId, networkClientId } = transactionMeta;
+  const ethQuery = new EthQuery(__privateGet(this, _getProvider).call(this, chainId, networkClientId));
+  const gasFeeFlow = getGasFeeFlow(transactionMeta, __privateGet(this, _gasFeeFlows));
+  if (gasFeeFlow) {
+    log(
+      "Found gas fee flow",
+      gasFeeFlow.constructor.name,
+      transactionMeta.id
+    );
+  }
+  const request = {
+    ethQuery,
+    gasFeeControllerData,
+    transactionMeta
+  };
+  let gasFeeEstimates;
+  if (gasFeeFlow) {
+    try {
+      const response = await gasFeeFlow.getGasFees(request);
+      gasFeeEstimates = response.estimates;
+    } catch (error) {
+      log("Failed to get suggested gas fees", transactionMeta.id, error);
+    }
+  }
+  if (!gasFeeEstimates && transactionMeta.gasFeeEstimatesLoaded) {
+    return void 0;
+  }
+  log("Updated gas fee estimates", {
+    gasFeeEstimates,
+    transaction: transactionMeta.id
+  });
+  return { gasFeeEstimates, gasFeeEstimatesLoaded: true };
+};
+_updateTransactionLayer1GasFee = new WeakSet();
+updateTransactionLayer1GasFee_fn = async function(transactionMeta) {
+  const { chainId, networkClientId } = transactionMeta;
+  const provider = __privateGet(this, _getProvider).call(this, chainId, networkClientId);
+  const layer1GasFee = await getTransactionLayer1GasFee({
+    layer1GasFeeFlows: __privateGet(this, _layer1GasFeeFlows),
+    provider,
+    transactionMeta
+  });
+  if (layer1GasFee) {
+    log("Updated layer 1 gas fee", layer1GasFee, transactionMeta.id);
+  }
+  return layer1GasFee;
+};
+_getUnapprovedTransactions = new WeakSet();
+getUnapprovedTransactions_fn = function() {
+  return __privateGet(this, _getTransactions).call(this).filter(
+    (tx) => tx.status === "unapproved" /* unapproved */
+  );
+};
+_getGasFeeControllerData = new WeakSet();
+getGasFeeControllerData_fn = async function(transactions) {
+  const networkClientIdsByChainId = /* @__PURE__ */ new Map();
+  for (const transaction of transactions) {
+    const { chainId, networkClientId: transactionNetworkClientId } = transaction;
+    if (networkClientIdsByChainId.has(chainId)) {
+      continue;
+    }
+    const networkClientId = transactionNetworkClientId ?? __privateGet(this, _findNetworkClientIdByChainId).call(this, chainId);
+    networkClientIdsByChainId.set(chainId, networkClientId);
+  }
+  log("Extracted network client IDs by chain ID", networkClientIdsByChainId);
+  const entryPromises = Array.from(networkClientIdsByChainId.entries()).map(
+    async ([chainId, networkClientId]) => {
+      return [
+        chainId,
+        await __privateGet(this, _getGasFeeControllerEstimates).call(this, { networkClientId })
+      ];
+    }
+  );
+  return new Map(await Promise.all(entryPromises));
+};
+
+export {
+  GasFeePoller
+};
+//# sourceMappingURL=chunk-SL3GHHKG.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-TJMQEH57.js b/node_modules/@metamask/transaction-controller/dist/chunk-TJMQEH57.js
new file mode 100644
index 0000000..0c651b5
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-TJMQEH57.js
@@ -0,0 +1,66 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/gas-flows/TestGasFeeFlow.ts
+var _controllerutils = require('@metamask/controller-utils');
+var INCREMENT = 1e15;
+var LEVEL_DIFFERENCE = 0.5;
+var _counter, _getValueForTotalFee, getValueForTotalFee_fn;
+var TestGasFeeFlow = class {
+  constructor() {
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getValueForTotalFee);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _counter, 1);
+  }
+  matchesTransaction(_transactionMeta) {
+    return true;
+  }
+  async getGasFees(request) {
+    const { transactionMeta } = request;
+    const { txParams } = transactionMeta;
+    const { gas: gasHex } = txParams;
+    if (!gasHex) {
+      throw new Error("Cannot estimate fee without gas value");
+    }
+    const gasDecimal = parseInt(gasHex, 16);
+    const difference = INCREMENT * LEVEL_DIFFERENCE;
+    const mediumMaxTarget = (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _counter) + 1) * INCREMENT;
+    const mediumPriorityTarget = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _counter) * INCREMENT;
+    const lowMaxTarget = mediumMaxTarget - difference;
+    const lowPriorityTarget = mediumPriorityTarget - difference;
+    const highMaxTarget = mediumMaxTarget + difference;
+    const highPriorityTarget = mediumPriorityTarget + difference;
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _counter, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _counter) + 1);
+    return {
+      estimates: {
+        type: "fee-market" /* FeeMarket */,
+        low: {
+          maxFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, lowMaxTarget, gasDecimal),
+          maxPriorityFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, lowPriorityTarget, gasDecimal)
+        },
+        medium: {
+          maxFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, mediumMaxTarget, gasDecimal),
+          maxPriorityFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, mediumPriorityTarget, gasDecimal)
+        },
+        high: {
+          maxFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, highMaxTarget, gasDecimal),
+          maxPriorityFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, highPriorityTarget, gasDecimal)
+        }
+      }
+    };
+  }
+};
+_counter = new WeakMap();
+_getValueForTotalFee = new WeakSet();
+getValueForTotalFee_fn = function(totalFee, gas) {
+  const feeDecimal = Math.ceil(totalFee / gas);
+  return _controllerutils.toHex.call(void 0, feeDecimal);
+};
+
+
+
+exports.TestGasFeeFlow = TestGasFeeFlow;
+//# sourceMappingURL=chunk-TJMQEH57.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-UGFBA4GV.js b/node_modules/@metamask/transaction-controller/dist/chunk-UGFBA4GV.js
new file mode 100644
index 0000000..b5ff0e9
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-UGFBA4GV.js
@@ -0,0 +1,123 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/utils/utils.ts
+var _controllerutils = require('@metamask/controller-utils');
+
+
+
+
+var _utils = require('@metamask/utils');
+var ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
+var NORMALIZERS = {
+  data: (data) => _utils.add0x.call(void 0, padHexToEvenLength(data)),
+  from: (from) => _utils.add0x.call(void 0, from).toLowerCase(),
+  gas: (gas) => _utils.add0x.call(void 0, gas),
+  gasLimit: (gas) => _utils.add0x.call(void 0, gas),
+  gasPrice: (gasPrice) => _utils.add0x.call(void 0, gasPrice),
+  nonce: (nonce) => _utils.add0x.call(void 0, nonce),
+  to: (to) => _utils.add0x.call(void 0, to).toLowerCase(),
+  value: (value) => _utils.add0x.call(void 0, value),
+  maxFeePerGas: (maxFeePerGas) => _utils.add0x.call(void 0, maxFeePerGas),
+  maxPriorityFeePerGas: (maxPriorityFeePerGas) => _utils.add0x.call(void 0, maxPriorityFeePerGas),
+  estimatedBaseFee: (maxPriorityFeePerGas) => _utils.add0x.call(void 0, maxPriorityFeePerGas),
+  type: (type) => _utils.add0x.call(void 0, type)
+};
+function normalizeTransactionParams(txParams) {
+  const normalizedTxParams = { from: "" };
+  for (const key of _utils.getKnownPropertyNames.call(void 0, NORMALIZERS)) {
+    if (txParams[key]) {
+      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);
+    }
+  }
+  if (!normalizedTxParams.value) {
+    normalizedTxParams.value = "0x0";
+  }
+  return normalizedTxParams;
+}
+function isEIP1559Transaction(txParams) {
+  const hasOwnProp = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);
+  return hasOwnProp(txParams, "maxFeePerGas") && hasOwnProp(txParams, "maxPriorityFeePerGas");
+}
+var validateGasValues = (gasValues) => {
+  Object.keys(gasValues).forEach((key) => {
+    const value = gasValues[key];
+    if (typeof value !== "string" || !_utils.isStrictHexString.call(void 0, value)) {
+      throw new TypeError(
+        `expected hex string for ${key} but received: ${value}`
+      );
+    }
+  });
+};
+var isFeeMarketEIP1559Values = (gasValues) => gasValues?.maxFeePerGas !== void 0 || gasValues?.maxPriorityFeePerGas !== void 0;
+var isGasPriceValue = (gasValues) => gasValues?.gasPrice !== void 0;
+var getIncreasedPriceHex = (value, rate) => _utils.add0x.call(void 0, `${parseInt(`${value * rate}`, 10).toString(16)}`);
+var getIncreasedPriceFromExisting = (value, rate) => {
+  return getIncreasedPriceHex(_controllerutils.convertHexToDecimal.call(void 0, value), rate);
+};
+function validateMinimumIncrease(proposed, min) {
+  const proposedDecimal = _controllerutils.convertHexToDecimal.call(void 0, proposed);
+  const minDecimal = _controllerutils.convertHexToDecimal.call(void 0, min);
+  if (proposedDecimal >= minDecimal) {
+    return proposed;
+  }
+  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;
+  throw new Error(errorMsg);
+}
+function validateIfTransactionUnapproved(transactionMeta, fnName) {
+  if (transactionMeta?.status !== "unapproved" /* unapproved */) {
+    throw new Error(
+      `TransactionsController: Can only call ${fnName} on an unapproved transaction.
+      Current tx status: ${transactionMeta?.status}`
+    );
+  }
+}
+function normalizeTxError(error) {
+  return {
+    name: error.name,
+    message: error.message,
+    stack: error.stack,
+    code: error.code,
+    rpc: isJsonCompatible(error.value) ? error.value : void 0
+  };
+}
+function normalizeGasFeeValues(gasFeeValues) {
+  const normalize = (value) => typeof value === "string" ? _utils.add0x.call(void 0, value) : value;
+  if ("gasPrice" in gasFeeValues) {
+    return {
+      gasPrice: normalize(gasFeeValues.gasPrice)
+    };
+  }
+  return {
+    maxFeePerGas: normalize(gasFeeValues.maxFeePerGas),
+    maxPriorityFeePerGas: normalize(gasFeeValues.maxPriorityFeePerGas)
+  };
+}
+function isJsonCompatible(value) {
+  try {
+    JSON.parse(JSON.stringify(value));
+    return true;
+  } catch {
+    return false;
+  }
+}
+function padHexToEvenLength(hex) {
+  const prefix = hex.toLowerCase().startsWith("0x") ? hex.slice(0, 2) : "";
+  const data = prefix ? hex.slice(2) : hex;
+  const evenData = data.length % 2 === 0 ? data : `0${data}`;
+  return prefix + evenData;
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+exports.ESTIMATE_GAS_ERROR = ESTIMATE_GAS_ERROR; exports.normalizeTransactionParams = normalizeTransactionParams; exports.isEIP1559Transaction = isEIP1559Transaction; exports.validateGasValues = validateGasValues; exports.isFeeMarketEIP1559Values = isFeeMarketEIP1559Values; exports.isGasPriceValue = isGasPriceValue; exports.getIncreasedPriceHex = getIncreasedPriceHex; exports.getIncreasedPriceFromExisting = getIncreasedPriceFromExisting; exports.validateMinimumIncrease = validateMinimumIncrease; exports.validateIfTransactionUnapproved = validateIfTransactionUnapproved; exports.normalizeTxError = normalizeTxError; exports.normalizeGasFeeValues = normalizeGasFeeValues; exports.padHexToEvenLength = padHexToEvenLength;
+//# sourceMappingURL=chunk-UGFBA4GV.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-UGN7PBON.js b/node_modules/@metamask/transaction-controller/dist/chunk-UGN7PBON.js
new file mode 100644
index 0000000..99fe4b4
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-UGN7PBON.js
@@ -0,0 +1,176 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/constants.ts
+var CHAIN_IDS = {
+  MAINNET: "0x1",
+  GOERLI: "0x5",
+  BASE: "0x2105",
+  BASE_TESTNET: "0x14a33",
+  BSC: "0x38",
+  BSC_TESTNET: "0x61",
+  OPTIMISM: "0xa",
+  OPTIMISM_TESTNET: "0x1a4",
+  OPBNB: "0xcc",
+  OPBNB_TESTNET: "0x15eb",
+  OPTIMISM_SEPOLIA: "0xaa37dc",
+  POLYGON: "0x89",
+  POLYGON_TESTNET: "0x13881",
+  AVALANCHE: "0xa86a",
+  AVALANCHE_TESTNET: "0xa869",
+  FANTOM: "0xfa",
+  FANTOM_TESTNET: "0xfa2",
+  SEPOLIA: "0xaa36a7",
+  LINEA_GOERLI: "0xe704",
+  LINEA_SEPOLIA: "0xe705",
+  LINEA_MAINNET: "0xe708",
+  MOONBEAM: "0x504",
+  MOONBEAM_TESTNET: "0x507",
+  MOONRIVER: "0x505",
+  GNOSIS: "0x64",
+  ARBITRUM: "0xa4b1",
+  ZKSYNC_ERA: "0x144",
+  ZORA: "0x76adf1",
+  SCROLL: "0x82750",
+  SCROLL_SEPOLIA: "0x8274f"
+};
+var DEFAULT_ETHERSCAN_DOMAIN = "etherscan.io";
+var DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = "api";
+var ETHERSCAN_SUPPORTED_NETWORKS = {
+  [CHAIN_IDS.GOERLI]: {
+    domain: DEFAULT_ETHERSCAN_DOMAIN,
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`
+  },
+  [CHAIN_IDS.MAINNET]: {
+    domain: DEFAULT_ETHERSCAN_DOMAIN,
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.SEPOLIA]: {
+    domain: DEFAULT_ETHERSCAN_DOMAIN,
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`
+  },
+  [CHAIN_IDS.LINEA_GOERLI]: {
+    domain: "lineascan.build",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`
+  },
+  [CHAIN_IDS.LINEA_SEPOLIA]: {
+    domain: "lineascan.build",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`
+  },
+  [CHAIN_IDS.LINEA_MAINNET]: {
+    domain: "lineascan.build",
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.BSC]: {
+    domain: "bscscan.com",
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.BSC_TESTNET]: {
+    domain: "bscscan.com",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`
+  },
+  [CHAIN_IDS.OPTIMISM]: {
+    domain: DEFAULT_ETHERSCAN_DOMAIN,
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-optimistic`
+  },
+  [CHAIN_IDS.OPTIMISM_SEPOLIA]: {
+    domain: DEFAULT_ETHERSCAN_DOMAIN,
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia-optimistic`
+  },
+  [CHAIN_IDS.POLYGON]: {
+    domain: "polygonscan.com",
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.POLYGON_TESTNET]: {
+    domain: "polygonscan.com",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-mumbai`
+  },
+  [CHAIN_IDS.AVALANCHE]: {
+    domain: "snowtrace.io",
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.AVALANCHE_TESTNET]: {
+    domain: "snowtrace.io",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`
+  },
+  [CHAIN_IDS.FANTOM]: {
+    domain: "ftmscan.com",
+    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX
+  },
+  [CHAIN_IDS.FANTOM_TESTNET]: {
+    domain: "ftmscan.com",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`
+  },
+  [CHAIN_IDS.MOONBEAM]: {
+    domain: "moonscan.io",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbeam`
+  },
+  [CHAIN_IDS.MOONBEAM_TESTNET]: {
+    domain: "moonscan.io",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbase`
+  },
+  [CHAIN_IDS.MOONRIVER]: {
+    domain: "moonscan.io",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonriver`
+  },
+  [CHAIN_IDS.GNOSIS]: {
+    domain: "gnosisscan.io",
+    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-gnosis`
+  }
+};
+var GAS_BUFFER_CHAIN_OVERRIDES = {
+  [CHAIN_IDS.OPTIMISM]: 1,
+  [CHAIN_IDS.OPTIMISM_SEPOLIA]: 1
+};
+var ABI_SIMULATION_ERC20_WRAPPED = [
+  {
+    anonymous: false,
+    inputs: [
+      { indexed: true, name: "to", type: "address" },
+      { indexed: false, name: "wad", type: "uint256" }
+    ],
+    name: "Deposit",
+    type: "event"
+  },
+  {
+    anonymous: false,
+    inputs: [
+      { indexed: true, name: "from", type: "address" },
+      { indexed: false, name: "wad", type: "uint256" }
+    ],
+    name: "Withdrawal",
+    type: "event"
+  }
+];
+var ABI_SIMULATION_ERC721_LEGACY = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        name: "_from",
+        type: "address"
+      },
+      {
+        indexed: false,
+        name: "_to",
+        type: "address"
+      },
+      {
+        indexed: false,
+        name: "_tokenId",
+        type: "uint256"
+      }
+    ],
+    name: "Transfer",
+    type: "event"
+  }
+];
+
+
+
+
+
+
+
+
+
+exports.CHAIN_IDS = CHAIN_IDS; exports.DEFAULT_ETHERSCAN_DOMAIN = DEFAULT_ETHERSCAN_DOMAIN; exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX; exports.ETHERSCAN_SUPPORTED_NETWORKS = ETHERSCAN_SUPPORTED_NETWORKS; exports.GAS_BUFFER_CHAIN_OVERRIDES = GAS_BUFFER_CHAIN_OVERRIDES; exports.ABI_SIMULATION_ERC20_WRAPPED = ABI_SIMULATION_ERC20_WRAPPED; exports.ABI_SIMULATION_ERC721_LEGACY = ABI_SIMULATION_ERC721_LEGACY;
+//# sourceMappingURL=chunk-UGN7PBON.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-UQQWZT6C.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-UQQWZT6C.mjs
new file mode 100644
index 0000000..d364668
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-UQQWZT6C.mjs
@@ -0,0 +1,14 @@
+// src/logger.ts
+import { createProjectLogger, createModuleLogger } from "@metamask/utils";
+var projectLogger = createProjectLogger("transaction-controller");
+var incomingTransactionsLogger = createModuleLogger(
+  projectLogger,
+  "incoming-transactions"
+);
+
+export {
+  createModuleLogger,
+  projectLogger,
+  incomingTransactionsLogger
+};
+//# sourceMappingURL=chunk-UQQWZT6C.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-V72C4MCR.js b/node_modules/@metamask/transaction-controller/dist/chunk-V72C4MCR.js
new file mode 100644
index 0000000..3c76a30
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-V72C4MCR.js
@@ -0,0 +1,137 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+// src/utils/gas.ts
+
+
+
+
+
+var _controllerutils = require('@metamask/controller-utils');
+var _utils = require('@metamask/utils');
+var log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "gas");
+var FIXED_GAS = "0x5208";
+var DEFAULT_GAS_MULTIPLIER = 1.5;
+async function updateGas(request) {
+  const { txMeta } = request;
+  const initialParams = { ...txMeta.txParams };
+  const [gas, simulationFails] = await getGas(request);
+  txMeta.txParams.gas = gas;
+  txMeta.simulationFails = simulationFails;
+  if (!initialParams.gas) {
+    txMeta.originalGasEstimate = txMeta.txParams.gas;
+  }
+  if (!txMeta.defaultGasEstimates) {
+    txMeta.defaultGasEstimates = {};
+  }
+  txMeta.defaultGasEstimates.gas = txMeta.txParams.gas;
+}
+async function estimateGas(txParams, ethQuery) {
+  const request = { ...txParams };
+  const { data, value } = request;
+  const { gasLimit: gasLimitHex, number: blockNumber } = await getLatestBlock(
+    ethQuery
+  );
+  const gasLimitBN = _controllerutils.hexToBN.call(void 0, gasLimitHex);
+  request.data = data ? _utils.add0x.call(void 0, data) : data;
+  request.gas = _controllerutils.BNToHex.call(void 0, _controllerutils.fractionBN.call(void 0, gasLimitBN, 19, 20));
+  request.value = value || "0x0";
+  let estimatedGas = request.gas;
+  let simulationFails;
+  try {
+    estimatedGas = await _controllerutils.query.call(void 0, ethQuery, "estimateGas", [request]);
+  } catch (error) {
+    simulationFails = {
+      reason: error.message,
+      errorKey: error.errorKey,
+      debug: {
+        blockNumber,
+        blockGasLimit: gasLimitHex
+      }
+    };
+    log("Estimation failed", { ...simulationFails, fallback: estimateGas });
+  }
+  return {
+    blockGasLimit: gasLimitHex,
+    estimatedGas,
+    simulationFails
+  };
+}
+function addGasBuffer(estimatedGas, blockGasLimit, multiplier) {
+  const estimatedGasBN = _controllerutils.hexToBN.call(void 0, estimatedGas);
+  const maxGasBN = _controllerutils.hexToBN.call(void 0, blockGasLimit).muln(0.9);
+  const paddedGasBN = estimatedGasBN.muln(multiplier);
+  if (estimatedGasBN.gt(maxGasBN)) {
+    const estimatedGasHex = _utils.add0x.call(void 0, estimatedGas);
+    log("Using estimated value", estimatedGasHex);
+    return estimatedGasHex;
+  }
+  if (paddedGasBN.lt(maxGasBN)) {
+    const paddedHex = _utils.add0x.call(void 0, _controllerutils.BNToHex.call(void 0, paddedGasBN));
+    log("Using padded estimate", paddedHex, multiplier);
+    return paddedHex;
+  }
+  const maxHex = _utils.add0x.call(void 0, _controllerutils.BNToHex.call(void 0, maxGasBN));
+  log("Using 90% of block gas limit", maxHex);
+  return maxHex;
+}
+async function getGas(request) {
+  const { isCustomNetwork, chainId, txMeta } = request;
+  if (txMeta.txParams.gas) {
+    log("Using value from request", txMeta.txParams.gas);
+    return [txMeta.txParams.gas];
+  }
+  if (await requiresFixedGas(request)) {
+    log("Using fixed value", FIXED_GAS);
+    return [FIXED_GAS];
+  }
+  const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(
+    txMeta.txParams,
+    request.ethQuery
+  );
+  if (isCustomNetwork) {
+    log("Using original estimate as custom network");
+    return [estimatedGas, simulationFails];
+  }
+  const bufferMultiplier = _chunkUGN7PBONjs.GAS_BUFFER_CHAIN_OVERRIDES[chainId] ?? DEFAULT_GAS_MULTIPLIER;
+  const bufferedGas = addGasBuffer(
+    estimatedGas,
+    blockGasLimit,
+    bufferMultiplier
+  );
+  return [bufferedGas, simulationFails];
+}
+async function requiresFixedGas({
+  ethQuery,
+  txMeta,
+  isCustomNetwork
+}) {
+  const {
+    txParams: { to, data }
+  } = txMeta;
+  if (isCustomNetwork || !to || data) {
+    return false;
+  }
+  const code = await getCode(ethQuery, to);
+  return !code || code === "0x";
+}
+async function getCode(ethQuery, address) {
+  return await _controllerutils.query.call(void 0, ethQuery, "getCode", [address]);
+}
+async function getLatestBlock(ethQuery) {
+  return await _controllerutils.query.call(void 0, ethQuery, "getBlockByNumber", ["latest", false]);
+}
+
+
+
+
+
+
+
+
+exports.log = log; exports.FIXED_GAS = FIXED_GAS; exports.DEFAULT_GAS_MULTIPLIER = DEFAULT_GAS_MULTIPLIER; exports.updateGas = updateGas; exports.estimateGas = estimateGas; exports.addGasBuffer = addGasBuffer;
+//# sourceMappingURL=chunk-V72C4MCR.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-VEVVBHP3.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-VEVVBHP3.mjs
new file mode 100644
index 0000000..39eaea1
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-VEVVBHP3.mjs
@@ -0,0 +1,31 @@
+import {
+  OracleLayer1GasFeeFlow
+} from "./chunk-FG74Z3F5.mjs";
+import {
+  CHAIN_IDS
+} from "./chunk-O6ZZVIFH.mjs";
+
+// src/gas-flows/OptimismLayer1GasFeeFlow.ts
+var OPTIMISM_STACK_CHAIN_IDS = [
+  CHAIN_IDS.OPTIMISM,
+  CHAIN_IDS.OPTIMISM_TESTNET,
+  CHAIN_IDS.BASE,
+  CHAIN_IDS.BASE_TESTNET,
+  CHAIN_IDS.OPBNB,
+  CHAIN_IDS.OPBNB_TESTNET,
+  CHAIN_IDS.ZORA
+];
+var OPTIMISM_GAS_PRICE_ORACLE_ADDRESS = "0x420000000000000000000000000000000000000F";
+var OptimismLayer1GasFeeFlow = class extends OracleLayer1GasFeeFlow {
+  constructor() {
+    super(OPTIMISM_GAS_PRICE_ORACLE_ADDRESS);
+  }
+  matchesTransaction(transactionMeta) {
+    return OPTIMISM_STACK_CHAIN_IDS.includes(transactionMeta.chainId);
+  }
+};
+
+export {
+  OptimismLayer1GasFeeFlow
+};
+//# sourceMappingURL=chunk-VEVVBHP3.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-VH47Q6TS.js b/node_modules/@metamask/transaction-controller/dist/chunk-VH47Q6TS.js
new file mode 100644
index 0000000..ff677d8
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-VH47Q6TS.js
@@ -0,0 +1,182 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkUGFBA4GVjs = require('./chunk-UGFBA4GV.js');
+
+// src/utils/validation.ts
+var _abi = require('@ethersproject/abi');
+var _controllerutils = require('@metamask/controller-utils');
+var _metamaskethabis = require('@metamask/metamask-eth-abis');
+var _rpcerrors = require('@metamask/rpc-errors');
+async function validateTransactionOrigin(permittedAddresses, selectedAddress, from, origin) {
+  if (origin === _controllerutils.ORIGIN_METAMASK) {
+    if (from !== selectedAddress) {
+      throw _rpcerrors.rpcErrors.internal({
+        message: `Internally initiated transaction is using invalid account.`,
+        data: {
+          origin,
+          fromAddress: from,
+          selectedAddress
+        }
+      });
+    }
+    return;
+  }
+  if (!permittedAddresses.includes(from)) {
+    throw _rpcerrors.providerErrors.unauthorized({ data: { origin } });
+  }
+}
+function validateTxParams(txParams, isEIP1559Compatible = true) {
+  validateEIP1559Compatibility(txParams, isEIP1559Compatible);
+  validateParamFrom(txParams.from);
+  validateParamRecipient(txParams);
+  validateParamValue(txParams.value);
+  validateParamData(txParams.data);
+  validateParamChainId(txParams.chainId);
+  validateGasFeeParams(txParams);
+}
+function validateEIP1559Compatibility(txParams, isEIP1559Compatible) {
+  if (_chunkUGFBA4GVjs.isEIP1559Transaction.call(void 0, txParams) && !isEIP1559Compatible) {
+    throw _rpcerrors.rpcErrors.invalidParams(
+      "Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559"
+    );
+  }
+}
+function validateParamValue(value) {
+  if (value !== void 0) {
+    if (value.includes("-")) {
+      throw _rpcerrors.rpcErrors.invalidParams(
+        `Invalid transaction value "${value}": not a positive number.`
+      );
+    }
+    if (value.includes(".")) {
+      throw _rpcerrors.rpcErrors.invalidParams(
+        `Invalid transaction value "${value}": number must be in wei.`
+      );
+    }
+    const intValue = parseInt(value, 10);
+    const isValid = Number.isFinite(intValue) && !Number.isNaN(intValue) && !isNaN(Number(value)) && Number.isSafeInteger(intValue);
+    if (!isValid) {
+      throw _rpcerrors.rpcErrors.invalidParams(
+        `Invalid transaction value ${value}: number must be a valid number.`
+      );
+    }
+  }
+}
+function validateParamRecipient(txParams) {
+  if (txParams.to === "0x" || txParams.to === void 0) {
+    if (txParams.data) {
+      delete txParams.to;
+    } else {
+      throw _rpcerrors.rpcErrors.invalidParams(`Invalid "to" address.`);
+    }
+  } else if (txParams.to !== void 0 && !_controllerutils.isValidHexAddress.call(void 0, txParams.to)) {
+    throw _rpcerrors.rpcErrors.invalidParams(`Invalid "to" address.`);
+  }
+}
+function validateParamFrom(from) {
+  if (!from || typeof from !== "string") {
+    throw _rpcerrors.rpcErrors.invalidParams(
+      `Invalid "from" address ${from}: not a string.`
+    );
+  }
+  if (!_controllerutils.isValidHexAddress.call(void 0, from)) {
+    throw _rpcerrors.rpcErrors.invalidParams('Invalid "from" address.');
+  }
+}
+function validateParamData(value) {
+  if (value) {
+    const ERC20Interface = new (0, _abi.Interface)(_metamaskethabis.abiERC20);
+    try {
+      ERC20Interface.parseTransaction({ data: value });
+    } catch (error) {
+      if (error.message.match(/BUFFER_OVERRUN/u)) {
+        throw _rpcerrors.rpcErrors.invalidParams(
+          "Invalid transaction params: data out-of-bounds, BUFFER_OVERRUN."
+        );
+      }
+    }
+  }
+}
+function validateParamChainId(chainId) {
+  if (chainId !== void 0 && typeof chainId !== "number" && typeof chainId !== "string") {
+    throw _rpcerrors.rpcErrors.invalidParams(
+      `Invalid transaction params: chainId is not a Number or hex string. got: (${chainId})`
+    );
+  }
+}
+function validateGasFeeParams(txParams) {
+  if (txParams.gasPrice) {
+    ensureProperTransactionEnvelopeTypeProvided(txParams, "gasPrice");
+    ensureMutuallyExclusiveFieldsNotProvided(
+      txParams,
+      "gasPrice",
+      "maxFeePerGas"
+    );
+    ensureMutuallyExclusiveFieldsNotProvided(
+      txParams,
+      "gasPrice",
+      "maxPriorityFeePerGas"
+    );
+    ensureFieldIsString(txParams, "gasPrice");
+  }
+  if (txParams.maxFeePerGas) {
+    ensureProperTransactionEnvelopeTypeProvided(txParams, "maxFeePerGas");
+    ensureMutuallyExclusiveFieldsNotProvided(
+      txParams,
+      "maxFeePerGas",
+      "gasPrice"
+    );
+    ensureFieldIsString(txParams, "maxFeePerGas");
+  }
+  if (txParams.maxPriorityFeePerGas) {
+    ensureProperTransactionEnvelopeTypeProvided(
+      txParams,
+      "maxPriorityFeePerGas"
+    );
+    ensureMutuallyExclusiveFieldsNotProvided(
+      txParams,
+      "maxPriorityFeePerGas",
+      "gasPrice"
+    );
+    ensureFieldIsString(txParams, "maxPriorityFeePerGas");
+  }
+}
+function ensureProperTransactionEnvelopeTypeProvided(txParams, field) {
+  switch (field) {
+    case "maxFeePerGas":
+    case "maxPriorityFeePerGas":
+      if (txParams.type && txParams.type !== "0x2" /* feeMarket */) {
+        throw _rpcerrors.rpcErrors.invalidParams(
+          `Invalid transaction envelope type: specified type "${txParams.type}" but including maxFeePerGas and maxPriorityFeePerGas requires type: "${"0x2" /* feeMarket */}"`
+        );
+      }
+      break;
+    case "gasPrice":
+    default:
+      if (txParams.type && txParams.type === "0x2" /* feeMarket */) {
+        throw _rpcerrors.rpcErrors.invalidParams(
+          `Invalid transaction envelope type: specified type "${txParams.type}" but included a gasPrice instead of maxFeePerGas and maxPriorityFeePerGas`
+        );
+      }
+  }
+}
+function ensureMutuallyExclusiveFieldsNotProvided(txParams, fieldBeingValidated, mutuallyExclusiveField) {
+  if (typeof txParams[mutuallyExclusiveField] !== "undefined") {
+    throw _rpcerrors.rpcErrors.invalidParams(
+      `Invalid transaction params: specified ${fieldBeingValidated} but also included ${mutuallyExclusiveField}, these cannot be mixed`
+    );
+  }
+}
+function ensureFieldIsString(txParams, field) {
+  if (typeof txParams[field] !== "string") {
+    throw _rpcerrors.rpcErrors.invalidParams(
+      `Invalid transaction params: ${field} is not a string. got: (${txParams[field]})`
+    );
+  }
+}
+
+
+
+
+exports.validateTransactionOrigin = validateTransactionOrigin; exports.validateTxParams = validateTxParams;
+//# sourceMappingURL=chunk-VH47Q6TS.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-VJYFB7BM.js b/node_modules/@metamask/transaction-controller/dist/chunk-VJYFB7BM.js
new file mode 100644
index 0000000..004bef2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-VJYFB7BM.js
@@ -0,0 +1,112 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkKNYSD4JPjs = require('./chunk-KNYSD4JP.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+
+var _chunk5C3CSQADjs = require('./chunk-5C3CSQAD.js');
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/gas-flows/DefaultGasFeeFlow.ts
+var _gasfeecontroller = require('@metamask/gas-fee-controller');
+var _utils = require('@metamask/utils');
+var log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "default-gas-fee-flow");
+var _getFeeMarkEstimates, getFeeMarkEstimates_fn, _getLegacyEstimates, getLegacyEstimates_fn, _getGasPriceEstimates, getGasPriceEstimates_fn, _getFeeMarketLevel, getFeeMarketLevel_fn, _getLegacyLevel, getLegacyLevel_fn;
+var DefaultGasFeeFlow = class {
+  constructor() {
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getFeeMarkEstimates);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLegacyEstimates);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGasPriceEstimates);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getFeeMarketLevel);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLegacyLevel);
+  }
+  matchesTransaction(_transactionMeta) {
+    return true;
+  }
+  async getGasFees(request) {
+    const { gasFeeControllerData } = request;
+    const { gasEstimateType, gasFeeEstimates } = gasFeeControllerData;
+    let response;
+    switch (gasEstimateType) {
+      case _gasfeecontroller.GAS_ESTIMATE_TYPES.FEE_MARKET:
+        log("Using fee market estimates", gasFeeEstimates);
+        response = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getFeeMarkEstimates, getFeeMarkEstimates_fn).call(this, gasFeeEstimates);
+        break;
+      case _gasfeecontroller.GAS_ESTIMATE_TYPES.LEGACY:
+        log("Using legacy estimates", gasFeeEstimates);
+        response = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLegacyEstimates, getLegacyEstimates_fn).call(this, gasFeeEstimates);
+        break;
+      case _gasfeecontroller.GAS_ESTIMATE_TYPES.ETH_GASPRICE:
+        log("Using eth_gasPrice estimates", gasFeeEstimates);
+        response = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGasPriceEstimates, getGasPriceEstimates_fn).call(this, gasFeeEstimates);
+        break;
+      default:
+        throw new Error(`Unsupported gas estimate type: ${gasEstimateType}`);
+    }
+    return {
+      estimates: response
+    };
+  }
+};
+_getFeeMarkEstimates = new WeakSet();
+getFeeMarkEstimates_fn = function(gasFeeEstimates) {
+  const levels = Object.values(_chunk5C3CSQADjs.GasFeeEstimateLevel).reduce(
+    (result, level) => ({
+      ...result,
+      [level]: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getFeeMarketLevel, getFeeMarketLevel_fn).call(this, gasFeeEstimates, level)
+    }),
+    {}
+  );
+  return {
+    type: "fee-market" /* FeeMarket */,
+    ...levels
+  };
+};
+_getLegacyEstimates = new WeakSet();
+getLegacyEstimates_fn = function(gasFeeEstimates) {
+  const levels = Object.values(_chunk5C3CSQADjs.GasFeeEstimateLevel).reduce(
+    (result, level) => ({
+      ...result,
+      [level]: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLegacyLevel, getLegacyLevel_fn).call(this, gasFeeEstimates, level)
+    }),
+    {}
+  );
+  return {
+    type: "legacy" /* Legacy */,
+    ...levels
+  };
+};
+_getGasPriceEstimates = new WeakSet();
+getGasPriceEstimates_fn = function(gasFeeEstimates) {
+  return {
+    type: "eth_gasPrice" /* GasPrice */,
+    gasPrice: _chunkKNYSD4JPjs.gweiDecimalToWeiHex.call(void 0, gasFeeEstimates.gasPrice)
+  };
+};
+_getFeeMarketLevel = new WeakSet();
+getFeeMarketLevel_fn = function(gasFeeEstimates, level) {
+  const maxFeePerGas = _chunkKNYSD4JPjs.gweiDecimalToWeiHex.call(void 0, 
+    gasFeeEstimates[level].suggestedMaxFeePerGas
+  );
+  const maxPriorityFeePerGas = _chunkKNYSD4JPjs.gweiDecimalToWeiHex.call(void 0, 
+    gasFeeEstimates[level].suggestedMaxPriorityFeePerGas
+  );
+  return {
+    maxFeePerGas,
+    maxPriorityFeePerGas
+  };
+};
+_getLegacyLevel = new WeakSet();
+getLegacyLevel_fn = function(gasFeeEstimates, level) {
+  return _chunkKNYSD4JPjs.gweiDecimalToWeiHex.call(void 0, gasFeeEstimates[level]);
+};
+
+
+
+exports.DefaultGasFeeFlow = DefaultGasFeeFlow;
+//# sourceMappingURL=chunk-VJYFB7BM.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-WR5F34OW.js b/node_modules/@metamask/transaction-controller/dist/chunk-WR5F34OW.js
new file mode 100644
index 0000000..2e1ccce
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-WR5F34OW.js
@@ -0,0 +1,23 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkYVCX6Z75js = require('./chunk-YVCX6Z75.js');
+
+
+var _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');
+
+// src/gas-flows/ScrollLayer1GasFeeFlow.ts
+var SCROLL_CHAIN_IDS = [_chunkUGN7PBONjs.CHAIN_IDS.SCROLL, _chunkUGN7PBONjs.CHAIN_IDS.SCROLL_SEPOLIA];
+var SCROLL_GAS_PRICE_ORACLE_ADDRESS = "0x5300000000000000000000000000000000000002";
+var ScrollLayer1GasFeeFlow = class extends _chunkYVCX6Z75js.OracleLayer1GasFeeFlow {
+  constructor() {
+    super(SCROLL_GAS_PRICE_ORACLE_ADDRESS, true);
+  }
+  matchesTransaction(transactionMeta) {
+    return SCROLL_CHAIN_IDS.includes(transactionMeta.chainId);
+  }
+};
+
+
+
+exports.ScrollLayer1GasFeeFlow = ScrollLayer1GasFeeFlow;
+//# sourceMappingURL=chunk-WR5F34OW.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-X3KACH5P.js b/node_modules/@metamask/transaction-controller/dist/chunk-X3KACH5P.js
new file mode 100644
index 0000000..bc10751
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-X3KACH5P.js
@@ -0,0 +1,350 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkKT6UAKBBjs = require('./chunk-KT6UAKBB.js');
+
+
+
+
+var _chunkHMOSP33Fjs = require('./chunk-HMOSP33F.js');
+
+
+
+var _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+// src/utils/simulation.ts
+var _abi = require('@ethersproject/abi');
+var _controllerutils = require('@metamask/controller-utils');
+var _metamaskethabis = require('@metamask/metamask-eth-abis');
+var _utils = require('@metamask/utils');
+var SupportedToken = /* @__PURE__ */ ((SupportedToken2) => {
+  SupportedToken2["ERC20"] = "erc20";
+  SupportedToken2["ERC721"] = "erc721";
+  SupportedToken2["ERC1155"] = "erc1155";
+  SupportedToken2["ERC20_WRAPPED"] = "erc20Wrapped";
+  SupportedToken2["ERC721_LEGACY"] = "erc721Legacy";
+  return SupportedToken2;
+})(SupportedToken || {});
+var log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "simulation");
+var SUPPORTED_EVENTS = [
+  "Transfer",
+  "TransferSingle",
+  "TransferBatch",
+  "Deposit",
+  "Withdrawal"
+];
+var SUPPORTED_TOKEN_ABIS = {
+  ["erc20" /* ERC20 */]: {
+    abi: _metamaskethabis.abiERC20,
+    standard: "erc20" /* erc20 */
+  },
+  ["erc721" /* ERC721 */]: {
+    abi: _metamaskethabis.abiERC721,
+    standard: "erc721" /* erc721 */
+  },
+  ["erc1155" /* ERC1155 */]: {
+    abi: _metamaskethabis.abiERC1155,
+    standard: "erc1155" /* erc1155 */
+  },
+  ["erc20Wrapped" /* ERC20_WRAPPED */]: {
+    abi: _chunkUGN7PBONjs.ABI_SIMULATION_ERC20_WRAPPED,
+    standard: "erc20" /* erc20 */
+  },
+  ["erc721Legacy" /* ERC721_LEGACY */]: {
+    abi: _chunkUGN7PBONjs.ABI_SIMULATION_ERC721_LEGACY,
+    standard: "erc721" /* erc721 */
+  }
+};
+var REVERTED_ERRORS = ["execution reverted", "insufficient funds for gas"];
+async function getSimulationData(request) {
+  const { chainId, from, to, value, data } = request;
+  log("Getting simulation data", request);
+  try {
+    const response = await _chunkKT6UAKBBjs.simulateTransactions.call(void 0, chainId, {
+      transactions: [
+        {
+          data,
+          from,
+          maxFeePerGas: "0x0",
+          maxPriorityFeePerGas: "0x0",
+          to,
+          value
+        }
+      ],
+      withCallTrace: true,
+      withLogs: true
+    });
+    const transactionError = response.transactions?.[0]?.error;
+    if (transactionError) {
+      throw new (0, _chunkHMOSP33Fjs.SimulationError)(transactionError);
+    }
+    const nativeBalanceChange = getNativeBalanceChange(request.from, response);
+    const events = getEvents(response);
+    log("Parsed events", events);
+    const tokenBalanceChanges = await getTokenBalanceChanges(request, events);
+    return {
+      nativeBalanceChange,
+      tokenBalanceChanges
+    };
+  } catch (error) {
+    log("Failed to get simulation data", error, request);
+    let simulationError = error;
+    if (REVERTED_ERRORS.some(
+      (revertErrorMessage) => simulationError.message?.includes(revertErrorMessage)
+    )) {
+      simulationError = new (0, _chunkHMOSP33Fjs.SimulationRevertedError)();
+    }
+    const { code, message } = simulationError;
+    return {
+      tokenBalanceChanges: [],
+      error: {
+        code,
+        message
+      }
+    };
+  }
+}
+function getNativeBalanceChange(userAddress, response) {
+  const transactionResponse = response.transactions[0];
+  if (!transactionResponse) {
+    return void 0;
+  }
+  const { stateDiff } = transactionResponse;
+  const previousBalance = stateDiff?.pre?.[userAddress]?.balance;
+  const newBalance = stateDiff?.post?.[userAddress]?.balance;
+  if (!previousBalance || !newBalance) {
+    return void 0;
+  }
+  return getSimulationBalanceChange(previousBalance, newBalance);
+}
+function getEvents(response) {
+  const logs = extractLogs(
+    response.transactions[0]?.callTrace ?? {}
+  );
+  log("Extracted logs", logs);
+  const interfaces = getContractInterfaces();
+  return logs.map((currentLog) => {
+    const event = parseLog(currentLog, interfaces);
+    if (!event) {
+      log("Failed to parse log", currentLog);
+      return void 0;
+    }
+    const inputs = event.abi.find((e) => e.name === event.name)?.inputs;
+    if (!inputs) {
+      log("Failed to find inputs for event", event);
+      return void 0;
+    }
+    const args = parseEventArgs(event.args, inputs);
+    return {
+      contractAddress: currentLog.address,
+      tokenStandard: event.standard,
+      name: event.name,
+      args,
+      abi: event.abi
+    };
+  }).filter((e) => e !== void 0);
+}
+function parseEventArgs(args, abiInputs) {
+  return args.reduce((result, arg, index) => {
+    const name = abiInputs[index].name.replace("_", "");
+    const value = parseEventArgValue(arg);
+    result[name] = value;
+    return result;
+  }, {});
+}
+function parseEventArgValue(value) {
+  if (Array.isArray(value)) {
+    return value.map(parseEventArgValue);
+  }
+  return (value.toHexString?.() ?? value).toLowerCase();
+}
+async function getTokenBalanceChanges(request, events) {
+  const balanceTxs = getTokenBalanceTransactions(request, events);
+  log("Generated balance transactions", [...balanceTxs.after.values()]);
+  const transactions = [
+    ...balanceTxs.before.values(),
+    request,
+    ...balanceTxs.after.values()
+  ];
+  if (transactions.length === 1) {
+    return [];
+  }
+  const response = await _chunkKT6UAKBBjs.simulateTransactions.call(void 0, request.chainId, {
+    transactions
+  });
+  log("Balance simulation response", response);
+  if (response.transactions.length !== transactions.length) {
+    throw new (0, _chunkHMOSP33Fjs.SimulationInvalidResponseError)();
+  }
+  return [...balanceTxs.after.keys()].map((token, index) => {
+    const previousBalanceCheckSkipped = !balanceTxs.before.get(token);
+    const previousBalance = previousBalanceCheckSkipped ? "0x0" : getValueFromBalanceTransaction(
+      request.from,
+      token,
+      response.transactions[index]
+    );
+    const newBalance = getValueFromBalanceTransaction(
+      request.from,
+      token,
+      response.transactions[index + balanceTxs.before.size + 1]
+    );
+    const balanceChange = getSimulationBalanceChange(
+      previousBalance,
+      newBalance
+    );
+    if (!balanceChange) {
+      return void 0;
+    }
+    return {
+      ...token,
+      ...balanceChange
+    };
+  }).filter((change) => change !== void 0);
+}
+function getTokenBalanceTransactions(request, events) {
+  const tokenKeys = /* @__PURE__ */ new Set();
+  const before = /* @__PURE__ */ new Map();
+  const after = /* @__PURE__ */ new Map();
+  const userEvents = events.filter(
+    (event) => SUPPORTED_EVENTS.includes(event.name) && [event.args.from, event.args.to].includes(request.from)
+  );
+  log("Filtered user events", userEvents);
+  for (const event of userEvents) {
+    const tokenIds = getEventTokenIds(event);
+    log("Extracted token ids", tokenIds);
+    for (const tokenId of tokenIds) {
+      const simulationToken = {
+        address: event.contractAddress,
+        standard: event.tokenStandard,
+        id: tokenId
+      };
+      const tokenKey = JSON.stringify(simulationToken);
+      if (tokenKeys.has(tokenKey)) {
+        log(
+          "Ignoring additional event with same contract and token ID",
+          simulationToken
+        );
+        continue;
+      }
+      tokenKeys.add(tokenKey);
+      const data = getBalanceTransactionData(
+        event.tokenStandard,
+        request.from,
+        tokenId
+      );
+      const transaction = {
+        from: request.from,
+        to: event.contractAddress,
+        data
+      };
+      if (skipPriorBalanceCheck(event)) {
+        after.set(simulationToken, transaction);
+      } else {
+        before.set(simulationToken, transaction);
+        after.set(simulationToken, transaction);
+      }
+    }
+  }
+  return { before, after };
+}
+function skipPriorBalanceCheck(event) {
+  return event.name === "Transfer" && event.tokenStandard === "erc721" /* erc721 */ && parseInt(event.args.from, 16) === 0;
+}
+function getEventTokenIds(event) {
+  if (event.tokenStandard === "erc721" /* erc721 */) {
+    return [event.args.tokenId];
+  }
+  if (event.tokenStandard === "erc1155" /* erc1155 */ && event.name === "TransferSingle") {
+    return [event.args.id];
+  }
+  if (event.tokenStandard === "erc1155" /* erc1155 */ && event.name === "TransferBatch") {
+    return event.args.ids;
+  }
+  return [void 0];
+}
+function getValueFromBalanceTransaction(from, token, response) {
+  const normalizedReturn = normalizeReturnValue(response.return);
+  if (token.standard === "erc721" /* erc721 */) {
+    return normalizedReturn === from ? "0x1" : "0x0";
+  }
+  return normalizedReturn;
+}
+function getBalanceTransactionData(tokenStandard, from, tokenId) {
+  switch (tokenStandard) {
+    case "erc721" /* erc721 */:
+      return new (0, _abi.Interface)(_metamaskethabis.abiERC721).encodeFunctionData("ownerOf", [
+        tokenId
+      ]);
+    case "erc1155" /* erc1155 */:
+      return new (0, _abi.Interface)(_metamaskethabis.abiERC1155).encodeFunctionData("balanceOf", [
+        from,
+        tokenId
+      ]);
+    default:
+      return new (0, _abi.Interface)(_metamaskethabis.abiERC20).encodeFunctionData("balanceOf", [
+        from
+      ]);
+  }
+}
+function parseLog(eventLog, interfaces) {
+  const supportedTokens = Object.values(SupportedToken);
+  for (const token of supportedTokens) {
+    try {
+      const contractInterface = interfaces.get(token);
+      const { abi, standard } = SUPPORTED_TOKEN_ABIS[token];
+      return {
+        ...contractInterface.parseLog(eventLog),
+        abi,
+        standard
+      };
+    } catch (e) {
+      continue;
+    }
+  }
+  return void 0;
+}
+function extractLogs(call) {
+  const logs = call.logs ?? [];
+  const nestedCalls = call.calls ?? [];
+  return [
+    ...logs,
+    ...nestedCalls.map((nestedCall) => extractLogs(nestedCall)).flat()
+  ];
+}
+function getSimulationBalanceChange(previousBalance, newBalance) {
+  const differenceBN = _controllerutils.hexToBN.call(void 0, newBalance).sub(_controllerutils.hexToBN.call(void 0, previousBalance));
+  const isDecrease = differenceBN.isNeg();
+  const difference = _controllerutils.toHex.call(void 0, differenceBN.abs());
+  if (differenceBN.isZero()) {
+    log("Balance change is zero");
+    return void 0;
+  }
+  return {
+    previousBalance,
+    newBalance,
+    difference,
+    isDecrease
+  };
+}
+function normalizeReturnValue(value) {
+  return _controllerutils.toHex.call(void 0, _controllerutils.hexToBN.call(void 0, value));
+}
+function getContractInterfaces() {
+  const supportedTokens = Object.values(SupportedToken);
+  return new Map(
+    supportedTokens.map((tokenType) => {
+      const { abi } = SUPPORTED_TOKEN_ABIS[tokenType];
+      const contractInterface = new (0, _abi.Interface)(abi);
+      return [tokenType, contractInterface];
+    })
+  );
+}
+
+
+
+
+
+exports.SupportedToken = SupportedToken; exports.getSimulationData = getSimulationData; exports.getEvents = getEvents;
+//# sourceMappingURL=chunk-X3KACH5P.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-XGRAHX6T.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-XGRAHX6T.mjs
new file mode 100644
index 0000000..60afa58
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-XGRAHX6T.mjs
@@ -0,0 +1,53 @@
+// src/utils/history.ts
+import jsonDiffer from "fast-json-patch";
+import { cloneDeep, merge } from "lodash";
+function addInitialHistorySnapshot(transactionMeta) {
+  const snapshot = snapshotFromTransactionMeta(transactionMeta);
+  return merge({}, transactionMeta, { history: [snapshot] });
+}
+function updateTransactionHistory(transactionMeta, note) {
+  if (!transactionMeta.history) {
+    return transactionMeta;
+  }
+  const currentState = snapshotFromTransactionMeta(transactionMeta);
+  const previousState = replayHistory(transactionMeta.history);
+  const historyEntry = generateHistoryEntry(previousState, currentState, note);
+  if (historyEntry.length > 0) {
+    return merge({}, transactionMeta, {
+      history: [...transactionMeta.history, historyEntry]
+    });
+  }
+  return transactionMeta;
+}
+function generateHistoryEntry(previousState, currentState, note) {
+  const historyOperationsEntry = jsonDiffer.compare(
+    previousState,
+    currentState
+  );
+  if (historyOperationsEntry[0]) {
+    if (note) {
+      historyOperationsEntry[0].note = note;
+    }
+    historyOperationsEntry[0].timestamp = Date.now();
+  }
+  return historyOperationsEntry;
+}
+function replayHistory(transactionHistory) {
+  const shortHistory = cloneDeep(transactionHistory);
+  return shortHistory.reduce(
+    // TODO: Replace `any` with type
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    (val, entry) => jsonDiffer.applyPatch(val, entry).newDocument
+  );
+}
+function snapshotFromTransactionMeta(transactionMeta) {
+  const snapshot = { ...transactionMeta };
+  delete snapshot.history;
+  return cloneDeep(snapshot);
+}
+
+export {
+  addInitialHistorySnapshot,
+  updateTransactionHistory
+};
+//# sourceMappingURL=chunk-XGRAHX6T.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-XL3HBKDE.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-XL3HBKDE.mjs
new file mode 100644
index 0000000..742364c
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-XL3HBKDE.mjs
@@ -0,0 +1,121 @@
+import {
+  DefaultGasFeeFlow
+} from "./chunk-REOG6YD4.mjs";
+import {
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+import {
+  GasFeeEstimateLevel
+} from "./chunk-N6JXPWLY.mjs";
+import {
+  __privateAdd,
+  __privateMethod
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/gas-flows/LineaGasFeeFlow.ts
+import { ChainId, hexToBN, query, toHex } from "@metamask/controller-utils";
+import { createModuleLogger } from "@metamask/utils";
+var log = createModuleLogger(projectLogger, "linea-gas-fee-flow");
+var LINEA_CHAIN_IDS = [
+  ChainId["linea-mainnet"],
+  ChainId["linea-goerli"],
+  ChainId["linea-sepolia"]
+];
+var BASE_FEE_MULTIPLIERS = {
+  low: 1,
+  medium: 1.35,
+  high: 1.7
+};
+var PRIORITY_FEE_MULTIPLIERS = {
+  low: 1,
+  medium: 1.05,
+  high: 1.1
+};
+var _getLineaGasFees, getLineaGasFees_fn, _getLineaResponse, getLineaResponse_fn, _getValuesFromMultipliers, getValuesFromMultipliers_fn, _getMaxFees, getMaxFees_fn, _feesToString, feesToString_fn;
+var LineaGasFeeFlow = class {
+  constructor() {
+    __privateAdd(this, _getLineaGasFees);
+    __privateAdd(this, _getLineaResponse);
+    __privateAdd(this, _getValuesFromMultipliers);
+    __privateAdd(this, _getMaxFees);
+    __privateAdd(this, _feesToString);
+  }
+  matchesTransaction(transactionMeta) {
+    return LINEA_CHAIN_IDS.includes(transactionMeta.chainId);
+  }
+  async getGasFees(request) {
+    try {
+      return await __privateMethod(this, _getLineaGasFees, getLineaGasFees_fn).call(this, request);
+    } catch (error) {
+      log("Using default flow as fallback due to error", error);
+      return new DefaultGasFeeFlow().getGasFees(request);
+    }
+  }
+};
+_getLineaGasFees = new WeakSet();
+getLineaGasFees_fn = async function(request) {
+  const { ethQuery, transactionMeta } = request;
+  const lineaResponse = await __privateMethod(this, _getLineaResponse, getLineaResponse_fn).call(this, transactionMeta, ethQuery);
+  log("Received Linea response", lineaResponse);
+  const baseFees = __privateMethod(this, _getValuesFromMultipliers, getValuesFromMultipliers_fn).call(this, lineaResponse.baseFeePerGas, BASE_FEE_MULTIPLIERS);
+  log("Generated base fees", __privateMethod(this, _feesToString, feesToString_fn).call(this, baseFees));
+  const priorityFees = __privateMethod(this, _getValuesFromMultipliers, getValuesFromMultipliers_fn).call(this, lineaResponse.priorityFeePerGas, PRIORITY_FEE_MULTIPLIERS);
+  log("Generated priority fees", __privateMethod(this, _feesToString, feesToString_fn).call(this, priorityFees));
+  const maxFees = __privateMethod(this, _getMaxFees, getMaxFees_fn).call(this, baseFees, priorityFees);
+  log("Generated max fees", __privateMethod(this, _feesToString, feesToString_fn).call(this, maxFees));
+  const estimates = Object.values(GasFeeEstimateLevel).reduce(
+    (result, level) => ({
+      ...result,
+      [level]: {
+        maxFeePerGas: toHex(maxFees[level]),
+        maxPriorityFeePerGas: toHex(priorityFees[level])
+      }
+    }),
+    { type: "fee-market" /* FeeMarket */ }
+  );
+  return { estimates };
+};
+_getLineaResponse = new WeakSet();
+getLineaResponse_fn = function(transactionMeta, ethQuery) {
+  return query(ethQuery, "linea_estimateGas", [
+    {
+      from: transactionMeta.txParams.from,
+      to: transactionMeta.txParams.to,
+      value: transactionMeta.txParams.value,
+      input: transactionMeta.txParams.data,
+      // Required in request but no impact on response.
+      gasPrice: "0x100000000"
+    }
+  ]);
+};
+_getValuesFromMultipliers = new WeakSet();
+getValuesFromMultipliers_fn = function(value, multipliers) {
+  const base = hexToBN(value);
+  const low = base.muln(multipliers.low);
+  const medium = base.muln(multipliers.medium);
+  const high = base.muln(multipliers.high);
+  return {
+    low,
+    medium,
+    high
+  };
+};
+_getMaxFees = new WeakSet();
+getMaxFees_fn = function(baseFees, priorityFees) {
+  return {
+    low: baseFees.low.add(priorityFees.low),
+    medium: baseFees.medium.add(priorityFees.medium),
+    high: baseFees.high.add(priorityFees.high)
+  };
+};
+_feesToString = new WeakSet();
+feesToString_fn = function(fees) {
+  return Object.values(GasFeeEstimateLevel).map(
+    (level) => fees[level].toString(10)
+  );
+};
+
+export {
+  LineaGasFeeFlow
+};
+//# sourceMappingURL=chunk-XL3HBKDE.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-XUI43LEZ.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-XUI43LEZ.mjs
new file mode 100644
index 0000000..b796d95
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-XUI43LEZ.mjs
@@ -0,0 +1,30 @@
+var __accessCheck = (obj, member, msg) => {
+  if (!member.has(obj))
+    throw TypeError("Cannot " + msg);
+};
+var __privateGet = (obj, member, getter) => {
+  __accessCheck(obj, member, "read from private field");
+  return getter ? getter.call(obj) : member.get(obj);
+};
+var __privateAdd = (obj, member, value) => {
+  if (member.has(obj))
+    throw TypeError("Cannot add the same private member more than once");
+  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
+};
+var __privateSet = (obj, member, value, setter) => {
+  __accessCheck(obj, member, "write to private field");
+  setter ? setter.call(obj, value) : member.set(obj, value);
+  return value;
+};
+var __privateMethod = (obj, member, method) => {
+  __accessCheck(obj, member, "access private method");
+  return method;
+};
+
+export {
+  __privateGet,
+  __privateAdd,
+  __privateSet,
+  __privateMethod
+};
+//# sourceMappingURL=chunk-XUI43LEZ.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-Y7ENNK7L.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-Y7ENNK7L.mjs
new file mode 100644
index 0000000..6a07987
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-Y7ENNK7L.mjs
@@ -0,0 +1,238 @@
+import {
+  incomingTransactionsLogger
+} from "./chunk-UQQWZT6C.mjs";
+import {
+  __privateAdd,
+  __privateGet,
+  __privateMethod,
+  __privateSet
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/helpers/IncomingTransactionHelper.ts
+import { Mutex } from "async-mutex";
+import EventEmitter from "events";
+var RECENT_HISTORY_BLOCK_RANGE = 10;
+var UPDATE_CHECKS = [
+  (txMeta) => txMeta.status,
+  (txMeta) => txMeta.txParams.gasUsed
+];
+var _blockTracker, _getCurrentAccount, _getLastFetchedBlockNumbers, _getLocalTransactions, _getChainId, _isEnabled, _isRunning, _mutex, _onLatestBlock, _queryEntireHistory, _remoteTransactionSource, _transactionLimit, _updateTransactions, _sortTransactionsByTime, sortTransactionsByTime_fn, _getNewTransactions, getNewTransactions_fn, _getUpdatedTransactions, getUpdatedTransactions_fn, _isTransactionOutdated, isTransactionOutdated_fn, _getLastFetchedBlockNumberDec, getLastFetchedBlockNumberDec_fn, _getFromBlock, getFromBlock_fn, _updateLastFetchedBlockNumber, updateLastFetchedBlockNumber_fn, _getBlockNumberKey, getBlockNumberKey_fn, _canStart, canStart_fn;
+var IncomingTransactionHelper = class {
+  constructor({
+    blockTracker,
+    getCurrentAccount,
+    getLastFetchedBlockNumbers,
+    getLocalTransactions,
+    getChainId,
+    isEnabled,
+    queryEntireHistory,
+    remoteTransactionSource,
+    transactionLimit,
+    updateTransactions
+  }) {
+    __privateAdd(this, _sortTransactionsByTime);
+    __privateAdd(this, _getNewTransactions);
+    __privateAdd(this, _getUpdatedTransactions);
+    __privateAdd(this, _isTransactionOutdated);
+    __privateAdd(this, _getLastFetchedBlockNumberDec);
+    __privateAdd(this, _getFromBlock);
+    __privateAdd(this, _updateLastFetchedBlockNumber);
+    __privateAdd(this, _getBlockNumberKey);
+    __privateAdd(this, _canStart);
+    __privateAdd(this, _blockTracker, void 0);
+    __privateAdd(this, _getCurrentAccount, void 0);
+    __privateAdd(this, _getLastFetchedBlockNumbers, void 0);
+    __privateAdd(this, _getLocalTransactions, void 0);
+    __privateAdd(this, _getChainId, void 0);
+    __privateAdd(this, _isEnabled, void 0);
+    __privateAdd(this, _isRunning, void 0);
+    __privateAdd(this, _mutex, new Mutex());
+    __privateAdd(this, _onLatestBlock, void 0);
+    __privateAdd(this, _queryEntireHistory, void 0);
+    __privateAdd(this, _remoteTransactionSource, void 0);
+    __privateAdd(this, _transactionLimit, void 0);
+    __privateAdd(this, _updateTransactions, void 0);
+    this.hub = new EventEmitter();
+    __privateSet(this, _blockTracker, blockTracker);
+    __privateSet(this, _getCurrentAccount, getCurrentAccount);
+    __privateSet(this, _getLastFetchedBlockNumbers, getLastFetchedBlockNumbers);
+    __privateSet(this, _getLocalTransactions, getLocalTransactions || (() => []));
+    __privateSet(this, _getChainId, getChainId);
+    __privateSet(this, _isEnabled, isEnabled ?? (() => true));
+    __privateSet(this, _isRunning, false);
+    __privateSet(this, _queryEntireHistory, queryEntireHistory ?? true);
+    __privateSet(this, _remoteTransactionSource, remoteTransactionSource);
+    __privateSet(this, _transactionLimit, transactionLimit);
+    __privateSet(this, _updateTransactions, updateTransactions ?? false);
+    __privateSet(this, _onLatestBlock, async (blockNumberHex) => {
+      try {
+        await this.update(blockNumberHex);
+      } catch (error) {
+        console.error("Error while checking incoming transactions", error);
+      }
+    });
+  }
+  start() {
+    if (__privateGet(this, _isRunning)) {
+      return;
+    }
+    if (!__privateMethod(this, _canStart, canStart_fn).call(this)) {
+      return;
+    }
+    __privateGet(this, _blockTracker).addListener("latest", __privateGet(this, _onLatestBlock));
+    __privateSet(this, _isRunning, true);
+  }
+  stop() {
+    __privateGet(this, _blockTracker).removeListener("latest", __privateGet(this, _onLatestBlock));
+    __privateSet(this, _isRunning, false);
+  }
+  async update(latestBlockNumberHex) {
+    const releaseLock = await __privateGet(this, _mutex).acquire();
+    incomingTransactionsLogger("Checking for incoming transactions");
+    try {
+      if (!__privateMethod(this, _canStart, canStart_fn).call(this)) {
+        return;
+      }
+      const latestBlockNumber = parseInt(
+        latestBlockNumberHex || await __privateGet(this, _blockTracker).getLatestBlock(),
+        16
+      );
+      const additionalLastFetchedKeys = __privateGet(this, _remoteTransactionSource).getLastBlockVariations?.() ?? [];
+      const fromBlock = __privateMethod(this, _getFromBlock, getFromBlock_fn).call(this, latestBlockNumber);
+      const address = __privateGet(this, _getCurrentAccount).call(this);
+      const currentChainId = __privateGet(this, _getChainId).call(this);
+      let remoteTransactions = [];
+      try {
+        remoteTransactions = await __privateGet(this, _remoteTransactionSource).fetchTransactions({
+          address,
+          currentChainId,
+          fromBlock,
+          limit: __privateGet(this, _transactionLimit)
+        });
+      } catch (error) {
+        incomingTransactionsLogger("Error while fetching remote transactions", error);
+        return;
+      }
+      if (!__privateGet(this, _updateTransactions)) {
+        remoteTransactions = remoteTransactions.filter(
+          (tx) => tx.txParams.to?.toLowerCase() === address.toLowerCase()
+        );
+      }
+      const localTransactions = !__privateGet(this, _updateTransactions) ? [] : __privateGet(this, _getLocalTransactions).call(this);
+      const newTransactions = __privateMethod(this, _getNewTransactions, getNewTransactions_fn).call(this, remoteTransactions, localTransactions);
+      const updatedTransactions = __privateMethod(this, _getUpdatedTransactions, getUpdatedTransactions_fn).call(this, remoteTransactions, localTransactions);
+      if (newTransactions.length > 0 || updatedTransactions.length > 0) {
+        __privateMethod(this, _sortTransactionsByTime, sortTransactionsByTime_fn).call(this, newTransactions);
+        __privateMethod(this, _sortTransactionsByTime, sortTransactionsByTime_fn).call(this, updatedTransactions);
+        incomingTransactionsLogger("Found incoming transactions", {
+          new: newTransactions,
+          updated: updatedTransactions
+        });
+        this.hub.emit("transactions", {
+          added: newTransactions,
+          updated: updatedTransactions
+        });
+      }
+      __privateMethod(this, _updateLastFetchedBlockNumber, updateLastFetchedBlockNumber_fn).call(this, remoteTransactions, additionalLastFetchedKeys);
+    } finally {
+      releaseLock();
+    }
+  }
+};
+_blockTracker = new WeakMap();
+_getCurrentAccount = new WeakMap();
+_getLastFetchedBlockNumbers = new WeakMap();
+_getLocalTransactions = new WeakMap();
+_getChainId = new WeakMap();
+_isEnabled = new WeakMap();
+_isRunning = new WeakMap();
+_mutex = new WeakMap();
+_onLatestBlock = new WeakMap();
+_queryEntireHistory = new WeakMap();
+_remoteTransactionSource = new WeakMap();
+_transactionLimit = new WeakMap();
+_updateTransactions = new WeakMap();
+_sortTransactionsByTime = new WeakSet();
+sortTransactionsByTime_fn = function(transactions) {
+  transactions.sort((a, b) => a.time < b.time ? -1 : 1);
+};
+_getNewTransactions = new WeakSet();
+getNewTransactions_fn = function(remoteTxs, localTxs) {
+  return remoteTxs.filter(
+    (tx) => !localTxs.some(({ hash }) => hash === tx.hash)
+  );
+};
+_getUpdatedTransactions = new WeakSet();
+getUpdatedTransactions_fn = function(remoteTxs, localTxs) {
+  return remoteTxs.filter(
+    (remoteTx) => localTxs.some(
+      (localTx) => remoteTx.hash === localTx.hash && __privateMethod(this, _isTransactionOutdated, isTransactionOutdated_fn).call(this, remoteTx, localTx)
+    )
+  );
+};
+_isTransactionOutdated = new WeakSet();
+isTransactionOutdated_fn = function(remoteTx, localTx) {
+  return UPDATE_CHECKS.some(
+    (getValue) => getValue(remoteTx) !== getValue(localTx)
+  );
+};
+_getLastFetchedBlockNumberDec = new WeakSet();
+getLastFetchedBlockNumberDec_fn = function() {
+  const additionalLastFetchedKeys = __privateGet(this, _remoteTransactionSource).getLastBlockVariations?.() ?? [];
+  const lastFetchedKey = __privateMethod(this, _getBlockNumberKey, getBlockNumberKey_fn).call(this, additionalLastFetchedKeys);
+  const lastFetchedBlockNumbers = __privateGet(this, _getLastFetchedBlockNumbers).call(this);
+  return lastFetchedBlockNumbers[lastFetchedKey];
+};
+_getFromBlock = new WeakSet();
+getFromBlock_fn = function(latestBlockNumber) {
+  const lastFetchedBlockNumber = __privateMethod(this, _getLastFetchedBlockNumberDec, getLastFetchedBlockNumberDec_fn).call(this);
+  if (lastFetchedBlockNumber) {
+    return lastFetchedBlockNumber + 1;
+  }
+  return __privateGet(this, _queryEntireHistory) ? void 0 : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;
+};
+_updateLastFetchedBlockNumber = new WeakSet();
+updateLastFetchedBlockNumber_fn = function(remoteTxs, additionalKeys) {
+  let lastFetchedBlockNumber = -1;
+  for (const tx of remoteTxs) {
+    const currentBlockNumberValue = tx.blockNumber ? parseInt(tx.blockNumber, 10) : -1;
+    lastFetchedBlockNumber = Math.max(
+      lastFetchedBlockNumber,
+      currentBlockNumberValue
+    );
+  }
+  if (lastFetchedBlockNumber === -1) {
+    return;
+  }
+  const lastFetchedKey = __privateMethod(this, _getBlockNumberKey, getBlockNumberKey_fn).call(this, additionalKeys);
+  const lastFetchedBlockNumbers = __privateGet(this, _getLastFetchedBlockNumbers).call(this);
+  const previousValue = lastFetchedBlockNumbers[lastFetchedKey];
+  if (previousValue >= lastFetchedBlockNumber) {
+    return;
+  }
+  this.hub.emit("updatedLastFetchedBlockNumbers", {
+    lastFetchedBlockNumbers: {
+      ...lastFetchedBlockNumbers,
+      [lastFetchedKey]: lastFetchedBlockNumber
+    },
+    blockNumber: lastFetchedBlockNumber
+  });
+};
+_getBlockNumberKey = new WeakSet();
+getBlockNumberKey_fn = function(additionalKeys) {
+  const currentChainId = __privateGet(this, _getChainId).call(this);
+  const currentAccount = __privateGet(this, _getCurrentAccount).call(this)?.toLowerCase();
+  return [currentChainId, currentAccount, ...additionalKeys].join("#");
+};
+_canStart = new WeakSet();
+canStart_fn = function() {
+  const isEnabled = __privateGet(this, _isEnabled).call(this);
+  const currentChainId = __privateGet(this, _getChainId).call(this);
+  const isSupportedNetwork = __privateGet(this, _remoteTransactionSource).isSupportedNetwork(currentChainId);
+  return isEnabled && isSupportedNetwork;
+};
+
+export {
+  IncomingTransactionHelper
+};
+//# sourceMappingURL=chunk-Y7ENNK7L.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-YVCX6Z75.js b/node_modules/@metamask/transaction-controller/dist/chunk-YVCX6Z75.js
new file mode 100644
index 0000000..452d20b
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-YVCX6Z75.js
@@ -0,0 +1,102 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/gas-flows/OracleLayer1GasFeeFlow.ts
+var _common = require('@ethereumjs/common');
+var _tx = require('@ethereumjs/tx');
+var _contracts = require('@ethersproject/contracts');
+var _providers = require('@ethersproject/providers');
+var _utils = require('@metamask/utils');
+var _lodash = require('lodash');
+var log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "oracle-layer1-gas-fee-flow");
+var DUMMY_KEY = "abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789";
+var GAS_PRICE_ORACLE_ABI = [
+  {
+    inputs: [{ internalType: "bytes", name: "_data", type: "bytes" }],
+    name: "getL1Fee",
+    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
+    stateMutability: "view",
+    type: "function"
+  }
+];
+var _oracleAddress, _signTransaction, _getOracleLayer1GasFee, getOracleLayer1GasFee_fn, _buildUnserializedTransaction, buildUnserializedTransaction_fn, _buildTransactionParams, buildTransactionParams_fn, _buildTransactionCommon, buildTransactionCommon_fn;
+var OracleLayer1GasFeeFlow = class {
+  constructor(oracleAddress, signTransaction) {
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getOracleLayer1GasFee);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _buildUnserializedTransaction);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _buildTransactionParams);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _buildTransactionCommon);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _oracleAddress, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _signTransaction, void 0);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _oracleAddress, oracleAddress);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _signTransaction, signTransaction ?? false);
+  }
+  async getLayer1Fee(request) {
+    try {
+      return await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getOracleLayer1GasFee, getOracleLayer1GasFee_fn).call(this, request);
+    } catch (error) {
+      log("Failed to get oracle layer 1 gas fee", error);
+      throw new Error(`Failed to get oracle layer 1 gas fee`);
+    }
+  }
+};
+_oracleAddress = new WeakMap();
+_signTransaction = new WeakMap();
+_getOracleLayer1GasFee = new WeakSet();
+getOracleLayer1GasFee_fn = async function(request) {
+  const { provider, transactionMeta } = request;
+  const contract = new (0, _contracts.Contract)(
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _oracleAddress),
+    GAS_PRICE_ORACLE_ABI,
+    // Network controller provider type is incompatible with ethers provider
+    new (0, _providers.Web3Provider)(provider)
+  );
+  const serializedTransaction = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _buildUnserializedTransaction, buildUnserializedTransaction_fn).call(this, transactionMeta, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _signTransaction)).serialize();
+  const result = await contract.getL1Fee(serializedTransaction);
+  if (result === void 0) {
+    throw new Error("No value returned from oracle contract");
+  }
+  return {
+    layer1Fee: result.toHexString()
+  };
+};
+_buildUnserializedTransaction = new WeakSet();
+buildUnserializedTransaction_fn = function(transactionMeta, sign) {
+  const txParams = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _buildTransactionParams, buildTransactionParams_fn).call(this, transactionMeta);
+  const common = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _buildTransactionCommon, buildTransactionCommon_fn).call(this, transactionMeta);
+  let unserializedTransaction = _tx.TransactionFactory.fromTxData(txParams, {
+    common
+  });
+  if (sign) {
+    const keyBuffer = Buffer.from(DUMMY_KEY, "hex");
+    unserializedTransaction = unserializedTransaction.sign(keyBuffer);
+  }
+  return unserializedTransaction;
+};
+_buildTransactionParams = new WeakSet();
+buildTransactionParams_fn = function(transactionMeta) {
+  return {
+    ..._lodash.omit.call(void 0, transactionMeta.txParams, "gas"),
+    gasLimit: transactionMeta.txParams.gas
+  };
+};
+_buildTransactionCommon = new WeakSet();
+buildTransactionCommon_fn = function(transactionMeta) {
+  const chainId = Number(transactionMeta.chainId);
+  return _common.Common.custom({
+    chainId,
+    defaultHardfork: _common.Hardfork.London
+  });
+};
+
+
+
+exports.OracleLayer1GasFeeFlow = OracleLayer1GasFeeFlow;
+//# sourceMappingURL=chunk-YVCX6Z75.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-Z4BLTVTB.js b/node_modules/@metamask/transaction-controller/dist/chunk-Z4BLTVTB.js
new file mode 100644
index 0000000..0ecaf70
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-Z4BLTVTB.js
@@ -0,0 +1,30 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});var __accessCheck = (obj, member, msg) => {
+  if (!member.has(obj))
+    throw TypeError("Cannot " + msg);
+};
+var __privateGet = (obj, member, getter) => {
+  __accessCheck(obj, member, "read from private field");
+  return getter ? getter.call(obj) : member.get(obj);
+};
+var __privateAdd = (obj, member, value) => {
+  if (member.has(obj))
+    throw TypeError("Cannot add the same private member more than once");
+  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
+};
+var __privateSet = (obj, member, value, setter) => {
+  __accessCheck(obj, member, "write to private field");
+  setter ? setter.call(obj, value) : member.set(obj, value);
+  return value;
+};
+var __privateMethod = (obj, member, method) => {
+  __accessCheck(obj, member, "access private method");
+  return method;
+};
+
+
+
+
+
+
+exports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;
+//# sourceMappingURL=chunk-Z4BLTVTB.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-Z4GV3YQQ.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-Z4GV3YQQ.mjs
new file mode 100644
index 0000000..75e076c
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-Z4GV3YQQ.mjs
@@ -0,0 +1,23 @@
+import {
+  OracleLayer1GasFeeFlow
+} from "./chunk-FG74Z3F5.mjs";
+import {
+  CHAIN_IDS
+} from "./chunk-O6ZZVIFH.mjs";
+
+// src/gas-flows/ScrollLayer1GasFeeFlow.ts
+var SCROLL_CHAIN_IDS = [CHAIN_IDS.SCROLL, CHAIN_IDS.SCROLL_SEPOLIA];
+var SCROLL_GAS_PRICE_ORACLE_ADDRESS = "0x5300000000000000000000000000000000000002";
+var ScrollLayer1GasFeeFlow = class extends OracleLayer1GasFeeFlow {
+  constructor() {
+    super(SCROLL_GAS_PRICE_ORACLE_ADDRESS, true);
+  }
+  matchesTransaction(transactionMeta) {
+    return SCROLL_CHAIN_IDS.includes(transactionMeta.chainId);
+  }
+};
+
+export {
+  ScrollLayer1GasFeeFlow
+};
+//# sourceMappingURL=chunk-Z4GV3YQQ.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-ZGUNOEUQ.mjs b/node_modules/@metamask/transaction-controller/dist/chunk-ZGUNOEUQ.mjs
new file mode 100644
index 0000000..30d1522
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-ZGUNOEUQ.mjs
@@ -0,0 +1,211 @@
+import {
+  validateIfTransactionUnapproved
+} from "./chunk-J56A7UCK.mjs";
+import {
+  CHAIN_IDS
+} from "./chunk-O6ZZVIFH.mjs";
+import {
+  createModuleLogger,
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+
+// src/utils/swaps.ts
+import { query } from "@metamask/controller-utils";
+import { merge, pickBy } from "lodash";
+var log = createModuleLogger(projectLogger, "swaps");
+var UPDATE_POST_TX_BALANCE_TIMEOUT = 5e3;
+var UPDATE_POST_TX_BALANCE_ATTEMPTS = 6;
+var SWAPS_TESTNET_CHAIN_ID = "0x539";
+var DEFAULT_TOKEN_ADDRESS = "0x0000000000000000000000000000000000000000";
+var ETH_SWAPS_TOKEN_OBJECT = {
+  name: "Ether",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var BNB_SWAPS_TOKEN_OBJECT = {
+  name: "Binance Coin",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var MATIC_SWAPS_TOKEN_OBJECT = {
+  name: "Matic",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var AVAX_SWAPS_TOKEN_OBJECT = {
+  name: "Avalanche",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var TEST_ETH_SWAPS_TOKEN_OBJECT = {
+  name: "Test Ether",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var GOERLI_SWAPS_TOKEN_OBJECT = {
+  name: "Ether",
+  address: DEFAULT_TOKEN_ADDRESS,
+  decimals: 18
+};
+var ARBITRUM_SWAPS_TOKEN_OBJECT = {
+  ...ETH_SWAPS_TOKEN_OBJECT
+};
+var OPTIMISM_SWAPS_TOKEN_OBJECT = {
+  ...ETH_SWAPS_TOKEN_OBJECT
+};
+var ZKSYNC_ERA_SWAPS_TOKEN_OBJECT = {
+  ...ETH_SWAPS_TOKEN_OBJECT
+};
+var SWAPS_CHAINID_DEFAULT_TOKEN_MAP = {
+  [CHAIN_IDS.MAINNET]: ETH_SWAPS_TOKEN_OBJECT,
+  [SWAPS_TESTNET_CHAIN_ID]: TEST_ETH_SWAPS_TOKEN_OBJECT,
+  [CHAIN_IDS.BSC]: BNB_SWAPS_TOKEN_OBJECT,
+  [CHAIN_IDS.POLYGON]: MATIC_SWAPS_TOKEN_OBJECT,
+  [CHAIN_IDS.GOERLI]: GOERLI_SWAPS_TOKEN_OBJECT,
+  [CHAIN_IDS.AVALANCHE]: AVAX_SWAPS_TOKEN_OBJECT,
+  [CHAIN_IDS.OPTIMISM]: OPTIMISM_SWAPS_TOKEN_OBJECT,
+  [CHAIN_IDS.ARBITRUM]: ARBITRUM_SWAPS_TOKEN_OBJECT,
+  [CHAIN_IDS.ZKSYNC_ERA]: ZKSYNC_ERA_SWAPS_TOKEN_OBJECT
+};
+var SWAP_TRANSACTION_TYPES = [
+  "swap" /* swap */,
+  "swapApproval" /* swapApproval */
+];
+function updateSwapsTransaction(transactionMeta, transactionType, swaps, {
+  isSwapsDisabled,
+  cancelTransaction,
+  messenger
+}) {
+  if (isSwapsDisabled || !SWAP_TRANSACTION_TYPES.includes(transactionType)) {
+    return transactionMeta;
+  }
+  if (transactionType === "swap" /* swap */ && swaps?.hasApproveTx === false && transactionMeta.simulationFails) {
+    cancelTransaction(transactionMeta.id);
+    throw new Error("Simulation failed");
+  }
+  const swapsMeta = swaps?.meta;
+  if (!swapsMeta) {
+    return transactionMeta;
+  }
+  let updatedTransactionMeta = transactionMeta;
+  if (transactionType === "swapApproval" /* swapApproval */) {
+    updatedTransactionMeta = updateSwapApprovalTransaction(
+      transactionMeta,
+      swapsMeta
+    );
+    messenger.publish("TransactionController:transactionNewSwapApproval", {
+      transactionMeta: updatedTransactionMeta
+    });
+  }
+  if (transactionType === "swap" /* swap */) {
+    updatedTransactionMeta = updateSwapTransaction(transactionMeta, swapsMeta);
+    messenger.publish("TransactionController:transactionNewSwap", {
+      transactionMeta: updatedTransactionMeta
+    });
+  }
+  return updatedTransactionMeta;
+}
+async function updatePostTransactionBalance(transactionMeta, {
+  ethQuery,
+  getTransaction,
+  updateTransaction
+}) {
+  log("Updating post transaction balance", transactionMeta.id);
+  const transactionId = transactionMeta.id;
+  let latestTransactionMeta;
+  let approvalTransactionMeta;
+  for (let i = 0; i < UPDATE_POST_TX_BALANCE_ATTEMPTS; i++) {
+    log("Querying balance", { attempt: i });
+    const postTransactionBalance = await query(ethQuery, "getBalance", [
+      transactionMeta.txParams.from
+    ]);
+    latestTransactionMeta = {
+      ...getTransaction(transactionId) ?? {}
+    };
+    approvalTransactionMeta = latestTransactionMeta.approvalTxId ? getTransaction(latestTransactionMeta.approvalTxId) : void 0;
+    latestTransactionMeta.postTxBalance = postTransactionBalance.toString(16);
+    const isDefaultTokenAddress = isSwapsDefaultTokenAddress(
+      transactionMeta.destinationTokenAddress,
+      transactionMeta.chainId
+    );
+    if (!isDefaultTokenAddress || transactionMeta.preTxBalance !== latestTransactionMeta.postTxBalance) {
+      log("Finishing post balance update", {
+        isDefaultTokenAddress,
+        preTxBalance: transactionMeta.preTxBalance,
+        postTxBalance: latestTransactionMeta.postTxBalance
+      });
+      break;
+    }
+    log("Waiting for balance to update", {
+      delay: UPDATE_POST_TX_BALANCE_TIMEOUT
+    });
+    await sleep(UPDATE_POST_TX_BALANCE_TIMEOUT);
+  }
+  updateTransaction(
+    latestTransactionMeta,
+    "TransactionController#updatePostTransactionBalance - Add post transaction balance"
+  );
+  log("Completed post balance update", latestTransactionMeta?.postTxBalance);
+  return {
+    updatedTransactionMeta: latestTransactionMeta,
+    approvalTransactionMeta
+  };
+}
+function updateSwapTransaction(transactionMeta, {
+  sourceTokenSymbol,
+  destinationTokenSymbol,
+  type,
+  destinationTokenDecimals,
+  destinationTokenAddress,
+  swapMetaData,
+  swapTokenValue,
+  estimatedBaseFee,
+  approvalTxId
+}) {
+  validateIfTransactionUnapproved(transactionMeta, "updateSwapTransaction");
+  let swapTransaction = {
+    sourceTokenSymbol,
+    destinationTokenSymbol,
+    type,
+    destinationTokenDecimals,
+    destinationTokenAddress,
+    swapMetaData,
+    swapTokenValue,
+    estimatedBaseFee,
+    approvalTxId
+  };
+  swapTransaction = pickBy(swapTransaction);
+  return merge({}, transactionMeta, swapTransaction);
+}
+function updateSwapApprovalTransaction(transactionMeta, { type, sourceTokenSymbol }) {
+  validateIfTransactionUnapproved(
+    transactionMeta,
+    "updateSwapApprovalTransaction"
+  );
+  let swapApprovalTransaction = { type, sourceTokenSymbol };
+  swapApprovalTransaction = pickBy({
+    type,
+    sourceTokenSymbol
+  });
+  return merge({}, transactionMeta, swapApprovalTransaction);
+}
+function isSwapsDefaultTokenAddress(address, chainId) {
+  if (!address || !chainId) {
+    return false;
+  }
+  return address === SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId]?.address;
+}
+function sleep(ms) {
+  return new Promise((resolve) => setTimeout(resolve, ms));
+}
+
+export {
+  UPDATE_POST_TX_BALANCE_TIMEOUT,
+  UPDATE_POST_TX_BALANCE_ATTEMPTS,
+  DEFAULT_TOKEN_ADDRESS,
+  SWAPS_CHAINID_DEFAULT_TOKEN_MAP,
+  SWAP_TRANSACTION_TYPES,
+  updateSwapsTransaction,
+  updatePostTransactionBalance
+};
+//# sourceMappingURL=chunk-ZGUNOEUQ.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/chunk-ZNZEJDOE.js b/node_modules/@metamask/transaction-controller/dist/chunk-ZNZEJDOE.js
new file mode 100644
index 0000000..6b141ca
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/chunk-ZNZEJDOE.js
@@ -0,0 +1,50 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+
+// src/utils/nonce.ts
+var _controllerutils = require('@metamask/controller-utils');
+var log = _chunkS6VGOPUYjs.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, "nonce");
+async function getNextNonce(txMeta, getNonceLock) {
+  const {
+    customNonceValue,
+    txParams: { from, nonce: existingNonce }
+  } = txMeta;
+  const customNonce = customNonceValue ? _controllerutils.toHex.call(void 0, customNonceValue) : void 0;
+  if (customNonce) {
+    log("Using custom nonce", customNonce);
+    return [customNonce, void 0];
+  }
+  if (existingNonce) {
+    log("Using existing nonce", existingNonce);
+    return [existingNonce, void 0];
+  }
+  const nonceLock = await getNonceLock(from);
+  const nonce = _controllerutils.toHex.call(void 0, nonceLock.nextNonce);
+  const releaseLock = nonceLock.releaseLock.bind(nonceLock);
+  log("Using nonce from nonce tracker", nonce, nonceLock.nonceDetails);
+  return [nonce, releaseLock];
+}
+function getAndFormatTransactionsForNonceTracker(currentChainId, fromAddress, transactionStatus, transactions) {
+  return transactions.filter(
+    ({ chainId, isTransfer, isUserOperation, status, txParams: { from } }) => !isTransfer && !isUserOperation && chainId === currentChainId && status === transactionStatus && from.toLowerCase() === fromAddress.toLowerCase()
+  ).map(({ status, txParams: { from, gas, value, nonce } }) => {
+    return {
+      status,
+      history: [{}],
+      txParams: {
+        from: from ?? "",
+        gas: gas ?? "",
+        value: value ?? "",
+        nonce: nonce ?? ""
+      }
+    };
+  });
+}
+
+
+
+
+exports.getNextNonce = getNextNonce; exports.getAndFormatTransactionsForNonceTracker = getAndFormatTransactionsForNonceTracker;
+//# sourceMappingURL=chunk-ZNZEJDOE.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/constants.d.ts.map b/node_modules/@metamask/transaction-controller/dist/constants.d.ts.map
deleted file mode 100644
index 7fe8678..0000000
--- a/node_modules/@metamask/transaction-controller/dist/constants.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"constants.d.ts","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAE1C,eAAO,MAAM,SAAS;;;;;;;;;;;;;;;;;;;;CAoBZ,CAAC;AAEX,eAAO,MAAM,wBAAwB,iBAAiB,CAAC;AACvD,eAAO,MAAM,kCAAkC,QAAQ,CAAC;AAExD,eAAO,MAAM,4BAA4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6ExC,CAAC;AAEF,eAAO,MAAM,sBAAsB,mBAGlC,CAAC;AAIF,eAAO,MAAM,kCAAkC,mBAM9C,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/constants.js b/node_modules/@metamask/transaction-controller/dist/constants.js
index 3a2ead9..8d9305c 100644
--- a/node_modules/@metamask/transaction-controller/dist/constants.js
+++ b/node_modules/@metamask/transaction-controller/dist/constants.js
@@ -1,119 +1,20 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.VALID_UNAPPROVED_TRANSACTION_TYPES = exports.SWAP_TRANSACTION_TYPES = exports.ETHERSCAN_SUPPORTED_NETWORKS = exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = exports.DEFAULT_ETHERSCAN_DOMAIN = exports.CHAIN_IDS = void 0;
-const types_1 = require("./types");
-exports.CHAIN_IDS = {
-    MAINNET: '0x1',
-    GOERLI: '0x5',
-    BSC: '0x38',
-    BSC_TESTNET: '0x61',
-    OPTIMISM: '0xa',
-    OPTIMISM_TESTNET: '0x1a4',
-    POLYGON: '0x89',
-    POLYGON_TESTNET: '0x13881',
-    AVALANCHE: '0xa86a',
-    AVALANCHE_TESTNET: '0xa869',
-    FANTOM: '0xfa',
-    FANTOM_TESTNET: '0xfa2',
-    SEPOLIA: '0xaa36a7',
-    LINEA_GOERLI: '0xe704',
-    LINEA_MAINNET: '0xe708',
-    MOONBEAM: '0x504',
-    MOONBEAM_TESTNET: '0x507',
-    MOONRIVER: '0x505',
-    GNOSIS: '0x64',
-};
-exports.DEFAULT_ETHERSCAN_DOMAIN = 'etherscan.io';
-exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = 'api';
-exports.ETHERSCAN_SUPPORTED_NETWORKS = {
-    [exports.CHAIN_IDS.GOERLI]: {
-        domain: exports.DEFAULT_ETHERSCAN_DOMAIN,
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`,
-    },
-    [exports.CHAIN_IDS.MAINNET]: {
-        domain: exports.DEFAULT_ETHERSCAN_DOMAIN,
-        subdomain: exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
-    },
-    [exports.CHAIN_IDS.SEPOLIA]: {
-        domain: exports.DEFAULT_ETHERSCAN_DOMAIN,
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`,
-    },
-    [exports.CHAIN_IDS.LINEA_GOERLI]: {
-        domain: 'lineascan.build',
-        subdomain: 'goerli',
-    },
-    [exports.CHAIN_IDS.LINEA_MAINNET]: {
-        domain: 'lineascan.build',
-        subdomain: exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
-    },
-    [exports.CHAIN_IDS.BSC]: {
-        domain: 'bscscan.com',
-        subdomain: exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
-    },
-    [exports.CHAIN_IDS.BSC_TESTNET]: {
-        domain: 'bscscan.com',
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,
-    },
-    [exports.CHAIN_IDS.OPTIMISM]: {
-        domain: exports.DEFAULT_ETHERSCAN_DOMAIN,
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-optimistic`,
-    },
-    [exports.CHAIN_IDS.OPTIMISM_TESTNET]: {
-        domain: exports.DEFAULT_ETHERSCAN_DOMAIN,
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli-optimistic`,
-    },
-    [exports.CHAIN_IDS.POLYGON]: {
-        domain: 'polygonscan.com',
-        subdomain: exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
-    },
-    [exports.CHAIN_IDS.POLYGON_TESTNET]: {
-        domain: 'polygonscan.com',
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-mumbai`,
-    },
-    [exports.CHAIN_IDS.AVALANCHE]: {
-        domain: 'snowtrace.io',
-        subdomain: exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
-    },
-    [exports.CHAIN_IDS.AVALANCHE_TESTNET]: {
-        domain: 'snowtrace.io',
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,
-    },
-    [exports.CHAIN_IDS.FANTOM]: {
-        domain: 'ftmscan.com',
-        subdomain: exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
-    },
-    [exports.CHAIN_IDS.FANTOM_TESTNET]: {
-        domain: 'ftmscan.com',
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,
-    },
-    [exports.CHAIN_IDS.MOONBEAM]: {
-        domain: 'moonscan.io',
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbeam`,
-    },
-    [exports.CHAIN_IDS.MOONBEAM_TESTNET]: {
-        domain: 'moonscan.io',
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbase`,
-    },
-    [exports.CHAIN_IDS.MOONRIVER]: {
-        domain: 'moonscan.io',
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonriver`,
-    },
-    [exports.CHAIN_IDS.GNOSIS]: {
-        domain: 'gnosisscan.io',
-        subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-gnosis`,
-    },
-};
-exports.SWAP_TRANSACTION_TYPES = [
-    types_1.TransactionType.swap,
-    types_1.TransactionType.swapApproval,
-];
-// Only certain types of transactions should be allowed to be specified when
-// adding a new unapproved transaction.
-exports.VALID_UNAPPROVED_TRANSACTION_TYPES = [
-    ...exports.SWAP_TRANSACTION_TYPES,
-    types_1.TransactionType.simpleSend,
-    types_1.TransactionType.tokenMethodTransfer,
-    types_1.TransactionType.tokenMethodTransferFrom,
-    types_1.TransactionType.contractInteraction,
-];
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+
+
+
+
+var _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');
+require('./chunk-Z4BLTVTB.js');
+
+
+
+
+
+
+
+
+exports.ABI_SIMULATION_ERC20_WRAPPED = _chunkUGN7PBONjs.ABI_SIMULATION_ERC20_WRAPPED; exports.ABI_SIMULATION_ERC721_LEGACY = _chunkUGN7PBONjs.ABI_SIMULATION_ERC721_LEGACY; exports.CHAIN_IDS = _chunkUGN7PBONjs.CHAIN_IDS; exports.DEFAULT_ETHERSCAN_DOMAIN = _chunkUGN7PBONjs.DEFAULT_ETHERSCAN_DOMAIN; exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = _chunkUGN7PBONjs.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX; exports.ETHERSCAN_SUPPORTED_NETWORKS = _chunkUGN7PBONjs.ETHERSCAN_SUPPORTED_NETWORKS; exports.GAS_BUFFER_CHAIN_OVERRIDES = _chunkUGN7PBONjs.GAS_BUFFER_CHAIN_OVERRIDES;
 //# sourceMappingURL=constants.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/constants.js.map b/node_modules/@metamask/transaction-controller/dist/constants.js.map
deleted file mode 100644
index 8e7d444..0000000
--- a/node_modules/@metamask/transaction-controller/dist/constants.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"constants.js","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { TransactionType } from './types';\n\nexport const CHAIN_IDS = {\n  MAINNET: '0x1',\n  GOERLI: '0x5',\n  BSC: '0x38',\n  BSC_TESTNET: '0x61',\n  OPTIMISM: '0xa',\n  OPTIMISM_TESTNET: '0x1a4',\n  POLYGON: '0x89',\n  POLYGON_TESTNET: '0x13881',\n  AVALANCHE: '0xa86a',\n  AVALANCHE_TESTNET: '0xa869',\n  FANTOM: '0xfa',\n  FANTOM_TESTNET: '0xfa2',\n  SEPOLIA: '0xaa36a7',\n  LINEA_GOERLI: '0xe704',\n  LINEA_MAINNET: '0xe708',\n  MOONBEAM: '0x504',\n  MOONBEAM_TESTNET: '0x507',\n  MOONRIVER: '0x505',\n  GNOSIS: '0x64',\n} as const;\n\nexport const DEFAULT_ETHERSCAN_DOMAIN = 'etherscan.io';\nexport const DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = 'api';\n\nexport const ETHERSCAN_SUPPORTED_NETWORKS = {\n  [CHAIN_IDS.GOERLI]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`,\n  },\n  [CHAIN_IDS.MAINNET]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.SEPOLIA]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`,\n  },\n  [CHAIN_IDS.LINEA_GOERLI]: {\n    domain: 'lineascan.build',\n    subdomain: 'goerli',\n  },\n  [CHAIN_IDS.LINEA_MAINNET]: {\n    domain: 'lineascan.build',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.BSC]: {\n    domain: 'bscscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.BSC_TESTNET]: {\n    domain: 'bscscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.OPTIMISM]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-optimistic`,\n  },\n  [CHAIN_IDS.OPTIMISM_TESTNET]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli-optimistic`,\n  },\n  [CHAIN_IDS.POLYGON]: {\n    domain: 'polygonscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.POLYGON_TESTNET]: {\n    domain: 'polygonscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-mumbai`,\n  },\n  [CHAIN_IDS.AVALANCHE]: {\n    domain: 'snowtrace.io',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.AVALANCHE_TESTNET]: {\n    domain: 'snowtrace.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.FANTOM]: {\n    domain: 'ftmscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.FANTOM_TESTNET]: {\n    domain: 'ftmscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.MOONBEAM]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbeam`,\n  },\n  [CHAIN_IDS.MOONBEAM_TESTNET]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbase`,\n  },\n  [CHAIN_IDS.MOONRIVER]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonriver`,\n  },\n  [CHAIN_IDS.GNOSIS]: {\n    domain: 'gnosisscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-gnosis`,\n  },\n};\n\nexport const SWAP_TRANSACTION_TYPES = [\n  TransactionType.swap,\n  TransactionType.swapApproval,\n];\n\n// Only certain types of transactions should be allowed to be specified when\n// adding a new unapproved transaction.\nexport const VALID_UNAPPROVED_TRANSACTION_TYPES = [\n  ...SWAP_TRANSACTION_TYPES,\n  TransactionType.simpleSend,\n  TransactionType.tokenMethodTransfer,\n  TransactionType.tokenMethodTransferFrom,\n  TransactionType.contractInteraction,\n];\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/constants.mjs b/node_modules/@metamask/transaction-controller/dist/constants.mjs
new file mode 100644
index 0000000..86fcdaa
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/constants.mjs
@@ -0,0 +1,20 @@
+import {
+  ABI_SIMULATION_ERC20_WRAPPED,
+  ABI_SIMULATION_ERC721_LEGACY,
+  CHAIN_IDS,
+  DEFAULT_ETHERSCAN_DOMAIN,
+  DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
+  ETHERSCAN_SUPPORTED_NETWORKS,
+  GAS_BUFFER_CHAIN_OVERRIDES
+} from "./chunk-O6ZZVIFH.mjs";
+import "./chunk-XUI43LEZ.mjs";
+export {
+  ABI_SIMULATION_ERC20_WRAPPED,
+  ABI_SIMULATION_ERC721_LEGACY,
+  CHAIN_IDS,
+  DEFAULT_ETHERSCAN_DOMAIN,
+  DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,
+  ETHERSCAN_SUPPORTED_NETWORKS,
+  GAS_BUFFER_CHAIN_OVERRIDES
+};
+//# sourceMappingURL=constants.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/errors.js b/node_modules/@metamask/transaction-controller/dist/errors.js
new file mode 100644
index 0000000..dafa187
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/errors.js
@@ -0,0 +1,15 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+
+var _chunkHMOSP33Fjs = require('./chunk-HMOSP33F.js');
+require('./chunk-5C3CSQAD.js');
+require('./chunk-Z4BLTVTB.js');
+
+
+
+
+
+exports.SimulationChainNotSupportedError = _chunkHMOSP33Fjs.SimulationChainNotSupportedError; exports.SimulationError = _chunkHMOSP33Fjs.SimulationError; exports.SimulationInvalidResponseError = _chunkHMOSP33Fjs.SimulationInvalidResponseError; exports.SimulationRevertedError = _chunkHMOSP33Fjs.SimulationRevertedError;
+//# sourceMappingURL=errors.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/errors.mjs b/node_modules/@metamask/transaction-controller/dist/errors.mjs
new file mode 100644
index 0000000..7b4b0d6
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/errors.mjs
@@ -0,0 +1,15 @@
+import {
+  SimulationChainNotSupportedError,
+  SimulationError,
+  SimulationInvalidResponseError,
+  SimulationRevertedError
+} from "./chunk-HQSNKCXI.mjs";
+import "./chunk-N6JXPWLY.mjs";
+import "./chunk-XUI43LEZ.mjs";
+export {
+  SimulationChainNotSupportedError,
+  SimulationError,
+  SimulationInvalidResponseError,
+  SimulationRevertedError
+};
+//# sourceMappingURL=errors.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts.map b/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts.map
deleted file mode 100644
index 089ab8f..0000000
--- a/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"etherscan.d.ts","sourceRoot":"","sources":["../src/etherscan.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAK3C,MAAM,WAAW,4BAA4B;IAC3C,WAAW,EAAE,MAAM,CAAC;IACpB,SAAS,EAAE,MAAM,CAAC;IAClB,aAAa,EAAE,MAAM,CAAC;IACtB,eAAe,EAAE,MAAM,CAAC;IACxB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,MAAM,CAAC;IAChB,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,EAAE,EAAE,MAAM,CAAC;IACX,gBAAgB,EAAE,MAAM,CAAC;IACzB,KAAK,EAAE,MAAM,CAAC;CACf;AAED,MAAM,WAAW,wBAAyB,SAAQ,4BAA4B;IAC5E,YAAY,EAAE,MAAM,CAAC;IACrB,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,MAAM,CAAC;IAChB,QAAQ,EAAE,MAAM,CAAC;IACjB,gBAAgB,EAAE,MAAM,CAAC;CAC1B;AAED,MAAM,WAAW,6BACf,SAAQ,4BAA4B;IACpC,YAAY,EAAE,MAAM,CAAC;IACrB,SAAS,EAAE,MAAM,CAAC;IAClB,WAAW,EAAE,MAAM,CAAC;CACrB;AAED,MAAM,WAAW,4BAA4B,CAC3C,CAAC,SAAS,4BAA4B;IAEtC,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC;IAClB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;CACtB;AAED,MAAM,WAAW,2BAA2B;IAC1C,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED;;;;;;;;;GASG;AACH,wBAAsB,0BAA0B,CAAC,EAC/C,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACN,EAAE,2BAA2B,GAAG,OAAO,CACtC,4BAA4B,CAAC,wBAAwB,CAAC,CACvD,CAOA;AAED;;;;;;;;;GASG;AACH,wBAAsB,+BAA+B,CAAC,EACpD,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACN,EAAE,2BAA2B,GAAG,OAAO,CACtC,4BAA4B,CAAC,6BAA6B,CAAC,CAC5D,CAOA"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/etherscan.js b/node_modules/@metamask/transaction-controller/dist/etherscan.js
deleted file mode 100644
index 081076a..0000000
--- a/node_modules/@metamask/transaction-controller/dist/etherscan.js
+++ /dev/null
@@ -1,109 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.fetchEtherscanTokenTransactions = exports.fetchEtherscanTransactions = void 0;
-const controller_utils_1 = require("@metamask/controller-utils");
-const constants_1 = require("./constants");
-const logger_1 = require("./logger");
-/**
- * Retrieves transaction data from Etherscan.
- *
- * @param request - Configuration required to fetch transactions.
- * @param request.address - Address to retrieve transactions for.
- * @param request.chainId - Current chain ID used to determine subdomain and domain.
- * @param request.fromBlock - Block number to start fetching transactions from.
- * @param request.limit - Number of transactions to retrieve.
- * @returns An Etherscan response object containing the request status and an array of token transaction data.
- */
-function fetchEtherscanTransactions({ address, chainId, fromBlock, limit, }) {
-    return __awaiter(this, void 0, void 0, function* () {
-        return yield fetchTransactions('txlist', {
-            address,
-            chainId,
-            fromBlock,
-            limit,
-        });
-    });
-}
-exports.fetchEtherscanTransactions = fetchEtherscanTransactions;
-/**
- * Retrieves token transaction data from Etherscan.
- *
- * @param request - Configuration required to fetch token transactions.
- * @param request.address - Address to retrieve token transactions for.
- * @param request.chainId - Current chain ID used to determine subdomain and domain.
- * @param request.fromBlock - Block number to start fetching token transactions from.
- * @param request.limit - Number of token transactions to retrieve.
- * @returns An Etherscan response object containing the request status and an array of token transaction data.
- */
-function fetchEtherscanTokenTransactions({ address, chainId, fromBlock, limit, }) {
-    return __awaiter(this, void 0, void 0, function* () {
-        return yield fetchTransactions('tokentx', {
-            address,
-            chainId,
-            fromBlock,
-            limit,
-        });
-    });
-}
-exports.fetchEtherscanTokenTransactions = fetchEtherscanTokenTransactions;
-/**
- * Retrieves transaction data from Etherscan from a specific endpoint.
- *
- * @param action - The Etherscan endpoint to use.
- * @param options - Options bag.
- * @param options.address - Address to retrieve transactions for.
- * @param options.chainId - Current chain ID used to determine subdomain and domain.
- * @param options.fromBlock - Block number to start fetching transactions from.
- * @param options.limit - Number of transactions to retrieve.
- * @returns An object containing the request status and an array of transaction data.
- */
-function fetchTransactions(action, { address, chainId, fromBlock, limit, }) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const urlParams = {
-            module: 'account',
-            address,
-            startBlock: fromBlock === null || fromBlock === void 0 ? void 0 : fromBlock.toString(),
-            offset: limit === null || limit === void 0 ? void 0 : limit.toString(),
-            sort: 'desc',
-        };
-        const etherscanTxUrl = getEtherscanApiUrl(chainId, Object.assign(Object.assign({}, urlParams), { action }));
-        (0, logger_1.incomingTransactionsLogger)('Sending Etherscan request', etherscanTxUrl);
-        const response = (yield (0, controller_utils_1.handleFetch)(etherscanTxUrl));
-        return response;
-    });
-}
-/**
- * Return a URL that can be used to fetch data from Etherscan.
- *
- * @param chainId - Current chain ID used to determine subdomain and domain.
- * @param urlParams - The parameters used to construct the URL.
- * @returns URL to access Etherscan data.
- */
-function getEtherscanApiUrl(chainId, urlParams) {
-    const networkInfo = constants_1.ETHERSCAN_SUPPORTED_NETWORKS[chainId];
-    if (!networkInfo) {
-        throw new Error(`Etherscan does not support chain with ID: ${chainId}`);
-    }
-    const apiUrl = `https://${networkInfo.subdomain}.${networkInfo.domain}`;
-    let url = `${apiUrl}/api?`;
-    // eslint-disable-next-line guard-for-in
-    for (const paramKey in urlParams) {
-        const value = urlParams[paramKey];
-        if (!value) {
-            continue;
-        }
-        url += `${paramKey}=${value}&`;
-    }
-    url += 'tag=latest&page=1';
-    return url;
-}
-//# sourceMappingURL=etherscan.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/etherscan.js.map b/node_modules/@metamask/transaction-controller/dist/etherscan.js.map
deleted file mode 100644
index 070ac33..0000000
--- a/node_modules/@metamask/transaction-controller/dist/etherscan.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"etherscan.js","sourceRoot":"","sources":["../src/etherscan.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iEAAyD;AAGzD,2CAA2D;AAC3D,qCAA6D;AAkD7D;;;;;;;;;GASG;AACH,SAAsB,0BAA0B,CAAC,EAC/C,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACuB;;QAG5B,OAAO,MAAM,iBAAiB,CAAC,QAAQ,EAAE;YACvC,OAAO;YACP,OAAO;YACP,SAAS;YACT,KAAK;SACN,CAAC,CAAC;IACL,CAAC;CAAA;AAdD,gEAcC;AAED;;;;;;;;;GASG;AACH,SAAsB,+BAA+B,CAAC,EACpD,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACuB;;QAG5B,OAAO,MAAM,iBAAiB,CAAC,SAAS,EAAE;YACxC,OAAO;YACP,OAAO;YACP,SAAS;YACT,KAAK;SACN,CAAC,CAAC;IACL,CAAC;CAAA;AAdD,0EAcC;AAED;;;;;;;;;;GAUG;AACH,SAAe,iBAAiB,CAC9B,MAAc,EACd,EACE,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GAMN;;QAED,MAAM,SAAS,GAAG;YAChB,MAAM,EAAE,SAAS;YACjB,OAAO;YACP,UAAU,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,EAAE;YACjC,MAAM,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,EAAE;YACzB,IAAI,EAAE,MAAM;SACb,CAAC;QAEF,MAAM,cAAc,GAAG,kBAAkB,CAAC,OAAO,kCAC5C,SAAS,KACZ,MAAM,IACN,CAAC;QAEH,IAAA,mCAAG,EAAC,2BAA2B,EAAE,cAAc,CAAC,CAAC;QAEjD,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAA,8BAAW,EACjC,cAAc,CACf,CAAoC,CAAC;QAEtC,OAAO,QAAQ,CAAC;IAClB,CAAC;CAAA;AAED;;;;;;GAMG;AACH,SAAS,kBAAkB,CACzB,OAAY,EACZ,SAA6C;IAI7C,MAAM,WAAW,GAAG,wCAA4B,CAAC,OAA2B,CAAC,CAAC;IAE9E,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,6CAA6C,OAAO,EAAE,CAAC,CAAC;KACzE;IAED,MAAM,MAAM,GAAG,WAAW,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;IACxE,IAAI,GAAG,GAAG,GAAG,MAAM,OAAO,CAAC;IAE3B,wCAAwC;IACxC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;QAElC,IAAI,CAAC,KAAK,EAAE;YACV,SAAS;SACV;QAED,GAAG,IAAI,GAAG,QAAQ,IAAI,KAAK,GAAG,CAAC;KAChC;IAED,GAAG,IAAI,mBAAmB,CAAC;IAE3B,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import { handleFetch } from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\n\nimport { ETHERSCAN_SUPPORTED_NETWORKS } from './constants';\nimport { incomingTransactionsLogger as log } from './logger';\n\nexport interface EtherscanTransactionMetaBase {\n  blockNumber: string;\n  blockHash: string;\n  confirmations: string;\n  contractAddress: string;\n  cumulativeGasUsed: string;\n  from: string;\n  gas: string;\n  gasPrice: string;\n  gasUsed: string;\n  hash: string;\n  nonce: string;\n  timeStamp: string;\n  to: string;\n  transactionIndex: string;\n  value: string;\n}\n\nexport interface EtherscanTransactionMeta extends EtherscanTransactionMetaBase {\n  functionName: string;\n  input: string;\n  isError: string;\n  methodId: string;\n  txreceipt_status: string;\n}\n\nexport interface EtherscanTokenTransactionMeta\n  extends EtherscanTransactionMetaBase {\n  tokenDecimal: string;\n  tokenName: string;\n  tokenSymbol: string;\n}\n\nexport interface EtherscanTransactionResponse<\n  T extends EtherscanTransactionMetaBase,\n> {\n  status: '0' | '1';\n  message?: string;\n  result: string | T[];\n}\n\nexport interface EtherscanTransactionRequest {\n  address: string;\n  chainId: Hex;\n  fromBlock?: number;\n  limit?: number;\n}\n\n/**\n * Retrieves transaction data from Etherscan.\n *\n * @param request - Configuration required to fetch transactions.\n * @param request.address - Address to retrieve transactions for.\n * @param request.chainId - Current chain ID used to determine subdomain and domain.\n * @param request.fromBlock - Block number to start fetching transactions from.\n * @param request.limit - Number of transactions to retrieve.\n * @returns An Etherscan response object containing the request status and an array of token transaction data.\n */\nexport async function fetchEtherscanTransactions({\n  address,\n  chainId,\n  fromBlock,\n  limit,\n}: EtherscanTransactionRequest): Promise<\n  EtherscanTransactionResponse<EtherscanTransactionMeta>\n> {\n  return await fetchTransactions('txlist', {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  });\n}\n\n/**\n * Retrieves token transaction data from Etherscan.\n *\n * @param request - Configuration required to fetch token transactions.\n * @param request.address - Address to retrieve token transactions for.\n * @param request.chainId - Current chain ID used to determine subdomain and domain.\n * @param request.fromBlock - Block number to start fetching token transactions from.\n * @param request.limit - Number of token transactions to retrieve.\n * @returns An Etherscan response object containing the request status and an array of token transaction data.\n */\nexport async function fetchEtherscanTokenTransactions({\n  address,\n  chainId,\n  fromBlock,\n  limit,\n}: EtherscanTransactionRequest): Promise<\n  EtherscanTransactionResponse<EtherscanTokenTransactionMeta>\n> {\n  return await fetchTransactions('tokentx', {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  });\n}\n\n/**\n * Retrieves transaction data from Etherscan from a specific endpoint.\n *\n * @param action - The Etherscan endpoint to use.\n * @param options - Options bag.\n * @param options.address - Address to retrieve transactions for.\n * @param options.chainId - Current chain ID used to determine subdomain and domain.\n * @param options.fromBlock - Block number to start fetching transactions from.\n * @param options.limit - Number of transactions to retrieve.\n * @returns An object containing the request status and an array of transaction data.\n */\nasync function fetchTransactions<T extends EtherscanTransactionMetaBase>(\n  action: string,\n  {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  }: {\n    address: string;\n    chainId: Hex;\n    fromBlock?: number;\n    limit?: number;\n  },\n): Promise<EtherscanTransactionResponse<T>> {\n  const urlParams = {\n    module: 'account',\n    address,\n    startBlock: fromBlock?.toString(),\n    offset: limit?.toString(),\n    sort: 'desc',\n  };\n\n  const etherscanTxUrl = getEtherscanApiUrl(chainId, {\n    ...urlParams,\n    action,\n  });\n\n  log('Sending Etherscan request', etherscanTxUrl);\n\n  const response = (await handleFetch(\n    etherscanTxUrl,\n  )) as EtherscanTransactionResponse<T>;\n\n  return response;\n}\n\n/**\n * Return a URL that can be used to fetch data from Etherscan.\n *\n * @param chainId - Current chain ID used to determine subdomain and domain.\n * @param urlParams - The parameters used to construct the URL.\n * @returns URL to access Etherscan data.\n */\nfunction getEtherscanApiUrl(\n  chainId: Hex,\n  urlParams: Record<string, string | undefined>,\n): string {\n  type SupportedChainId = keyof typeof ETHERSCAN_SUPPORTED_NETWORKS;\n\n  const networkInfo = ETHERSCAN_SUPPORTED_NETWORKS[chainId as SupportedChainId];\n\n  if (!networkInfo) {\n    throw new Error(`Etherscan does not support chain with ID: ${chainId}`);\n  }\n\n  const apiUrl = `https://${networkInfo.subdomain}.${networkInfo.domain}`;\n  let url = `${apiUrl}/api?`;\n\n  // eslint-disable-next-line guard-for-in\n  for (const paramKey in urlParams) {\n    const value = urlParams[paramKey];\n\n    if (!value) {\n      continue;\n    }\n\n    url += `${paramKey}=${value}&`;\n  }\n\n  url += 'tag=latest&page=1';\n\n  return url;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/external-transactions.d.ts.map b/node_modules/@metamask/transaction-controller/dist/external-transactions.d.ts.map
deleted file mode 100644
index 4a72b53..0000000
--- a/node_modules/@metamask/transaction-controller/dist/external-transactions.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"external-transactions.d.ts","sourceRoot":"","sources":["../src/external-transactions.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAE/C;;;;;;GAMG;AACH,wBAAgB,oCAAoC,CAClD,eAAe,CAAC,EAAE,eAAe,EACjC,YAAY,CAAC,EAAE,eAAe,EAAE,EAChC,UAAU,CAAC,EAAE,eAAe,EAAE,QAoC/B"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/external-transactions.js b/node_modules/@metamask/transaction-controller/dist/external-transactions.js
deleted file mode 100644
index 3182206..0000000
--- a/node_modules/@metamask/transaction-controller/dist/external-transactions.js
+++ /dev/null
@@ -1,36 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.validateConfirmedExternalTransaction = void 0;
-// These utility functions are exclusively used by `confirmExternalTransaction` method in controller
-const rpc_errors_1 = require("@metamask/rpc-errors");
-const types_1 = require("./types");
-/**
- * Validates the external provided transaction meta.
- *
- * @param transactionMeta - The transaction meta to validate.
- * @param confirmedTxs - The confirmed transactions in controller state.
- * @param pendingTxs - The submitted transactions in controller state.
- */
-function validateConfirmedExternalTransaction(transactionMeta, confirmedTxs, pendingTxs) {
-    if (!transactionMeta || !transactionMeta.txParams) {
-        throw rpc_errors_1.rpcErrors.invalidParams('"transactionMeta" or "transactionMeta.txParams" is missing');
-    }
-    if (transactionMeta.status !== types_1.TransactionStatus.confirmed) {
-        throw rpc_errors_1.rpcErrors.invalidParams('External transaction status should be "confirmed"');
-    }
-    const externalTxNonce = transactionMeta.txParams.nonce;
-    if (pendingTxs && pendingTxs.length > 0) {
-        const foundPendingTxByNonce = pendingTxs.find((tx) => { var _a; return ((_a = tx.txParams) === null || _a === void 0 ? void 0 : _a.nonce) === externalTxNonce; });
-        if (foundPendingTxByNonce) {
-            throw rpc_errors_1.rpcErrors.invalidParams('External transaction nonce should not be in pending txs');
-        }
-    }
-    if (confirmedTxs && confirmedTxs.length > 0) {
-        const foundConfirmedTxByNonce = confirmedTxs.find((tx) => { var _a; return ((_a = tx.txParams) === null || _a === void 0 ? void 0 : _a.nonce) === externalTxNonce; });
-        if (foundConfirmedTxByNonce) {
-            throw rpc_errors_1.rpcErrors.invalidParams('External transaction nonce should not be in confirmed txs');
-        }
-    }
-}
-exports.validateConfirmedExternalTransaction = validateConfirmedExternalTransaction;
-//# sourceMappingURL=external-transactions.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/external-transactions.js.map b/node_modules/@metamask/transaction-controller/dist/external-transactions.js.map
deleted file mode 100644
index d92c9fc..0000000
--- a/node_modules/@metamask/transaction-controller/dist/external-transactions.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"external-transactions.js","sourceRoot":"","sources":["../src/external-transactions.ts"],"names":[],"mappings":";;;AAAA,oGAAoG;AACpG,qDAAiD;AAEjD,mCAA4C;AAG5C;;;;;;GAMG;AACH,SAAgB,oCAAoC,CAClD,eAAiC,EACjC,YAAgC,EAChC,UAA8B;IAE9B,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;QACjD,MAAM,sBAAS,CAAC,aAAa,CAC3B,4DAA4D,CAC7D,CAAC;KACH;IAED,IAAI,eAAe,CAAC,MAAM,KAAK,yBAAiB,CAAC,SAAS,EAAE;QAC1D,MAAM,sBAAS,CAAC,aAAa,CAC3B,mDAAmD,CACpD,CAAC;KACH;IAED,MAAM,eAAe,GAAG,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;IACvD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QACvC,MAAM,qBAAqB,GAAG,UAAU,CAAC,IAAI,CAC3C,CAAC,EAAE,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,EAAE,CAAC,QAAQ,0CAAE,KAAK,MAAK,eAAe,CAAA,EAAA,CAC/C,CAAC;QACF,IAAI,qBAAqB,EAAE;YACzB,MAAM,sBAAS,CAAC,aAAa,CAC3B,yDAAyD,CAC1D,CAAC;SACH;KACF;IAED,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3C,MAAM,uBAAuB,GAAG,YAAY,CAAC,IAAI,CAC/C,CAAC,EAAE,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,EAAE,CAAC,QAAQ,0CAAE,KAAK,MAAK,eAAe,CAAA,EAAA,CAC/C,CAAC;QACF,IAAI,uBAAuB,EAAE;YAC3B,MAAM,sBAAS,CAAC,aAAa,CAC3B,2DAA2D,CAC5D,CAAC;SACH;KACF;AACH,CAAC;AAvCD,oFAuCC","sourcesContent":["// These utility functions are exclusively used by `confirmExternalTransaction` method in controller\nimport { rpcErrors } from '@metamask/rpc-errors';\n\nimport { TransactionStatus } from './types';\nimport type { TransactionMeta } from './types';\n\n/**\n * Validates the external provided transaction meta.\n *\n * @param transactionMeta - The transaction meta to validate.\n * @param confirmedTxs - The confirmed transactions in controller state.\n * @param pendingTxs - The submitted transactions in controller state.\n */\nexport function validateConfirmedExternalTransaction(\n  transactionMeta?: TransactionMeta,\n  confirmedTxs?: TransactionMeta[],\n  pendingTxs?: TransactionMeta[],\n) {\n  if (!transactionMeta || !transactionMeta.txParams) {\n    throw rpcErrors.invalidParams(\n      '\"transactionMeta\" or \"transactionMeta.txParams\" is missing',\n    );\n  }\n\n  if (transactionMeta.status !== TransactionStatus.confirmed) {\n    throw rpcErrors.invalidParams(\n      'External transaction status should be \"confirmed\"',\n    );\n  }\n\n  const externalTxNonce = transactionMeta.txParams.nonce;\n  if (pendingTxs && pendingTxs.length > 0) {\n    const foundPendingTxByNonce = pendingTxs.find(\n      (tx) => tx.txParams?.nonce === externalTxNonce,\n    );\n    if (foundPendingTxByNonce) {\n      throw rpcErrors.invalidParams(\n        'External transaction nonce should not be in pending txs',\n      );\n    }\n  }\n\n  if (confirmedTxs && confirmedTxs.length > 0) {\n    const foundConfirmedTxByNonce = confirmedTxs.find(\n      (tx) => tx.txParams?.nonce === externalTxNonce,\n    );\n    if (foundConfirmedTxByNonce) {\n      throw rpcErrors.invalidParams(\n        'External transaction nonce should not be in confirmed txs',\n      );\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.js b/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.js
new file mode 100644
index 0000000..cf46c07
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.js
@@ -0,0 +1,15 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkVJYFB7BMjs = require('../chunk-VJYFB7BM.js');
+require('../chunk-KNYSD4JP.js');
+require('../chunk-C2LNDHP4.js');
+require('../chunk-UGFBA4GV.js');
+require('../chunk-EMDU4XLM.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.DefaultGasFeeFlow = _chunkVJYFB7BMjs.DefaultGasFeeFlow;
+//# sourceMappingURL=DefaultGasFeeFlow.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.js.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.mjs b/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.mjs
new file mode 100644
index 0000000..794f976
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.mjs
@@ -0,0 +1,15 @@
+import {
+  DefaultGasFeeFlow
+} from "../chunk-REOG6YD4.mjs";
+import "../chunk-4M7FHI4S.mjs";
+import "../chunk-ZGUNOEUQ.mjs";
+import "../chunk-J56A7UCK.mjs";
+import "../chunk-AGJNOOBN.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  DefaultGasFeeFlow
+};
+//# sourceMappingURL=DefaultGasFeeFlow.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.mjs.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/DefaultGasFeeFlow.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.js b/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.js
new file mode 100644
index 0000000..55abd10
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.js
@@ -0,0 +1,16 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkDUFOYA4Djs = require('../chunk-DUFOYA4D.js');
+require('../chunk-VJYFB7BM.js');
+require('../chunk-KNYSD4JP.js');
+require('../chunk-C2LNDHP4.js');
+require('../chunk-UGFBA4GV.js');
+require('../chunk-EMDU4XLM.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.LineaGasFeeFlow = _chunkDUFOYA4Djs.LineaGasFeeFlow;
+//# sourceMappingURL=LineaGasFeeFlow.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.js.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.mjs b/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.mjs
new file mode 100644
index 0000000..778cf09
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.mjs
@@ -0,0 +1,16 @@
+import {
+  LineaGasFeeFlow
+} from "../chunk-XL3HBKDE.mjs";
+import "../chunk-REOG6YD4.mjs";
+import "../chunk-4M7FHI4S.mjs";
+import "../chunk-ZGUNOEUQ.mjs";
+import "../chunk-J56A7UCK.mjs";
+import "../chunk-AGJNOOBN.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  LineaGasFeeFlow
+};
+//# sourceMappingURL=LineaGasFeeFlow.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.mjs.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/LineaGasFeeFlow.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.js b/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.js
new file mode 100644
index 0000000..2bff468
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.js
@@ -0,0 +1,11 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkNYKRCWBGjs = require('../chunk-NYKRCWBG.js');
+require('../chunk-YVCX6Z75.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.OptimismLayer1GasFeeFlow = _chunkNYKRCWBGjs.OptimismLayer1GasFeeFlow;
+//# sourceMappingURL=OptimismLayer1GasFeeFlow.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.js.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.mjs b/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.mjs
new file mode 100644
index 0000000..cea6da1
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.mjs
@@ -0,0 +1,11 @@
+import {
+  OptimismLayer1GasFeeFlow
+} from "../chunk-VEVVBHP3.mjs";
+import "../chunk-FG74Z3F5.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  OptimismLayer1GasFeeFlow
+};
+//# sourceMappingURL=OptimismLayer1GasFeeFlow.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.mjs.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/OptimismLayer1GasFeeFlow.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.js b/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.js
new file mode 100644
index 0000000..fa37213
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.js
@@ -0,0 +1,9 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkYVCX6Z75js = require('../chunk-YVCX6Z75.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.OracleLayer1GasFeeFlow = _chunkYVCX6Z75js.OracleLayer1GasFeeFlow;
+//# sourceMappingURL=OracleLayer1GasFeeFlow.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.js.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.mjs b/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.mjs
new file mode 100644
index 0000000..4ac8d32
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.mjs
@@ -0,0 +1,9 @@
+import {
+  OracleLayer1GasFeeFlow
+} from "../chunk-FG74Z3F5.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  OracleLayer1GasFeeFlow
+};
+//# sourceMappingURL=OracleLayer1GasFeeFlow.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.mjs.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/OracleLayer1GasFeeFlow.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.js b/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.js
new file mode 100644
index 0000000..db074b4
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.js
@@ -0,0 +1,11 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkWR5F34OWjs = require('../chunk-WR5F34OW.js');
+require('../chunk-YVCX6Z75.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.ScrollLayer1GasFeeFlow = _chunkWR5F34OWjs.ScrollLayer1GasFeeFlow;
+//# sourceMappingURL=ScrollLayer1GasFeeFlow.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.js.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.mjs b/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.mjs
new file mode 100644
index 0000000..47ba411
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.mjs
@@ -0,0 +1,11 @@
+import {
+  ScrollLayer1GasFeeFlow
+} from "../chunk-Z4GV3YQQ.mjs";
+import "../chunk-FG74Z3F5.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  ScrollLayer1GasFeeFlow
+};
+//# sourceMappingURL=ScrollLayer1GasFeeFlow.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.mjs.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/ScrollLayer1GasFeeFlow.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.js b/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.js
new file mode 100644
index 0000000..8eb8a42
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.js
@@ -0,0 +1,9 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkTJMQEH57js = require('../chunk-TJMQEH57.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.TestGasFeeFlow = _chunkTJMQEH57js.TestGasFeeFlow;
+//# sourceMappingURL=TestGasFeeFlow.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.js.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.mjs b/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.mjs
new file mode 100644
index 0000000..0e470fe
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.mjs
@@ -0,0 +1,9 @@
+import {
+  TestGasFeeFlow
+} from "../chunk-FMRLPVFZ.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  TestGasFeeFlow
+};
+//# sourceMappingURL=TestGasFeeFlow.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.mjs.map b/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/gas-flows/TestGasFeeFlow.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.js b/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.js
new file mode 100644
index 0000000..325902d
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.js
@@ -0,0 +1,12 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkEQT25RSPjs = require('../chunk-EQT25RSP.js');
+require('../chunk-FDUCRHYT.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.EtherscanRemoteTransactionSource = _chunkEQT25RSPjs.EtherscanRemoteTransactionSource;
+//# sourceMappingURL=EtherscanRemoteTransactionSource.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.js.map b/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.mjs b/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.mjs
new file mode 100644
index 0000000..591a317
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.mjs
@@ -0,0 +1,12 @@
+import {
+  EtherscanRemoteTransactionSource
+} from "../chunk-CPMTUMMZ.mjs";
+import "../chunk-QZLPYOGC.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  EtherscanRemoteTransactionSource
+};
+//# sourceMappingURL=EtherscanRemoteTransactionSource.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.mjs.map b/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/EtherscanRemoteTransactionSource.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.js b/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.js
new file mode 100644
index 0000000..6c33605
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.js
@@ -0,0 +1,12 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunk7DJO6UZAjs = require('../chunk-7DJO6UZA.js');
+require('../chunk-2XKEAKQG.js');
+require('../chunk-EMDU4XLM.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.GasFeePoller = _chunk7DJO6UZAjs.GasFeePoller;
+//# sourceMappingURL=GasFeePoller.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.js.map b/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.mjs b/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.mjs
new file mode 100644
index 0000000..69587c7
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.mjs
@@ -0,0 +1,12 @@
+import {
+  GasFeePoller
+} from "../chunk-SL3GHHKG.mjs";
+import "../chunk-NOHEXQ7Y.mjs";
+import "../chunk-AGJNOOBN.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  GasFeePoller
+};
+//# sourceMappingURL=GasFeePoller.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.mjs.map b/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/GasFeePoller.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.js b/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.js
new file mode 100644
index 0000000..9e5179e
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.js
@@ -0,0 +1,9 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkDTDTOMTBjs = require('../chunk-DTDTOMTB.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.IncomingTransactionHelper = _chunkDTDTOMTBjs.IncomingTransactionHelper;
+//# sourceMappingURL=IncomingTransactionHelper.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.js.map b/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.mjs b/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.mjs
new file mode 100644
index 0000000..737aac9
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.mjs
@@ -0,0 +1,9 @@
+import {
+  IncomingTransactionHelper
+} from "../chunk-Y7ENNK7L.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  IncomingTransactionHelper
+};
+//# sourceMappingURL=IncomingTransactionHelper.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.mjs.map b/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/IncomingTransactionHelper.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.js b/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.js
new file mode 100644
index 0000000..d09eae2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.js
@@ -0,0 +1,13 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunk5XQ2KRYLjs = require('../chunk-5XQ2KRYL.js');
+require('../chunk-EQT25RSP.js');
+require('../chunk-FDUCRHYT.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.MultichainTrackingHelper = _chunk5XQ2KRYLjs.MultichainTrackingHelper;
+//# sourceMappingURL=MultichainTrackingHelper.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.js.map b/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.mjs b/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.mjs
new file mode 100644
index 0000000..82bf395
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.mjs
@@ -0,0 +1,13 @@
+import {
+  MultichainTrackingHelper
+} from "../chunk-F6E3TTR3.mjs";
+import "../chunk-CPMTUMMZ.mjs";
+import "../chunk-QZLPYOGC.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  MultichainTrackingHelper
+};
+//# sourceMappingURL=MultichainTrackingHelper.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.mjs.map b/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/MultichainTrackingHelper.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.js b/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.js
new file mode 100644
index 0000000..2b62fe2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.js
@@ -0,0 +1,10 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunk5KMU2IATjs = require('../chunk-5KMU2IAT.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.PendingTransactionTracker = _chunk5KMU2IATjs.PendingTransactionTracker;
+//# sourceMappingURL=PendingTransactionTracker.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.js.map b/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.mjs b/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.mjs
new file mode 100644
index 0000000..05b05a7
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.mjs
@@ -0,0 +1,10 @@
+import {
+  PendingTransactionTracker
+} from "../chunk-5YES3V2R.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  PendingTransactionTracker
+};
+//# sourceMappingURL=PendingTransactionTracker.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.mjs.map b/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/helpers/PendingTransactionTracker.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/history.d.ts b/node_modules/@metamask/transaction-controller/dist/history.d.ts
deleted file mode 100644
index 2d29210..0000000
--- a/node_modules/@metamask/transaction-controller/dist/history.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import type { TransactionMeta } from './types';
-/**
- * Add initial history snapshot to the provided transactionMeta history.
- *
- * @param transactionMeta - TransactionMeta to add initial history snapshot to.
- */
-export declare function addInitialHistorySnapshot(transactionMeta: TransactionMeta): void;
-/**
- * Compares and adds history entry to the provided transactionMeta history.
- *
- * @param transactionMeta - TransactionMeta to add history entry to.
- * @param note - Note to add to history entry.
- */
-export declare function updateTransactionHistory(transactionMeta: TransactionMeta, note: string): void;
-//# sourceMappingURL=history.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/history.d.ts.map b/node_modules/@metamask/transaction-controller/dist/history.d.ts.map
deleted file mode 100644
index 7a423a8..0000000
--- a/node_modules/@metamask/transaction-controller/dist/history.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"history.d.ts","sourceRoot":"","sources":["../src/history.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAGV,eAAe,EAChB,MAAM,SAAS,CAAC;AAEjB;;;;GAIG;AACH,wBAAgB,yBAAyB,CAAC,eAAe,EAAE,eAAe,QAGzE;AAED;;;;;GAKG;AACH,wBAAgB,wBAAwB,CACtC,eAAe,EAAE,eAAe,EAChC,IAAI,EAAE,MAAM,GACX,IAAI,CAWN"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/history.js b/node_modules/@metamask/transaction-controller/dist/history.js
deleted file mode 100644
index cdac505..0000000
--- a/node_modules/@metamask/transaction-controller/dist/history.js
+++ /dev/null
@@ -1,75 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.updateTransactionHistory = exports.addInitialHistorySnapshot = void 0;
-const fast_json_patch_1 = __importDefault(require("fast-json-patch"));
-const lodash_1 = require("lodash");
-/**
- * Add initial history snapshot to the provided transactionMeta history.
- *
- * @param transactionMeta - TransactionMeta to add initial history snapshot to.
- */
-function addInitialHistorySnapshot(transactionMeta) {
-    const snapshot = snapshotFromTransactionMeta(transactionMeta);
-    transactionMeta.history = [snapshot];
-}
-exports.addInitialHistorySnapshot = addInitialHistorySnapshot;
-/**
- * Compares and adds history entry to the provided transactionMeta history.
- *
- * @param transactionMeta - TransactionMeta to add history entry to.
- * @param note - Note to add to history entry.
- */
-function updateTransactionHistory(transactionMeta, note) {
-    var _a;
-    const currentState = snapshotFromTransactionMeta(transactionMeta);
-    const previousState = replayHistory(transactionMeta.history);
-    const historyEntry = generateHistoryEntry(previousState, currentState, note);
-    if (historyEntry.length) {
-        (_a = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.history) === null || _a === void 0 ? void 0 : _a.push(historyEntry);
-    }
-}
-exports.updateTransactionHistory = updateTransactionHistory;
-/**
- * Generates a history entry from the previous and new transaction metadata.
- *
- * @param previousState - The previous transaction metadata.
- * @param currentState - The new transaction metadata.
- * @param note - A note for the transaction metada update.
- * @returns An array of history operation.
- */
-function generateHistoryEntry(previousState, currentState, note) {
-    const historyOperationsEntry = fast_json_patch_1.default.compare(previousState, currentState);
-    // Add a note to the first operation, since it breaks if we append it to the entry
-    if (historyOperationsEntry[0]) {
-        if (note) {
-            historyOperationsEntry[0].note = note;
-        }
-        historyOperationsEntry[0].timestamp = Date.now();
-    }
-    return historyOperationsEntry;
-}
-/**
- * Recovers previous transactionMeta from passed history array.
- *
- * @param transactionHistory - The transaction metadata to replay.
- * @returns The transaction metadata.
- */
-function replayHistory(transactionHistory) {
-    const shortHistory = (0, lodash_1.cloneDeep)(transactionHistory);
-    return shortHistory.reduce((val, entry) => fast_json_patch_1.default.applyPatch(val, entry).newDocument);
-}
-/**
- * Clone the transaction meta data without the history property.
- *
- * @param transactionMeta - The transaction metadata to snapshot.
- * @returns A deep clone of transaction metadata without history property.
- */
-function snapshotFromTransactionMeta(transactionMeta) {
-    const snapshot = Object.assign({}, transactionMeta);
-    delete snapshot.history;
-    return (0, lodash_1.cloneDeep)(snapshot);
-}
-//# sourceMappingURL=history.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/history.js.map b/node_modules/@metamask/transaction-controller/dist/history.js.map
deleted file mode 100644
index 09322be..0000000
--- a/node_modules/@metamask/transaction-controller/dist/history.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"history.js","sourceRoot":"","sources":["../src/history.ts"],"names":[],"mappings":";;;;;;AAAA,sEAAyC;AACzC,mCAAmC;AAQnC;;;;GAIG;AACH,SAAgB,yBAAyB,CAAC,eAAgC;IACxE,MAAM,QAAQ,GAAG,2BAA2B,CAAC,eAAe,CAAC,CAAC;IAC9D,eAAe,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC;AACvC,CAAC;AAHD,8DAGC;AAED;;;;;GAKG;AACH,SAAgB,wBAAwB,CACtC,eAAgC,EAChC,IAAY;;IAEZ,MAAM,YAAY,GAAG,2BAA2B,CAAC,eAAe,CAAC,CAAC;IAClE,MAAM,aAAa,GAAG,aAAa,CACjC,eAAe,CAAC,OAA6B,CAC9C,CAAC;IAEF,MAAM,YAAY,GAAG,oBAAoB,CAAC,aAAa,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAE7E,IAAI,YAAY,CAAC,MAAM,EAAE;QACvB,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,0CAAE,IAAI,CAAC,YAAY,CAAC,CAAC;KAC9C;AACH,CAAC;AAdD,4DAcC;AAED;;;;;;;GAOG;AACH,SAAS,oBAAoB,CAC3B,aAAkB,EAClB,YAA6B,EAC7B,IAAY;IAEZ,MAAM,sBAAsB,GAAG,yBAAU,CAAC,OAAO,CAC/C,aAAa,EACb,YAAY,CACc,CAAC;IAC7B,kFAAkF;IAClF,IAAI,sBAAsB,CAAC,CAAC,CAAC,EAAE;QAC7B,IAAI,IAAI,EAAE;YACR,sBAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;SACvC;QACD,sBAAsB,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;KAClD;IACD,OAAO,sBAAsB,CAAC;AAChC,CAAC;AAED;;;;;GAKG;AACH,SAAS,aAAa,CACpB,kBAAsC;IAEtC,MAAM,YAAY,GAAG,IAAA,kBAAS,EAAC,kBAAkB,CAAC,CAAC;IACnD,OAAO,YAAY,CAAC,MAAM,CACxB,CAAC,GAAG,EAAE,KAAU,EAAE,EAAE,CAAC,yBAAU,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,WAAW,CAChD,CAAC;AACvB,CAAC;AAED;;;;;GAKG;AACH,SAAS,2BAA2B,CAClC,eAAgC;IAEhC,MAAM,QAAQ,qBAAQ,eAAe,CAAE,CAAC;IACxC,OAAO,QAAQ,CAAC,OAAO,CAAC;IACxB,OAAO,IAAA,kBAAS,EAAC,QAAQ,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["import jsonDiffer from 'fast-json-patch';\nimport { cloneDeep } from 'lodash';\n\nimport type {\n  TransactionHistory,\n  TransactionHistoryEntry,\n  TransactionMeta,\n} from './types';\n\n/**\n * Add initial history snapshot to the provided transactionMeta history.\n *\n * @param transactionMeta - TransactionMeta to add initial history snapshot to.\n */\nexport function addInitialHistorySnapshot(transactionMeta: TransactionMeta) {\n  const snapshot = snapshotFromTransactionMeta(transactionMeta);\n  transactionMeta.history = [snapshot];\n}\n\n/**\n * Compares and adds history entry to the provided transactionMeta history.\n *\n * @param transactionMeta - TransactionMeta to add history entry to.\n * @param note - Note to add to history entry.\n */\nexport function updateTransactionHistory(\n  transactionMeta: TransactionMeta,\n  note: string,\n): void {\n  const currentState = snapshotFromTransactionMeta(transactionMeta);\n  const previousState = replayHistory(\n    transactionMeta.history as TransactionHistory,\n  );\n\n  const historyEntry = generateHistoryEntry(previousState, currentState, note);\n\n  if (historyEntry.length) {\n    transactionMeta?.history?.push(historyEntry);\n  }\n}\n\n/**\n * Generates a history entry from the previous and new transaction metadata.\n *\n * @param previousState - The previous transaction metadata.\n * @param currentState - The new transaction metadata.\n * @param note - A note for the transaction metada update.\n * @returns An array of history operation.\n */\nfunction generateHistoryEntry(\n  previousState: any,\n  currentState: TransactionMeta,\n  note: string,\n): TransactionHistoryEntry {\n  const historyOperationsEntry = jsonDiffer.compare(\n    previousState,\n    currentState,\n  ) as TransactionHistoryEntry;\n  // Add a note to the first operation, since it breaks if we append it to the entry\n  if (historyOperationsEntry[0]) {\n    if (note) {\n      historyOperationsEntry[0].note = note;\n    }\n    historyOperationsEntry[0].timestamp = Date.now();\n  }\n  return historyOperationsEntry;\n}\n\n/**\n * Recovers previous transactionMeta from passed history array.\n *\n * @param transactionHistory - The transaction metadata to replay.\n * @returns The transaction metadata.\n */\nfunction replayHistory(\n  transactionHistory: TransactionHistory,\n): TransactionMeta {\n  const shortHistory = cloneDeep(transactionHistory);\n  return shortHistory.reduce(\n    (val, entry: any) => jsonDiffer.applyPatch(val, entry).newDocument,\n  ) as TransactionMeta;\n}\n\n/**\n * Clone the transaction meta data without the history property.\n *\n * @param transactionMeta - The transaction metadata to snapshot.\n * @returns A deep clone of transaction metadata without history property.\n */\nfunction snapshotFromTransactionMeta(\n  transactionMeta: TransactionMeta,\n): TransactionMeta {\n  const snapshot = { ...transactionMeta };\n  delete snapshot.history;\n  return cloneDeep(snapshot);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.d.ts b/node_modules/@metamask/transaction-controller/dist/index.d.ts
deleted file mode 100644
index 9998101..0000000
--- a/node_modules/@metamask/transaction-controller/dist/index.d.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-export * from './TransactionController';
-export type { EtherscanTransactionMeta } from './etherscan';
-export { isEIP1559Transaction } from './utils';
-export * from './types';
-//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.d.ts.map b/node_modules/@metamask/transaction-controller/dist/index.d.ts.map
deleted file mode 100644
index 6b85676..0000000
--- a/node_modules/@metamask/transaction-controller/dist/index.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,yBAAyB,CAAC;AACxC,YAAY,EAAE,wBAAwB,EAAE,MAAM,aAAa,CAAC;AAC5D,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC;AAC/C,cAAc,SAAS,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.js b/node_modules/@metamask/transaction-controller/dist/index.js
index 602f51c..e64bd12 100644
--- a/node_modules/@metamask/transaction-controller/dist/index.js
+++ b/node_modules/@metamask/transaction-controller/dist/index.js
@@ -1,22 +1,71 @@
-"use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    var desc = Object.getOwnPropertyDescriptor(m, k);
-    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
-    }
-    Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __exportStar = (this && this.__exportStar) || function(m, exports) {
-    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.isEIP1559Transaction = void 0;
-__exportStar(require("./TransactionController"), exports);
-var utils_1 = require("./utils");
-Object.defineProperty(exports, "isEIP1559Transaction", { enumerable: true, get: function () { return utils_1.isEIP1559Transaction; } });
-__exportStar(require("./types"), exports);
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+var _chunkN55SEKK7js = require('./chunk-N55SEKK7.js');
+require('./chunk-ZNZEJDOE.js');
+require('./chunk-X3KACH5P.js');
+require('./chunk-KT6UAKBB.js');
+
+
+var _chunkSD6CWFDFjs = require('./chunk-SD6CWFDF.js');
+require('./chunk-VH47Q6TS.js');
+require('./chunk-5KMU2IAT.js');
+require('./chunk-7LXE4KHV.js');
+require('./chunk-V72C4MCR.js');
+require('./chunk-QP75SWIQ.js');
+require('./chunk-NYKRCWBG.js');
+require('./chunk-WR5F34OW.js');
+require('./chunk-YVCX6Z75.js');
+require('./chunk-TJMQEH57.js');
+require('./chunk-7DJO6UZA.js');
+require('./chunk-2XKEAKQG.js');
+require('./chunk-DTDTOMTB.js');
+require('./chunk-5XQ2KRYL.js');
+require('./chunk-EQT25RSP.js');
+require('./chunk-FDUCRHYT.js');
+require('./chunk-HMOSP33F.js');
+require('./chunk-DUFOYA4D.js');
+require('./chunk-VJYFB7BM.js');
+require('./chunk-KNYSD4JP.js');
+require('./chunk-C2LNDHP4.js');
+
+
+
+var _chunkUGFBA4GVjs = require('./chunk-UGFBA4GV.js');
+
+
+var _chunkEMDU4XLMjs = require('./chunk-EMDU4XLM.js');
+require('./chunk-UGN7PBON.js');
+require('./chunk-S6VGOPUY.js');
+
+
+
+
+
+
+
+
+
+
+var _chunk5C3CSQADjs = require('./chunk-5C3CSQAD.js');
+require('./chunk-Z4BLTVTB.js');
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+exports.CANCEL_RATE = _chunkN55SEKK7js.CANCEL_RATE; exports.GasFeeEstimateLevel = _chunk5C3CSQADjs.GasFeeEstimateLevel; exports.GasFeeEstimateType = _chunk5C3CSQADjs.GasFeeEstimateType; exports.HARDFORK = _chunkN55SEKK7js.HARDFORK; exports.SimulationErrorCode = _chunk5C3CSQADjs.SimulationErrorCode; exports.SimulationTokenStandard = _chunk5C3CSQADjs.SimulationTokenStandard; exports.TransactionController = _chunkN55SEKK7js.TransactionController; exports.TransactionEnvelopeType = _chunk5C3CSQADjs.TransactionEnvelopeType; exports.TransactionStatus = _chunk5C3CSQADjs.TransactionStatus; exports.TransactionType = _chunk5C3CSQADjs.TransactionType; exports.UserFeeLevel = _chunk5C3CSQADjs.UserFeeLevel; exports.WalletDevice = _chunk5C3CSQADjs.WalletDevice; exports.determineTransactionType = _chunkSD6CWFDFjs.determineTransactionType; exports.isEIP1559Transaction = _chunkUGFBA4GVjs.isEIP1559Transaction; exports.mergeGasFeeEstimates = _chunkEMDU4XLMjs.mergeGasFeeEstimates; exports.normalizeTransactionParams = _chunkUGFBA4GVjs.normalizeTransactionParams;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.js.map b/node_modules/@metamask/transaction-controller/dist/index.js.map
deleted file mode 100644
index c4fa911..0000000
--- a/node_modules/@metamask/transaction-controller/dist/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,0DAAwC;AAExC,iCAA+C;AAAtC,6GAAA,oBAAoB,OAAA;AAC7B,0CAAwB","sourcesContent":["export * from './TransactionController';\nexport type { EtherscanTransactionMeta } from './etherscan';\nexport { isEIP1559Transaction } from './utils';\nexport * from './types';\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.mjs b/node_modules/@metamask/transaction-controller/dist/index.mjs
new file mode 100644
index 0000000..9ff22e6
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/index.mjs
@@ -0,0 +1,71 @@
+import {
+  CANCEL_RATE,
+  HARDFORK,
+  TransactionController
+} from "./chunk-7TPXSDXL.mjs";
+import "./chunk-NHRBO3LU.mjs";
+import "./chunk-MDRMMUMS.mjs";
+import "./chunk-K4KOSAGM.mjs";
+import {
+  determineTransactionType
+} from "./chunk-KG4UW4K4.mjs";
+import "./chunk-NM6OYEPP.mjs";
+import "./chunk-5YES3V2R.mjs";
+import "./chunk-FRKQ3Z2L.mjs";
+import "./chunk-5G6OHAXI.mjs";
+import "./chunk-XGRAHX6T.mjs";
+import "./chunk-VEVVBHP3.mjs";
+import "./chunk-Z4GV3YQQ.mjs";
+import "./chunk-FG74Z3F5.mjs";
+import "./chunk-FMRLPVFZ.mjs";
+import "./chunk-SL3GHHKG.mjs";
+import "./chunk-NOHEXQ7Y.mjs";
+import "./chunk-Y7ENNK7L.mjs";
+import "./chunk-F6E3TTR3.mjs";
+import "./chunk-CPMTUMMZ.mjs";
+import "./chunk-QZLPYOGC.mjs";
+import "./chunk-HQSNKCXI.mjs";
+import "./chunk-XL3HBKDE.mjs";
+import "./chunk-REOG6YD4.mjs";
+import "./chunk-4M7FHI4S.mjs";
+import "./chunk-ZGUNOEUQ.mjs";
+import {
+  isEIP1559Transaction,
+  normalizeTransactionParams
+} from "./chunk-J56A7UCK.mjs";
+import {
+  mergeGasFeeEstimates
+} from "./chunk-AGJNOOBN.mjs";
+import "./chunk-O6ZZVIFH.mjs";
+import "./chunk-UQQWZT6C.mjs";
+import {
+  GasFeeEstimateLevel,
+  GasFeeEstimateType,
+  SimulationErrorCode,
+  SimulationTokenStandard,
+  TransactionEnvelopeType,
+  TransactionStatus,
+  TransactionType,
+  UserFeeLevel,
+  WalletDevice
+} from "./chunk-N6JXPWLY.mjs";
+import "./chunk-XUI43LEZ.mjs";
+export {
+  CANCEL_RATE,
+  GasFeeEstimateLevel,
+  GasFeeEstimateType,
+  HARDFORK,
+  SimulationErrorCode,
+  SimulationTokenStandard,
+  TransactionController,
+  TransactionEnvelopeType,
+  TransactionStatus,
+  TransactionType,
+  UserFeeLevel,
+  WalletDevice,
+  determineTransactionType,
+  isEIP1559Transaction,
+  mergeGasFeeEstimates,
+  normalizeTransactionParams
+};
+//# sourceMappingURL=index.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/logger.d.ts.map b/node_modules/@metamask/transaction-controller/dist/logger.d.ts.map
deleted file mode 100644
index 5ec61d9..0000000
--- a/node_modules/@metamask/transaction-controller/dist/logger.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"logger.d.ts","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";AAEA,OAAO,EAAuB,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAE1E,eAAO,MAAM,aAAa,0BAAgD,CAAC;AAE3E,eAAO,MAAM,0BAA0B,0BAGtC,CAAC;AAEF,eAAO,MAAM,yBAAyB,0BAGrC,CAAC;AAEF,OAAO,EAAE,kBAAkB,EAAE,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/logger.js b/node_modules/@metamask/transaction-controller/dist/logger.js
index d21f7ed..ceafec0 100644
--- a/node_modules/@metamask/transaction-controller/dist/logger.js
+++ b/node_modules/@metamask/transaction-controller/dist/logger.js
@@ -1,10 +1,12 @@
-"use strict";
-/* istanbul ignore file */
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.createModuleLogger = exports.pendingTransactionsLogger = exports.incomingTransactionsLogger = exports.projectLogger = void 0;
-const utils_1 = require("@metamask/utils");
-Object.defineProperty(exports, "createModuleLogger", { enumerable: true, get: function () { return utils_1.createModuleLogger; } });
-exports.projectLogger = (0, utils_1.createProjectLogger)('transaction-controller');
-exports.incomingTransactionsLogger = (0, utils_1.createModuleLogger)(exports.projectLogger, 'incoming-transactions');
-exports.pendingTransactionsLogger = (0, utils_1.createModuleLogger)(exports.projectLogger, 'pending-transactions');
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+var _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');
+require('./chunk-Z4BLTVTB.js');
+
+
+
+
+exports.createModuleLogger = _chunkS6VGOPUYjs.createModuleLogger; exports.incomingTransactionsLogger = _chunkS6VGOPUYjs.incomingTransactionsLogger; exports.projectLogger = _chunkS6VGOPUYjs.projectLogger;
 //# sourceMappingURL=logger.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/logger.js.map b/node_modules/@metamask/transaction-controller/dist/logger.js.map
deleted file mode 100644
index 271f042..0000000
--- a/node_modules/@metamask/transaction-controller/dist/logger.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";AAAA,0BAA0B;;;AAE1B,2CAA0E;AAcjE,mGAdqB,0BAAkB,OAcrB;AAZd,QAAA,aAAa,GAAG,IAAA,2BAAmB,EAAC,wBAAwB,CAAC,CAAC;AAE9D,QAAA,0BAA0B,GAAG,IAAA,0BAAkB,EAC1D,qBAAa,EACb,uBAAuB,CACxB,CAAC;AAEW,QAAA,yBAAyB,GAAG,IAAA,0BAAkB,EACzD,qBAAa,EACb,sBAAsB,CACvB,CAAC","sourcesContent":["/* istanbul ignore file */\n\nimport { createProjectLogger, createModuleLogger } from '@metamask/utils';\n\nexport const projectLogger = createProjectLogger('transaction-controller');\n\nexport const incomingTransactionsLogger = createModuleLogger(\n  projectLogger,\n  'incoming-transactions',\n);\n\nexport const pendingTransactionsLogger = createModuleLogger(\n  projectLogger,\n  'pending-transactions',\n);\n\nexport { createModuleLogger };\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/logger.mjs b/node_modules/@metamask/transaction-controller/dist/logger.mjs
new file mode 100644
index 0000000..8749872
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/logger.mjs
@@ -0,0 +1,12 @@
+import {
+  createModuleLogger,
+  incomingTransactionsLogger,
+  projectLogger
+} from "./chunk-UQQWZT6C.mjs";
+import "./chunk-XUI43LEZ.mjs";
+export {
+  createModuleLogger,
+  incomingTransactionsLogger,
+  projectLogger
+};
+//# sourceMappingURL=logger.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/transaction-type.d.ts.map b/node_modules/@metamask/transaction-controller/dist/transaction-type.d.ts.map
deleted file mode 100644
index 0721a72..0000000
--- a/node_modules/@metamask/transaction-controller/dist/transaction-type.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"transaction-type.d.ts","sourceRoot":"","sources":["../src/transaction-type.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAGhD,OAAO,KAAK,EAAE,0BAA0B,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAG7E,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAMrE;;;;;;;;GAQG;AACH,wBAAsB,wBAAwB,CAC5C,QAAQ,EAAE,iBAAiB,EAC3B,QAAQ,EAAE,QAAQ,GACjB,OAAO,CAAC,0BAA0B,CAAC,CAiCrC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/transaction-type.js b/node_modules/@metamask/transaction-controller/dist/transaction-type.js
deleted file mode 100644
index 6497fd0..0000000
--- a/node_modules/@metamask/transaction-controller/dist/transaction-type.js
+++ /dev/null
@@ -1,114 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.determineTransactionType = exports.ESTIMATE_GAS_ERROR = void 0;
-const abi_1 = require("@ethersproject/abi");
-const controller_utils_1 = require("@metamask/controller-utils");
-const metamask_eth_abis_1 = require("@metamask/metamask-eth-abis");
-const types_1 = require("./types");
-exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
-const ERC20Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC20);
-const ERC721Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC721);
-const ERC1155Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC1155);
-/**
- * Determines the type of the transaction by analyzing the txParams.
- * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these
- * represent specific events that we specify manually at transaction creation.
- *
- * @param txParams - Parameters for the transaction.
- * @param ethQuery - EthQuery instance.
- * @returns A object with the transaction type and the contract code response in Hex.
- */
-function determineTransactionType(txParams, ethQuery) {
-    var _a;
-    return __awaiter(this, void 0, void 0, function* () {
-        const { data, to } = txParams;
-        const name = (_a = parseStandardTokenTransactionData(data)) === null || _a === void 0 ? void 0 : _a.name;
-        if (data && !to) {
-            return { type: types_1.TransactionType.deployContract, getCodeResponse: undefined };
-        }
-        const { contractCode: resultCode, isContractAddress } = yield readAddressAsContract(ethQuery, to);
-        if (!isContractAddress) {
-            return { type: types_1.TransactionType.simpleSend, getCodeResponse: resultCode };
-        }
-        const hasValue = txParams.value && Number(txParams.value) !== 0;
-        const tokenMethodName = [
-            types_1.TransactionType.tokenMethodApprove,
-            types_1.TransactionType.tokenMethodSetApprovalForAll,
-            types_1.TransactionType.tokenMethodTransfer,
-            types_1.TransactionType.tokenMethodTransferFrom,
-            types_1.TransactionType.tokenMethodSafeTransferFrom,
-        ].find((methodName) => methodName.toLowerCase() === (name === null || name === void 0 ? void 0 : name.toLowerCase()));
-        if (data && tokenMethodName && !hasValue) {
-            return { type: tokenMethodName, getCodeResponse: resultCode };
-        }
-        return {
-            type: types_1.TransactionType.contractInteraction,
-            getCodeResponse: resultCode,
-        };
-    });
-}
-exports.determineTransactionType = determineTransactionType;
-/**
- * Attempts to decode transaction data using ABIs for three different token standards: ERC20, ERC721, ERC1155.
- * The data will decode correctly if the transaction is an interaction with a contract that matches one of these
- * contract standards
- *
- * @param data - Encoded transaction data.
- * @returns A representation of an ethereum contract call.
- */
-function parseStandardTokenTransactionData(data) {
-    if (!data) {
-        return undefined;
-    }
-    try {
-        return ERC20Interface.parseTransaction({ data });
-    }
-    catch (_a) {
-        // ignore and next try to parse with erc721 ABI
-    }
-    try {
-        return ERC721Interface.parseTransaction({ data });
-    }
-    catch (_b) {
-        // ignore and next try to parse with erc1155 ABI
-    }
-    try {
-        return ERC1155Interface.parseTransaction({ data });
-    }
-    catch (_c) {
-        // ignore and return undefined
-    }
-    return undefined;
-}
-/**
- * Reads an Ethereum address and determines if it is a contract address.
- *
- * @param ethQuery - The Ethereum query object used to interact with the Ethereum blockchain.
- * @param address - The Ethereum address.
- * @returns An object containing the contract code and a boolean indicating if it is a contract address.
- */
-function readAddressAsContract(ethQuery, address) {
-    return __awaiter(this, void 0, void 0, function* () {
-        let contractCode;
-        try {
-            contractCode = yield (0, controller_utils_1.query)(ethQuery, 'getCode', [address]);
-        }
-        catch (e) {
-            contractCode = null;
-        }
-        const isContractAddress = contractCode
-            ? contractCode !== '0x' && contractCode !== '0x0'
-            : false;
-        return { contractCode, isContractAddress };
-    });
-}
-//# sourceMappingURL=transaction-type.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/transaction-type.js.map b/node_modules/@metamask/transaction-controller/dist/transaction-type.js.map
deleted file mode 100644
index fc7d668..0000000
--- a/node_modules/@metamask/transaction-controller/dist/transaction-type.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"transaction-type.js","sourceRoot":"","sources":["../src/transaction-type.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TransactionDescription } from '@ethersproject/abi';\nimport { Interface } from '@ethersproject/abi';\nimport { query } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport { abiERC721, abiERC20, abiERC1155 } from '@metamask/metamask-eth-abis';\n\nimport type { InferTransactionTypeResult, TransactionParams } from './types';\nimport { TransactionType } from './types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst ERC20Interface = new Interface(abiERC20);\nconst ERC721Interface = new Interface(abiERC721);\nconst ERC1155Interface = new Interface(abiERC1155);\n\n/**\n * Determines the type of the transaction by analyzing the txParams.\n * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these\n * represent specific events that we specify manually at transaction creation.\n *\n * @param txParams - Parameters for the transaction.\n * @param ethQuery - EthQuery instance.\n * @returns A object with the transaction type and the contract code response in Hex.\n */\nexport async function determineTransactionType(\n  txParams: TransactionParams,\n  ethQuery: EthQuery,\n): Promise<InferTransactionTypeResult> {\n  const { data, to } = txParams;\n  const name = parseStandardTokenTransactionData(data)?.name;\n\n  if (data && !to) {\n    return { type: TransactionType.deployContract, getCodeResponse: undefined };\n  }\n\n  const { contractCode: resultCode, isContractAddress } =\n    await readAddressAsContract(ethQuery, to);\n\n  if (!isContractAddress) {\n    return { type: TransactionType.simpleSend, getCodeResponse: resultCode };\n  }\n\n  const hasValue = txParams.value && Number(txParams.value) !== 0;\n\n  const tokenMethodName = [\n    TransactionType.tokenMethodApprove,\n    TransactionType.tokenMethodSetApprovalForAll,\n    TransactionType.tokenMethodTransfer,\n    TransactionType.tokenMethodTransferFrom,\n    TransactionType.tokenMethodSafeTransferFrom,\n  ].find((methodName) => methodName.toLowerCase() === name?.toLowerCase());\n\n  if (data && tokenMethodName && !hasValue) {\n    return { type: tokenMethodName, getCodeResponse: resultCode };\n  }\n\n  return {\n    type: TransactionType.contractInteraction,\n    getCodeResponse: resultCode,\n  };\n}\n\n/**\n * Attempts to decode transaction data using ABIs for three different token standards: ERC20, ERC721, ERC1155.\n * The data will decode correctly if the transaction is an interaction with a contract that matches one of these\n * contract standards\n *\n * @param data - Encoded transaction data.\n * @returns A representation of an ethereum contract call.\n */\nfunction parseStandardTokenTransactionData(\n  data?: string,\n): TransactionDescription | undefined {\n  if (!data) {\n    return undefined;\n  }\n\n  try {\n    return ERC20Interface.parseTransaction({ data });\n  } catch {\n    // ignore and next try to parse with erc721 ABI\n  }\n\n  try {\n    return ERC721Interface.parseTransaction({ data });\n  } catch {\n    // ignore and next try to parse with erc1155 ABI\n  }\n\n  try {\n    return ERC1155Interface.parseTransaction({ data });\n  } catch {\n    // ignore and return undefined\n  }\n\n  return undefined;\n}\n\n/**\n * Reads an Ethereum address and determines if it is a contract address.\n *\n * @param ethQuery - The Ethereum query object used to interact with the Ethereum blockchain.\n * @param address - The Ethereum address.\n * @returns An object containing the contract code and a boolean indicating if it is a contract address.\n */\nasync function readAddressAsContract(\n  ethQuery: EthQuery,\n  address?: string,\n): Promise<{\n  contractCode: string | null;\n  isContractAddress: boolean;\n}> {\n  let contractCode;\n  try {\n    contractCode = await query(ethQuery, 'getCode', [address]);\n  } catch (e) {\n    contractCode = null;\n  }\n\n  const isContractAddress = contractCode\n    ? contractCode !== '0x' && contractCode !== '0x0'\n    : false;\n  return { contractCode, isContractAddress };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/tsconfig.build.tsbuildinfo b/node_modules/@metamask/transaction-controller/dist/tsconfig.build.tsbuildinfo
new file mode 100644
index 0000000..836cb1f
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/tsconfig.build.tsbuildinfo
@@ -0,0 +1 @@
+{"program":{"fileNames":["../../../node_modules/typescript/lib/lib.es5.d.ts","../../../node_modules/typescript/lib/lib.es2015.d.ts","../../../node_modules/typescript/lib/lib.es2016.d.ts","../../../node_modules/typescript/lib/lib.es2017.d.ts","../../../node_modules/typescript/lib/lib.es2018.d.ts","../../../node_modules/typescript/lib/lib.es2019.d.ts","../../../node_modules/typescript/lib/lib.es2020.d.ts","../../../node_modules/typescript/lib/lib.dom.d.ts","../../../node_modules/typescript/lib/lib.es2015.core.d.ts","../../../node_modules/typescript/lib/lib.es2015.collection.d.ts","../../../node_modules/typescript/lib/lib.es2015.generator.d.ts","../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../../../node_modules/typescript/lib/lib.es2015.promise.d.ts","../../../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../../../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../../../node_modules/typescript/lib/lib.es2017.object.d.ts","../../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2017.string.d.ts","../../../node_modules/typescript/lib/lib.es2017.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../../../node_modules/typescript/lib/lib.es2018.intl.d.ts","../../../node_modules/typescript/lib/lib.es2018.promise.d.ts","../../../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../../../node_modules/typescript/lib/lib.es2019.array.d.ts","../../../node_modules/typescript/lib/lib.es2019.object.d.ts","../../../node_modules/typescript/lib/lib.es2019.string.d.ts","../../../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2019.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../../../node_modules/typescript/lib/lib.es2020.date.d.ts","../../../node_modules/typescript/lib/lib.es2020.promise.d.ts","../../../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2020.string.d.ts","../../../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2020.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.number.d.ts","../../../node_modules/typescript/lib/lib.esnext.intl.d.ts","../../../types/eth-ens-namehash.d.ts","../../../types/ethereum-ens-network-map.d.ts","../../../types/global.d.ts","../../../types/single-call-balance-checker-abi.d.ts","../../../types/@metamask/contract-metadata.d.ts","../../../types/@metamask/eth-hd-keyring.d.ts","../../../types/@metamask/eth-simple-keyring.d.ts","../../../types/@metamask/ethjs-provider-http.d.ts","../../../types/@metamask/ethjs-unit.d.ts","../../../types/@metamask/metamask-eth-abis.d.ts","../../../types/eth-json-rpc-infura/src/createProvider.d.ts","../../../types/eth-phishing-detect/src/config.json.d.ts","../../../types/eth-phishing-detect/src/detector.d.ts","../../../node_modules/@types/node/assert.d.ts","../../../node_modules/@types/node/assert/strict.d.ts","../../../node_modules/@types/node/globals.d.ts","../../../node_modules/@types/node/async_hooks.d.ts","../../../node_modules/@types/node/buffer.d.ts","../../../node_modules/@types/node/child_process.d.ts","../../../node_modules/@types/node/cluster.d.ts","../../../node_modules/@types/node/console.d.ts","../../../node_modules/@types/node/constants.d.ts","../../../node_modules/@types/node/crypto.d.ts","../../../node_modules/@types/node/dgram.d.ts","../../../node_modules/@types/node/diagnostics_channel.d.ts","../../../node_modules/@types/node/dns.d.ts","../../../node_modules/@types/node/dns/promises.d.ts","../../../node_modules/@types/node/dom-events.d.ts","../../../node_modules/@types/node/domain.d.ts","../../../node_modules/@types/node/events.d.ts","../../../node_modules/@types/node/fs.d.ts","../../../node_modules/@types/node/fs/promises.d.ts","../../../node_modules/@types/node/http.d.ts","../../../node_modules/@types/node/http2.d.ts","../../../node_modules/@types/node/https.d.ts","../../../node_modules/@types/node/inspector.d.ts","../../../node_modules/@types/node/module.d.ts","../../../node_modules/@types/node/net.d.ts","../../../node_modules/@types/node/os.d.ts","../../../node_modules/@types/node/path.d.ts","../../../node_modules/@types/node/perf_hooks.d.ts","../../../node_modules/@types/node/process.d.ts","../../../node_modules/@types/node/punycode.d.ts","../../../node_modules/@types/node/querystring.d.ts","../../../node_modules/@types/node/readline.d.ts","../../../node_modules/@types/node/repl.d.ts","../../../node_modules/@types/node/stream.d.ts","../../../node_modules/@types/node/stream/promises.d.ts","../../../node_modules/@types/node/stream/consumers.d.ts","../../../node_modules/@types/node/stream/web.d.ts","../../../node_modules/@types/node/string_decoder.d.ts","../../../node_modules/@types/node/test.d.ts","../../../node_modules/@types/node/timers.d.ts","../../../node_modules/@types/node/timers/promises.d.ts","../../../node_modules/@types/node/tls.d.ts","../../../node_modules/@types/node/trace_events.d.ts","../../../node_modules/@types/node/tty.d.ts","../../../node_modules/@types/node/url.d.ts","../../../node_modules/@types/node/util.d.ts","../../../node_modules/@types/node/v8.d.ts","../../../node_modules/@types/node/vm.d.ts","../../../node_modules/@types/node/wasi.d.ts","../../../node_modules/@types/node/worker_threads.d.ts","../../../node_modules/@types/node/zlib.d.ts","../../../node_modules/@types/node/globals.global.d.ts","../../../node_modules/@types/node/index.d.ts","../../../node_modules/@ethereumjs/common/dist/enums.d.ts","../../../node_modules/@ethereumjs/common/dist/types.d.ts","../../../node_modules/buffer/index.d.ts","../../../node_modules/@ethereumjs/util/dist/constants.d.ts","../../../node_modules/@ethereumjs/util/dist/units.d.ts","../../../node_modules/@ethereumjs/util/dist/address.d.ts","../../../node_modules/@ethereumjs/util/dist/bytes.d.ts","../../../node_modules/@ethereumjs/util/dist/types.d.ts","../../../node_modules/@ethereumjs/util/dist/account.d.ts","../../../node_modules/@ethereumjs/util/dist/withdrawal.d.ts","../../../node_modules/@ethereumjs/util/dist/signature.d.ts","../../../node_modules/@ethereumjs/util/dist/encoding.d.ts","../../../node_modules/@ethereumjs/util/dist/asyncEventEmitter.d.ts","../../../node_modules/@ethereumjs/util/dist/internal.d.ts","../../../node_modules/@ethereumjs/util/dist/lock.d.ts","../../../node_modules/@ethereumjs/util/dist/provider.d.ts","../../../node_modules/@ethereumjs/util/dist/index.d.ts","../../../node_modules/@ethereumjs/common/dist/common.d.ts","../../../node_modules/@ethereumjs/common/dist/utils.d.ts","../../../node_modules/@ethereumjs/common/dist/index.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip2930Transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/legacyTransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/types.d.ts","../../../node_modules/@ethereumjs/tx/dist/baseTransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip1559Transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/transactionFactory.d.ts","../../../node_modules/@ethereumjs/tx/dist/index.d.ts","../../base-controller/dist/types/BaseControllerV1.d.ts","../../../node_modules/superstruct/dist/error.d.ts","../../../node_modules/superstruct/dist/utils.d.ts","../../../node_modules/superstruct/dist/struct.d.ts","../../../node_modules/superstruct/dist/structs/coercions.d.ts","../../../node_modules/superstruct/dist/structs/refinements.d.ts","../../../node_modules/superstruct/dist/structs/types.d.ts","../../../node_modules/superstruct/dist/structs/utilities.d.ts","../../../node_modules/superstruct/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/assert.d.ts","../../../node_modules/@metamask/utils/dist/types/base64.d.ts","../../../node_modules/@metamask/utils/dist/types/hex.d.ts","../../../node_modules/@metamask/utils/dist/types/bytes.d.ts","../../../node_modules/@metamask/utils/dist/types/caip-types.d.ts","../../../node_modules/@metamask/utils/dist/types/checksum.d.ts","../../../node_modules/@metamask/utils/dist/types/coercers.d.ts","../../../node_modules/@metamask/utils/dist/types/collections.d.ts","../../../node_modules/@metamask/utils/dist/types/encryption-types.d.ts","../../../node_modules/@metamask/utils/dist/types/errors.d.ts","../../../node_modules/@metamask/utils/dist/types/json.d.ts","../../../node_modules/@metamask/utils/dist/types/keyring.d.ts","../../../node_modules/@types/ms/index.d.ts","../../../node_modules/@types/debug/index.d.ts","../../../node_modules/@metamask/utils/dist/types/logging.d.ts","../../../node_modules/@metamask/utils/dist/types/misc.d.ts","../../../node_modules/@metamask/utils/dist/types/number.d.ts","../../../node_modules/@metamask/utils/dist/types/opaque.d.ts","../../../node_modules/@metamask/utils/dist/types/promise.d.ts","../../../node_modules/@metamask/utils/dist/types/time.d.ts","../../../node_modules/@metamask/utils/dist/types/transaction-types.d.ts","../../../node_modules/@metamask/utils/dist/types/versions.d.ts","../../../node_modules/@metamask/utils/dist/types/index.d.ts","../../../node_modules/immer/dist/utils/env.d.ts","../../../node_modules/immer/dist/utils/errors.d.ts","../../../node_modules/immer/dist/types/types-external.d.ts","../../../node_modules/immer/dist/types/types-internal.d.ts","../../../node_modules/immer/dist/utils/common.d.ts","../../../node_modules/immer/dist/utils/plugins.d.ts","../../../node_modules/immer/dist/core/scope.d.ts","../../../node_modules/immer/dist/core/finalize.d.ts","../../../node_modules/immer/dist/core/proxy.d.ts","../../../node_modules/immer/dist/core/immerClass.d.ts","../../../node_modules/immer/dist/core/current.d.ts","../../../node_modules/immer/dist/internal.d.ts","../../../node_modules/immer/dist/plugins/es5.d.ts","../../../node_modules/immer/dist/plugins/patches.d.ts","../../../node_modules/immer/dist/plugins/mapset.d.ts","../../../node_modules/immer/dist/plugins/all.d.ts","../../../node_modules/immer/dist/immer.d.ts","../../base-controller/dist/types/RestrictedControllerMessenger.d.ts","../../base-controller/dist/types/ControllerMessenger.d.ts","../../base-controller/dist/types/BaseControllerV2.d.ts","../../base-controller/dist/types/index.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/utils.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/classes.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/errors.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/error-constants.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/index.d.ts","../../approval-controller/dist/types/ApprovalController.d.ts","../../approval-controller/dist/types/errors.d.ts","../../approval-controller/dist/types/index.d.ts","../../controller-utils/dist/types/types.d.ts","../../controller-utils/dist/types/constants.d.ts","../../../node_modules/@metamask/eth-query/index.d.ts","../../../node_modules/@types/bn.js/index.d.ts","../../controller-utils/dist/types/util.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/abnf.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/utils.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/parsers.d.ts","../../controller-utils/dist/types/siwe.d.ts","../../controller-utils/dist/types/index.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/types.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/createEventEmitterProxy.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/createSwappableProxy.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/index.d.ts","../../network-controller/dist/types/constants.d.ts","../../../node_modules/@metamask/safe-event-emitter/dist/cjs/index.d.ts","../../json-rpc-engine/dist/types/JsonRpcEngine.d.ts","../../json-rpc-engine/dist/types/createAsyncMiddleware.d.ts","../../json-rpc-engine/dist/types/createScaffoldMiddleware.d.ts","../../json-rpc-engine/dist/types/getUniqueId.d.ts","../../json-rpc-engine/dist/types/idRemapMiddleware.d.ts","../../json-rpc-engine/dist/types/mergeMiddleware.d.ts","../../json-rpc-engine/dist/types/index.d.ts","../../eth-json-rpc-provider/dist/types/safe-event-emitter-provider.d.ts","../../eth-json-rpc-provider/dist/types/provider-from-engine.d.ts","../../eth-json-rpc-provider/dist/types/provider-from-middleware.d.ts","../../eth-json-rpc-provider/dist/types/index.d.ts","../../../node_modules/eth-block-tracker/dist/BlockTracker.d.ts","../../../node_modules/eth-block-tracker/dist/PollingBlockTracker.d.ts","../../../node_modules/eth-block-tracker/dist/SubscribeBlockTracker.d.ts","../../../node_modules/eth-block-tracker/dist/index.d.ts","../../network-controller/dist/types/types.d.ts","../../network-controller/dist/types/create-auto-managed-network-client.d.ts","../../network-controller/dist/types/NetworkController.d.ts","../../network-controller/dist/types/create-network-client.d.ts","../../network-controller/dist/types/index.d.ts","../../polling-controller/dist/types/types.d.ts","../../polling-controller/dist/types/BlockTrackerPollingController.d.ts","../../polling-controller/dist/types/StaticIntervalPollingController.d.ts","../../polling-controller/dist/types/index.d.ts","../../gas-fee-controller/dist/types/GasFeeController.d.ts","../../gas-fee-controller/dist/types/index.d.ts","../../../node_modules/async-mutex/lib/MutexInterface.d.ts","../../../node_modules/async-mutex/lib/Mutex.d.ts","../../../node_modules/async-mutex/lib/SemaphoreInterface.d.ts","../../../node_modules/async-mutex/lib/Semaphore.d.ts","../../../node_modules/async-mutex/lib/withTimeout.d.ts","../../../node_modules/async-mutex/lib/index.d.ts","../../../node_modules/eth-method-registry/dist/index.d.ts","../../../node_modules/@types/lodash/common/common.d.ts","../../../node_modules/@types/lodash/common/array.d.ts","../../../node_modules/@types/lodash/common/collection.d.ts","../../../node_modules/@types/lodash/common/date.d.ts","../../../node_modules/@types/lodash/common/function.d.ts","../../../node_modules/@types/lodash/common/lang.d.ts","../../../node_modules/@types/lodash/common/math.d.ts","../../../node_modules/@types/lodash/common/number.d.ts","../../../node_modules/@types/lodash/common/object.d.ts","../../../node_modules/@types/lodash/common/seq.d.ts","../../../node_modules/@types/lodash/common/string.d.ts","../../../node_modules/@types/lodash/common/util.d.ts","../../../node_modules/@types/lodash/index.d.ts","../../../node_modules/nonce-tracker/node_modules/async-mutex/lib/MutexInterface.d.ts","../../../node_modules/nonce-tracker/node_modules/async-mutex/lib/Mutex.d.ts","../../../node_modules/nonce-tracker/node_modules/async-mutex/lib/SemaphoreInterface.d.ts","../../../node_modules/nonce-tracker/node_modules/async-mutex/lib/Semaphore.d.ts","../../../node_modules/nonce-tracker/node_modules/async-mutex/lib/withTimeout.d.ts","../../../node_modules/nonce-tracker/node_modules/async-mutex/lib/tryAcquire.d.ts","../../../node_modules/nonce-tracker/node_modules/async-mutex/lib/errors.d.ts","../../../node_modules/nonce-tracker/node_modules/async-mutex/lib/index.d.ts","../../../node_modules/nonce-tracker/dist/NonceTracker.d.ts","../../../node_modules/nonce-tracker/dist/index.d.ts","../../../node_modules/@types/uuid/index.d.ts","../src/logger.ts","../../../node_modules/fast-json-patch/module/helpers.d.ts","../../../node_modules/fast-json-patch/module/core.d.ts","../../../node_modules/fast-json-patch/module/duplex.d.ts","../../../node_modules/fast-json-patch/index.d.ts","../src/types.ts","../src/utils/gas-flow.ts","../src/constants.ts","../src/utils/utils.ts","../src/utils/swaps.ts","../src/utils/gas-fees.ts","../src/gas-flows/DefaultGasFeeFlow.ts","../src/gas-flows/LineaGasFeeFlow.ts","../../../node_modules/@ethersproject/bytes/lib/index.d.ts","../../../node_modules/@ethersproject/bignumber/lib/bignumber.d.ts","../../../node_modules/@ethersproject/bignumber/lib/fixednumber.d.ts","../../../node_modules/@ethersproject/bignumber/lib/index.d.ts","../../../node_modules/@ethersproject/abi/lib/fragments.d.ts","../../../node_modules/@ethersproject/abi/lib/coders/abstract-coder.d.ts","../../../node_modules/@ethersproject/abi/lib/abi-coder.d.ts","../../../node_modules/@ethersproject/properties/lib/index.d.ts","../../../node_modules/@ethersproject/abi/lib/interface.d.ts","../../../node_modules/@ethersproject/abi/lib/index.d.ts","../../../node_modules/@ethersproject/networks/lib/types.d.ts","../../../node_modules/@ethersproject/networks/lib/index.d.ts","../../../node_modules/@ethersproject/transactions/lib/index.d.ts","../../../node_modules/@ethersproject/web/lib/index.d.ts","../../../node_modules/@ethersproject/abstract-provider/lib/index.d.ts","../../../node_modules/@ethersproject/abstract-signer/lib/index.d.ts","../../../node_modules/@ethersproject/contracts/lib/index.d.ts","../../../node_modules/@ethersproject/providers/lib/formatter.d.ts","../../../node_modules/@ethersproject/providers/lib/base-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/json-rpc-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/websocket-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/url-json-rpc-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/alchemy-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/ankr-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/cloudflare-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/etherscan-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/fallback-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/ipc-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/infura-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/nodesmith-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/pocket-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/web3-provider.d.ts","../../../node_modules/@ethersproject/providers/lib/index.d.ts","../src/gas-flows/OracleLayer1GasFeeFlow.ts","../src/gas-flows/OptimismLayer1GasFeeFlow.ts","../src/gas-flows/ScrollLayer1GasFeeFlow.ts","../src/gas-flows/TestGasFeeFlow.ts","../src/utils/etherscan.ts","../src/helpers/EtherscanRemoteTransactionSource.ts","../src/utils/layer1-gas-fee-flow.ts","../src/helpers/GasFeePoller.ts","../src/helpers/IncomingTransactionHelper.ts","../src/helpers/PendingTransactionTracker.ts","../src/helpers/MultichainTrackingHelper.ts","../src/utils/external-transactions.ts","../src/utils/gas.ts","../src/utils/history.ts","../src/utils/nonce.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/abiERC20.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/abiERC721.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/abiERC1155.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/abis/fiatTokenV2.d.ts","../../../node_modules/@metamask/metamask-eth-abis/dist/index.d.ts","../src/errors.ts","../src/utils/simulation-api.ts","../src/utils/simulation.ts","../src/utils/transaction-type.ts","../src/utils/validation.ts","../src/TransactionController.ts","../src/index.ts","../../../node_modules/@babel/types/lib/index.d.ts","../../../node_modules/@types/babel__generator/index.d.ts","../../../node_modules/@babel/parser/typings/babel-parser.d.ts","../../../node_modules/@types/babel__template/index.d.ts","../../../node_modules/@types/babel__traverse/index.d.ts","../../../node_modules/@types/babel__core/index.d.ts","../../../node_modules/@types/deep-freeze-strict/index.d.ts","../../../node_modules/@types/eslint/helpers.d.ts","../../../node_modules/@types/estree/index.d.ts","../../../node_modules/@types/json-schema/index.d.ts","../../../node_modules/@types/eslint/index.d.ts","../../../node_modules/@types/graceful-fs/index.d.ts","../../../node_modules/@types/istanbul-lib-coverage/index.d.ts","../../../node_modules/@types/istanbul-lib-report/index.d.ts","../../../node_modules/@types/istanbul-reports/index.d.ts","../../../node_modules/chalk/index.d.ts","../../../node_modules/jest-diff/build/cleanupSemantic.d.ts","../../../node_modules/pretty-format/build/types.d.ts","../../../node_modules/pretty-format/build/index.d.ts","../../../node_modules/jest-diff/build/types.d.ts","../../../node_modules/jest-diff/build/diffLines.d.ts","../../../node_modules/jest-diff/build/printDiffs.d.ts","../../../node_modules/jest-diff/build/index.d.ts","../../../node_modules/jest-matcher-utils/build/index.d.ts","../../../node_modules/@types/jest/index.d.ts","../../../node_modules/@types/jest-when/index.d.ts","../../../node_modules/@types/json5/index.d.ts","../../../node_modules/@types/minimatch/index.d.ts","../../../node_modules/@types/parse-json/index.d.ts","../../../node_modules/@types/pbkdf2/index.d.ts","../../../node_modules/@types/prettier/index.d.ts","../../../node_modules/@types/punycode/index.d.ts","../../../node_modules/@types/readable-stream/node_modules/safe-buffer/index.d.ts","../../../node_modules/@types/readable-stream/index.d.ts","../../../node_modules/@types/secp256k1/index.d.ts","../../../node_modules/@types/semver/classes/semver.d.ts","../../../node_modules/@types/semver/functions/parse.d.ts","../../../node_modules/@types/semver/functions/valid.d.ts","../../../node_modules/@types/semver/functions/clean.d.ts","../../../node_modules/@types/semver/functions/inc.d.ts","../../../node_modules/@types/semver/functions/diff.d.ts","../../../node_modules/@types/semver/functions/major.d.ts","../../../node_modules/@types/semver/functions/minor.d.ts","../../../node_modules/@types/semver/functions/patch.d.ts","../../../node_modules/@types/semver/functions/prerelease.d.ts","../../../node_modules/@types/semver/functions/compare.d.ts","../../../node_modules/@types/semver/functions/rcompare.d.ts","../../../node_modules/@types/semver/functions/compare-loose.d.ts","../../../node_modules/@types/semver/functions/compare-build.d.ts","../../../node_modules/@types/semver/functions/sort.d.ts","../../../node_modules/@types/semver/functions/rsort.d.ts","../../../node_modules/@types/semver/functions/gt.d.ts","../../../node_modules/@types/semver/functions/lt.d.ts","../../../node_modules/@types/semver/functions/eq.d.ts","../../../node_modules/@types/semver/functions/neq.d.ts","../../../node_modules/@types/semver/functions/gte.d.ts","../../../node_modules/@types/semver/functions/lte.d.ts","../../../node_modules/@types/semver/functions/cmp.d.ts","../../../node_modules/@types/semver/functions/coerce.d.ts","../../../node_modules/@types/semver/classes/comparator.d.ts","../../../node_modules/@types/semver/classes/range.d.ts","../../../node_modules/@types/semver/functions/satisfies.d.ts","../../../node_modules/@types/semver/ranges/max-satisfying.d.ts","../../../node_modules/@types/semver/ranges/min-satisfying.d.ts","../../../node_modules/@types/semver/ranges/to-comparators.d.ts","../../../node_modules/@types/semver/ranges/min-version.d.ts","../../../node_modules/@types/semver/ranges/valid.d.ts","../../../node_modules/@types/semver/ranges/outside.d.ts","../../../node_modules/@types/semver/ranges/gtr.d.ts","../../../node_modules/@types/semver/ranges/ltr.d.ts","../../../node_modules/@types/semver/ranges/intersects.d.ts","../../../node_modules/@types/semver/ranges/simplify.d.ts","../../../node_modules/@types/semver/ranges/subset.d.ts","../../../node_modules/@types/semver/internals/identifiers.d.ts","../../../node_modules/@types/semver/index.d.ts","../../../node_modules/@types/sinonjs__fake-timers/index.d.ts","../../../node_modules/@types/sinon/index.d.ts","../../../node_modules/@types/stack-utils/index.d.ts","../../../node_modules/@types/yargs-parser/index.d.ts","../../../node_modules/@types/yargs/index.d.ts"],"fileInfos":[{"version":"8730f4bf322026ff5229336391a18bcaa1f94d4f82416c8b2f3954e2ccaae2ba","affectsGlobalScope":true},"dc47c4fa66b9b9890cf076304de2a9c5201e94b740cffdf09f87296d877d71f6","7a387c58583dfca701b6c85e0adaf43fb17d590fb16d5b2dc0a2fbd89f35c467","8a12173c586e95f4433e0c6dc446bc88346be73ffe9ca6eec7aa63c8f3dca7f9","5f4e733ced4e129482ae2186aae29fde948ab7182844c3a5a51dd346182c7b06","4b421cbfb3a38a27c279dec1e9112c3d1da296f77a1a85ddadf7e7a425d45d18","1fc5ab7a764205c68fa10d381b08417795fc73111d6dd16b5b1ed36badb743d9",{"version":"3aafcb693fe5b5c3bd277bd4c3a617b53db474fe498fc5df067c5603b1eebde7","affectsGlobalScope":true},{"version":"adb996790133eb33b33aadb9c09f15c2c575e71fb57a62de8bf74dbf59ec7dfb","affectsGlobalScope":true},{"version":"8cc8c5a3bac513368b0157f3d8b31cfdcfe78b56d3724f30f80ed9715e404af8","affectsGlobalScope":true},{"version":"cdccba9a388c2ee3fd6ad4018c640a471a6c060e96f1232062223063b0a5ac6a","affectsGlobalScope":true},{"version":"c5c05907c02476e4bde6b7e76a79ffcd948aedd14b6a8f56e4674221b0417398","affectsGlobalScope":true},{"version":"5f406584aef28a331c36523df688ca3650288d14f39c5d2e555c95f0d2ff8f6f","affectsGlobalScope":true},{"version":"22f230e544b35349cfb3bd9110b6ef37b41c6d6c43c3314a31bd0d9652fcec72","affectsGlobalScope":true},{"version":"7ea0b55f6b315cf9ac2ad622b0a7813315bb6e97bf4bb3fbf8f8affbca7dc695","affectsGlobalScope":true},{"version":"3013574108c36fd3aaca79764002b3717da09725a36a6fc02eac386593110f93","affectsGlobalScope":true},{"version":"eb26de841c52236d8222f87e9e6a235332e0788af8c87a71e9e210314300410a","affectsGlobalScope":true},{"version":"3be5a1453daa63e031d266bf342f3943603873d890ab8b9ada95e22389389006","affectsGlobalScope":true},{"version":"17bb1fc99591b00515502d264fa55dc8370c45c5298f4a5c2083557dccba5a2a","affectsGlobalScope":true},{"version":"7ce9f0bde3307ca1f944119f6365f2d776d281a393b576a18a2f2893a2d75c98","affectsGlobalScope":true},{"version":"6a6b173e739a6a99629a8594bfb294cc7329bfb7b227f12e1f7c11bc163b8577","affectsGlobalScope":true},{"version":"81cac4cbc92c0c839c70f8ffb94eb61e2d32dc1c3cf6d95844ca099463cf37ea","affectsGlobalScope":true},{"version":"b0124885ef82641903d232172577f2ceb5d3e60aed4da1153bab4221e1f6dd4e","affectsGlobalScope":true},{"version":"0eb85d6c590b0d577919a79e0084fa1744c1beba6fd0d4e951432fa1ede5510a","affectsGlobalScope":true},{"version":"da233fc1c8a377ba9e0bed690a73c290d843c2c3d23a7bd7ec5cd3d7d73ba1e0","affectsGlobalScope":true},{"version":"d154ea5bb7f7f9001ed9153e876b2d5b8f5c2bb9ec02b3ae0d239ec769f1f2ae","affectsGlobalScope":true},{"version":"bb2d3fb05a1d2ffbca947cc7cbc95d23e1d053d6595391bd325deb265a18d36c","affectsGlobalScope":true},{"version":"c80df75850fea5caa2afe43b9949338ce4e2de086f91713e9af1a06f973872b8","affectsGlobalScope":true},{"version":"9d57b2b5d15838ed094aa9ff1299eecef40b190722eb619bac4616657a05f951","affectsGlobalScope":true},{"version":"6c51b5dd26a2c31dbf37f00cfc32b2aa6a92e19c995aefb5b97a3a64f1ac99de","affectsGlobalScope":true},{"version":"6e7997ef61de3132e4d4b2250e75343f487903ddf5370e7ce33cf1b9db9a63ed","affectsGlobalScope":true},{"version":"2ad234885a4240522efccd77de6c7d99eecf9b4de0914adb9a35c0c22433f993","affectsGlobalScope":true},{"version":"5e5e095c4470c8bab227dbbc61374878ecead104c74ab9960d3adcccfee23205","affectsGlobalScope":true},{"version":"09aa50414b80c023553090e2f53827f007a301bc34b0495bfb2c3c08ab9ad1eb","affectsGlobalScope":true},{"version":"d7f680a43f8cd12a6b6122c07c54ba40952b0c8aa140dcfcf32eb9e6cb028596","affectsGlobalScope":true},{"version":"3787b83e297de7c315d55d4a7c546ae28e5f6c0a361b7a1dcec1f1f50a54ef11","affectsGlobalScope":true},{"version":"e7e8e1d368290e9295ef18ca23f405cf40d5456fa9f20db6373a61ca45f75f40","affectsGlobalScope":true},{"version":"faf0221ae0465363c842ce6aa8a0cbda5d9296940a8e26c86e04cc4081eea21e","affectsGlobalScope":true},{"version":"06393d13ea207a1bfe08ec8d7be562549c5e2da8983f2ee074e00002629d1871","affectsGlobalScope":true},{"version":"2768ef564cfc0689a1b76106c421a2909bdff0acbe87da010785adab80efdd5c","affectsGlobalScope":true},{"version":"b248e32ca52e8f5571390a4142558ae4f203ae2f94d5bac38a3084d529ef4e58","affectsGlobalScope":true},{"version":"52d1bb7ab7a3306fd0375c8bff560feed26ed676a5b0457fa8027b563aecb9a4","affectsGlobalScope":true},"70bbfaec021ac4a0c805374225b55d70887f987df8b8dd7711d79464bb7b4385","869089d60b67219f63e6aca810284c89bae1b384b5cbc7ce64e53d82ad223ed5",{"version":"18338b6a4b920ec7d49b4ffafcbf0fa8a86b4bfd432966efd722dab611157cf4","affectsGlobalScope":true},"62a0875a0397b35a2364f1d401c0ce17975dfa4d47bf6844de858ae04da349f9","ee7491d0318d1fafcba97d5b72b450eb52671570f7a4ecd9e8898d40eaae9472","e3e7d217d89b380c1f34395eadc9289542851b0f0a64007dfe1fb7cf7423d24e","fd79909e93b4d50fd0ed9f3d39ddf8ba0653290bac25c295aac49f6befbd081b","345a9cc2945406f53051cd0e9b51f82e1e53929848eab046fdda91ee8aa7da31","9debe2de883da37a914e5e784a7be54c201b8f1d783822ad6f443ff409a5ea21","dee5d5c5440cda1f3668f11809a5503c30db0476ad117dd450f7ba5a45300e8f","f5e396c1424c391078c866d6f84afe0b4d2f7f85a160b9c756cd63b5b1775d93","5caa6f4fff16066d377d4e254f6c34c16540da3809cd66cd626a303bc33c419f","730d055528bdf12c8524870bb33d237991be9084c57634e56e5d8075f6605e02","5b3cd03ae354ea96eff1f74d7c410fe4852e6382227e8b0ecf87ab5e3a5bbcd4","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419",{"version":"056097110efd16869ec118cedb44ecbac9a019576eee808d61304ca6d5cb2cbe","affectsGlobalScope":true},"f51b4042a3ac86f1f707500a9768f88d0b0c1fc3f3e45a73333283dea720cdc6",{"version":"6fb8358e10ed92a7f515b7d79da3904c955a3ffd4e14aa9df6f0ea113041f1cf","affectsGlobalScope":true},"45c831238c6dac21c72da5f335747736a56a3847192bf03c84b958a7e9ec93e2","661a11d16ad2e3543a77c53bcd4017ee9a450f47ab7def3ab493a86eae4d550c",{"version":"8cdc646cec7819581ef343b83855b1bfe4fe674f2c84f4fb8dc90d82fb56bd3a","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","9dd56225cc2d8cb8fe5ceb0043ff386987637e12fecc6078896058a99deae284","2375ed4b439215aa3b6d0c6fd175c78a4384b30cb43cbadaecbf0a18954c98cb","7693b90b3075deaccafd5efb467bf9f2b747a3075be888652ef73e64396d8628","41231da15bb5e3e806a8395bd15c7befd2ec90f9f4e3c9d0ae1356bccb76dbb0","fccfef201d057cb407fa515311bd608549bab6c7b8adcf8f2df31f5d3b796478",{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true},"5f20d20b7607174caf1a6da9141aeb9f2142159ae2410ca30c7a0fccd1d19c99",{"version":"464762c6213566d072f1ced5e8e9a954785ec5e53883b7397198abb5ef5b8f71","affectsGlobalScope":true},"6387920dc3e18927335b086deec75bf8e50f879a5e273d32ee7bb7a55ba50572","9bba37424094688c4663c177a1379b229f919b8912889a472f32fdc5f08ddb4d","29a4be13b3a30d3e66667b75c58ec61fb2df8fa0422534fdee3cfb30c5dbf450","83366d901beda79d6eb37aaaf6ca248dcd88946302b2a7d975590783be51e88e","bf268a0aea37ad4ae3b7a9b58559190b6fc01ea16a31e35cd05817a0a60f895a","43ec77c369473e92e2ecebf0554a0fdaa9c256644a6070f28228dfcceec77351",{"version":"d7dad6db394a3d9f7b49755e4b610fbf8ed6eb0c9810ae5f1a119f6b5d76de45","affectsGlobalScope":true},"95ed02bacb4502c985b69742ec82a4576d4ff4a6620ecc91593f611d502ae546","bf755525c4e6f85a970b98c4755d98e8aa1b6dbd83a5d8fcc57d3d497351b936","dd67d2b5e4e8a182a38de8e69fb736945eaa4588e0909c14e01a14bd3cc1fd1e",{"version":"28084e15b63e6211769db2fe646d8bc5c4c6776321e0deffe2d12eefd52cb6b9","affectsGlobalScope":true},{"version":"aed37dabf86c99d6c8508700576ecede86688397bc12523541858705a0c737c2","affectsGlobalScope":true},"cc6ef5733d4ea6d2e06310a32dffd2c16418b467c5033d49cecc4f3a25de7497","94768454c3348b6ebe48e45fbad8c92e2bb7af4a35243edbe2b90823d0bd7f9a","0be79b3ff0f16b6c2f9bc8c4cc7097ea417d8d67f8267f7e1eec8e32b548c2ff","1c61ffa3a71b77363b30d19832c269ef62fba787f5610cac7254728d3b69ab2e","84da3c28344e621fd1d591f2c09e9595292d2b70018da28a553268ac122597d4","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","6e191fea1db6e9e4fa828259cf489e820ec9170effff57fb081a2f3295db4722","aed943465fbce1efe49ee16b5ea409050f15cd8eaf116f6fadb64ef0772e7d95","70d08483a67bf7050dbedace398ef3fee9f436fcd60517c97c4c1e22e3c6f3e8","c40fdf7b2e18df49ce0568e37f0292c12807a0748be79e272745e7216bed2606",{"version":"e933de8143e1d12dd51d89b398760fd5a9081896be366dad88a922d0b29f3c69","affectsGlobalScope":true},"4e228e78c1e9b0a75c70588d59288f63a6258e8b1fe4a67b0c53fe03461421d9","b38d55d08708c2410a3039687db70b4a5bfa69fc4845617c313b5a10d9c5c637","205d50c24359ead003dc537b9b65d2a64208dfdffe368f403cf9e0357831db9e","1265fddcd0c68be9d2a3b29805d0280484c961264dd95e0b675f7bd91f777e78",{"version":"a05e2d784c9be7051c4ac87a407c66d2106e23490c18c038bbd0712bde7602fd","affectsGlobalScope":true},{"version":"df90b9d0e9980762da8daf8adf6ffa0c853e76bfd269c377be0d07a9ad87acd2","affectsGlobalScope":true},"cf434b5c04792f62d6f4bdd5e2c8673f36e638e910333c172614d5def9b17f98","1d65d4798df9c2df008884035c41d3e67731f29db5ecb64cd7378797c7c53a2f","0faee6b555890a1cb106e2adc5d3ffd89545b1da894d474e9d436596d654998f","c6c01ea1c42508edf11a36d13b70f6e35774f74355ba5d358354d4a77cc67ea1","867f95abf1df444aab146b19847391fc2f922a55f6a970a27ed8226766cee29f",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"b0297b09e607bec9698cac7cf55463d6731406efb1161ee4d448293b47397c84","175323e2a79a6076e0bada8a390d535a3ea817158bf1b1f46e31efca9028a0a2","7a10053aadc19335532a4d02756db4865974fd69bea5439ddcc5bfdf062d9476","4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","aed9e712a9b168345362e8f3a949f16c99ca1e05d21328f05735dfdbb24414ef","b04fe6922ed3db93afdbd49cdda8576aa75f744592fceea96fb0d5f32158c4f5","ed8d6c8de90fc2a4faaebc28e91f2469928738efd5208fb75ade0fa607e892b7","d7c52b198d680fe65b1a8d1b001f0173ffa2536ca2e7082431d726ce1f6714cd","c07f251e1c4e415a838e5498380b55cfea94f3513229de292d2aa85ae52fc3e9","0ed401424892d6bf294a5374efe512d6951b54a71e5dd0290c55b6d0d915f6f7","b945be6da6a3616ef3a250bfe223362b1c7c6872e775b0c4d82a1bf7a28ff902","beea49237dd7c7110fabf3c7509919c9cb9da841d847c53cac162dc3479e2f87","0f45f8a529c450d8f394106cc622bff79e44a1716e1ac9c3cc68b43f7ecf65ee","c624ce90b04c27ce4f318ba6330d39bde3d4e306f0f497ce78d4bda5ab8e22ca","9b8253aa5cb2c82d505f72afdbf96e83b15cc6b9a6f4fadbbbab46210d5f1977","86a8f52e4b1ac49155e889376bcfa8528a634c90c27fec65aa0e949f77b740c5","aab5dd41c1e2316cc0b42a7dd15684f8582d5a1d16c0516276a2a8a7d0fecd9c","59948226626ee210045296ba1fc6cb0fe748d1ff613204e08e7157ab6862dee7","ec3e54d8b713c170fdc8110a7e4a6a97513a7ab6b05ac9e1100cb064d2bb7349","43beb30ecb39a603fde4376554887310b0699f25f7f39c5c91e3147b51bb3a26","666b77d7f06f49da114b090a399abbfa66d5b6c01a3fd9dc4f063a52ace28507","31997714a93fbc570f52d47d6a8ebfb021a34a68ea9ba58bbb69cdec9565657e","6032e4262822160128e644de3fc4410bcd7517c2f137525fd2623d2bb23cb0d3","8bd5c9b1016629c144fd228983395b9dbf0676a576716bc3d316cab612c33cd5","2ed90bd3925b23aed8f859ffd0e885250be0424ca2b57e9866dabef152e1d6b7","93f6bd17d92dab9db7897e1430a5aeaa03bcf51623156213d8397710367a76ce","3f62b770a42e8c47c7008726f95aa383e69d97e85e680d237b99fcb0ee601dd8","5b84cfe78028c35c3bb89c042f18bf08d09da11e82d275c378ae4d07d8477e6c","75b22c74010ba649de1a1676a4c4b8b5bb4294fecd05089e2094429b16d7840c","5615ccf831db2ffc82145243081ebdb60ea8e1005ee8f975d1c0c1401a9c894e","38682ed3630bb6ecdace80d5a9adc811fc20a419f1940446e306c3a020d083b9","cc182e6e4f691cd6f7bf7cb491247a4c7818f9f1cb2db1d45c65ff906e3f741b","a50599c08934a62f11657bdbe0dc929ab66da1b1f09974408fd9a33ec1bb8060","5a20e7d6c630b91be15e9b837853173829d00273197481dc8d3e94df61105a71","8d478048d71cc16f806d4b71b252ecb67c7444ccf4f4b09b29a312712184f859","e0eda929c6b9b628cdeb0e54cd3582cb97e64f28aab34612fc1431c545899584","9df4662ca3dbc2522bc115833ee04faa1afbb4e249a85ef4a0a09c621346bd08","b25d9065cf1c1f537a140bbc508e953ed2262f77134574c432d206ff36f4bdbf","1b103313097041aa9cd705a682c652f08613cb5cf8663321061c0902f845e81c","68ccec8662818911d8a12b8ed028bc5729fb4f1d34793c4701265ba60bc73cf4","5f85b8b79dc4d36af672c035b2beb71545de63a5d60bccbeee64c260941672ab","b3d48529ae61dc27d0bfbfa2cb3e0dff8189644bd155bdf5df1e8e14669f7043","40fe4b689225816b31fe5794c0fbf3534568819709e40295ead998a2bc1ab237","f65b5e33b9ad545a1eebbd6afe857314725ad42aaf069913e33f928ab3e4990a","fb6f2a87beb7fb1f4c2b762d0c76a9459fc91f557231569b0ee21399e22aa13d","31c858dc85996fac4b7fa944e1016d5c72f514930a72357ab5001097bf6511c7","3de30a871b3340be8b679c52aa12f90dd1c8c60874517be58968fdbcc4d79445","6fd985bd31eaf77542625306fb0404d32bff978990f0a06428e5f0b9a3b58109","980d21b0081cbf81774083b1e3a46f4bbdcd2b68858df0f66d7fad9c82bc34bc","68cc8d6fcc2f270d7108f02f3ebc59480a54615be3e09a47e14527f349e9d53e","3eb11dbf3489064a47a2e1cf9d261b1f100ef0b3b50ffca6c44dd99d6dd81ac1","b17f3bb7d8333479c7e45e5f3d876761b9bca58f97594eca3f6a944fd825e632","3c1f1236cce6d6e0c4e2c1b4371e6f72d7c14842ecd76a98ed0748ee5730c8f3","6d7f58d5ea72d7834946fd7104a734dc7d40661be8b2e1eaced1ddce3268ebaf","4c26222991e6c97d5a8f541d4f2c67585eda9e8b33cf9f52931b098045236e88","277983d414aa99d78655186c3ee1e1c38c302e336aff1d77b47fcdc39d8273fe","47383b45796d525a4039cd22d2840ac55a1ff03a43d027f7f867ba7314a9cf53","6548773b3abbc18de29176c2141f766d4e437e40596ee480447abf83575445ad","6ddd27af0436ce59dd4c1896e2bfdb2bdb2529847d078b83ce67a144dff05491","816264799aef3fd5a09a3b6c25217d5ec26a9dfc7465eac7d6073bcdc7d88f3f","4df0891b133884cd9ed752d31c7d0ec0a09234e9ed5394abffd3c660761598db","b603b62d3dcd31ef757dc7339b4fa8acdbca318b0fb9ac485f9a1351955615f9","e642bd47b75ad6b53cbf0dfd7ddfa0f120bd10193f0c58ec37d87b59bf604aca","be90b24d2ee6f875ce3aaa482e7c41a54278856b03d04212681c4032df62baf9","78f5ff400b3cb37e7b90eef1ff311253ed31c8cb66505e9828fad099bffde021","372c47090e1131305d163469a895ff2938f33fa73aad988df31cd31743f9efb6","71c67dc6987bdbd5599353f90009ff825dd7db0450ef9a0aee5bb0c574d18512","6f12403b5eca6ae7ca8e3efe3eeb9c683b06ce3e3844ccfd04098d83cd7e4957","282c535df88175d64d9df4550d2fd1176fd940c1c6822f1e7584003237f179d3","c3a4752cf103e4c6034d5bd449c8f9d5e7b352d22a5f8f9a41a8efb11646f9c2","11a9e38611ac3c77c74240c58b6bd64a0032128b29354e999650f1de1e034b1c","4ed103ca6fff9cb244f7c4b86d1eb28ce8069c32db720784329946731badb5bb","d738f282842970e058672663311c6875482ee36607c88b98ffb6604fba99cb2a","ec859cd8226aa623e41bbb47c249a55ee16dc1b8647359585244d57d3a5ed0c7","8891c6e959d253a66434ff5dc9ae46058fb3493e84b4ca39f710ef2d350656b1","c4463cf02535444dcbc3e67ecd29f1972490f74e49957d6fd4282a1013796ba6","0cb0a957ff02de0b25fd0f3f37130ca7f22d1e0dea256569c714c1f73c6791f8","2f5075dc512d51786b1ba3b1696565641dfaae3ac854f5f13d61fa12ef81a47e","ca3353cc82b1981f0d25d71d7432d583a6ef882ccdea82d65fbe49af37be51cb","50679a8e27aacf72f8c40bcab15d7ef5e83494089b4726b83eec4554344d5cdc","45351e0d51780b6f4088277a4457b9879506ee2720a887de232df0f1efcb33d8","9f9e5bae412fa5909fae636d6733aee27a108cc2ed5b13980611016336774d3c","662fe197bba64bd3f17ee118058cd2d0d2dbe33d7c0c865fd6365d90bfc44e1e","030519c351f800551cac2658038804969ca4584d2c0175a710602ac234ca1340","0278a6939ca83cd040b08ff8c5fc7838b6693ddc52f22526bf158e6b10e0246c","c2d6206e5ba4fd3063b01218c2b3b997afc1cfbeb49fcee991fa8595842ce53d","29c188a2c660f99f1b4835022e011c4268d7af989d4b7dda33c0a69ca1a777f8","1ed0bf138e87912d741e28333b58cbf814ae863783b3b404d2454cbabb9c5fc0","3452ee7d8ef0b1bbd47b2a56924a1dc3c79dc84a19d212e9dc496f92e4943aa0","5d697a4b315cc5bb3042ae869abffd10c3b0d7b182cda0e4c45d8819937e5796","563fa27fdaec8f195b84f71a7af0ef48d30d5cc830575db86da86a63a470c8e6","6ee58aa536dabb19b09bc036f1abe83feb51e13d63b23d30b2d0631a2de99b8f","8aceb205dcc6f814ad99635baf1e40b6e01d06d3fe27b72fd766c6d0b8c0c600","299567f84bfedd1468dca2755a829cb19e607a6811673788807dc8921e211bc9","795d9fb85aad92221504db74dd179b506bd189bba0c104426f7e7bb8a66ffee5","1311bc194e0a69fe61031e852c1c0b439e2a2a3d1d5e2d8ff795499b9f283459","4b7ce19369d7e7fae76720c2c6c7f671bf3fa0f7093edb864f1ac358ca7c456c","c972ef44deca1fa8fab465915ffa00f82e126aacf3dfc8979c03b1b066ce5bb6","30285a1011c6d6b52f3ba3abb0a984be8148c05cdefb8eb6eb562335a3991f35","8e7adb22c0adecf7464861fc58ae3fc617b41ffbd70c97aa8493dc0966a82273","755f3cd1d9c1b564cff090e3b0e29200ae55690a91b87cb9e7a64c2dbeb314d3","d6bb7e0a6877b7856c183bff13d09dd9ae599ea43c6f6b33d3d5f72a830ed460","f1b51ae93c762d7c43f559933cd4842dd870367e8d92e90704ffa685dd5b29a3","3f450762fd7c34ed545e738abccb0af6a703572a10521643cf8fc88e3724c99c","fcc8beef29f39f09b1d9c9f99c42f9fed605ab1c28d2a630185f732b9ba53763","d6e6620a30d582182acc3f0a992a0c311adc589f111096aea11ab83fc09a5ccc","6213b8f686f56beab22b59a0f468590fd3a4c5fa931236a017efeca91d7c9584","c451cec9a588b1f105a5ea2c6063d4fca112b9d70105cacdadda0e1ef67e9379","cb047832dc68f5a2c41c62c5e95ddcacbae3a8b034d40cd15319a8cb7f25104a","980336ccdfc3c08f3c3b201aa6662e6016e20f15847f8465b68f3e8e67b4665c","5a3493939995f46ff3d9073cd534fb8961c3bf4e08c71db27066ff03d906dea8","bb5a2ac327605ebebf831c469b05bd34a33a6a46ee8c1edd9f3310aad32cf6a1","bf5d041f2440b4a9391e2b5eb3b8d94cbf1e3b8ff4703b6539d4e65e758c8f37","8516469eb90e723b0eb03df1be098f7e6a4709f6f48fd4532868d20a0a934f6e","d60e9ab369a72d234aac49adbe2900d8ef1408a6ea4db552cf2a48c9d8d6a1bc","0ebb4698803f01e2e7df6acce572fff068f4a20c47221721dafd70a27e372831","03460a54d0e0481d1e11097f66ad43f054bc95efdafe5f81bbc7a82be181af75","4070c2f1c3434fcf84886e04d30d82cd650ee443e53b82b404b144175cf8741e","2cea9689efa8591732096235abe7f084fc29c92badd5b0897a5e876b77e71887","4ed4e504126014fee13aaef5e3fc140f2ff7031ff3a8b5386717905820ea2d09","8129a34006218a6f3cdc81bbd438d5429eb18b08b4338a26977ac3b4df129d75","30d2170e1a718b5035611af55e3618b4ba8f42f0749bb52ee593da6082c4e2ce","98ef38666d88ec9699a722053e07ede65d3042f693fe7ff8c786e53dbb6fd43b","a3b8b6be7620897d1e481e8650c980a210a138fceb6e710eaf95fd9dd0dfe94a","12c89d0e32758c120a569045f21cf5b77244f86792611ced8de7f86b37e77781","14bd47270e654c8eb3b1489fa8c095912ee62a0a29bb92743393203722347c53","36ef009101fb50d3a354096bc787a116f81b96cc896cb7bc72a84bd59de7eb26","cde903bcab0a3680b74b47312d241d6f4cc3fab0068ade72e5ffca9406b7e148","92cb686a9ca5eb5dd7d5d8d43a3707194c1e91ea07a027b3bcb60b6011b24632","5a15e0fb141751bf23a95ddfababd939a86cb94ca9f550ab4a3d9940acd06c3a","66bbae6120d307ec2021ebd2241b8ad23f832b663e13363ca8b4c8dbc131a4e6","72e7be5040a865e113cf78e17eba90499c44607a6a59d0d9b6f843369167523c","0d2acd3a3840418f280e10b2adc0154848f4a162ab6a6466cbf5d0210200a6f8","08417035838838db86f31bd576b1fe246be76c1507b8fc1f2eec744c0d0d125e","b78647f4fd09671f9e7502612cf5f0c072ab2ec917312810d36927fcdeeb5a7c","d6b58d955981bc1742501b792f1ab9f4cba0c4611f28dcf1c99376c1c33c9f9c","0cb9cfa126435d30332ff00441e0db904e55dccb5b1fa7220eaf024e7f425eeb","c0e03327bc548757709a7e2ca3063ca8b46227b5e13cd981ca3483035ef5ac44","b8442e9db28157344d1bc5d8a5a256f1692de213f0c0ddeb84359834015a008c","458111fc89d11d2151277c822dfdc1a28fa5b6b2493cf942e37d4cd0a6ee5f22","da2b6356b84a40111aaecb18304ea4e4fcb43d70efb1c13ca7d7a906445ee0d3","187119ff4f9553676a884e296089e131e8cc01691c546273b1d0089c3533ce42","febf0b2de54781102b00f61653b21377390a048fbf5262718c91860d11ff34a6","6f294731b495c65ecf46a5694f0082954b961cf05463bea823f8014098eaffa0","0aaef8cded245bf5036a7a40b65622dd6c4da71f7a35343112edbe112b348a1e","00baffbe8a2f2e4875367479489b5d43b5fc1429ecb4a4cc98cfc3009095f52a","68a0d0c508e1b6d8d23a519a8a0a3303dc5baa4849ca049f21e5bad41945e3fc","3c92b6dfd43cc1c2485d9eba5ff0b74a19bb8725b692773ef1d66dac48cda4bd","b03afe4bec768ae333582915146f48b161e567a81b5ebc31c4d78af089770ac9","df996e25faa505f85aeb294d15ebe61b399cf1d1e49959cdfaf2cc0815c203f9","4f6a12044ee6f458db11964153830abbc499e73d065c51c329ec97407f4b13dd","fb14266ae4070bd16db6b071e98887452bc359695c40742e38515a89dbc80a63","4a24d83c0d8f489465c4d38ed9fd87121c8a2cf50c47efe09c2eca93d39fa908","c052e32b9de53cd2596f196a0901801961bd7a31be9fac4ac2f117e4103e3a07","b15cdbb45919bc3b8e6b6f962d65382e85061d70bc26a968604f3dce4ad3a891","d6b58d955981bc1742501b792f1ab9f4cba0c4611f28dcf1c99376c1c33c9f9c","f0b9f6d5db82c3d1679f71b187c4451dbc2875ba734ce416a4804ad47390970a","a5c38939c3e22954a7166d80ab931ac6757283737b000f1e6dc924c6f4402b88","31a863da9da2a3edec16665695bdbc3134e853195f82dafec58e98c8e1bb3119","61d96adb612e96087f7dd20e9c363272d6b65b6cd1a35a488b3e0838d25e87bf","90d1ad8d2983cb003d6f237b41c56a8f252f72071bbc53576e02b3c96d7ea47a","fab58e600970e66547644a44bc9918e3223aa2cbd9e8763cec004b2cfb48827e",{"version":"99e8bb8d262bece129ac203f0c7436a07771e9cf5ba06a308d1b16993606eaf2","signature":"8705a9680ed4afb15edbd7bb9ee24af33060d1165117f293559f3073bf8d0101"},"ebf6e19cb84d78da20d022a95f05e8aef12e56f816a1ee12835a4da40d7b14cf","589357c2f88f1188a0dfc48c4c4cf4d22fac9f654805df5f2789a01b5616b74f","6abe62ec5b9b6a747c1a7687d58ff179cdfb61adee717b6e4882120f7da4399f","5c1301f550be26133f4fd34eadf38815db096ecaf9b75948b444a063097f496d",{"version":"bdd739cccaf9d355597c8f59a48f135db06d0f723dbeb23d54909869e49c27dd","signature":"b8e3327d09e24ca50d3c0692621004e5f9e4a04967b811c9e648842e2fc74129"},{"version":"34ef3dd636b7074beec81346987a81ac245e1cfd75adf0babc68e6cb6c572ca3","signature":"82065c62b6a8089452cb40191a55299b2d0718ddce833446faa6c01f48f05b29"},{"version":"c1eb1aa5e32fd31d4564bffb458942d8caf500d86388c811cbb853c274e4773a","signature":"a7fe41f597b2631d3fb439d9b3ee32d1606c651a45ce2fa0d170a2614e68d280"},{"version":"7351105cc83a2ac445c596140d41443112a2a7587f06d91a9e82097681d11876","signature":"70b3082385b926b4bb0dbcef0b2f444c4f807d312546f27ee248d50b0dfa5877"},{"version":"91e01f49ef0adf66d7d8045d69a8d0f3b78287cbcda555b5463345ab74af4906","signature":"01b86f9481ddaf74b65f12e90ae2d5bedbc0e67e64e8cb273c7a1907cc66dbec"},{"version":"e345bccf20b0bc42bde555df57bc1472413ceb72ddda82257a08a1fb8cacb69c","signature":"3089238aed154b07430dd80de65df3115d268f21f1afcd8568a58d65c7827c5f"},{"version":"cd898920977c96d416f598fed1236f584c79cf5aae8cb3f4c3f4d8133eb12fb9","signature":"2642375958909546f682d51f9c3682f553ae5f919f7b4a77d49262c200bca248"},{"version":"db3db9885deb334e6606785a0bfe7aecdcae172d36a6b4bd55958c756b92ac6c","signature":"79cdba32abf1fd279e588363d3048cb4b3d537a81530d32079cea1df22d66f93"},"1fcb8b15db812281d69a3090d488903f9e93033004aef9d8889ca3ad0753a96f","bdf5a95eb0a2dd1d39805bdf51b46ba012bb9b92b2ddaae16219595bba7678a5","9f794a0e8550a03baff865a3961cc22afbd85bc4ba9672bdda036971928f85f4","66a697d1e4cdbf25cdce4644a8085a8563041fa8c7731d4d9f5e8f22e66ba72c","a0c8e17f4d1ea2704c62d7349bc3b8d9a12e3761b5960cb44144d3f0333b3fcb","3471c0df3d0391e1dffe6e8bf150294531b2b71a2afa5f2b86e52bf84a5db60a","5d4df4de055eddf3187094f938a640f8d96e4c551a47d6686596fdb6ba4c3014","8bc2cad630da1033c1fd8d7df2bffb18af0da6113bd086a8bbec04a2471a1e00","a1059d1bbc8ad46bfe668b8450e7e8002887c4ab987bdb96d6108d8023f8bb8f","5134885e9648e2c6745f8aa1c3e7f5ab3b3617258b3d81ca02de6655ede3d74e","4f1ae3f24125216cf07c5211a3f00d2bb4782d7cc76c0681603f8249f9232ff0","d3fb92a5640f83f7844d60b35317a0f95c27e3658a749d76d218c461ad091668","d1f8bfcd91b284657ef8187c55ace7db91a3c43e642c3f14e54364154932f7e4","f54c92bfcae54f360fe79514746efce4870e4ddabc064e95d406bba291e9f672","175fd7186fa6a70f9db9b270a04a503cae23cf01cb77e3905bac115c38424cf7","c993f7ed1b8e1023c1f2ee5b262dbc3b70b27475674e40a53a58591f9972dacc","c914014ab7c7001178663f29d31a495398234a41219af61f26d7e8e91b46af96","277afd6ab6ec72889e2988e0ddd7d138c1f512e68a1fa4e90eedfd71e2097a51","c0908f85f2b645d375127a3b53a17a65f782e17962d5c1eb68f08b1188acbf15","3fadac5d409cc2f27b1d2f4e7568600f02840205f301c9ae7a3068b46476438b","da6aae64ad559286830fd44c81e3d33303348f184af7db4fde8dd99ae9749407","3633f87c97d359cb55fa7bf0668fb2be8a23342951af6ec2d06e6d0cf7409371","cc3a5427d44fc77ff25e80b3edee4650a51f83de761faf5e633994ecf1ab1b44","b350eda75c6e47299b36002b31d5b220c405c21c365e708989829db013fadbb4","f421882756b6714834ae4687ab1aeadf344a1cc45437d2edffbac020ff3801c1","1d61d6ad832dabafbf63b86c5a79d704f2c8763ada9318e135b17a3cb2d09b32","e5cef5de3e5ad3436d414d20743231e284733b9cf4375dc79eff4fcca4282f99","e624419ba84e33e661e89a28083119ca41f6953dba09a4f82b660684087afe6d","942be430bd0feaced2e3e598273b17e50ea565ec9dac840b580b0b99e1a3cd5c","73350006cec5a0c6b71d53b0b0ddbfb82be96752a9c4e3c904c59e633bc9485e","a7df5c2e9594966c7e0d4a763b13ed5727506d892669df5f7bc9826f539c1d35","258cc5cd6891f6bcbaccefd953997038844e7f65d582cac987ffabf7181bcd4c","00a6db28fc4df6ddf10adbe630d9df620ec13af19039c1869653e60dafa739d2","649324d5abb5464aabe35d86cd0eef16562df811f0971481cee664afa5acbc88",{"version":"628749b6edfc907c32583a77f7dde111642dbfc13265fa566e9a8fa47f224b51","signature":"495944b274165419ec08446dbd612d6276e2c12b92caa1f1e6c645cbc044ef25"},{"version":"e2f7d4348da1a42007547574ec71504de5e9df04d270bcc4c672bec1068257e4","signature":"0d7e153773886e59a74ffe1fac08bef805541411de160b9f3af36f8a6a3c6022"},{"version":"70fa251413c8e1926804d27e8aa01f96bf56141270e8adaeedfeaf0cc7147cef","signature":"2e85c128d27849ff4bd436f75d32d8a64d9013d420f09c82c6eae63cb7131020"},{"version":"334a6eff67fdb6feabbe5a612552a0714c424ccd07abbb096672085e7d43fb4a","signature":"19756a360a54eda2a10138b94b37a87519fd1a27c678a1b82187295e40bbfacd"},{"version":"ff3dd9affd682e83492778e2ccc34f8ff304ba194f311ee79ef53466e90375a8","signature":"b195f1ad5886c1600c53bc7296210f9ded9a9a673e01988eecf9f20f48a4d9d5"},{"version":"84bc1aaa75cd030e6bacf8b67a63c7dfed0fbab50d9a2cd4e9ce00646b477dd2","signature":"55310e6719d6bd9462e76cbba6a582712b30a85ee4949b8d98e14e0f46738e78"},{"version":"d184310a8c121c1ed754995dc55f8ca212bb1ef94979f99423dcdc48569b3c51","signature":"99ec28bacd04a3185d90660fe18bae48f33cbb1d50c73c64cae98e67f7c0ca01"},{"version":"48d475a0c6f91f62a89b128923cdec08f1f30a12df0068493f0d9b2774125b01","signature":"6a90b1b75bb0eb776ae223adc1f3f1cc343abf3e68df619933a3248910061290"},{"version":"04b9105d97375331eb7e79bac54dcab9754adfbdd14688f81deb47cfd6c00261","signature":"21dc4e454064f82878690f3f5fcee15e4fbee0c8934a1487447be2ceeefb1438"},{"version":"9ea9cb14968a77279db842f0836768723aa7450609732d2dec578a5fbf5d21ea","signature":"0aeb9a7ce850134709dee9ecb63c1883e387eb70f960e0510100f4b2bb70caa4"},{"version":"33a62d0beb599c1e56057a0172bd61c7e828808ea52fa3dd6f9e3d4e2b2a4479","signature":"2a9df0e6263e8fcaea639c415213010e4f762482d24f3ef5f0802a453721100b"},{"version":"6720778d4192df7ececcfd9dfebed8a006c9c44f88fe8b74880ab3ba7e14cce4","signature":"121c82998e23aa414d41a2f08e108074760318a1c11a2a5183b88b0d9be4ef60"},{"version":"e3fe28954899e21bf8a7db496cb4b90313e826bb5ae938d84bc73c3bdaa31cc9","signature":"4e1f22dbfc0754b698f1e291c7c92bf1220834bd5620207084236399cfd02e2d"},{"version":"7f2a2cdf8eecbe353d449055d91c6ee619f90ca3b3a49ba5a44563c44aab5d1a","signature":"8e6165fa13e0d2f40e2403ab20b72804d02c663709a3f7383a320050e893fe8b"},{"version":"6e313f45818617dea7230e39b3f0d4106bd0fd6a1c90d9d61f538a30719fae7e","signature":"adcfe355f9f15cc87c265ea73e18a529eb9f4a3718ab4af74100c0338b72d4ed"},"14c94f7888c75007a94132f03caef0f6b58bcb136c2994213fd2d3b99f3d7f85","4695042a55a75a6c62dc57f2efe60ef3c7bbe19adedb5081f6e51dd664bbc3f7","b006ad8d854471e7a270bd8918508090961bdc1cfe77ed51f13f471fe682acac","310901df1081433ff7c3b7918496cabb92ded208b04294d3d2bd35acae2de836","c8646410cd2a6bf05eb7e7a51c881776410d07fd5d8f75092a2c815c9c6fda52",{"version":"127604bb56d364ecc35cbb4927ba7c53f552353fc7913b07a4f5cc957210aabd","signature":"973a1e0a155ab26d66226ff9d64a36cf61227e9240b21cabdc67df29847a6599"},{"version":"dcea5769c8b69d7b7a5ee6ffd4d22260e47d53d22990e91d504cbdc0c0120c14","signature":"16c51743932253da5b661b0a5068eb1423a6f020f62e6783ce8ac5259cff10f2"},{"version":"51ee21e710538349cca2359ed4c342f40d416e59c239dae65adbe94064888033","signature":"05fe3dec4dc02961a8959758da54c6ff9d32a232183041163d4d52cc6bf39015"},{"version":"e2e5ebf01c7004f157b8c750fdddb9f227fbf3119a87297e3a014db04c3f0887","signature":"fc6fe9c667e291d0bbdc904c921d2c1d385175f8c135d9e549298c96265acaec"},{"version":"be10e614e91666771dfc60a37e06ba1479c691f7389dfa4de16404a2890277b1","signature":"38fd30580198d072da98f6dbcb7535f47359ca91ffe57e3b9bfd1961a3b209ab"},{"version":"1ed974e9fadcd6d8e827bef451d381585496319c4c378b0901319209907e2126","signature":"399b9452108ae40b75ecf1926c3df531e1acda6a1baed17f8e29763569ba3b07"},{"version":"4c408d170f00539f8957a9cfce1d7f3e4a2d36651dbf4b16337a7af5c568d7e5","signature":"a0c04e7f7ac63b60e113ff0a7ad4fbf9214babb1db0572641709a5859710e27c"},"4489c6a9fde8934733aa7df6f7911461ee6e9e4ad092736bd416f6b2cc20b2c6","2c8e55457aaf4902941dfdba4061935922e8ee6e120539c9801cd7b400fae050","8041cfce439ff29d339742389de04c136e3029d6b1817f07b2d7fcbfb7534990","670a76db379b27c8ff42f1ba927828a22862e2ab0b0908e38b671f0e912cc5ed","9d38964b57191567a14b396422c87488cecd48f405c642daa734159875ee81d9","069bebfee29864e3955378107e243508b163e77ab10de6a5ee03ae06939f0bb9","8c95f96ccd4be0674944077aec1e4f2cccd515ca06d4327562dd017250e7d3fc",{"version":"64d4b35c5456adf258d2cf56c341e203a073253f229ef3208fc0d5020253b241","affectsGlobalScope":true},"ee7d8894904b465b072be0d2e4b45cf6b887cdba16a467645c4e200982ece7ea","f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","bc3cba7b0af2d52e7425299aee518db479d44004eff6fbbd206d1ee7e5ec3fb5","afe73051ff6a03a9565cbd8ebb0e956ee3df5e913ad5c1ded64218aabfa3dcb5","035a5df183489c2e22f3cf59fc1ed2b043d27f357eecc0eb8d8e840059d44245","a4809f4d92317535e6b22b01019437030077a76fec1d93b9881c9ed4738fcc54","5f53fa0bd22096d2a78533f94e02c899143b8f0f9891a46965294ee8b91a9434","0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2","d8aab31ba8e618cc3eea10b0945de81cb93b7e8150a013a482332263b9305322","462bccdf75fcafc1ae8c30400c9425e1a4681db5d605d1a0edb4f990a54d8094","5923d8facbac6ecf7c84739a5c701a57af94a6f6648d6229a6c768cf28f0f8cb","7adecb2c3238794c378d336a8182d4c3dd2c4fa6fa1785e2797a3db550edea62","dc12dc0e5aa06f4e1a7692149b78f89116af823b9e1f1e4eae140cd3e0e674e6","1bfc6565b90c8771615cd8cfcf9b36efc0275e5e83ac7d9181307e96eb495161","8a8a96898906f065f296665e411f51010b51372fa260d5373bf9f64356703190","7f82ef88bdb67d9a850dd1c7cd2d690f33e0f0acd208e3c9eba086f3670d4f73",{"version":"ccfd8774cd9b929f63ff7dcf657977eb0652e3547f1fcac1b3a1dc5db22d4d58","affectsGlobalScope":true},"d92dc90fecd2552db74d8dc3c6fb4db9145b2aa0efe2c127236ba035969068d4","96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","8841e2aa774b89bd23302dede20663306dc1b9902431ac64b24be8b8d0e3f649","916be7d770b0ae0406be9486ac12eb9825f21514961dd050594c4b250617d5a8","254d9fb8c872d73d34594be8a200fd7311dbfa10a4116bfc465fba408052f2b3","d88a5e779faf033be3d52142a04fbe1cb96009868e3bbdd296b2bc6c59e06c0e","2ccea88888048bbfcacbc9531a5596ea48a3e7dcd0a25f531a81bb717903ba4f","5e379df3d61561c2ed7789b5995b9ba2143bbba21a905e2381e16efe7d1fa424","f07a137bbe2de7a122c37bfea00e761975fb264c49f18003d398d71b3fb35a5f","d8f7109e14f20eb735225a62fd3f8366da1a8349e90331cdad57f4b04caf6c5a","cf3d384d082b933d987c4e2fe7bfb8710adfd9dc8155190056ed6695a25a559e","9871b7ee672bc16c78833bdab3052615834b08375cb144e4d2cba74473f4a589","c863198dae89420f3c552b5a03da6ed6d0acfa3807a64772b895db624b0de707","8b03a5e327d7db67112ebbc93b4f744133eda2c1743dbb0a990c61a8007823ef","86c73f2ee1752bac8eeeece234fd05dfcf0637a4fbd8032e4f5f43102faa8eec","42fad1f540271e35ca37cecda12c4ce2eef27f0f5cf0f8dd761d723c744d3159","ff3743a5de32bee10906aff63d1de726f6a7fd6ee2da4b8229054dfa69de2c34","83acd370f7f84f203e71ebba33ba61b7f1291ca027d7f9a662c6307d74e4ac22","1445cec898f90bdd18b2949b9590b3c012f5b7e1804e6e329fb0fe053946d5ec","0e5318ec2275d8da858b541920d9306650ae6ac8012f0e872fe66eb50321a669","cf530297c3fb3a92ec9591dd4fa229d58b5981e45fe6702a0bd2bea53a5e59be","c1f6f7d08d42148ddfe164d36d7aba91f467dbcb3caa715966ff95f55048b3a4","f4e9bf9103191ef3b3612d3ec0044ca4044ca5be27711fe648ada06fad4bcc85","0c1ee27b8f6a00097c2d6d91a21ee4d096ab52c1e28350f6362542b55380059a","7677d5b0db9e020d3017720f853ba18f415219fb3a9597343b1b1012cfd699f7","bc1c6bc119c1784b1a2be6d9c47addec0d83ef0d52c8fbe1f14a51b4dfffc675","52cf2ce99c2a23de70225e252e9822a22b4e0adb82643ab0b710858810e00bf1","770625067bb27a20b9826255a8d47b6b5b0a2d3dfcbd21f89904c731f671ba77","d1ed6765f4d7906a05968fb5cd6d1db8afa14dbe512a4884e8ea5c0f5e142c80","799c0f1b07c092626cf1efd71d459997635911bb5f7fc1196efe449bba87e965","2a184e4462b9914a30b1b5c41cf80c6d3428f17b20d3afb711fff3f0644001fd","9eabde32a3aa5d80de34af2c2206cdc3ee094c6504a8d0c2d6d20c7c179503cc","397c8051b6cfcb48aa22656f0faca2553c5f56187262135162ee79d2b2f6c966","a8ead142e0c87dcd5dc130eba1f8eeed506b08952d905c47621dc2f583b1bff9","a02f10ea5f73130efca046429254a4e3c06b5475baecc8f7b99a0014731be8b3","c2576a4083232b0e2d9bd06875dd43d371dee2e090325a9eac0133fd5650c1cb","4c9a0564bb317349de6a24eb4efea8bb79898fa72ad63a1809165f5bd42970dd","f40ac11d8859092d20f953aae14ba967282c3bb056431a37fced1866ec7a2681","cc11e9e79d4746cc59e0e17473a59d6f104692fd0eeea1bdb2e206eabed83b03","b444a410d34fb5e98aa5ee2b381362044f4884652e8bc8a11c8fe14bbd85518e","c35808c1f5e16d2c571aa65067e3cb95afeff843b259ecfa2fc107a9519b5392","14d5dc055143e941c8743c6a21fa459f961cbc3deedf1bfe47b11587ca4b3ef5","a3ad4e1fc542751005267d50a6298e6765928c0c3a8dce1572f2ba6ca518661c","f237e7c97a3a89f4591afd49ecb3bd8d14f51a1c4adc8fcae3430febedff5eb6","3ffdfbec93b7aed71082af62b8c3e0cc71261cc68d796665faa1e91604fbae8f","662201f943ed45b1ad600d03a90dffe20841e725203ced8b708c91fcd7f9379a","c9ef74c64ed051ea5b958621e7fb853fe3b56e8787c1587aefc6ea988b3c7e79","2462ccfac5f3375794b861abaa81da380f1bbd9401de59ffa43119a0b644253d","34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","7d8ddf0f021c53099e34ee831a06c394d50371816caa98684812f089b4c6b3d4","7d2a0ba1297be385a89b5515b88cd31b4a1eeef5236f710166dc1b36b1741e1b","9d92b037978bb9525bc4b673ebddd443277542e010c0aef019c03a170ccdaa73","ab82804a14454734010dcdcd43f564ff7b0389bee4c5692eec76ff5b30d4cf66","bae8d023ef6b23df7da26f51cea44321f95817c190342a36882e93b80d07a960","ae271d475b632ce7b03fea6d9cf6da72439e57a109672671cbc79f54e1386938"],"options":{"composite":true,"declaration":true,"declarationMap":true,"emitDeclarationOnly":true,"esModuleInterop":true,"inlineSources":true,"module":1,"outDir":"./types","rootDir":"../src","sourceMap":true,"strict":true,"target":7},"fileIdsList":[[344],[72,108,109,110,125],[109,110,126,127],[108,109],[108,125,128,131],[108,128,131,132],[129,130,131,133,134],[108,131],[108,125,128,129,130,133],[108,116],[108],[72,108],[60,108],[112,113,114,115,116,117,118,119,120,121,122,123,124],[108,114,115],[108,114,116],[283,287,288],[283,286],[286],[287,289,291],[283,286,287,288,289,290],[283,286,290,294,295,296],[283,286,290,297],[283],[283,284],[284,285],[283,286,292,295,297,298],[293],[294,296,300,303,304],[294,296,304],[108,286,290,294,295,297,300],[294,304],[294,297,301],[286,295,297],[294,297,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315],[294,302],[108,302],[283,290,294,295,296,297,298,301],[294,296,300,302],[294,301,302],[332,333,334,335],[167,189],[189,190],[189,190,191,192],[167],[207],[207,208,209],[144],[147],[144,147],[145,146,147,148,149,150,151,152,153,154,155,156,159,160,161,162,163,164,165,166],[138,144,145],[135,147,153,155],[158],[147,148],[144,162],[202,203],[344,345,346,347,348],[344,346],[157],[351,352,353],[73,108],[356],[357],[368],[362,367],[246,248,249,250,251,252,253,254,255,256,257,258],[246,247,249,250,251,252,253,254,255,256,257,258],[247,248,249,250,251,252,253,254,255,256,257,258],[246,247,248,250,251,252,253,254,255,256,257,258],[246,247,248,249,251,252,253,254,255,256,257,258],[246,247,248,249,250,252,253,254,255,256,257,258],[246,247,248,249,250,251,253,254,255,256,257,258],[246,247,248,249,250,251,252,254,255,256,257,258],[246,247,248,249,250,251,252,253,255,256,257,258],[246,247,248,249,250,251,252,253,254,256,257,258],[246,247,248,249,250,251,252,253,254,255,257,258],[246,247,248,249,250,251,252,253,254,255,256,258],[246,247,248,249,250,251,252,253,254,255,256,257],[56],[59],[60,65,92],[61,72,73,80,89,100],[61,62,72,80],[63,101],[64,65,73,81],[65,89,97],[66,68,72,80],[67],[68,69],[72],[71,72],[59,72],[72,73,74,89,100],[72,73,74,89],[72,75,80,89,100],[72,73,75,76,80,89,97,100],[75,77,89,97,100],[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],[72,78],[79,100,105],[68,72,80,89],[81],[82],[59,83],[84,99,105],[85],[86],[72,87],[87,88,101,103],[60,72,89,90,91],[60,89,91],[89,90],[92],[93],[72,95,96],[95,96],[65,80,89,97],[98],[80,99],[60,75,86,100],[65,101],[89,102],[103],[104],[60,65,72,74,83,89,100,103,105],[89,106],[108,376],[379,418],[379,403,418],[418],[379],[379,404,418],[379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417],[404,418],[419],[422],[239],[241],[239,240,241,242,243],[239,241],[212],[212,223,224],[224,225,226],[271,272,273],[271],[272],[179],[179,180,181,182,183],[168,169,170,171,172,173,174,175,176,177,178],[360,363],[360,363,364,365],[362],[359,366],[266],[267],[259],[261],[259,260,261,262,263,264,265],[259,261],[361],[137,139,140,141,142,143],[137,138],[139],[138,139],[137,139],[167,188,193],[194,195],[167,184,185,186],[185],[186],[136,185,186,187],[197],[197,198,201,205],[204],[167,199,200],[220,221,222],[219,220],[167,219,220],[167,212,219],[167,188,232,236],[237],[167,212],[167,213],[213,214,215,216,217,218],[167,188,199,206,210,211,228,229],[228],[211,228,230,231],[167,206,223,227],[167,188,232,233],[108,167,188,232,233],[233,234,235],[167,232],[72,125,128,135,167,188,193,196,199,206,232,238,244,245,258,268,269,270,275,276,278,279,280,281,282,318,319,320,322,323,324,325,326,327,328,329,330,331,339,340,341],[167,275],[167,238,270,275,280],[167,199,200,206,270,275,281],[167,275,277,317],[128,135,167,258,270,275,299,316],[167,206,275],[167,200,206,244,269,270,275,277,321],[72,167,199,232,238,270,275,276,323],[72,167,232,244,270,275],[167,199,232,244,268,270,322,325,326],[72,199,206,232,258,270,275],[275,276,278,321,340,342],[135,167,199,232,238,274],[167,206,270,277],[193,275],[167,199,206,238,270,275,276,279],[206,238,275],[167,199,206,270,275,277],[258,274,275],[167,232,270,275],[206,268,270,275],[167,206,270,337],[52,167,206,270,275,277,292,337,338],[199,206,258,270,275,277,278,342],[52,199,206,275,292],[167,206,275,342],[52,193,206,275,278,292],[128,135,167,188,196,232,238,268,275,325],[275],[275,317],[72,167,232,238,275],[72,167,232,275],[167,199,232,268,322,325,326],[72,199,232,275],[158,167],[167,199,238,275],[238,275],[158,167,199,275],[167,232,275],[268,275],[167,275,292,338],[199,275,342],[199,275],[275,342]],"referencedMap":[[346,1],[126,2],[128,3],[110,4],[132,5],[133,6],[129,6],[135,7],[130,6],[134,8],[131,9],[117,10],[114,11],[121,12],[115,10],[112,13],[125,14],[119,11],[116,15],[118,16],[289,17],[288,18],[287,19],[292,20],[291,21],[297,22],[298,23],[284,24],[285,25],[286,26],[299,27],[294,28],[305,29],[306,30],[301,31],[307,32],[308,33],[309,33],[300,34],[316,35],[311,29],[310,36],[312,37],[302,38],[313,32],[314,30],[304,39],[315,36],[303,40],[295,18],[336,41],[190,42],[191,43],[193,44],[189,45],[212,12],[208,46],[209,46],[210,47],[145,48],[146,48],[148,49],[149,48],[150,48],[151,50],[147,48],[167,51],[155,52],[156,53],[159,54],[165,55],[166,56],[204,57],[349,58],[345,1],[347,59],[348,1],[200,11],[158,60],[354,61],[355,62],[357,63],[358,64],[369,65],[368,66],[247,67],[248,68],[246,69],[249,70],[250,71],[251,72],[252,73],[253,74],[254,75],[255,76],[256,77],[257,78],[258,79],[56,80],[57,80],[59,81],[60,82],[61,83],[62,84],[63,85],[64,86],[65,87],[66,88],[67,89],[68,90],[69,90],[70,91],[71,92],[72,93],[73,94],[74,95],[75,96],[76,97],[77,98],[108,99],[78,100],[79,101],[80,102],[81,103],[82,104],[83,105],[84,106],[85,107],[86,108],[87,109],[88,110],[89,111],[91,112],[90,113],[92,114],[93,115],[95,116],[96,117],[97,118],[98,119],[99,120],[100,121],[101,122],[102,123],[103,124],[104,125],[105,126],[106,127],[373,11],[377,128],[378,11],[403,129],[404,130],[379,131],[382,131],[401,129],[402,129],[392,129],[391,132],[389,129],[384,129],[397,129],[395,129],[399,129],[383,129],[396,129],[400,129],[385,129],[386,129],[398,129],[380,129],[387,129],[388,129],[390,129],[394,129],[405,133],[393,129],[381,129],[418,134],[412,133],[414,135],[413,133],[406,133],[407,133],[409,133],[411,133],[415,135],[416,135],[408,135],[410,135],[420,136],[423,137],[240,138],[242,139],[244,140],[243,141],[224,142],[225,143],[226,143],[227,144],[274,145],[272,146],[273,147],[175,148],[177,148],[176,148],[174,148],[184,149],[179,150],[170,148],[171,148],[172,148],[173,148],[364,151],[366,152],[365,151],[363,153],[367,154],[267,155],[268,156],[260,157],[262,158],[266,159],[264,160],[263,160],[362,161],[144,162],[139,163],[140,164],[141,164],[142,165],[143,165],[138,166],[194,167],[196,168],[187,169],[186,170],[185,171],[188,172],[198,173],[206,174],[205,175],[201,176],[223,177],[221,178],[222,179],[220,180],[237,181],[238,182],[213,183],[214,184],[215,184],[217,184],[219,185],[218,184],[230,186],[229,187],[231,187],[232,188],[228,189],[234,190],[235,191],[236,192],[233,193],[342,194],[337,195],[281,196],[282,197],[318,198],[317,199],[319,198],[320,200],[322,201],[324,202],[325,203],[327,204],[326,205],[343,206],[270,45],[275,207],[321,208],[328,209],[280,210],[276,211],[329,212],[330,213],[323,214],[331,215],[338,216],[339,217],[279,218],[340,219],[278,220],[341,221]],"exportedModulesMap":[[346,1],[126,2],[128,3],[110,4],[132,5],[133,6],[129,6],[135,7],[130,6],[134,8],[131,9],[117,10],[114,11],[121,12],[115,10],[112,13],[125,14],[119,11],[116,15],[118,16],[289,17],[288,18],[287,19],[292,20],[291,21],[297,22],[298,23],[284,24],[285,25],[286,26],[299,27],[294,28],[305,29],[306,30],[301,31],[307,32],[308,33],[309,33],[300,34],[316,35],[311,29],[310,36],[312,37],[302,38],[313,32],[314,30],[304,39],[315,36],[303,40],[295,18],[336,41],[190,42],[191,43],[193,44],[189,45],[212,12],[208,46],[209,46],[210,47],[145,48],[146,48],[148,49],[149,48],[150,48],[151,50],[147,48],[167,51],[155,52],[156,53],[159,54],[165,55],[166,56],[204,57],[349,58],[345,1],[347,59],[348,1],[200,11],[158,60],[354,61],[355,62],[357,63],[358,64],[369,65],[368,66],[247,67],[248,68],[246,69],[249,70],[250,71],[251,72],[252,73],[253,74],[254,75],[255,76],[256,77],[257,78],[258,79],[56,80],[57,80],[59,81],[60,82],[61,83],[62,84],[63,85],[64,86],[65,87],[66,88],[67,89],[68,90],[69,90],[70,91],[71,92],[72,93],[73,94],[74,95],[75,96],[76,97],[77,98],[108,99],[78,100],[79,101],[80,102],[81,103],[82,104],[83,105],[84,106],[85,107],[86,108],[87,109],[88,110],[89,111],[91,112],[90,113],[92,114],[93,115],[95,116],[96,117],[97,118],[98,119],[99,120],[100,121],[101,122],[102,123],[103,124],[104,125],[105,126],[106,127],[373,11],[377,128],[378,11],[403,129],[404,130],[379,131],[382,131],[401,129],[402,129],[392,129],[391,132],[389,129],[384,129],[397,129],[395,129],[399,129],[383,129],[396,129],[400,129],[385,129],[386,129],[398,129],[380,129],[387,129],[388,129],[390,129],[394,129],[405,133],[393,129],[381,129],[418,134],[412,133],[414,135],[413,133],[406,133],[407,133],[409,133],[411,133],[415,135],[416,135],[408,135],[410,135],[420,136],[423,137],[240,138],[242,139],[244,140],[243,141],[224,142],[225,143],[226,143],[227,144],[274,145],[272,146],[273,147],[175,148],[177,148],[176,148],[174,148],[184,149],[179,150],[170,148],[171,148],[172,148],[173,148],[364,151],[366,152],[365,151],[363,153],[367,154],[267,155],[268,156],[260,157],[262,158],[266,159],[264,160],[263,160],[362,161],[144,162],[139,163],[140,164],[141,164],[142,165],[143,165],[138,166],[194,167],[196,168],[187,169],[186,170],[185,171],[188,172],[198,173],[206,174],[205,175],[201,176],[223,177],[221,178],[222,179],[220,180],[237,181],[238,182],[213,183],[214,184],[215,184],[217,184],[219,185],[218,184],[230,186],[229,187],[231,187],[232,188],[228,189],[234,190],[235,191],[236,192],[233,193],[342,222],[337,45],[281,223],[282,223],[318,224],[317,195],[319,224],[320,223],[322,195],[324,225],[325,226],[327,227],[326,228],[343,206],[270,229],[275,207],[321,45],[328,223],[280,230],[276,231],[329,232],[330,223],[323,233],[331,234],[338,45],[339,235],[279,236],[340,237],[278,238],[341,223]],"semanticDiagnosticsPerFile":[346,344,126,109,128,110,127,132,133,129,135,130,134,131,117,114,121,115,112,120,125,122,123,124,119,116,113,118,289,288,287,292,291,297,298,284,285,286,283,299,294,293,290,305,306,301,307,308,309,300,316,311,310,312,302,313,314,304,315,303,295,296,199,334,332,333,335,336,190,192,191,193,189,212,208,209,210,207,145,146,148,149,150,151,152,153,154,147,167,155,156,159,160,161,162,163,164,165,166,202,204,203,349,345,347,348,200,158,350,351,354,352,355,356,357,358,369,368,353,370,247,248,246,249,250,251,252,253,254,255,256,257,258,371,157,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,58,107,75,76,77,108,78,79,80,81,82,83,84,85,86,87,88,89,91,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,372,373,374,375,377,376,378,403,404,379,382,401,402,392,391,389,384,397,395,399,383,396,400,385,386,398,380,387,388,390,394,405,393,381,418,417,412,414,413,406,407,409,411,415,416,408,410,420,419,421,269,422,423,240,239,242,241,244,243,111,359,224,225,226,227,245,274,272,273,271,178,175,177,176,174,184,179,183,180,182,181,170,171,172,168,169,173,360,364,366,365,363,367,267,268,260,259,262,261,265,266,264,263,362,361,137,144,139,140,141,142,143,138,8,10,9,2,11,12,13,14,15,16,17,18,3,4,22,19,20,21,23,24,25,5,26,27,28,29,6,33,30,31,32,34,7,35,40,41,36,37,38,39,1,42,194,195,196,136,187,186,185,188,198,206,205,197,201,223,221,222,220,237,238,213,214,215,216,217,219,218,230,211,229,231,232,228,234,235,236,233,342,277,337,281,282,318,317,319,320,322,324,325,327,326,343,270,275,321,328,280,276,329,330,323,331,338,339,279,340,278,341,47,48,49,50,51,52,43,53,54,55,44,45,46],"latestChangedDtsFile":"./types/index.d.ts"},"version":"4.9.5"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types.d.ts b/node_modules/@metamask/transaction-controller/dist/types.d.ts
deleted file mode 100644
index 36441f0..0000000
--- a/node_modules/@metamask/transaction-controller/dist/types.d.ts
+++ /dev/null
@@ -1,511 +0,0 @@
-import type { Hex } from '@metamask/utils';
-import type { Operation } from 'fast-json-patch';
-/**
- * Representation of transaction metadata.
- */
-export declare type TransactionMeta = ({
-    status: Exclude<TransactionStatus, TransactionStatus.failed>;
-} & TransactionMetaBase) | ({
-    status: TransactionStatus.failed;
-    error: Error;
-} & TransactionMetaBase);
-/**
- * Information about a single transaction such as status and block number.
- */
-declare type TransactionMetaBase = {
-    /**
-     * Unique ID to prevent duplicate requests.
-     */
-    actionId?: string;
-    /**
-     * Base fee of the block as a hex value, introduced in EIP-1559.
-     */
-    baseFeePerGas?: Hex;
-    /**
-     * Number of the block where the transaction has been included.
-     */
-    blockNumber?: string;
-    /**
-     * The timestamp for when the block was collated.
-     */
-    blockTimestamp?: string;
-    /**
-     * Network code as per EIP-155 for this transaction.
-     */
-    chainId: Hex;
-    /**
-     * Gas values provided by the dApp.
-     */
-    dappSuggestedGasFees?: DappSuggestedGasFees;
-    /**
-     * The default estimate for gas.
-     */
-    defaultGasEstimates?: string;
-    /**
-     * String to indicate what device the transaction was confirmed on.
-     */
-    deviceConfirmedOn?: WalletDevice;
-    /**
-     * The estimated base fee of the transaction.
-     */
-    estimatedBaseFee?: string;
-    /**
-     * Which estimate level that the API suggested.
-     */
-    estimateSuggested?: string;
-    /**
-     * Which estimate level was used
-     */
-    estimateUsed?: string;
-    /**
-     * A hex string of the transaction hash, used to identify the transaction on the network.
-     */
-    hash?: string;
-    /**
-     * A history of mutations to TransactionMeta.
-     */
-    history?: TransactionHistory;
-    /**
-     * Generated UUID associated with this transaction.
-     */
-    id: string;
-    /**
-     * Whether the transaction is a transfer.
-     */
-    isTransfer?: boolean;
-    /**
-     * Network code as per EIP-155 for this transaction
-     *
-     * @deprecated Use `chainId` instead.
-     */
-    readonly networkID?: string;
-    /**
-     * Origin this transaction was sent from.
-     */
-    origin?: string;
-    /**
-     * The original gas estimation of the transaction.
-     */
-    originalGasEstimate?: string;
-    /**
-     * The transaction's 'r' value as a hex string.
-     */
-    r?: string;
-    /**
-     * Hex representation of the underlying transaction.
-     */
-    rawTx?: string;
-    /**
-     * When the transaction is dropped, this is the replacement transaction hash.
-     */
-    replacedBy?: string;
-    /**
-     * When the transaction is dropped, this is the replacement transaction ID.
-     */
-    replacedById?: string;
-    /**
-     * The transaction's 's' value as a hex string.
-     */
-    s?: string;
-    /**
-     * Response from security validator.
-     */
-    securityAlertResponse?: Record<string, unknown>;
-    /**
-     * Response from security provider.
-     */
-    securityProviderResponse?: Record<string, any>;
-    /**
-     * An array of entries that describe the user's journey through the send flow.
-     * This is purely attached to state logs for troubleshooting and support.
-     */
-    sendFlowHistory?: SendFlowHistoryEntry[];
-    /**
-     * The time the transaction was submitted to the network, in Unix epoch time (ms).
-     */
-    submittedTime?: number;
-    /**
-     * Timestamp associated with this transaction.
-     */
-    time: number;
-    /**
-     * Whether transaction recipient is a smart contract.
-     */
-    toSmartContract?: boolean;
-    /**
-     * Additional transfer information.
-     */
-    transferInformation?: {
-        contractAddress: string;
-        decimals: number;
-        symbol: string;
-    };
-    /**
-     * Underlying Transaction object.
-     */
-    txParams: TransactionParams;
-    /**
-     * Transaction receipt.
-     */
-    txReceipt?: TransactionReceipt;
-    /**
-     * The type of transaction such as `cancel` or `swap`.
-     */
-    type?: TransactionType;
-    /**
-     * The gas limit supplied by user.
-     */
-    userEditedGasLimit?: boolean;
-    /**
-     * Estimate level user selected.
-     */
-    userFeeLevel?: string;
-    /**
-     * The transaction's 'v' value as a hex string.
-     */
-    v?: string;
-    /**
-     * Whether the transaction is verified on the blockchain.
-     */
-    verifiedOnBlockchain?: boolean;
-};
-export declare type SendFlowHistoryEntry = {
-    /**
-     * String to indicate user interaction information.
-     */
-    entry: string;
-    /**
-     * Timestamp associated with this entry.
-     */
-    timestamp: number;
-};
-/**
- * The status of the transaction. Each status represents the state of the transaction internally
- * in the wallet. Some of these correspond with the state of the transaction on the network, but
- * some are wallet-specific.
- */
-export declare enum TransactionStatus {
-    approved = "approved",
-    cancelled = "cancelled",
-    confirmed = "confirmed",
-    dropped = "dropped",
-    failed = "failed",
-    rejected = "rejected",
-    signed = "signed",
-    submitted = "submitted",
-    unapproved = "unapproved"
-}
-/**
- * Options for wallet device.
- */
-export declare enum WalletDevice {
-    MM_MOBILE = "metamask_mobile",
-    MM_EXTENSION = "metamask_extension",
-    OTHER = "other_device"
-}
-/**
- * The type of the transaction.
- */
-export declare enum TransactionType {
-    /**
-     * A transaction sending a network's native asset to a recipient.
-     */
-    cancel = "cancel",
-    /**
-     * A transaction that is interacting with a smart contract's methods that we
-     * have not treated as a special case, such as approve, transfer, and
-     * transferfrom.
-     */
-    contractInteraction = "contractInteraction",
-    /**
-     * A transaction that deployed a smart contract.
-     */
-    deployContract = "contractDeployment",
-    /**
-     * A transaction for Ethereum decryption.
-     */
-    ethDecrypt = "eth_decrypt",
-    /**
-     * A transaction for getting an encryption public key.
-     */
-    ethGetEncryptionPublicKey = "eth_getEncryptionPublicKey",
-    /**
-     * An incoming (deposit) transaction.
-     */
-    incoming = "incoming",
-    /**
-     * A transaction for personal sign.
-     */
-    personalSign = "personal_sign",
-    /**
-     * When a transaction is failed it can be retried by
-     * resubmitting the same transaction with a higher gas fee. This type is also used
-     * to speed up pending transactions. This is accomplished by creating a new tx with
-     * the same nonce and higher gas fees.
-     */
-    retry = "retry",
-    /**
-     * A transaction sending a network's native asset to a recipient.
-     */
-    simpleSend = "simpleSend",
-    /**
-     * A transaction that is signing a message.
-     */
-    sign = "eth_sign",
-    /**
-     * A transaction that is signing typed data.
-     */
-    signTypedData = "eth_signTypedData",
-    /**
-     * A transaction sending a network's native asset to a recipient.
-     */
-    smart = "smart",
-    /**
-     * A transaction swapping one token for another through MetaMask Swaps.
-     */
-    swap = "swap",
-    /**
-     * Similar to the approve type, a swap approval is a special case of ERC20
-     * approve method that requests an allowance of the token to spend on behalf
-     * of the user for the MetaMask Swaps contract. The first swap for any token
-     * will have an accompanying swapApproval transaction.
-     */
-    swapApproval = "swapApproval",
-    /**
-     * A token transaction requesting an allowance of the token to spend on
-     * behalf of the user.
-     */
-    tokenMethodApprove = "approve",
-    /**
-     * A token transaction transferring tokens from an account that the sender
-     * has an allowance of. The method is prefixed with safe because when calling
-     * this method the contract checks to ensure that the receiver is an address
-     * capable of handling the token being sent.
-     */
-    tokenMethodSafeTransferFrom = "safetransferfrom",
-    /**
-     * A token transaction where the user is sending tokens that they own to
-     * another address.
-     */
-    tokenMethodTransfer = "transfer",
-    /**
-     * A token transaction transferring tokens from an account that the sender
-     * has an allowance of. For more information on allowances, see the approve
-     * type.
-     */
-    tokenMethodTransferFrom = "transferfrom",
-    /**
-     * A token transaction requesting an allowance of all of a user's tokens to
-     * spend on behalf of the user.
-     */
-    tokenMethodSetApprovalForAll = "setapprovalforall"
-}
-/**
- * Standard data concerning a transaction to be processed by the blockchain.
- */
-export interface TransactionParams {
-    /**
-     * Network ID as per EIP-155.
-     */
-    chainId?: Hex;
-    /**
-     * Data to pass with this transaction.
-     */
-    data?: string;
-    /**
-     * Error message for gas estimation failure.
-     */
-    estimateGasError?: string;
-    /**
-     * Estimated base fee for this transaction.
-     */
-    estimatedBaseFee?: string;
-    /**
-     * Address to send this transaction from.
-     */
-    from: string;
-    /**
-     * same as gasLimit?
-     */
-    gas?: string;
-    /**
-     * Maxmimum number of units of gas to use for this transaction.
-     */
-    gasLimit?: string;
-    /**
-     * Price per gas for legacy txs
-     */
-    gasPrice?: string;
-    /**
-     * Gas used in the transaction.
-     */
-    gasUsed?: string;
-    /**
-     * Maximum amount per gas to pay for the transaction, including the priority
-     * fee.
-     */
-    maxFeePerGas?: string;
-    /**
-     * Maximum amount per gas to give to validator as incentive.
-     */
-    maxPriorityFeePerGas?: string;
-    /**
-     * Unique number to prevent replay attacks.
-     */
-    nonce?: string;
-    /**
-     * Address to send this transaction to.
-     */
-    to?: string;
-    /**
-     * Value associated with this transaction.
-     */
-    value?: string;
-    /**
-     * Type of transaction.
-     * 0x0 indicates a legacy transaction.
-     */
-    type?: string;
-}
-/**
- * Standard data concerning a transaction processed by the blockchain.
- */
-export interface TransactionReceipt {
-    /**
-     * The block hash of the block that this transaction was included in.
-     */
-    blockHash?: string;
-    /**
-     * The block number of the block that this transaction was included in.
-     */
-    blockNumber?: string;
-    /**
-     * Effective gas price the transaction was charged at.
-     */
-    effectiveGasPrice?: string;
-    /**
-     * Gas used in the transaction.
-     */
-    gasUsed?: string;
-    /**
-     * Total used gas in hex.
-     */
-    l1Fee?: string;
-    /**
-     * All the logs emitted by this transaction.
-     */
-    logs?: Log[];
-    /**
-     * The status of the transaction.
-     */
-    status?: string;
-    /**
-     * The index of this transaction in the list of transactions included in the block this transaction was mined in.
-     */
-    transactionIndex?: number;
-}
-/**
- * Represents an event that has been included in a transaction using the EVM `LOG` opcode.
- */
-export interface Log {
-    /**
-     * Address of the contract that generated log.
-     */
-    address?: string;
-    /**
-     * List of topics for log.
-     */
-    topics?: string;
-}
-/**
- * The configuration required to fetch transaction data from a RemoteTransactionSource.
- */
-export interface RemoteTransactionSourceRequest {
-    /**
-     * The address of the account to fetch transactions for.
-     */
-    address: string;
-    /**
-     * The chainId of the current network.
-     */
-    currentChainId: Hex;
-    /**
-     * Block number to start fetching transactions from.
-     */
-    fromBlock?: number;
-    /**
-     * Maximum number of transactions to retrieve.
-     */
-    limit?: number;
-}
-/**
- * An object capable of fetching transaction data from a remote source.
- * Used by the IncomingTransactionHelper to retrieve remote transaction data.
- */
-export interface RemoteTransactionSource {
-    /**
-     * @param chainId - The chainId of the current network.
-     * @returns Whether the remote transaction source supports the specified network.
-     */
-    isSupportedNetwork: (chainId: Hex) => boolean;
-    /**
-     * @returns An array of additional keys to use when caching the last fetched block number.
-     */
-    getLastBlockVariations?: () => string[];
-    /**
-     * @param request - A request object containing data such as the address and chain ID.
-     * @returns An array of transaction metadata for the retrieved transactions.
-     */
-    fetchTransactions: (request: RemoteTransactionSourceRequest) => Promise<TransactionMeta[]>;
-}
-/**
- * Gas values initially suggested by the dApp.
- */
-export interface DappSuggestedGasFees {
-    gas?: string;
-    gasPrice?: string;
-    maxFeePerGas?: string;
-    maxPriorityFeePerGas?: string;
-}
-/**
- * A transaction history operation that includes a note and timestamp.
- */
-declare type ExtendedHistoryOperation = Operation & {
-    note?: string;
-    timestamp?: number;
-};
-/**
- * A transaction history entry that includes the ExtendedHistoryOperation as the first element.
- */
-export declare type TransactionHistoryEntry = [
-    ExtendedHistoryOperation,
-    ...Operation[]
-];
-/**
- * A transaction history that includes the transaction meta as the first element.
- * And the rest of the elements are the operation arrays that were applied to the transaction meta.
- */
-export declare type TransactionHistory = [
-    TransactionMeta,
-    ...TransactionHistoryEntry[]
-];
-/**
- * Result of inferring the transaction type.
- */
-export declare type InferTransactionTypeResult = {
-    /**
-     * The contract code, in hex format if it exists. '0x0' or
-     * '0x' are also indicators of non-existent contract code.
-     */
-    getCodeResponse?: string | null;
-    /**
-     * The type of transaction
-     */
-    type: TransactionType;
-};
-/**
- * A function for verifying a transaction, whether it is malicious or not
- */
-export declare type SecurityProviderRequest = (requestData: TransactionMeta, messageType: string) => Promise<any>;
-export {};
-//# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types.d.ts.map
deleted file mode 100644
index d8146ee..0000000
--- a/node_modules/@metamask/transaction-controller/dist/types.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types.js b/node_modules/@metamask/transaction-controller/dist/types.js
index 6bbf145..6c95b18 100644
--- a/node_modules/@metamask/transaction-controller/dist/types.js
+++ b/node_modules/@metamask/transaction-controller/dist/types.js
@@ -1,128 +1,24 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.TransactionType = exports.WalletDevice = exports.TransactionStatus = void 0;
-/**
- * The status of the transaction. Each status represents the state of the transaction internally
- * in the wallet. Some of these correspond with the state of the transaction on the network, but
- * some are wallet-specific.
- */
-var TransactionStatus;
-(function (TransactionStatus) {
-    TransactionStatus["approved"] = "approved";
-    TransactionStatus["cancelled"] = "cancelled";
-    TransactionStatus["confirmed"] = "confirmed";
-    TransactionStatus["dropped"] = "dropped";
-    TransactionStatus["failed"] = "failed";
-    TransactionStatus["rejected"] = "rejected";
-    TransactionStatus["signed"] = "signed";
-    TransactionStatus["submitted"] = "submitted";
-    TransactionStatus["unapproved"] = "unapproved";
-})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
-/**
- * Options for wallet device.
- */
-var WalletDevice;
-(function (WalletDevice) {
-    WalletDevice["MM_MOBILE"] = "metamask_mobile";
-    WalletDevice["MM_EXTENSION"] = "metamask_extension";
-    WalletDevice["OTHER"] = "other_device";
-})(WalletDevice = exports.WalletDevice || (exports.WalletDevice = {}));
-/**
- * The type of the transaction.
- */
-var TransactionType;
-(function (TransactionType) {
-    /**
-     * A transaction sending a network's native asset to a recipient.
-     */
-    TransactionType["cancel"] = "cancel";
-    /**
-     * A transaction that is interacting with a smart contract's methods that we
-     * have not treated as a special case, such as approve, transfer, and
-     * transferfrom.
-     */
-    TransactionType["contractInteraction"] = "contractInteraction";
-    /**
-     * A transaction that deployed a smart contract.
-     */
-    TransactionType["deployContract"] = "contractDeployment";
-    /**
-     * A transaction for Ethereum decryption.
-     */
-    TransactionType["ethDecrypt"] = "eth_decrypt";
-    /**
-     * A transaction for getting an encryption public key.
-     */
-    TransactionType["ethGetEncryptionPublicKey"] = "eth_getEncryptionPublicKey";
-    /**
-     * An incoming (deposit) transaction.
-     */
-    TransactionType["incoming"] = "incoming";
-    /**
-     * A transaction for personal sign.
-     */
-    TransactionType["personalSign"] = "personal_sign";
-    /**
-     * When a transaction is failed it can be retried by
-     * resubmitting the same transaction with a higher gas fee. This type is also used
-     * to speed up pending transactions. This is accomplished by creating a new tx with
-     * the same nonce and higher gas fees.
-     */
-    TransactionType["retry"] = "retry";
-    /**
-     * A transaction sending a network's native asset to a recipient.
-     */
-    TransactionType["simpleSend"] = "simpleSend";
-    /**
-     * A transaction that is signing a message.
-     */
-    TransactionType["sign"] = "eth_sign";
-    /**
-     * A transaction that is signing typed data.
-     */
-    TransactionType["signTypedData"] = "eth_signTypedData";
-    /**
-     * A transaction sending a network's native asset to a recipient.
-     */
-    TransactionType["smart"] = "smart";
-    /**
-     * A transaction swapping one token for another through MetaMask Swaps.
-     */
-    TransactionType["swap"] = "swap";
-    /**
-     * Similar to the approve type, a swap approval is a special case of ERC20
-     * approve method that requests an allowance of the token to spend on behalf
-     * of the user for the MetaMask Swaps contract. The first swap for any token
-     * will have an accompanying swapApproval transaction.
-     */
-    TransactionType["swapApproval"] = "swapApproval";
-    /**
-     * A token transaction requesting an allowance of the token to spend on
-     * behalf of the user.
-     */
-    TransactionType["tokenMethodApprove"] = "approve";
-    /**
-     * A token transaction transferring tokens from an account that the sender
-     * has an allowance of. The method is prefixed with safe because when calling
-     * this method the contract checks to ensure that the receiver is an address
-     * capable of handling the token being sent.
-     */
-    TransactionType["tokenMethodSafeTransferFrom"] = "safetransferfrom";
-    /**
-     * A token transaction where the user is sending tokens that they own to
-     * another address.
-     */
-    TransactionType["tokenMethodTransfer"] = "transfer";
-    /**
-     * A token transaction transferring tokens from an account that the sender
-     * has an allowance of. For more information on allowances, see the approve
-     * type.
-     */
-    TransactionType["tokenMethodTransferFrom"] = "transferfrom";
-    /**
-     * A token transaction requesting an allowance of all of a user's tokens to
-     * spend on behalf of the user.
-     */
-    TransactionType["tokenMethodSetApprovalForAll"] = "setapprovalforall";
-})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+
+
+
+
+
+
+var _chunk5C3CSQADjs = require('./chunk-5C3CSQAD.js');
+require('./chunk-Z4BLTVTB.js');
+
+
+
+
+
+
+
+
+
+
+exports.GasFeeEstimateLevel = _chunk5C3CSQADjs.GasFeeEstimateLevel; exports.GasFeeEstimateType = _chunk5C3CSQADjs.GasFeeEstimateType; exports.SimulationErrorCode = _chunk5C3CSQADjs.SimulationErrorCode; exports.SimulationTokenStandard = _chunk5C3CSQADjs.SimulationTokenStandard; exports.TransactionEnvelopeType = _chunk5C3CSQADjs.TransactionEnvelopeType; exports.TransactionStatus = _chunk5C3CSQADjs.TransactionStatus; exports.TransactionType = _chunk5C3CSQADjs.TransactionType; exports.UserFeeLevel = _chunk5C3CSQADjs.UserFeeLevel; exports.WalletDevice = _chunk5C3CSQADjs.WalletDevice;
 //# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types.js.map b/node_modules/@metamask/transaction-controller/dist/types.js.map
deleted file mode 100644
index 5b39e28..0000000
--- a/node_modules/@metamask/transaction-controller/dist/types.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AA6NA;;;;GAIG;AACH,IAAY,iBAUX;AAVD,WAAY,iBAAiB;IAC3B,0CAAqB,CAAA;IACrB,4CAAuB,CAAA;IACvB,4CAAuB,CAAA;IACvB,wCAAmB,CAAA;IACnB,sCAAiB,CAAA;IACjB,0CAAqB,CAAA;IACrB,sCAAiB,CAAA;IACjB,4CAAuB,CAAA;IACvB,8CAAyB,CAAA;AAC3B,CAAC,EAVW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAU5B;AAED;;GAEG;AACH,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,6CAA6B,CAAA;IAC7B,mDAAmC,CAAA;IACnC,sCAAsB,CAAA;AACxB,CAAC,EAJW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAIvB;AAED;;GAEG;AACH,IAAY,eA+GX;AA/GD,WAAY,eAAe;IACzB;;OAEG;IACH,oCAAiB,CAAA;IAEjB;;;;OAIG;IACH,8DAA2C,CAAA;IAE3C;;OAEG;IACH,wDAAqC,CAAA;IAErC;;OAEG;IACH,6CAA0B,CAAA;IAE1B;;OAEG;IACH,2EAAwD,CAAA;IAExD;;OAEG;IACH,wCAAqB,CAAA;IAErB;;OAEG;IACH,iDAA8B,CAAA;IAE9B;;;;;OAKG;IACH,kCAAe,CAAA;IAEf;;OAEG;IACH,4CAAyB,CAAA;IAEzB;;OAEG;IACH,oCAAiB,CAAA;IAEjB;;OAEG;IACH,sDAAmC,CAAA;IAEnC;;OAEG;IACH,kCAAe,CAAA;IAEf;;OAEG;IACH,gCAAa,CAAA;IAEb;;;;;OAKG;IACH,gDAA6B,CAAA;IAE7B;;;OAGG;IACH,iDAA8B,CAAA;IAE9B;;;;;OAKG;IACH,mEAAgD,CAAA;IAEhD;;;OAGG;IACH,mDAAgC,CAAA;IAEhC;;;;OAIG;IACH,2DAAwC,CAAA;IAExC;;;OAGG;IACH,qEAAkD,CAAA;AACpD,CAAC,EA/GW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QA+G1B","sourcesContent":["import type { Hex } from '@metamask/utils';\nimport type { Operation } from 'fast-json-patch';\n\n/**\n * Representation of transaction metadata.\n */\nexport type TransactionMeta =\n  | ({\n      status: Exclude<TransactionStatus, TransactionStatus.failed>;\n    } & TransactionMetaBase)\n  | ({ status: TransactionStatus.failed; error: Error } & TransactionMetaBase);\n\n/**\n * Information about a single transaction such as status and block number.\n */\ntype TransactionMetaBase = {\n  /**\n   * Unique ID to prevent duplicate requests.\n   */\n  actionId?: string;\n\n  /**\n   * Base fee of the block as a hex value, introduced in EIP-1559.\n   */\n  baseFeePerGas?: Hex;\n\n  /**\n   * Number of the block where the transaction has been included.\n   */\n  blockNumber?: string;\n\n  /**\n   * The timestamp for when the block was collated.\n   */\n  blockTimestamp?: string;\n\n  /**\n   * Network code as per EIP-155 for this transaction.\n   */\n  chainId: Hex;\n\n  /**\n   * Gas values provided by the dApp.\n   */\n  dappSuggestedGasFees?: DappSuggestedGasFees;\n\n  /**\n   * The default estimate for gas.\n   */\n  defaultGasEstimates?: string;\n\n  /**\n   * String to indicate what device the transaction was confirmed on.\n   */\n  deviceConfirmedOn?: WalletDevice;\n\n  /**\n   * The estimated base fee of the transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * A hex string of the transaction hash, used to identify the transaction on the network.\n   */\n  hash?: string;\n\n  /**\n   * A history of mutations to TransactionMeta.\n   */\n  history?: TransactionHistory;\n\n  /**\n   * Generated UUID associated with this transaction.\n   */\n  id: string;\n\n  /**\n   * Whether the transaction is a transfer.\n   */\n  isTransfer?: boolean;\n\n  /**\n   * Network code as per EIP-155 for this transaction\n   *\n   * @deprecated Use `chainId` instead.\n   */\n  readonly networkID?: string;\n\n  /**\n   * Origin this transaction was sent from.\n   */\n  origin?: string;\n\n  /**\n   * The original gas estimation of the transaction.\n   */\n  originalGasEstimate?: string;\n\n  /**\n   * The transaction's 'r' value as a hex string.\n   */\n  r?: string;\n\n  /**\n   * Hex representation of the underlying transaction.\n   */\n  rawTx?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction hash.\n   */\n  replacedBy?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction ID.\n   */\n  replacedById?: string;\n\n  /**\n   * The transaction's 's' value as a hex string.\n   */\n  s?: string;\n\n  /**\n   * Response from security validator.\n   */\n  securityAlertResponse?: Record<string, unknown>;\n\n  /**\n   * Response from security provider.\n   */\n  securityProviderResponse?: Record<string, any>;\n\n  /**\n   * An array of entries that describe the user's journey through the send flow.\n   * This is purely attached to state logs for troubleshooting and support.\n   */\n  sendFlowHistory?: SendFlowHistoryEntry[];\n\n  /**\n   * The time the transaction was submitted to the network, in Unix epoch time (ms).\n   */\n  submittedTime?: number;\n\n  /**\n   * Timestamp associated with this transaction.\n   */\n  time: number;\n\n  /**\n   * Whether transaction recipient is a smart contract.\n   */\n  toSmartContract?: boolean;\n\n  /**\n   * Additional transfer information.\n   */\n  transferInformation?: {\n    contractAddress: string;\n    decimals: number;\n    symbol: string;\n  };\n\n  /**\n   * Underlying Transaction object.\n   */\n  txParams: TransactionParams;\n\n  /**\n   * Transaction receipt.\n   */\n  txReceipt?: TransactionReceipt;\n\n  /**\n   * The type of transaction such as `cancel` or `swap`.\n   */\n  type?: TransactionType;\n\n  /**\n   * The gas limit supplied by user.\n   */\n  userEditedGasLimit?: boolean;\n\n  /**\n   * Estimate level user selected.\n   */\n  userFeeLevel?: string;\n\n  /**\n   * The transaction's 'v' value as a hex string.\n   */\n  v?: string;\n\n  /**\n   * Whether the transaction is verified on the blockchain.\n   */\n  verifiedOnBlockchain?: boolean;\n};\n\nexport type SendFlowHistoryEntry = {\n  /**\n   * String to indicate user interaction information.\n   */\n  entry: string;\n\n  /**\n   * Timestamp associated with this entry.\n   */\n  timestamp: number;\n};\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\nexport enum TransactionStatus {\n  approved = 'approved',\n  cancelled = 'cancelled',\n  confirmed = 'confirmed',\n  dropped = 'dropped',\n  failed = 'failed',\n  rejected = 'rejected',\n  signed = 'signed',\n  submitted = 'submitted',\n  unapproved = 'unapproved',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\n/**\n * The type of the transaction.\n */\nexport enum TransactionType {\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  cancel = 'cancel',\n\n  /**\n   * A transaction that is interacting with a smart contract's methods that we\n   * have not treated as a special case, such as approve, transfer, and\n   * transferfrom.\n   */\n  contractInteraction = 'contractInteraction',\n\n  /**\n   * A transaction that deployed a smart contract.\n   */\n  deployContract = 'contractDeployment',\n\n  /**\n   * A transaction for Ethereum decryption.\n   */\n  ethDecrypt = 'eth_decrypt',\n\n  /**\n   * A transaction for getting an encryption public key.\n   */\n  ethGetEncryptionPublicKey = 'eth_getEncryptionPublicKey',\n\n  /**\n   * An incoming (deposit) transaction.\n   */\n  incoming = 'incoming',\n\n  /**\n   * A transaction for personal sign.\n   */\n  personalSign = 'personal_sign',\n\n  /**\n   * When a transaction is failed it can be retried by\n   * resubmitting the same transaction with a higher gas fee. This type is also used\n   * to speed up pending transactions. This is accomplished by creating a new tx with\n   * the same nonce and higher gas fees.\n   */\n  retry = 'retry',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  simpleSend = 'simpleSend',\n\n  /**\n   * A transaction that is signing a message.\n   */\n  sign = 'eth_sign',\n\n  /**\n   * A transaction that is signing typed data.\n   */\n  signTypedData = 'eth_signTypedData',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  smart = 'smart',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps.\n   */\n  swap = 'swap',\n\n  /**\n   * Similar to the approve type, a swap approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Swaps contract. The first swap for any token\n   * will have an accompanying swapApproval transaction.\n   */\n  swapApproval = 'swapApproval',\n\n  /**\n   * A token transaction requesting an allowance of the token to spend on\n   * behalf of the user.\n   */\n  tokenMethodApprove = 'approve',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. The method is prefixed with safe because when calling\n   * this method the contract checks to ensure that the receiver is an address\n   * capable of handling the token being sent.\n   */\n  tokenMethodSafeTransferFrom = 'safetransferfrom',\n\n  /**\n   * A token transaction where the user is sending tokens that they own to\n   * another address.\n   */\n  tokenMethodTransfer = 'transfer',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. For more information on allowances, see the approve\n   * type.\n   */\n  tokenMethodTransferFrom = 'transferfrom',\n\n  /**\n   * A token transaction requesting an allowance of all of a user's tokens to\n   * spend on behalf of the user.\n   */\n  tokenMethodSetApprovalForAll = 'setapprovalforall',\n}\n\n/**\n * Standard data concerning a transaction to be processed by the blockchain.\n */\nexport interface TransactionParams {\n  /**\n   * Network ID as per EIP-155.\n   */\n  chainId?: Hex;\n\n  /**\n   * Data to pass with this transaction.\n   */\n  data?: string;\n\n  /**\n   * Error message for gas estimation failure.\n   */\n  estimateGasError?: string;\n\n  /**\n   * Estimated base fee for this transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Address to send this transaction from.\n   */\n  from: string;\n\n  /**\n   * same as gasLimit?\n   */\n  gas?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gasLimit?: string;\n\n  /**\n   * Price per gas for legacy txs\n   */\n  gasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority\n   * fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n\n  /**\n   * Unique number to prevent replay attacks.\n   */\n  nonce?: string;\n\n  /**\n   * Address to send this transaction to.\n   */\n  to?: string;\n\n  /**\n   * Value associated with this transaction.\n   */\n  value?: string;\n\n  /**\n   * Type of transaction.\n   * 0x0 indicates a legacy transaction.\n   */\n  type?: string;\n}\n\n/**\n * Standard data concerning a transaction processed by the blockchain.\n */\nexport interface TransactionReceipt {\n  /**\n   * The block hash of the block that this transaction was included in.\n   */\n  blockHash?: string;\n\n  /**\n   * The block number of the block that this transaction was included in.\n   */\n  blockNumber?: string;\n\n  /**\n   * Effective gas price the transaction was charged at.\n   */\n  effectiveGasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Total used gas in hex.\n   */\n  l1Fee?: string;\n\n  /**\n   * All the logs emitted by this transaction.\n   */\n  logs?: Log[];\n\n  /**\n   * The status of the transaction.\n   */\n  status?: string;\n\n  /**\n   * The index of this transaction in the list of transactions included in the block this transaction was mined in.\n   */\n  transactionIndex?: number;\n}\n\n/**\n * Represents an event that has been included in a transaction using the EVM `LOG` opcode.\n */\nexport interface Log {\n  /**\n   * Address of the contract that generated log.\n   */\n  address?: string;\n  /**\n   * List of topics for log.\n   */\n  topics?: string;\n}\n\n/**\n * The configuration required to fetch transaction data from a RemoteTransactionSource.\n */\nexport interface RemoteTransactionSourceRequest {\n  /**\n   * The address of the account to fetch transactions for.\n   */\n  address: string;\n\n  /**\n   * The chainId of the current network.\n   */\n  currentChainId: Hex;\n\n  /**\n   * Block number to start fetching transactions from.\n   */\n  fromBlock?: number;\n\n  /**\n   * Maximum number of transactions to retrieve.\n   */\n  limit?: number;\n}\n\n/**\n * An object capable of fetching transaction data from a remote source.\n * Used by the IncomingTransactionHelper to retrieve remote transaction data.\n */\nexport interface RemoteTransactionSource {\n  /**\n   * @param chainId - The chainId of the current network.\n   * @returns Whether the remote transaction source supports the specified network.\n   */\n  isSupportedNetwork: (chainId: Hex) => boolean;\n\n  /**\n   * @returns An array of additional keys to use when caching the last fetched block number.\n   */\n  getLastBlockVariations?: () => string[];\n\n  /**\n   * @param request - A request object containing data such as the address and chain ID.\n   * @returns An array of transaction metadata for the retrieved transactions.\n   */\n  fetchTransactions: (\n    request: RemoteTransactionSourceRequest,\n  ) => Promise<TransactionMeta[]>;\n}\n\n/**\n * Gas values initially suggested by the dApp.\n */\nexport interface DappSuggestedGasFees {\n  gas?: string;\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n}\n\n/**\n * A transaction history operation that includes a note and timestamp.\n */\ntype ExtendedHistoryOperation = Operation & {\n  note?: string;\n  timestamp?: number;\n};\n\n/**\n * A transaction history entry that includes the ExtendedHistoryOperation as the first element.\n */\nexport type TransactionHistoryEntry = [\n  ExtendedHistoryOperation,\n  ...Operation[],\n];\n\n/**\n * A transaction history that includes the transaction meta as the first element.\n * And the rest of the elements are the operation arrays that were applied to the transaction meta.\n */\nexport type TransactionHistory = [\n  TransactionMeta,\n  ...TransactionHistoryEntry[],\n];\n\n/**\n * Result of inferring the transaction type.\n */\nexport type InferTransactionTypeResult = {\n  /**\n   * The contract code, in hex format if it exists. '0x0' or\n   * '0x' are also indicators of non-existent contract code.\n   */\n  getCodeResponse?: string | null;\n\n  /**\n   * The type of transaction\n   */\n  type: TransactionType;\n};\n\n/**\n * A function for verifying a transaction, whether it is malicious or not\n */\nexport type SecurityProviderRequest = (\n  requestData: TransactionMeta,\n  messageType: string,\n) => Promise<any>;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types.mjs b/node_modules/@metamask/transaction-controller/dist/types.mjs
new file mode 100644
index 0000000..c6fc19c
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types.mjs
@@ -0,0 +1,24 @@
+import {
+  GasFeeEstimateLevel,
+  GasFeeEstimateType,
+  SimulationErrorCode,
+  SimulationTokenStandard,
+  TransactionEnvelopeType,
+  TransactionStatus,
+  TransactionType,
+  UserFeeLevel,
+  WalletDevice
+} from "./chunk-N6JXPWLY.mjs";
+import "./chunk-XUI43LEZ.mjs";
+export {
+  GasFeeEstimateLevel,
+  GasFeeEstimateType,
+  SimulationErrorCode,
+  SimulationTokenStandard,
+  TransactionEnvelopeType,
+  TransactionStatus,
+  TransactionType,
+  UserFeeLevel,
+  WalletDevice
+};
+//# sourceMappingURL=types.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/TransactionController.d.ts b/node_modules/@metamask/transaction-controller/dist/types/TransactionController.d.ts
new file mode 100644
index 0000000..83c14ca
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/TransactionController.d.ts
@@ -0,0 +1,828 @@
+import { Hardfork } from '@ethereumjs/common';
+import type { TypedTransaction } from '@ethereumjs/tx';
+import type { AddApprovalRequest } from '@metamask/approval-controller';
+import type { ControllerGetStateAction, ControllerStateChangeEvent, RestrictedControllerMessenger } from '@metamask/base-controller';
+import { BaseController } from '@metamask/base-controller';
+import type { FetchGasFeeEstimateOptions, GasFeeState } from '@metamask/gas-fee-controller';
+import type { BlockTracker, NetworkClientId, NetworkController, NetworkControllerStateChangeEvent, NetworkState, Provider, NetworkControllerFindNetworkClientIdByChainIdAction, NetworkControllerGetNetworkClientByIdAction } from '@metamask/network-controller';
+import type { Hex } from '@metamask/utils';
+import type { NonceLock, Transaction as NonceTrackerTransaction } from 'nonce-tracker';
+import type { IncomingTransactionOptions } from './helpers/IncomingTransactionHelper';
+import type { SavedGasFees, SecurityProviderRequest, SendFlowHistoryEntry, TransactionParams, TransactionMeta, TransactionReceipt, WalletDevice, SecurityAlertResponse, GasFeeFlowResponse } from './types';
+import { TransactionType, TransactionStatus } from './types';
+export declare const HARDFORK = Hardfork.London;
+/**
+ * Object with new transaction's meta and a promise resolving to the
+ * transaction hash if successful.
+ *
+ * @property result - Promise resolving to a new transaction hash
+ * @property transactionMeta - Meta information about this new transaction
+ */
+export interface Result {
+    result: Promise<string>;
+    transactionMeta: TransactionMeta;
+}
+export interface GasPriceValue {
+    gasPrice: string;
+}
+export interface FeeMarketEIP1559Values {
+    maxFeePerGas: string;
+    maxPriorityFeePerGas: string;
+}
+/**
+ * Method data registry object
+ *
+ * @property registryMethod - Registry method raw string
+ * @property parsedRegistryMethod - Registry method object, containing name and method arguments
+ */
+export type MethodData = {
+    registryMethod: string;
+    parsedRegistryMethod: {
+        name: string;
+        args: {
+            type: string;
+        }[];
+    } | {
+        name?: any;
+        args?: any;
+    };
+};
+/**
+ * Transaction controller state
+ *
+ * @property transactions - A list of TransactionMeta objects
+ * @property methodData - Object containing all known method data information
+ * @property lastFetchedBlockNumbers - Last fetched block numbers.
+ */
+export type TransactionControllerState = {
+    transactions: TransactionMeta[];
+    methodData: Record<string, MethodData>;
+    lastFetchedBlockNumbers: {
+        [key: string]: number;
+    };
+};
+/**
+ * Multiplier used to determine a transaction's increased gas fee during cancellation
+ */
+export declare const CANCEL_RATE = 1.1;
+/**
+ * Multiplier used to determine a transaction's increased gas fee during speed up
+ */
+export declare const SPEED_UP_RATE = 1.1;
+/**
+ * Represents the `TransactionController:getState` action.
+ */
+export type TransactionControllerGetStateAction = ControllerGetStateAction<typeof controllerName, TransactionControllerState>;
+/**
+ * The internal actions available to the TransactionController.
+ */
+export type TransactionControllerActions = TransactionControllerGetStateAction;
+/**
+ * Configuration options for the PendingTransactionTracker
+ *
+ * @property isResubmitEnabled - Whether transaction publishing is automatically retried.
+ */
+export type PendingTransactionOptions = {
+    isResubmitEnabled?: () => boolean;
+};
+/**
+ * TransactionController constructor options.
+ *
+ * @property blockTracker - The block tracker used to poll for new blocks data.
+ * @property disableHistory - Whether to disable storing history in transaction metadata.
+ * @property disableSendFlowHistory - Explicitly disable transaction metadata history.
+ * @property disableSwaps - Whether to disable additional processing on swaps transactions.
+ * @property getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.
+ * @property getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.
+ * @property getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.
+ * @property getGasFeeEstimates - Callback to retrieve gas fee estimates.
+ * @property getNetworkClientRegistry - Gets the network client registry.
+ * @property getNetworkState - Gets the state of the network controller.
+ * @property getPermittedAccounts - Get accounts that a given origin has permissions for.
+ * @property getSavedGasFees - Gets the saved gas fee config.
+ * @property getSelectedAddress - Gets the address of the currently selected account.
+ * @property incomingTransactions - Configuration options for incoming transaction support.
+ * @property isMultichainEnabled - Enable multichain support.
+ * @property isSimulationEnabled - Whether new transactions will be automatically simulated.
+ * @property messenger - The controller messenger.
+ * @property onNetworkStateChange - Allows subscribing to network controller state changes.
+ * @property pendingTransactions - Configuration options for pending transaction support.
+ * @property provider - The provider used to create the underlying EthQuery instance.
+ * @property securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.
+ * @property sign - Function used to sign transactions.
+ * @property state - Initial state to set on this controller.
+ * @property transactionHistoryLimit - Transaction history limit.
+ * @property hooks - The controller hooks.
+ * @property hooks.afterSign - Additional logic to execute after signing a transaction. Return false to not change the status to signed.
+ * @property hooks.beforeApproveOnInit - Additional logic to execute before starting an approval flow for a transaction during initialization. Return false to skip the transaction.
+ * @property hooks.beforeCheckPendingTransaction - Additional logic to execute before checking pending transactions. Return false to prevent the broadcast of the transaction.
+ * @property hooks.beforePublish - Additional logic to execute before publishing a transaction. Return false to prevent the broadcast of the transaction.
+ * @property hooks.getAdditionalSignArguments - Returns additional arguments required to sign a transaction.
+ * @property hooks.publish - Alternate logic to publish a transaction.
+ */
+export type TransactionControllerOptions = {
+    blockTracker: BlockTracker;
+    disableHistory: boolean;
+    disableSendFlowHistory: boolean;
+    disableSwaps: boolean;
+    getCurrentAccountEIP1559Compatibility?: () => Promise<boolean>;
+    getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;
+    getExternalPendingTransactions?: (address: string, chainId?: string) => NonceTrackerTransaction[];
+    getGasFeeEstimates?: (options: FetchGasFeeEstimateOptions) => Promise<GasFeeState>;
+    getNetworkClientRegistry: NetworkController['getNetworkClientRegistry'];
+    getNetworkState: () => NetworkState;
+    getPermittedAccounts: (origin?: string) => Promise<string[]>;
+    getSavedGasFees?: (chainId: Hex) => SavedGasFees | undefined;
+    getSelectedAddress: () => string;
+    incomingTransactions?: IncomingTransactionOptions;
+    isMultichainEnabled: boolean;
+    isSimulationEnabled?: () => boolean;
+    messenger: TransactionControllerMessenger;
+    onNetworkStateChange: (listener: (state: NetworkState) => void) => void;
+    pendingTransactions?: PendingTransactionOptions;
+    provider: Provider;
+    securityProviderRequest?: SecurityProviderRequest;
+    sign?: (transaction: TypedTransaction, from: string, transactionMeta?: TransactionMeta) => Promise<TypedTransaction>;
+    state?: Partial<TransactionControllerState>;
+    testGasFeeFlows?: boolean;
+    transactionHistoryLimit: number;
+    hooks: {
+        afterSign?: (transactionMeta: TransactionMeta, signedTx: TypedTransaction) => boolean;
+        beforeApproveOnInit?: (transactionMeta: TransactionMeta) => boolean;
+        beforeCheckPendingTransaction?: (transactionMeta: TransactionMeta) => boolean;
+        beforePublish?: (transactionMeta: TransactionMeta) => boolean;
+        getAdditionalSignArguments?: (transactionMeta: TransactionMeta) => (TransactionMeta | undefined)[];
+        publish?: (transactionMeta: TransactionMeta) => Promise<{
+            transactionHash: string;
+        }>;
+    };
+};
+/**
+ * The name of the {@link TransactionController}.
+ */
+declare const controllerName = "TransactionController";
+/**
+ * The external actions available to the {@link TransactionController}.
+ */
+export type AllowedActions = AddApprovalRequest | NetworkControllerFindNetworkClientIdByChainIdAction | NetworkControllerGetNetworkClientByIdAction;
+/**
+ * The external events available to the {@link TransactionController}.
+ */
+export type AllowedEvents = NetworkControllerStateChangeEvent;
+/**
+ * Represents the `TransactionController:stateChange` event.
+ */
+export type TransactionControllerStateChangeEvent = ControllerStateChangeEvent<typeof controllerName, TransactionControllerState>;
+/**
+ * Represents the `TransactionController:incomingTransactionBlockReceived` event.
+ */
+export type TransactionControllerIncomingTransactionBlockReceivedEvent = {
+    type: `${typeof controllerName}:incomingTransactionBlockReceived`;
+    payload: [blockNumber: number];
+};
+/**
+ * Represents the `TransactionController:postTransactionBalanceUpdated` event.
+ */
+export type TransactionControllerPostTransactionBalanceUpdatedEvent = {
+    type: `${typeof controllerName}:postTransactionBalanceUpdated`;
+    payload: [
+        {
+            transactionMeta: TransactionMeta;
+            approvalTransactionMeta?: TransactionMeta;
+        }
+    ];
+};
+/**
+ * Represents the `TransactionController:speedUpTransactionAdded` event.
+ */
+export type TransactionControllerSpeedupTransactionAddedEvent = {
+    type: `${typeof controllerName}:speedupTransactionAdded`;
+    payload: [transactionMeta: TransactionMeta];
+};
+/**
+ * Represents the `TransactionController:transactionApproved` event.
+ */
+export type TransactionControllerTransactionApprovedEvent = {
+    type: `${typeof controllerName}:transactionApproved`;
+    payload: [
+        {
+            transactionMeta: TransactionMeta;
+            actionId?: string;
+        }
+    ];
+};
+/**
+ * Represents the `TransactionController:transactionConfirmed` event.
+ */
+export type TransactionControllerTransactionConfirmedEvent = {
+    type: `${typeof controllerName}:transactionConfirmed`;
+    payload: [transactionMeta: TransactionMeta];
+};
+/**
+ * Represents the `TransactionController:transactionDropped` event.
+ */
+export type TransactionControllerTransactionDroppedEvent = {
+    type: `${typeof controllerName}:transactionDropped`;
+    payload: [{
+        transactionMeta: TransactionMeta;
+    }];
+};
+/**
+ * Represents the `TransactionController:transactionFailed` event.
+ */
+export type TransactionControllerTransactionFailedEvent = {
+    type: `${typeof controllerName}:transactionFailed`;
+    payload: [
+        {
+            actionId?: string;
+            error: string;
+            transactionMeta: TransactionMeta;
+        }
+    ];
+};
+/**
+ * Represents the `TransactionController:transactionFinished` event.
+ */
+export type TransactionControllerTransactionFinishedEvent = {
+    type: `${typeof controllerName}:transactionFinished`;
+    payload: [transactionMeta: TransactionMeta];
+};
+/**
+ * Represents the `TransactionController:transactionNewSwapApproval` event.
+ */
+export type TransactionControllerTransactionNewSwapApprovalEvent = {
+    type: `${typeof controllerName}:transactionNewSwapApproval`;
+    payload: [{
+        transactionMeta: TransactionMeta;
+    }];
+};
+/**
+ * Represents the `TransactionController:transactionNewSwap` event.
+ */
+export type TransactionControllerTransactionNewSwapEvent = {
+    type: `${typeof controllerName}:transactionNewSwap`;
+    payload: [{
+        transactionMeta: TransactionMeta;
+    }];
+};
+/**
+ * Represents the `TransactionController:transactionPublishingSkipped` event.
+ */
+export type TransactionControllerTransactionPublishingSkipped = {
+    type: `${typeof controllerName}:transactionPublishingSkipped`;
+    payload: [transactionMeta: TransactionMeta];
+};
+/**
+ * Represents the `TransactionController:transactionRejected` event.
+ */
+export type TransactionControllerTransactionRejectedEvent = {
+    type: `${typeof controllerName}:transactionRejected`;
+    payload: [
+        {
+            transactionMeta: TransactionMeta;
+            actionId?: string;
+        }
+    ];
+};
+/**
+ * Represents the `TransactionController:transactionStatusUpdated` event.
+ */
+export type TransactionControllerTransactionStatusUpdatedEvent = {
+    type: `${typeof controllerName}:transactionStatusUpdated`;
+    payload: [
+        {
+            transactionMeta: TransactionMeta;
+        }
+    ];
+};
+/**
+ * Represents the `TransactionController:transactionSubmitted` event.
+ */
+export type TransactionControllerTransactionSubmittedEvent = {
+    type: `${typeof controllerName}:transactionSubmitted`;
+    payload: [
+        {
+            transactionMeta: TransactionMeta;
+            actionId?: string;
+        }
+    ];
+};
+/**
+ * Represents the `TransactionController:unapprovedTransactionAdded` event.
+ */
+export type TransactionControllerUnapprovedTransactionAddedEvent = {
+    type: `${typeof controllerName}:unapprovedTransactionAdded`;
+    payload: [transactionMeta: TransactionMeta];
+};
+/**
+ * The internal events available to the {@link TransactionController}.
+ */
+export type TransactionControllerEvents = TransactionControllerIncomingTransactionBlockReceivedEvent | TransactionControllerPostTransactionBalanceUpdatedEvent | TransactionControllerSpeedupTransactionAddedEvent | TransactionControllerStateChangeEvent | TransactionControllerTransactionApprovedEvent | TransactionControllerTransactionConfirmedEvent | TransactionControllerTransactionDroppedEvent | TransactionControllerTransactionFailedEvent | TransactionControllerTransactionFinishedEvent | TransactionControllerTransactionNewSwapApprovalEvent | TransactionControllerTransactionNewSwapEvent | TransactionControllerTransactionPublishingSkipped | TransactionControllerTransactionRejectedEvent | TransactionControllerTransactionStatusUpdatedEvent | TransactionControllerTransactionSubmittedEvent | TransactionControllerUnapprovedTransactionAddedEvent;
+/**
+ * The messenger of the {@link TransactionController}.
+ */
+export type TransactionControllerMessenger = RestrictedControllerMessenger<typeof controllerName, TransactionControllerActions | AllowedActions, TransactionControllerEvents | AllowedEvents, AllowedActions['type'], AllowedEvents['type']>;
+/**
+ * Possible states of the approve transaction step.
+ */
+export declare enum ApprovalState {
+    Approved = "approved",
+    NotApproved = "not-approved",
+    SkippedViaBeforePublishHook = "skipped-via-before-publish-hook"
+}
+/**
+ * Controller responsible for submitting and managing transactions.
+ */
+export declare class TransactionController extends BaseController<typeof controllerName, TransactionControllerState, TransactionControllerMessenger> {
+    #private;
+    private readonly isHistoryDisabled;
+    private readonly isSwapsDisabled;
+    private readonly isSendFlowHistoryDisabled;
+    private readonly inProcessOfSigning;
+    private readonly nonceTracker;
+    private readonly registry;
+    private readonly mutex;
+    private readonly gasFeeFlows;
+    private readonly getSavedGasFees;
+    private readonly getNetworkState;
+    private readonly getCurrentAccountEIP1559Compatibility;
+    private readonly getCurrentNetworkEIP1559Compatibility;
+    private readonly getGasFeeEstimates;
+    private readonly getPermittedAccounts;
+    private readonly getSelectedAddress;
+    private readonly getExternalPendingTransactions;
+    private readonly layer1GasFeeFlows;
+    private readonly incomingTransactionHelper;
+    private readonly securityProviderRequest?;
+    private readonly pendingTransactionTracker;
+    private readonly signAbortCallbacks;
+    private readonly afterSign;
+    private readonly beforeApproveOnInit;
+    private readonly beforeCheckPendingTransaction;
+    private readonly beforePublish;
+    private readonly publish;
+    private readonly getAdditionalSignArguments;
+    private failTransaction;
+    private registryLookup;
+    /**
+     * Method used to sign transactions
+     */
+    sign?: (transaction: TypedTransaction, from: string, transactionMeta?: TransactionMeta) => Promise<TypedTransaction>;
+    /**
+     * Constructs a TransactionController.
+     *
+     * @param options - The controller options.
+     * @param options.blockTracker - The block tracker used to poll for new blocks data.
+     * @param options.disableHistory - Whether to disable storing history in transaction metadata.
+     * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.
+     * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.
+     * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.
+     * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.
+     * @param options.getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.
+     * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.
+     * @param options.getNetworkClientRegistry - Gets the network client registry.
+     * @param options.getNetworkState - Gets the state of the network controller.
+     * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.
+     * @param options.getSavedGasFees - Gets the saved gas fee config.
+     * @param options.getSelectedAddress - Gets the address of the currently selected account.
+     * @param options.incomingTransactions - Configuration options for incoming transaction support.
+     * @param options.isMultichainEnabled - Enable multichain support.
+     * @param options.isSimulationEnabled - Whether new transactions will be automatically simulated.
+     * @param options.messenger - The controller messenger.
+     * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
+     * @param options.pendingTransactions - Configuration options for pending transaction support.
+     * @param options.provider - The provider used to create the underlying EthQuery instance.
+     * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.
+     * @param options.sign - Function used to sign transactions.
+     * @param options.state - Initial state to set on this controller.
+     * @param options.testGasFeeFlows - Whether to use the test gas fee flow.
+     * @param options.transactionHistoryLimit - Transaction history limit.
+     * @param options.hooks - The controller hooks.
+     */
+    constructor({ blockTracker, disableHistory, disableSendFlowHistory, disableSwaps, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getExternalPendingTransactions, getGasFeeEstimates, getNetworkClientRegistry, getNetworkState, getPermittedAccounts, getSavedGasFees, getSelectedAddress, incomingTransactions, isMultichainEnabled, isSimulationEnabled, messenger, onNetworkStateChange, pendingTransactions, provider, securityProviderRequest, sign, state, testGasFeeFlows, transactionHistoryLimit, hooks, }: TransactionControllerOptions);
+    /**
+     * Stops polling and removes listeners to prepare the controller for garbage collection.
+     */
+    destroy(): void;
+    /**
+     * Handle new method data request.
+     *
+     * @param fourBytePrefix - The method prefix.
+     * @returns The method data object corresponding to the given signature prefix.
+     */
+    handleMethodData(fourBytePrefix: string): Promise<MethodData>;
+    /**
+     * Add a new unapproved transaction to state. Parameters will be validated, a
+     * unique transaction id will be generated, and gas and gasPrice will be calculated
+     * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.
+     *
+     * @param txParams - Standard parameters for an Ethereum transaction.
+     * @param opts - Additional options to control how the transaction is added.
+     * @param opts.actionId - Unique ID to prevent duplicate requests.
+     * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
+     * @param opts.method - RPC method that requested the transaction.
+     * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
+     * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.
+     * @param opts.securityAlertResponse - Response from security validator.
+     * @param opts.sendFlowHistory - The sendFlowHistory entries to add.
+     * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.
+     * @param opts.swaps - Options for swaps transactions.
+     * @param opts.swaps.hasApproveTx - Whether the transaction has an approval transaction.
+     * @param opts.swaps.meta - Metadata for swap transaction.
+     * @param opts.networkClientId - The id of the network client for this transaction.
+     * @returns Object containing a promise resolving to the transaction hash if approved.
+     */
+    addTransaction(txParams: TransactionParams, { actionId, deviceConfirmedOn, method, origin, requireApproval, securityAlertResponse, sendFlowHistory, swaps, type, networkClientId: requestNetworkClientId, }?: {
+        actionId?: string;
+        deviceConfirmedOn?: WalletDevice;
+        method?: string;
+        origin?: string;
+        requireApproval?: boolean | undefined;
+        securityAlertResponse?: SecurityAlertResponse;
+        sendFlowHistory?: SendFlowHistoryEntry[];
+        swaps?: {
+            hasApproveTx?: boolean;
+            meta?: Partial<TransactionMeta>;
+        };
+        type?: TransactionType;
+        networkClientId?: NetworkClientId;
+    }): Promise<Result>;
+    startIncomingTransactionPolling(networkClientIds?: NetworkClientId[]): void;
+    stopIncomingTransactionPolling(networkClientIds?: NetworkClientId[]): void;
+    stopAllIncomingTransactionPolling(): void;
+    updateIncomingTransactions(networkClientIds?: NetworkClientId[]): Promise<void>;
+    /**
+     * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
+     * and emitting a `<tx.id>:finished` hub event.
+     *
+     * @param transactionId - The ID of the transaction to cancel.
+     * @param gasValues - The gas values to use for the cancellation transaction.
+     * @param options - The options for the cancellation transaction.
+     * @param options.actionId - Unique ID to prevent duplicate requests.
+     * @param options.estimatedBaseFee - The estimated base fee of the transaction.
+     */
+    stopTransaction(transactionId: string, gasValues?: GasPriceValue | FeeMarketEIP1559Values, { estimatedBaseFee, actionId, }?: {
+        estimatedBaseFee?: string;
+        actionId?: string;
+    }): Promise<void>;
+    /**
+     * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.
+     *
+     * @param transactionId - The ID of the transaction to speed up.
+     * @param gasValues - The gas values to use for the speed up transaction.
+     * @param options - The options for the speed up transaction.
+     * @param options.actionId - Unique ID to prevent duplicate requests
+     * @param options.estimatedBaseFee - The estimated base fee of the transaction.
+     */
+    speedUpTransaction(transactionId: string, gasValues?: GasPriceValue | FeeMarketEIP1559Values, { actionId, estimatedBaseFee, }?: {
+        actionId?: string;
+        estimatedBaseFee?: string;
+    }): Promise<void>;
+    /**
+     * Estimates required gas for a given transaction.
+     *
+     * @param transaction - The transaction to estimate gas for.
+     * @param networkClientId - The network client id to use for the estimate.
+     * @returns The gas and gas price.
+     */
+    estimateGas(transaction: TransactionParams, networkClientId?: NetworkClientId): Promise<{
+        gas: string;
+        simulationFails: {
+            reason: any;
+            errorKey: any;
+            debug: {
+                blockNumber: string;
+                blockGasLimit: string;
+            };
+        } | undefined;
+    }>;
+    /**
+     * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.
+     *
+     * @param transaction - The transaction params to estimate gas for.
+     * @param multiplier - The multiplier to use for the gas buffer.
+     * @param networkClientId - The network client id to use for the estimate.
+     */
+    estimateGasBuffered(transaction: TransactionParams, multiplier: number, networkClientId?: NetworkClientId): Promise<{
+        gas: `0x${string}`;
+        simulationFails: {
+            reason: any;
+            errorKey: any;
+            debug: {
+                blockNumber: string;
+                blockGasLimit: string;
+            };
+        } | undefined;
+    }>;
+    /**
+     * Updates an existing transaction in state.
+     *
+     * @param transactionMeta - The new transaction to store in state.
+     * @param note - A note or update reason to include in the transaction history.
+     */
+    updateTransaction(transactionMeta: TransactionMeta, note: string): void;
+    /**
+     * Update the security alert response for a transaction.
+     *
+     * @param transactionId - ID of the transaction.
+     * @param securityAlertResponse - The new security alert response for the transaction.
+     */
+    updateSecurityAlertResponse(transactionId: string, securityAlertResponse: SecurityAlertResponse): void;
+    /**
+     * Removes all transactions from state, optionally based on the current network.
+     *
+     * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the
+     * current network. If `true`, all transactions are wiped.
+     * @param address - If specified, only transactions originating from this address will be
+     * wiped on current network.
+     */
+    wipeTransactions(ignoreNetwork?: boolean, address?: string): void;
+    /**
+     * Adds external provided transaction to state as confirmed transaction.
+     *
+     * @param transactionMeta - TransactionMeta to add transactions.
+     * @param transactionReceipt - TransactionReceipt of the external transaction.
+     * @param baseFeePerGas - Base fee per gas of the external transaction.
+     */
+    confirmExternalTransaction(transactionMeta: TransactionMeta, transactionReceipt: TransactionReceipt, baseFeePerGas: Hex): Promise<void>;
+    /**
+     * Append new send flow history to a transaction.
+     *
+     * @param transactionID - The ID of the transaction to update.
+     * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.
+     * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.
+     * @returns The updated transactionMeta.
+     */
+    updateTransactionSendFlowHistory(transactionID: string, currentSendFlowHistoryLength: number, sendFlowHistoryToAdd: SendFlowHistoryEntry[]): TransactionMeta;
+    /**
+     * Update the gas values of a transaction.
+     *
+     * @param transactionId - The ID of the transaction to update.
+     * @param gasValues - Gas values to update.
+     * @param gasValues.gas - Same as transaction.gasLimit.
+     * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.
+     * @param gasValues.gasPrice - Price per gas for legacy transactions.
+     * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.
+     * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.
+     * @param gasValues.estimateUsed - Which estimate level was used.
+     * @param gasValues.estimateSuggested - Which estimate level that the API suggested.
+     * @param gasValues.defaultGasEstimates - The default estimate for gas.
+     * @param gasValues.originalGasEstimate - Original estimate for gas.
+     * @param gasValues.userEditedGasLimit - The gas limit supplied by user.
+     * @param gasValues.userFeeLevel - Estimate level user selected.
+     * @returns The updated transactionMeta.
+     */
+    updateTransactionGasFees(transactionId: string, { defaultGasEstimates, estimateUsed, estimateSuggested, gas, gasLimit, gasPrice, maxPriorityFeePerGas, maxFeePerGas, originalGasEstimate, userEditedGasLimit, userFeeLevel, }: {
+        defaultGasEstimates?: string;
+        estimateUsed?: string;
+        estimateSuggested?: string;
+        gas?: string;
+        gasLimit?: string;
+        gasPrice?: string;
+        maxPriorityFeePerGas?: string;
+        maxFeePerGas?: string;
+        originalGasEstimate?: string;
+        userEditedGasLimit?: boolean;
+        userFeeLevel?: string;
+    }): TransactionMeta;
+    /**
+     * Update the previous gas values of a transaction.
+     *
+     * @param transactionId - The ID of the transaction to update.
+     * @param previousGas - Previous gas values to update.
+     * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.
+     * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.
+     * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.
+     * @returns The updated transactionMeta.
+     */
+    updatePreviousGasParams(transactionId: string, { gasLimit, maxFeePerGas, maxPriorityFeePerGas, }: {
+        gasLimit?: string;
+        maxFeePerGas?: string;
+        maxPriorityFeePerGas?: string;
+    }): TransactionMeta;
+    getNonceLock(address: string, networkClientId?: NetworkClientId): Promise<NonceLock>;
+    /**
+     * Updates the editable parameters of a transaction.
+     *
+     * @param txId - The ID of the transaction to update.
+     * @param params - The editable parameters to update.
+     * @param params.data - Data to pass with the transaction.
+     * @param params.gas - Maximum number of units of gas to use for the transaction.
+     * @param params.gasPrice - Price per gas for legacy transactions.
+     * @param params.from - Address to send the transaction from.
+     * @param params.to - Address to send the transaction to.
+     * @param params.value - Value associated with the transaction.
+     * @returns The updated transaction metadata.
+     */
+    updateEditableParams(txId: string, { data, gas, gasPrice, from, to, value, }: {
+        data?: string;
+        gas?: string;
+        gasPrice?: string;
+        from?: string;
+        to?: string;
+        value?: string;
+    }): Promise<TransactionMeta | undefined>;
+    /**
+     * Signs and returns the raw transaction data for provided transaction params list.
+     *
+     * @param listOfTxParams - The list of transaction params to approve.
+     * @param opts - Options bag.
+     * @param opts.hasNonce - Whether the transactions already have a nonce.
+     * @returns The raw transactions.
+     */
+    approveTransactionsWithSameNonce(listOfTxParams?: (TransactionParams & {
+        chainId: Hex;
+    })[], { hasNonce }?: {
+        hasNonce?: boolean;
+    }): Promise<string | string[]>;
+    /**
+     * Update a custodial transaction.
+     *
+     * @param transactionId - The ID of the transaction to update.
+     * @param options - The custodial transaction options to update.
+     * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.
+     * @param options.hash - The new hash value to be assigned.
+     * @param options.status - The new status value to be assigned.
+     */
+    updateCustodialTransaction(transactionId: string, { errorMessage, hash, status, }: {
+        errorMessage?: string;
+        hash?: string;
+        status?: TransactionStatus;
+    }): void;
+    /**
+     * Creates approvals for all unapproved transactions persisted.
+     */
+    initApprovals(): void;
+    /**
+     * Search transaction metadata for matching entries.
+     *
+     * @param opts - Options bag.
+     * @param opts.searchCriteria - An object containing values or functions for transaction properties to filter transactions with.
+     * @param opts.initialList - The transactions to search. Defaults to the current state.
+     * @param opts.filterToCurrentNetwork - Whether to filter the results to the current network. Defaults to true.
+     * @param opts.limit - The maximum number of transactions to return. No limit by default.
+     * @returns An array of transactions matching the provided options.
+     */
+    getTransactions({ searchCriteria, initialList, filterToCurrentNetwork, limit, }?: {
+        searchCriteria?: any;
+        initialList?: TransactionMeta[];
+        filterToCurrentNetwork?: boolean;
+        limit?: number;
+    }): TransactionMeta[];
+    estimateGasFee({ transactionParams, chainId, networkClientId: requestNetworkClientId, }: {
+        transactionParams: TransactionParams;
+        chainId?: Hex;
+        networkClientId?: NetworkClientId;
+    }): Promise<GasFeeFlowResponse>;
+    /**
+     * Determine the layer 1 gas fee for the given transaction parameters.
+     *
+     * @param request - The request object.
+     * @param request.transactionParams - The transaction parameters to estimate the layer 1 gas fee for.
+     * @param request.chainId - The ID of the chain where the transaction will be executed.
+     * @param request.networkClientId - The ID of a specific network client to process the transaction.
+     */
+    getLayer1GasFee({ transactionParams, chainId, networkClientId, }: {
+        transactionParams: TransactionParams;
+        chainId?: Hex;
+        networkClientId?: NetworkClientId;
+    }): Promise<Hex | undefined>;
+    private signExternalTransaction;
+    /**
+     * Removes unapproved transactions from state.
+     */
+    clearUnapprovedTransactions(): void;
+    /**
+     * Stop the signing process for a specific transaction.
+     * Throws an error causing the transaction status to be set to failed.
+     * @param transactionId - The ID of the transaction to stop signing.
+     */
+    abortTransactionSigning(transactionId: string): void;
+    private addMetadata;
+    private updateGasProperties;
+    private onBootCleanup;
+    /**
+     * Force submit approved transactions for all chains.
+     */
+    private submitApprovedTransactions;
+    private processApproval;
+    /**
+     * Approves a transaction and updates it's status in state. If this is not a
+     * retry transaction, a nonce will be generated. The transaction is signed
+     * using the sign configuration property, then published to the blockchain.
+     * A `<tx.id>:finished` hub event is fired after success or failure.
+     *
+     * @param transactionId - The ID of the transaction to approve.
+     */
+    private approveTransaction;
+    private publishTransaction;
+    /**
+     * Cancels a transaction based on its ID by setting its status to "rejected"
+     * and emitting a `<tx.id>:finished` hub event.
+     *
+     * @param transactionId - The ID of the transaction to cancel.
+     * @param actionId - The actionId passed from UI
+     */
+    private cancelTransaction;
+    /**
+     * Trim the amount of transactions that are set on the state. Checks
+     * if the length of the tx history is longer then desired persistence
+     * limit and then if it is removes the oldest confirmed or rejected tx.
+     * Pending or unapproved transactions will not be removed by this
+     * operation. For safety of presenting a fully functional transaction UI
+     * representation, this function will not break apart transactions with the
+     * same nonce, created on the same day, per network. Not accounting for
+     * transactions of the same nonce, same day and network combo can result in
+     * confusing or broken experiences in the UI.
+     *
+     * @param transactions - The transactions to be applied to the state.
+     * @returns The trimmed list of transactions.
+     */
+    private trimTransactionsForState;
+    /**
+     * Determines if the transaction is in a final state.
+     *
+     * @param status - The transaction status.
+     * @returns Whether the transaction is in a final state.
+     */
+    private isFinalState;
+    /**
+     * Whether the transaction has at least completed all local processing.
+     *
+     * @param status - The transaction status.
+     * @returns Whether the transaction is in a final state.
+     */
+    private isLocalFinalState;
+    private requestApproval;
+    private getTransaction;
+    private getApprovalId;
+    private isTransactionCompleted;
+    private getChainId;
+    private prepareUnsignedEthTx;
+    /**
+     * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for
+     * specifying which chain, network, hardfork and EIPs to support for
+     * a transaction. By referencing this configuration, and analyzing the fields
+     * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718
+     * transaction type to use.
+     *
+     * @param chainId - The chainId to use for the configuration.
+     * @returns common configuration object
+     */
+    private getCommonConfiguration;
+    private onIncomingTransactions;
+    private onUpdatedLastFetchedBlockNumbers;
+    private generateDappSuggestedGasFees;
+    /**
+     * Validates and adds external provided transaction to state.
+     *
+     * @param transactionMeta - Nominated external transaction to be added to state.
+     * @returns The new transaction.
+     */
+    private addExternalTransaction;
+    /**
+     * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions
+     * in the transactions have the same nonce.
+     *
+     * @param transactionId - Used to identify original transaction.
+     */
+    private markNonceDuplicatesDropped;
+    /**
+     * Method to set transaction status to dropped.
+     *
+     * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.
+     */
+    private setTransactionStatusDropped;
+    /**
+     * Get transaction with provided actionId.
+     *
+     * @param actionId - Unique ID to prevent duplicate requests
+     * @returns the filtered transaction
+     */
+    private getTransactionWithActionId;
+    private waitForTransactionFinished;
+    /**
+     * Updates the r, s, and v properties of a TransactionMeta object
+     * with values from a signed transaction.
+     *
+     * @param transactionMeta - The TransactionMeta object to update.
+     * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.
+     */
+    private updateTransactionMetaRSV;
+    private getEIP1559Compatibility;
+    private signTransaction;
+    private onTransactionStatusChange;
+    private getNonceTrackerTransactions;
+    private onConfirmedTransaction;
+    private updatePostBalance;
+    private publishTransactionForRetry;
+    /**
+     * Ensures that error is a nonce issue
+     *
+     * @param error - The error to check
+     * @returns Whether or not the error is a nonce issue
+     */
+    private isTransactionAlreadyConfirmedError;
+}
+export {};
+//# sourceMappingURL=TransactionController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/TransactionController.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/TransactionController.d.ts.map
new file mode 100644
index 0000000..8d7a9da
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/TransactionController.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"TransactionController.d.ts","sourceRoot":"","sources":["../../src/TransactionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/constants.d.ts b/node_modules/@metamask/transaction-controller/dist/types/constants.d.ts
similarity index 66%
rename from node_modules/@metamask/transaction-controller/dist/constants.d.ts
rename to node_modules/@metamask/transaction-controller/dist/types/constants.d.ts
index fff2c5c..68358e6 100644
--- a/node_modules/@metamask/transaction-controller/dist/constants.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/types/constants.d.ts
@@ -1,11 +1,15 @@
-import { TransactionType } from './types';
 export declare const CHAIN_IDS: {
     readonly MAINNET: "0x1";
     readonly GOERLI: "0x5";
+    readonly BASE: "0x2105";
+    readonly BASE_TESTNET: "0x14a33";
     readonly BSC: "0x38";
     readonly BSC_TESTNET: "0x61";
     readonly OPTIMISM: "0xa";
     readonly OPTIMISM_TESTNET: "0x1a4";
+    readonly OPBNB: "0xcc";
+    readonly OPBNB_TESTNET: "0x15eb";
+    readonly OPTIMISM_SEPOLIA: "0xaa37dc";
     readonly POLYGON: "0x89";
     readonly POLYGON_TESTNET: "0x13881";
     readonly AVALANCHE: "0xa86a";
@@ -14,11 +18,17 @@ export declare const CHAIN_IDS: {
     readonly FANTOM_TESTNET: "0xfa2";
     readonly SEPOLIA: "0xaa36a7";
     readonly LINEA_GOERLI: "0xe704";
+    readonly LINEA_SEPOLIA: "0xe705";
     readonly LINEA_MAINNET: "0xe708";
     readonly MOONBEAM: "0x504";
     readonly MOONBEAM_TESTNET: "0x507";
     readonly MOONRIVER: "0x505";
     readonly GNOSIS: "0x64";
+    readonly ARBITRUM: "0xa4b1";
+    readonly ZKSYNC_ERA: "0x144";
+    readonly ZORA: "0x76adf1";
+    readonly SCROLL: "0x82750";
+    readonly SCROLL_SEPOLIA: "0x8274f";
 };
 export declare const DEFAULT_ETHERSCAN_DOMAIN = "etherscan.io";
 export declare const DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = "api";
@@ -39,6 +49,10 @@ export declare const ETHERSCAN_SUPPORTED_NETWORKS: {
         domain: string;
         subdomain: string;
     };
+    "0xe705": {
+        domain: string;
+        subdomain: string;
+    };
     "0xe708": {
         domain: string;
         subdomain: string;
@@ -55,7 +69,7 @@ export declare const ETHERSCAN_SUPPORTED_NETWORKS: {
         domain: string;
         subdomain: string;
     };
-    "0x1a4": {
+    "0xaa37dc": {
         domain: string;
         subdomain: string;
     };
@@ -100,6 +114,30 @@ export declare const ETHERSCAN_SUPPORTED_NETWORKS: {
         subdomain: string;
     };
 };
-export declare const SWAP_TRANSACTION_TYPES: TransactionType[];
-export declare const VALID_UNAPPROVED_TRANSACTION_TYPES: TransactionType[];
+export declare const GAS_BUFFER_CHAIN_OVERRIDES: {
+    "0xa": number;
+    "0xaa37dc": number;
+};
+/** Extract of the Wrapped ERC-20 ABI required for simulation. */
+export declare const ABI_SIMULATION_ERC20_WRAPPED: {
+    anonymous: boolean;
+    inputs: {
+        indexed: boolean;
+        name: string;
+        type: string;
+    }[];
+    name: string;
+    type: string;
+}[];
+/** Extract of the legacy ERC-721 ABI required for simulation. */
+export declare const ABI_SIMULATION_ERC721_LEGACY: {
+    anonymous: boolean;
+    inputs: {
+        indexed: boolean;
+        name: string;
+        type: string;
+    }[];
+    name: string;
+    type: string;
+}[];
 //# sourceMappingURL=constants.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/constants.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/constants.d.ts.map
new file mode 100644
index 0000000..b9ab121
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/constants.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"constants.d.ts","sourceRoot":"","sources":["../../src/constants.ts"],"names":[],"mappings":"AAAA,eAAO,MAAM,SAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BZ,CAAC;AAEX,eAAO,MAAM,wBAAwB,iBAAiB,CAAC;AACvD,eAAO,MAAM,kCAAkC,QAAQ,CAAC;AAExD,eAAO,MAAM,4BAA4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiFxC,CAAC;AAEF,eAAO,MAAM,0BAA0B;;;CAGtC,CAAC;AAEF,iEAAiE;AACjE,eAAO,MAAM,4BAA4B;;;;;;;;;GAmBxC,CAAC;AAEF,iEAAiE;AACjE,eAAO,MAAM,4BAA4B;;;;;;;;;GAuBxC,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/errors.d.ts b/node_modules/@metamask/transaction-controller/dist/types/errors.d.ts
new file mode 100644
index 0000000..a608a03
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/errors.d.ts
@@ -0,0 +1,15 @@
+import type { Hex } from '@metamask/utils';
+export declare class SimulationError extends Error {
+    code?: string | number;
+    constructor(message?: string, code?: string | number);
+}
+export declare class SimulationChainNotSupportedError extends SimulationError {
+    constructor(chainId: Hex);
+}
+export declare class SimulationInvalidResponseError extends SimulationError {
+    constructor();
+}
+export declare class SimulationRevertedError extends SimulationError {
+    constructor();
+}
+//# sourceMappingURL=errors.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/errors.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/errors.d.ts.map
new file mode 100644
index 0000000..6411edc
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/errors.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"errors.d.ts","sourceRoot":"","sources":["../../src/errors.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAI3C,qBAAa,eAAgB,SAAQ,KAAK;IACxC,IAAI,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;gBAEX,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,GAAG,MAAM;CAKrD;AAED,qBAAa,gCAAiC,SAAQ,eAAe;gBACvD,OAAO,EAAE,GAAG;CAMzB;AAED,qBAAa,8BAA+B,SAAQ,eAAe;;CAOlE;AAED,qBAAa,uBAAwB,SAAQ,eAAe;;CAI3D"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/DefaultGasFeeFlow.d.ts b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/DefaultGasFeeFlow.d.ts
new file mode 100644
index 0000000..325802b
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/DefaultGasFeeFlow.d.ts
@@ -0,0 +1,10 @@
+import type { GasFeeFlow, GasFeeFlowRequest, GasFeeFlowResponse, TransactionMeta } from '../types';
+/**
+ * The standard implementation of a gas fee flow that obtains gas fee estimates using only the GasFeeController.
+ */
+export declare class DefaultGasFeeFlow implements GasFeeFlow {
+    #private;
+    matchesTransaction(_transactionMeta: TransactionMeta): boolean;
+    getGasFees(request: GasFeeFlowRequest): Promise<GasFeeFlowResponse>;
+}
+//# sourceMappingURL=DefaultGasFeeFlow.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/DefaultGasFeeFlow.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/DefaultGasFeeFlow.d.ts.map
new file mode 100644
index 0000000..d933d9e
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/DefaultGasFeeFlow.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"DefaultGasFeeFlow.d.ts","sourceRoot":"","sources":["../../../src/gas-flows/DefaultGasFeeFlow.ts"],"names":[],"mappings":"AAUA,OAAO,KAAK,EAIV,UAAU,EACV,iBAAiB,EACjB,kBAAkB,EAGlB,eAAe,EAChB,MAAM,UAAU,CAAC;AAMlB;;GAEG;AACH,qBAAa,iBAAkB,YAAW,UAAU;;IAClD,kBAAkB,CAAC,gBAAgB,EAAE,eAAe,GAAG,OAAO;IAIxD,UAAU,CAAC,OAAO,EAAE,iBAAiB,GAAG,OAAO,CAAC,kBAAkB,CAAC;CAmG1E"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/LineaGasFeeFlow.d.ts b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/LineaGasFeeFlow.d.ts
new file mode 100644
index 0000000..ce728db
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/LineaGasFeeFlow.d.ts
@@ -0,0 +1,12 @@
+import type { GasFeeFlow, GasFeeFlowRequest, GasFeeFlowResponse, TransactionMeta } from '../types';
+/**
+ * Implementation of a gas fee flow specific to Linea networks that obtains gas fee estimates using:
+ * - The `linea_estimateGas` RPC method to obtain the base fee and lowest priority fee.
+ * - Static multipliers to increase the base and priority fees.
+ */
+export declare class LineaGasFeeFlow implements GasFeeFlow {
+    #private;
+    matchesTransaction(transactionMeta: TransactionMeta): boolean;
+    getGasFees(request: GasFeeFlowRequest): Promise<GasFeeFlowResponse>;
+}
+//# sourceMappingURL=LineaGasFeeFlow.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/LineaGasFeeFlow.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/LineaGasFeeFlow.d.ts.map
new file mode 100644
index 0000000..5151163
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/LineaGasFeeFlow.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"LineaGasFeeFlow.d.ts","sourceRoot":"","sources":["../../../src/gas-flows/LineaGasFeeFlow.ts"],"names":[],"mappings":"AAMA,OAAO,KAAK,EAEV,UAAU,EACV,iBAAiB,EACjB,kBAAkB,EAClB,eAAe,EAChB,MAAM,UAAU,CAAC;AAiClB;;;;GAIG;AACH,qBAAa,eAAgB,YAAW,UAAU;;IAChD,kBAAkB,CAAC,eAAe,EAAE,eAAe,GAAG,OAAO;IAIvD,UAAU,CAAC,OAAO,EAAE,iBAAiB,GAAG,OAAO,CAAC,kBAAkB,CAAC;CAqG1E"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OptimismLayer1GasFeeFlow.d.ts b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OptimismLayer1GasFeeFlow.d.ts
new file mode 100644
index 0000000..ccfc44b
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OptimismLayer1GasFeeFlow.d.ts
@@ -0,0 +1,10 @@
+import type { TransactionMeta } from '../types';
+import { OracleLayer1GasFeeFlow } from './OracleLayer1GasFeeFlow';
+/**
+ * Optimism layer 1 gas fee flow that obtains gas fee estimate using an oracle contract.
+ */
+export declare class OptimismLayer1GasFeeFlow extends OracleLayer1GasFeeFlow {
+    constructor();
+    matchesTransaction(transactionMeta: TransactionMeta): boolean;
+}
+//# sourceMappingURL=OptimismLayer1GasFeeFlow.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OptimismLayer1GasFeeFlow.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OptimismLayer1GasFeeFlow.d.ts.map
new file mode 100644
index 0000000..0d09830
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OptimismLayer1GasFeeFlow.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"OptimismLayer1GasFeeFlow.d.ts","sourceRoot":"","sources":["../../../src/gas-flows/OptimismLayer1GasFeeFlow.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAChD,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAgBlE;;GAEG;AACH,qBAAa,wBAAyB,SAAQ,sBAAsB;;IAKlE,kBAAkB,CAAC,eAAe,EAAE,eAAe,GAAG,OAAO;CAG9D"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OracleLayer1GasFeeFlow.d.ts b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OracleLayer1GasFeeFlow.d.ts
new file mode 100644
index 0000000..b194c26
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OracleLayer1GasFeeFlow.d.ts
@@ -0,0 +1,12 @@
+import type { Hex } from '@metamask/utils';
+import type { Layer1GasFeeFlow, Layer1GasFeeFlowRequest, Layer1GasFeeFlowResponse, TransactionMeta } from '../types';
+/**
+ * Layer 1 gas fee flow that obtains gas fee estimate using an oracle smart contract.
+ */
+export declare abstract class OracleLayer1GasFeeFlow implements Layer1GasFeeFlow {
+    #private;
+    constructor(oracleAddress: Hex, signTransaction?: boolean);
+    abstract matchesTransaction(transactionMeta: TransactionMeta): boolean;
+    getLayer1Fee(request: Layer1GasFeeFlowRequest): Promise<Layer1GasFeeFlowResponse>;
+}
+//# sourceMappingURL=OracleLayer1GasFeeFlow.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OracleLayer1GasFeeFlow.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OracleLayer1GasFeeFlow.d.ts.map
new file mode 100644
index 0000000..458fbe3
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/OracleLayer1GasFeeFlow.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"OracleLayer1GasFeeFlow.d.ts","sourceRoot":"","sources":["../../../src/gas-flows/OracleLayer1GasFeeFlow.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAK3C,OAAO,KAAK,EACV,gBAAgB,EAChB,uBAAuB,EACvB,wBAAwB,EACxB,eAAe,EAChB,MAAM,UAAU,CAAC;AAiBlB;;GAEG;AACH,8BAAsB,sBAAuB,YAAW,gBAAgB;;gBAK1D,aAAa,EAAE,GAAG,EAAE,eAAe,CAAC,EAAE,OAAO;IAKzD,QAAQ,CAAC,kBAAkB,CAAC,eAAe,EAAE,eAAe,GAAG,OAAO;IAEhE,YAAY,CAChB,OAAO,EAAE,uBAAuB,GAC/B,OAAO,CAAC,wBAAwB,CAAC;CAyErC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/ScrollLayer1GasFeeFlow.d.ts b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/ScrollLayer1GasFeeFlow.d.ts
new file mode 100644
index 0000000..130b90e
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/ScrollLayer1GasFeeFlow.d.ts
@@ -0,0 +1,10 @@
+import type { TransactionMeta } from '../types';
+import { OracleLayer1GasFeeFlow } from './OracleLayer1GasFeeFlow';
+/**
+ * Scroll layer 1 gas fee flow that obtains gas fee estimate using an oracle contract.
+ */
+export declare class ScrollLayer1GasFeeFlow extends OracleLayer1GasFeeFlow {
+    constructor();
+    matchesTransaction(transactionMeta: TransactionMeta): boolean;
+}
+//# sourceMappingURL=ScrollLayer1GasFeeFlow.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/ScrollLayer1GasFeeFlow.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/ScrollLayer1GasFeeFlow.d.ts.map
new file mode 100644
index 0000000..2c7058a
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/ScrollLayer1GasFeeFlow.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ScrollLayer1GasFeeFlow.d.ts","sourceRoot":"","sources":["../../../src/gas-flows/ScrollLayer1GasFeeFlow.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAChD,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAQlE;;GAEG;AACH,qBAAa,sBAAuB,SAAQ,sBAAsB;;IAKhE,kBAAkB,CAAC,eAAe,EAAE,eAAe,GAAG,OAAO;CAG9D"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/TestGasFeeFlow.d.ts b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/TestGasFeeFlow.d.ts
new file mode 100644
index 0000000..b78f2e5
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/TestGasFeeFlow.d.ts
@@ -0,0 +1,12 @@
+import { type GasFeeFlow, type GasFeeFlowRequest, type GasFeeFlowResponse, type TransactionMeta } from '../types';
+/**
+ * A gas fee flow to facilitate testing in the clients.
+ * Increments the total gas fee by a fixed amount each time it is called.
+ * Relies on the transaction's gas value to generate a distinct total fee in the UI.
+ */
+export declare class TestGasFeeFlow implements GasFeeFlow {
+    #private;
+    matchesTransaction(_transactionMeta: TransactionMeta): boolean;
+    getGasFees(request: GasFeeFlowRequest): Promise<GasFeeFlowResponse>;
+}
+//# sourceMappingURL=TestGasFeeFlow.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/gas-flows/TestGasFeeFlow.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/TestGasFeeFlow.d.ts.map
new file mode 100644
index 0000000..fffc30f
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/gas-flows/TestGasFeeFlow.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"TestGasFeeFlow.d.ts","sourceRoot":"","sources":["../../../src/gas-flows/TestGasFeeFlow.ts"],"names":[],"mappings":"AAGA,OAAO,EAEL,KAAK,UAAU,EACf,KAAK,iBAAiB,EACtB,KAAK,kBAAkB,EACvB,KAAK,eAAe,EACrB,MAAM,UAAU,CAAC;AAKlB;;;;GAIG;AACH,qBAAa,cAAe,YAAW,UAAU;;IAG/C,kBAAkB,CAAC,gBAAgB,EAAE,eAAe,GAAG,OAAO;IAIxD,UAAU,CAAC,OAAO,EAAE,iBAAiB,GAAG,OAAO,CAAC,kBAAkB,CAAC;CAuD1E"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts b/node_modules/@metamask/transaction-controller/dist/types/helpers/EtherscanRemoteTransactionSource.d.ts
similarity index 93%
rename from node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts
rename to node_modules/@metamask/transaction-controller/dist/types/helpers/EtherscanRemoteTransactionSource.d.ts
index 8f36777..77cbad1 100644
--- a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/types/helpers/EtherscanRemoteTransactionSource.d.ts
@@ -1,5 +1,5 @@
 import type { Hex } from '@metamask/utils';
-import type { RemoteTransactionSource, RemoteTransactionSourceRequest, TransactionMeta } from './types';
+import type { RemoteTransactionSource, RemoteTransactionSourceRequest, TransactionMeta } from '../types';
 /**
  * A RemoteTransactionSource that fetches transaction data from Etherscan.
  */
diff --git a/node_modules/@metamask/transaction-controller/dist/types/helpers/EtherscanRemoteTransactionSource.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/helpers/EtherscanRemoteTransactionSource.d.ts.map
new file mode 100644
index 0000000..4f52896
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/helpers/EtherscanRemoteTransactionSource.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"EtherscanRemoteTransactionSource.d.ts","sourceRoot":"","sources":["../../../src/helpers/EtherscanRemoteTransactionSource.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAO3C,OAAO,KAAK,EACV,uBAAuB,EACvB,8BAA8B,EAC9B,eAAe,EAChB,MAAM,UAAU,CAAC;AAelB;;GAEG;AACH,qBAAa,gCACX,YAAW,uBAAuB;;gBAQtB,EACV,qBAAqB,GACtB,GAAE;QAAE,qBAAqB,CAAC,EAAE,OAAO,CAAA;KAAO;IAK3C,kBAAkB,CAAC,OAAO,EAAE,GAAG,GAAG,OAAO;IAIzC,sBAAsB,IAAI,MAAM,EAAE;IAI5B,iBAAiB,CACrB,OAAO,EAAE,8BAA8B,GACtC,OAAO,CAAC,eAAe,EAAE,CAAC;CAwJ9B"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/helpers/GasFeePoller.d.ts b/node_modules/@metamask/transaction-controller/dist/types/helpers/GasFeePoller.d.ts
new file mode 100644
index 0000000..5e7f3f8
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/helpers/GasFeePoller.d.ts
@@ -0,0 +1,35 @@
+/// <reference types="node" />
+import type { FetchGasFeeEstimateOptions, GasFeeState } from '@metamask/gas-fee-controller';
+import type { NetworkClientId, Provider } from '@metamask/network-controller';
+import type { Hex } from '@metamask/utils';
+import EventEmitter from 'events';
+import type { GasFeeFlow, Layer1GasFeeFlow } from '../types';
+import { type TransactionMeta } from '../types';
+/**
+ * Automatically polls and updates suggested gas fees on unapproved transactions.
+ */
+export declare class GasFeePoller {
+    #private;
+    hub: EventEmitter;
+    /**
+     * Constructs a new instance of the GasFeePoller.
+     * @param options - The options for this instance.
+     * @param options.findNetworkClientIdByChainId - Callback to find the network client ID by chain ID.
+     * @param options.gasFeeFlows - The gas fee flows to use to obtain suitable gas fees.
+     * @param options.getGasFeeControllerEstimates - Callback to obtain the default fee estimates.
+     * @param options.getProvider - Callback to obtain a provider instance.
+     * @param options.getTransactions - Callback to obtain the transaction data.
+     * @param options.layer1GasFeeFlows - The layer 1 gas fee flows to use to obtain suitable layer 1 gas fees.
+     * @param options.onStateChange - Callback to register a listener for controller state changes.
+     */
+    constructor({ findNetworkClientIdByChainId, gasFeeFlows, getGasFeeControllerEstimates, getProvider, getTransactions, layer1GasFeeFlows, onStateChange, }: {
+        findNetworkClientIdByChainId: (chainId: Hex) => NetworkClientId | undefined;
+        gasFeeFlows: GasFeeFlow[];
+        getGasFeeControllerEstimates: (options: FetchGasFeeEstimateOptions) => Promise<GasFeeState>;
+        getProvider: (chainId: Hex, networkClientId?: NetworkClientId) => Provider;
+        getTransactions: () => TransactionMeta[];
+        layer1GasFeeFlows: Layer1GasFeeFlow[];
+        onStateChange: (listener: () => void) => void;
+    });
+}
+//# sourceMappingURL=GasFeePoller.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/helpers/GasFeePoller.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/helpers/GasFeePoller.d.ts.map
new file mode 100644
index 0000000..d75f142
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/helpers/GasFeePoller.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"GasFeePoller.d.ts","sourceRoot":"","sources":["../../../src/helpers/GasFeePoller.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,EACV,0BAA0B,EAC1B,WAAW,EACZ,MAAM,8BAA8B,CAAC;AACtC,OAAO,KAAK,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAC9E,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAE3C,OAAO,YAAY,MAAM,QAAQ,CAAC;AAGlC,OAAO,KAAK,EAEV,UAAU,EAEV,gBAAgB,EACjB,MAAM,UAAU,CAAC;AAClB,OAAO,EAAqB,KAAK,eAAe,EAAE,MAAM,UAAU,CAAC;AAQnE;;GAEG;AACH,qBAAa,YAAY;;IACvB,GAAG,EAAE,YAAY,CAAsB;IAoBvC;;;;;;;;;;OAUG;gBACS,EACV,4BAA4B,EAC5B,WAAW,EACX,4BAA4B,EAC5B,WAAW,EACX,eAAe,EACf,iBAAiB,EACjB,aAAa,GACd,EAAE;QACD,4BAA4B,EAAE,CAAC,OAAO,EAAE,GAAG,KAAK,eAAe,GAAG,SAAS,CAAC;QAC5E,WAAW,EAAE,UAAU,EAAE,CAAC;QAC1B,4BAA4B,EAAE,CAC5B,OAAO,EAAE,0BAA0B,KAChC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC1B,WAAW,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,eAAe,CAAC,EAAE,eAAe,KAAK,QAAQ,CAAC;QAC3E,eAAe,EAAE,MAAM,eAAe,EAAE,CAAC;QACzC,iBAAiB,EAAE,gBAAgB,EAAE,CAAC;QACtC,aAAa,EAAE,CAAC,QAAQ,EAAE,MAAM,IAAI,KAAK,IAAI,CAAC;KAC/C;CAsNF"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/helpers/IncomingTransactionHelper.d.ts b/node_modules/@metamask/transaction-controller/dist/types/helpers/IncomingTransactionHelper.d.ts
new file mode 100644
index 0000000..5e7776f
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/helpers/IncomingTransactionHelper.d.ts
@@ -0,0 +1,39 @@
+/// <reference types="node" />
+import type { BlockTracker } from '@metamask/network-controller';
+import type { Hex } from '@metamask/utils';
+import EventEmitter from 'events';
+import type { RemoteTransactionSource, TransactionMeta } from '../types';
+/**
+ * Configuration options for the IncomingTransactionHelper
+ *
+ * @property includeTokenTransfers - Whether or not to include ERC20 token transfers.
+ * @property isEnabled - Whether or not incoming transaction retrieval is enabled.
+ * @property queryEntireHistory - Whether to initially query the entire transaction history or only recent blocks.
+ * @property updateTransactions - Whether to update local transactions using remote transaction data.
+ */
+export type IncomingTransactionOptions = {
+    includeTokenTransfers?: boolean;
+    isEnabled?: () => boolean;
+    queryEntireHistory?: boolean;
+    updateTransactions?: boolean;
+};
+export declare class IncomingTransactionHelper {
+    #private;
+    hub: EventEmitter;
+    constructor({ blockTracker, getCurrentAccount, getLastFetchedBlockNumbers, getLocalTransactions, getChainId, isEnabled, queryEntireHistory, remoteTransactionSource, transactionLimit, updateTransactions, }: {
+        blockTracker: BlockTracker;
+        getCurrentAccount: () => string;
+        getLastFetchedBlockNumbers: () => Record<string, number>;
+        getLocalTransactions?: () => TransactionMeta[];
+        getChainId: () => Hex;
+        isEnabled?: () => boolean;
+        queryEntireHistory?: boolean;
+        remoteTransactionSource: RemoteTransactionSource;
+        transactionLimit?: number;
+        updateTransactions?: boolean;
+    });
+    start(): void;
+    stop(): void;
+    update(latestBlockNumberHex?: Hex): Promise<void>;
+}
+//# sourceMappingURL=IncomingTransactionHelper.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/helpers/IncomingTransactionHelper.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/helpers/IncomingTransactionHelper.d.ts.map
new file mode 100644
index 0000000..dff3591
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/helpers/IncomingTransactionHelper.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"IncomingTransactionHelper.d.ts","sourceRoot":"","sources":["../../../src/helpers/IncomingTransactionHelper.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AACjE,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAE3C,OAAO,YAAY,MAAM,QAAQ,CAAC;AAGlC,OAAO,KAAK,EAAE,uBAAuB,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAWzE;;;;;;;GAOG;AACH,MAAM,MAAM,0BAA0B,GAAG;IACvC,qBAAqB,CAAC,EAAE,OAAO,CAAC;IAChC,SAAS,CAAC,EAAE,MAAM,OAAO,CAAC;IAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;IAC7B,kBAAkB,CAAC,EAAE,OAAO,CAAC;CAC9B,CAAC;AAEF,qBAAa,yBAAyB;;IACpC,GAAG,EAAE,YAAY,CAAC;gBA4BN,EACV,YAAY,EACZ,iBAAiB,EACjB,0BAA0B,EAC1B,oBAAoB,EACpB,UAAU,EACV,SAAS,EACT,kBAAkB,EAClB,uBAAuB,EACvB,gBAAgB,EAChB,kBAAkB,GACnB,EAAE;QACD,YAAY,EAAE,YAAY,CAAC;QAC3B,iBAAiB,EAAE,MAAM,MAAM,CAAC;QAChC,0BAA0B,EAAE,MAAM,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACzD,oBAAoB,CAAC,EAAE,MAAM,eAAe,EAAE,CAAC;QAC/C,UAAU,EAAE,MAAM,GAAG,CAAC;QACtB,SAAS,CAAC,EAAE,MAAM,OAAO,CAAC;QAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;QAC7B,uBAAuB,EAAE,uBAAuB,CAAC;QACjD,gBAAgB,CAAC,EAAE,MAAM,CAAC;QAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;KAC9B;IA0BD,KAAK;IAaL,IAAI;IAKE,MAAM,CAAC,oBAAoB,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;CA8LxD"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/helpers/MultichainTrackingHelper.d.ts b/node_modules/@metamask/transaction-controller/dist/types/helpers/MultichainTrackingHelper.d.ts
new file mode 100644
index 0000000..addf5ea
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/helpers/MultichainTrackingHelper.d.ts
@@ -0,0 +1,76 @@
+import EthQuery from '@metamask/eth-query';
+import type { NetworkClientId, NetworkController, BlockTracker, Provider, NetworkControllerStateChangeEvent } from '@metamask/network-controller';
+import type { Hex } from '@metamask/utils';
+import type { NonceLock, NonceTracker } from 'nonce-tracker';
+import { EtherscanRemoteTransactionSource } from './EtherscanRemoteTransactionSource';
+import type { IncomingTransactionHelper, IncomingTransactionOptions } from './IncomingTransactionHelper';
+import type { PendingTransactionTracker } from './PendingTransactionTracker';
+export type MultichainTrackingHelperOptions = {
+    isMultichainEnabled: boolean;
+    provider: Provider;
+    nonceTracker: NonceTracker;
+    incomingTransactionOptions: IncomingTransactionOptions;
+    findNetworkClientIdByChainId: NetworkController['findNetworkClientIdByChainId'];
+    getNetworkClientById: NetworkController['getNetworkClientById'];
+    getNetworkClientRegistry: NetworkController['getNetworkClientRegistry'];
+    removeIncomingTransactionHelperListeners: (IncomingTransactionHelper: IncomingTransactionHelper) => void;
+    removePendingTransactionTrackerListeners: (pendingTransactionTracker: PendingTransactionTracker) => void;
+    createNonceTracker: (opts: {
+        provider: Provider;
+        blockTracker: BlockTracker;
+        chainId?: Hex;
+    }) => NonceTracker;
+    createIncomingTransactionHelper: (opts: {
+        blockTracker: BlockTracker;
+        etherscanRemoteTransactionSource: EtherscanRemoteTransactionSource;
+        chainId?: Hex;
+    }) => IncomingTransactionHelper;
+    createPendingTransactionTracker: (opts: {
+        provider: Provider;
+        blockTracker: BlockTracker;
+        chainId?: Hex;
+    }) => PendingTransactionTracker;
+    onNetworkStateChange: (listener: (...payload: NetworkControllerStateChangeEvent['payload']) => void) => void;
+};
+export declare class MultichainTrackingHelper {
+    #private;
+    constructor({ isMultichainEnabled, provider, nonceTracker, incomingTransactionOptions, findNetworkClientIdByChainId, getNetworkClientById, getNetworkClientRegistry, removeIncomingTransactionHelperListeners, removePendingTransactionTrackerListeners, createNonceTracker, createIncomingTransactionHelper, createPendingTransactionTracker, onNetworkStateChange, }: MultichainTrackingHelperOptions);
+    initialize(): void;
+    has(networkClientId: NetworkClientId): boolean;
+    getEthQuery({ networkClientId, chainId, }?: {
+        networkClientId?: NetworkClientId;
+        chainId?: Hex;
+    }): EthQuery;
+    getProvider({ networkClientId, chainId, }?: {
+        networkClientId?: NetworkClientId;
+        chainId?: Hex;
+    }): Provider;
+    /**
+     * Gets the mutex intended to guard the nonceTracker for a particular chainId and key .
+     *
+     * @param opts - The options object.
+     * @param opts.chainId - The hex chainId.
+     * @param opts.key - The hex address (or constant) pertaining to the chainId
+     * @returns Mutex instance for the given chainId and key pair
+     */
+    acquireNonceLockForChainIdKey({ chainId, key, }: {
+        chainId: Hex;
+        key?: string;
+    }): Promise<() => void>;
+    /**
+     * Gets the next nonce according to the nonce-tracker.
+     * Ensure `releaseLock` is called once processing of the `nonce` value is complete.
+     *
+     * @param address - The hex string address for the transaction.
+     * @param networkClientId - The network client ID for the transaction, used to fetch the correct nonce tracker.
+     * @returns object with the `nextNonce` `nonceDetails`, and the releaseLock.
+     */
+    getNonceLock(address: string, networkClientId?: NetworkClientId): Promise<NonceLock>;
+    startIncomingTransactionPolling(networkClientIds?: NetworkClientId[]): void;
+    stopIncomingTransactionPolling(networkClientIds?: NetworkClientId[]): void;
+    stopAllIncomingTransactionPolling(): void;
+    updateIncomingTransactions(networkClientIds?: NetworkClientId[]): Promise<void>;
+    checkForPendingTransactionAndStartPolling: () => void;
+    stopAllTracking(): void;
+}
+//# sourceMappingURL=MultichainTrackingHelper.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/helpers/MultichainTrackingHelper.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/helpers/MultichainTrackingHelper.d.ts.map
new file mode 100644
index 0000000..7f5e058
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/helpers/MultichainTrackingHelper.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"MultichainTrackingHelper.d.ts","sourceRoot":"","sources":["../../../src/helpers/MultichainTrackingHelper.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/helpers/PendingTransactionTracker.d.ts b/node_modules/@metamask/transaction-controller/dist/types/helpers/PendingTransactionTracker.d.ts
new file mode 100644
index 0000000..5baae52
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/helpers/PendingTransactionTracker.d.ts
@@ -0,0 +1,43 @@
+/// <reference types="node" />
+import type EthQuery from '@metamask/eth-query';
+import type { BlockTracker, NetworkClientId } from '@metamask/network-controller';
+import EventEmitter from 'events';
+import type { TransactionMeta } from '../types';
+type Events = {
+    'transaction-confirmed': [txMeta: TransactionMeta];
+    'transaction-dropped': [txMeta: TransactionMeta];
+    'transaction-failed': [txMeta: TransactionMeta, error: Error];
+    'transaction-updated': [txMeta: TransactionMeta, note: string];
+};
+export interface PendingTransactionTrackerEventEmitter extends EventEmitter {
+    on<T extends keyof Events>(eventName: T, listener: (...args: Events[T]) => void): this;
+    emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;
+}
+export declare class PendingTransactionTracker {
+    #private;
+    hub: PendingTransactionTrackerEventEmitter;
+    constructor({ approveTransaction, blockTracker, getChainId, getEthQuery, getTransactions, isResubmitEnabled, getGlobalLock, publishTransaction, hooks, }: {
+        approveTransaction: (transactionId: string) => Promise<void>;
+        blockTracker: BlockTracker;
+        getChainId: () => string;
+        getEthQuery: (networkClientId?: NetworkClientId) => EthQuery;
+        getTransactions: () => TransactionMeta[];
+        isResubmitEnabled?: () => boolean;
+        getGlobalLock: () => Promise<() => void>;
+        publishTransaction: (ethQuery: EthQuery, rawTx: string) => Promise<string>;
+        hooks?: {
+            beforeCheckPendingTransaction?: (transactionMeta: TransactionMeta) => boolean;
+            beforePublish?: (transactionMeta: TransactionMeta) => boolean;
+        };
+    });
+    startIfPendingTransactions: () => void;
+    /**
+     * Force checks the network if the given transaction is confirmed and updates it's status.
+     *
+     * @param txMeta - The transaction to check
+     */
+    forceCheckTransaction(txMeta: TransactionMeta): Promise<void>;
+    stop(): void;
+}
+export {};
+//# sourceMappingURL=PendingTransactionTracker.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/helpers/PendingTransactionTracker.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/helpers/PendingTransactionTracker.d.ts.map
new file mode 100644
index 0000000..37b5773
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/helpers/PendingTransactionTracker.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"PendingTransactionTracker.d.ts","sourceRoot":"","sources":["../../../src/helpers/PendingTransactionTracker.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAChD,OAAO,KAAK,EACV,YAAY,EACZ,eAAe,EAChB,MAAM,8BAA8B,CAAC;AACtC,OAAO,YAAY,MAAM,QAAQ,CAAC;AAIlC,OAAO,KAAK,EAAE,eAAe,EAAsB,MAAM,UAAU,CAAC;AA6BpE,KAAK,MAAM,GAAG;IACZ,uBAAuB,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IACnD,qBAAqB,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IACjD,oBAAoB,EAAE,CAAC,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9D,qBAAqB,EAAE,CAAC,MAAM,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;CAChE,CAAC;AAKF,MAAM,WAAW,qCAAsC,SAAQ,YAAY;IACzE,EAAE,CAAC,CAAC,SAAS,MAAM,MAAM,EACvB,SAAS,EAAE,CAAC,EACZ,QAAQ,EAAE,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,GACrC,IAAI,CAAC;IAER,IAAI,CAAC,CAAC,SAAS,MAAM,MAAM,EAAE,SAAS,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;CACzE;AAED,qBAAa,yBAAyB;;IACpC,GAAG,EAAE,qCAAqC,CAAC;gBA8B/B,EACV,kBAAkB,EAClB,YAAY,EACZ,UAAU,EACV,WAAW,EACX,eAAe,EACf,iBAAiB,EACjB,aAAa,EACb,kBAAkB,EAClB,KAAK,GACN,EAAE;QACD,kBAAkB,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7D,YAAY,EAAE,YAAY,CAAC;QAC3B,UAAU,EAAE,MAAM,MAAM,CAAC;QACzB,WAAW,EAAE,CAAC,eAAe,CAAC,EAAE,eAAe,KAAK,QAAQ,CAAC;QAC7D,eAAe,EAAE,MAAM,eAAe,EAAE,CAAC;QACzC,iBAAiB,CAAC,EAAE,MAAM,OAAO,CAAC;QAClC,aAAa,EAAE,MAAM,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC;QACzC,kBAAkB,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;QAC3E,KAAK,CAAC,EAAE;YACN,6BAA6B,CAAC,EAAE,CAC9B,eAAe,EAAE,eAAe,KAC7B,OAAO,CAAC;YACb,aAAa,CAAC,EAAE,CAAC,eAAe,EAAE,eAAe,KAAK,OAAO,CAAC;SAC/D,CAAC;KACH;IAmBD,0BAA0B,aAQxB;IAEF;;;;OAIG;IACG,qBAAqB,CAAC,MAAM,EAAE,eAAe;IAwBnD,IAAI;CAqXL"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/index.d.ts b/node_modules/@metamask/transaction-controller/dist/types/index.d.ts
new file mode 100644
index 0000000..2034e20
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/index.d.ts
@@ -0,0 +1,9 @@
+export type { FeeMarketEIP1559Values, GasPriceValue, MethodData, Result, TransactionControllerActions, TransactionControllerEvents, TransactionControllerGetStateAction, TransactionControllerIncomingTransactionBlockReceivedEvent, TransactionControllerPostTransactionBalanceUpdatedEvent, TransactionControllerSpeedupTransactionAddedEvent, TransactionControllerState, TransactionControllerStateChangeEvent, TransactionControllerTransactionApprovedEvent, TransactionControllerTransactionConfirmedEvent, TransactionControllerTransactionDroppedEvent, TransactionControllerTransactionFailedEvent, TransactionControllerTransactionFinishedEvent, TransactionControllerTransactionNewSwapApprovalEvent, TransactionControllerTransactionNewSwapEvent, TransactionControllerTransactionPublishingSkipped, TransactionControllerTransactionRejectedEvent, TransactionControllerTransactionStatusUpdatedEvent, TransactionControllerTransactionSubmittedEvent, TransactionControllerUnapprovedTransactionAddedEvent, TransactionControllerMessenger, } from './TransactionController';
+export { HARDFORK, CANCEL_RATE, TransactionController, } from './TransactionController';
+export type { DappSuggestedGasFees, DefaultGasEstimates, FeeMarketGasFeeEstimateForLevel, FeeMarketGasFeeEstimates, GasFeeEstimates, GasPriceGasFeeEstimates, InferTransactionTypeResult, LegacyGasFeeEstimates, Log, RemoteTransactionSource, RemoteTransactionSourceRequest, SavedGasFees, SecurityAlertResponse, SecurityProviderRequest, SendFlowHistoryEntry, SimulationBalanceChange, SimulationData, SimulationError, SimulationToken, SimulationTokenBalanceChange, TransactionError, TransactionHistory, TransactionHistoryEntry, TransactionMeta, TransactionParams, TransactionReceipt, } from './types';
+export { GasFeeEstimateLevel, GasFeeEstimateType, SimulationErrorCode, SimulationTokenStandard, TransactionEnvelopeType, TransactionStatus, TransactionType, UserFeeLevel, WalletDevice, } from './types';
+export type { EtherscanTransactionMeta } from './utils/etherscan';
+export { determineTransactionType } from './utils/transaction-type';
+export { mergeGasFeeEstimates } from './utils/gas-flow';
+export { isEIP1559Transaction, normalizeTransactionParams, } from './utils/utils';
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/index.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/index.d.ts.map
new file mode 100644
index 0000000..4496e26
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,YAAY,EACV,sBAAsB,EACtB,aAAa,EACb,UAAU,EACV,MAAM,EACN,4BAA4B,EAC5B,2BAA2B,EAC3B,mCAAmC,EACnC,0DAA0D,EAC1D,uDAAuD,EACvD,iDAAiD,EACjD,0BAA0B,EAC1B,qCAAqC,EACrC,6CAA6C,EAC7C,8CAA8C,EAC9C,4CAA4C,EAC5C,2CAA2C,EAC3C,6CAA6C,EAC7C,oDAAoD,EACpD,4CAA4C,EAC5C,iDAAiD,EACjD,6CAA6C,EAC7C,kDAAkD,EAClD,8CAA8C,EAC9C,oDAAoD,EACpD,8BAA8B,GAC/B,MAAM,yBAAyB,CAAC;AACjC,OAAO,EACL,QAAQ,EACR,WAAW,EACX,qBAAqB,GACtB,MAAM,yBAAyB,CAAC;AACjC,YAAY,EACV,oBAAoB,EACpB,mBAAmB,EACnB,+BAA+B,EAC/B,wBAAwB,EACxB,eAAe,EACf,uBAAuB,EACvB,0BAA0B,EAC1B,qBAAqB,EACrB,GAAG,EACH,uBAAuB,EACvB,8BAA8B,EAC9B,YAAY,EACZ,qBAAqB,EACrB,uBAAuB,EACvB,oBAAoB,EACpB,uBAAuB,EACvB,cAAc,EACd,eAAe,EACf,eAAe,EACf,4BAA4B,EAC5B,gBAAgB,EAChB,kBAAkB,EAClB,uBAAuB,EACvB,eAAe,EACf,iBAAiB,EACjB,kBAAkB,GACnB,MAAM,SAAS,CAAC;AACjB,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,mBAAmB,EACnB,uBAAuB,EACvB,uBAAuB,EACvB,iBAAiB,EACjB,eAAe,EACf,YAAY,EACZ,YAAY,GACb,MAAM,SAAS,CAAC;AACjB,YAAY,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAClE,OAAO,EAAE,wBAAwB,EAAE,MAAM,0BAA0B,CAAC;AACpE,OAAO,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AACxD,OAAO,EACL,oBAAoB,EACpB,0BAA0B,GAC3B,MAAM,eAAe,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/logger.d.ts b/node_modules/@metamask/transaction-controller/dist/types/logger.d.ts
similarity index 79%
rename from node_modules/@metamask/transaction-controller/dist/logger.d.ts
rename to node_modules/@metamask/transaction-controller/dist/types/logger.d.ts
index bb2c083..43ad63f 100644
--- a/node_modules/@metamask/transaction-controller/dist/logger.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/types/logger.d.ts
@@ -2,6 +2,5 @@
 import { createModuleLogger } from '@metamask/utils';
 export declare const projectLogger: import("debug").Debugger;
 export declare const incomingTransactionsLogger: import("debug").Debugger;
-export declare const pendingTransactionsLogger: import("debug").Debugger;
 export { createModuleLogger };
 //# sourceMappingURL=logger.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/logger.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/logger.d.ts.map
new file mode 100644
index 0000000..8f99cfc
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/logger.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"logger.d.ts","sourceRoot":"","sources":["../../src/logger.ts"],"names":[],"mappings":";AAEA,OAAO,EAAuB,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAE1E,eAAO,MAAM,aAAa,0BAAgD,CAAC;AAE3E,eAAO,MAAM,0BAA0B,0BAGtC,CAAC;AAEF,OAAO,EAAE,kBAAkB,EAAE,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/types.d.ts b/node_modules/@metamask/transaction-controller/dist/types/types.d.ts
new file mode 100644
index 0000000..c792227
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/types.d.ts
@@ -0,0 +1,931 @@
+import type { AccessList } from '@ethereumjs/tx';
+import type EthQuery from '@metamask/eth-query';
+import type { GasFeeState } from '@metamask/gas-fee-controller';
+import type { NetworkClientId, Provider } from '@metamask/network-controller';
+import type { Hex, Json } from '@metamask/utils';
+import type { Operation } from 'fast-json-patch';
+/**
+ * Given a record, ensures that each property matches the `Json` type.
+ */
+type MakeJsonCompatible<T> = T extends Json ? T : {
+    [K in keyof T]: T[K] extends Json ? T[K] : never;
+};
+/**
+ * `Json` from `@metamask/utils` is defined as a recursive type alias, but
+ * `Operation` is defined as an interface, and the two are not compatible with
+ * each other. Therefore, this is a variant of Operation from `fast-json-patch`
+ * which is guaranteed to be type-compatible with `Json`.
+ */
+type JsonCompatibleOperation = MakeJsonCompatible<Operation>;
+/**
+ * Representation of transaction metadata.
+ */
+export type TransactionMeta = TransactionMetaBase & ({
+    status: Exclude<TransactionStatus, TransactionStatus.failed>;
+} | {
+    status: TransactionStatus.failed;
+    error: TransactionError;
+});
+/**
+ * Information about a single transaction such as status and block number.
+ */
+type TransactionMetaBase = {
+    /**
+     * ID of the transaction that approved the swap token transfer.
+     */
+    approvalTxId?: string;
+    /**
+     * Unique ID to prevent duplicate requests.
+     */
+    actionId?: string;
+    /**
+     * Base fee of the block as a hex value, introduced in EIP-1559.
+     */
+    baseFeePerGas?: Hex;
+    /**
+     * Number of the block where the transaction has been included.
+     */
+    blockNumber?: string;
+    /**
+     * The timestamp for when the block was collated.
+     */
+    blockTimestamp?: string;
+    /**
+     * Network code as per EIP-155 for this transaction.
+     */
+    chainId: Hex;
+    /**
+     * A string representing a name of transaction contract method.
+     */
+    contractMethodName?: string;
+    /**
+     * The balance of the token that is being sent.
+     */
+    currentTokenBalance?: string;
+    /**
+     * Unique ID for custodian transaction.
+     */
+    custodyId?: string;
+    /**
+     * Custodian transaction status.
+     */
+    custodyStatus?: string;
+    /** The optional custom nonce override as a decimal string. */
+    customNonceValue?: string;
+    /**
+     * The custom token amount is the amount set by the user.
+     */
+    customTokenAmount?: string;
+    /**
+     * The dapp proposed token amount.
+     */
+    dappProposedTokenAmount?: string;
+    /**
+     * Gas values provided by the dApp.
+     */
+    dappSuggestedGasFees?: DappSuggestedGasFees;
+    /**
+     * The initial gas values set when the transaction was first created.
+     */
+    defaultGasEstimates?: DefaultGasEstimates;
+    /**
+     * String to indicate what device the transaction was confirmed on.
+     */
+    deviceConfirmedOn?: WalletDevice;
+    /**
+     * The address of the token being received of swap transaction.
+     */
+    destinationTokenAddress?: string;
+    /**
+     * The decimals of the token being received of swap transaction.
+     */
+    destinationTokenDecimals?: number;
+    /**
+     * The symbol of the token being received with swap.
+     */
+    destinationTokenSymbol?: string;
+    /**
+     * The estimated base fee of the transaction.
+     */
+    estimatedBaseFee?: string;
+    /**
+     * Which estimate level that the API suggested.
+     */
+    estimateSuggested?: string;
+    /**
+     * Which estimate level was used
+     */
+    estimateUsed?: string;
+    /**
+     * The chosen amount which will be the same as the originally proposed token
+     * amount if the user does not edit the  amount or will be a custom token
+     * amount set by the user.
+     */
+    finalApprovalAmount?: string;
+    /**
+     * The number of the latest block when the transaction submit was first retried.
+     */
+    firstRetryBlockNumber?: string;
+    /** Alternate EIP-1559 gas fee estimates for multiple priority levels. */
+    gasFeeEstimates?: GasFeeEstimates;
+    /** Whether the gas fee estimates have been checked at least once. */
+    gasFeeEstimatesLoaded?: boolean;
+    /**
+     * A hex string of the transaction hash, used to identify the transaction on the network.
+     */
+    hash?: string;
+    /**
+     * A history of mutations to TransactionMeta.
+     */
+    history?: TransactionHistory;
+    /**
+     * Generated UUID associated with this transaction.
+     */
+    id: string;
+    /**
+     * Whether the transaction is a transfer.
+     */
+    isTransfer?: boolean;
+    /**
+     * Whether the transaction entry is generated from a user operation.
+     */
+    isUserOperation?: boolean;
+    /**
+     * Additional gas fees to cover the cost of persisting data on layer 1 for layer 2 networks.
+     */
+    layer1GasFee?: Hex;
+    /**
+     * The ID of the network client used by the transaction.
+     */
+    networkClientId?: NetworkClientId;
+    /**
+     * Network code as per EIP-155 for this transaction
+     *
+     * @deprecated Use `chainId` instead.
+     */
+    readonly networkID?: string;
+    /**
+     * Origin this transaction was sent from.
+     */
+    origin?: string;
+    /**
+     * The original dapp proposed token approval amount before edit by user.
+     */
+    originalApprovalAmount?: string;
+    /**
+     * The original gas estimation of the transaction.
+     */
+    originalGasEstimate?: string;
+    /**
+     * When we speed up a transaction, we set the type as Retry and we lose
+     * information about type of transaction that is being set up, so we use
+     * original type to track that information.
+     */
+    originalType?: TransactionType;
+    /**
+     * Account transaction balance after swap.
+     */
+    postTxBalance?: string;
+    /**
+     * Account transaction balance before swap.
+     */
+    preTxBalance?: string;
+    /**
+     * The previous gas properties before they were updated.
+     */
+    previousGas?: {
+        /**
+         * Maxmimum number of units of gas to use for this transaction.
+         */
+        gasLimit?: string;
+        /**
+         * Maximum amount per gas to pay for the transaction, including the priority fee.
+         */
+        maxFeePerGas?: string;
+        /**
+         * Maximum amount per gas to give to validator as incentive.
+         */
+        maxPriorityFeePerGas?: string;
+    };
+    /**
+     * The transaction's 'r' value as a hex string.
+     */
+    r?: string;
+    /**
+     * Hex representation of the underlying transaction.
+     */
+    rawTx?: string;
+    /**
+     * When the transaction is dropped, this is the replacement transaction hash.
+     */
+    replacedBy?: string;
+    /**
+     * When the transaction is dropped, this is the replacement transaction ID.
+     */
+    replacedById?: string;
+    /**
+     * The number of times that the transaction submit has been retried.
+     */
+    retryCount?: number;
+    /**
+     * The transaction's 's' value as a hex string.
+     */
+    s?: string;
+    /**
+     * Response from security validator.
+     */
+    securityAlertResponse?: SecurityAlertResponse;
+    /**
+     * Response from security provider.
+     */
+    securityProviderResponse?: Record<string, any>;
+    /**
+     * An array of entries that describe the user's journey through the send flow.
+     * This is purely attached to state logs for troubleshooting and support.
+     */
+    sendFlowHistory?: SendFlowHistoryEntry[];
+    /**
+     * Simulation data for the transaction used to predict its outcome.
+     */
+    simulationData?: SimulationData;
+    /**
+     * If the gas estimation fails, an object containing error and block information.
+     */
+    simulationFails?: {
+        reason?: string;
+        errorKey?: string;
+        debug: {
+            blockNumber?: string;
+            blockGasLimit?: string;
+        };
+    };
+    /**
+     * The time the transaction was submitted to the network, in Unix epoch time (ms).
+     */
+    submittedTime?: number;
+    /**
+     * The symbol of the token being swapped.
+     */
+    sourceTokenSymbol?: string;
+    /**
+     * The metadata of the swap transaction.
+     */
+    swapMetaData?: Record<string, any>;
+    /**
+     * The value of the token being swapped.
+     */
+    swapTokenValue?: string;
+    /**
+     * Timestamp associated with this transaction.
+     */
+    time: number;
+    /**
+     * Whether transaction recipient is a smart contract.
+     */
+    toSmartContract?: boolean;
+    /**
+     * Additional transfer information.
+     */
+    transferInformation?: {
+        contractAddress: string;
+        decimals: number;
+        symbol: string;
+    };
+    /**
+     * Underlying Transaction object.
+     */
+    txParams: TransactionParams;
+    /**
+     * Transaction receipt.
+     */
+    txReceipt?: TransactionReceipt;
+    /**
+     * The type of transaction such as `cancel` or `swap`.
+     */
+    type?: TransactionType;
+    /**
+     * The gas limit supplied by user.
+     */
+    userEditedGasLimit?: boolean;
+    /**
+     * Estimate level user selected.
+     */
+    userFeeLevel?: string;
+    /**
+     * The transaction's 'v' value as a hex string.
+     */
+    v?: string;
+    /**
+     * Whether the transaction is verified on the blockchain.
+     */
+    verifiedOnBlockchain?: boolean;
+    /**
+     * Warning information for the transaction.
+     */
+    warning?: {
+        error: string;
+        message: string;
+    };
+};
+export type SendFlowHistoryEntry = {
+    /**
+     * String to indicate user interaction information.
+     */
+    entry: string;
+    /**
+     * Timestamp associated with this entry.
+     */
+    timestamp: number;
+};
+/**
+ * The status of the transaction. Each status represents the state of the transaction internally
+ * in the wallet. Some of these correspond with the state of the transaction on the network, but
+ * some are wallet-specific.
+ */
+export declare enum TransactionStatus {
+    approved = "approved",
+    /** @deprecated Determined by the clients using the transaction type. No longer used. */
+    cancelled = "cancelled",
+    confirmed = "confirmed",
+    dropped = "dropped",
+    failed = "failed",
+    rejected = "rejected",
+    signed = "signed",
+    submitted = "submitted",
+    unapproved = "unapproved"
+}
+/**
+ * Options for wallet device.
+ */
+export declare enum WalletDevice {
+    MM_MOBILE = "metamask_mobile",
+    MM_EXTENSION = "metamask_extension",
+    OTHER = "other_device"
+}
+/**
+ * The type of the transaction.
+ */
+export declare enum TransactionType {
+    /**
+     * A transaction sending a network's native asset to a recipient.
+     */
+    cancel = "cancel",
+    /**
+     * A transaction that is interacting with a smart contract's methods that we
+     * have not treated as a special case, such as approve, transfer, and
+     * transferfrom.
+     */
+    contractInteraction = "contractInteraction",
+    /**
+     * A transaction that deployed a smart contract.
+     */
+    deployContract = "contractDeployment",
+    /**
+     * A transaction for Ethereum decryption.
+     */
+    ethDecrypt = "eth_decrypt",
+    /**
+     * A transaction for getting an encryption public key.
+     */
+    ethGetEncryptionPublicKey = "eth_getEncryptionPublicKey",
+    /**
+     * An incoming (deposit) transaction.
+     */
+    incoming = "incoming",
+    /**
+     * A transaction for personal sign.
+     */
+    personalSign = "personal_sign",
+    /**
+     * When a transaction is failed it can be retried by
+     * resubmitting the same transaction with a higher gas fee. This type is also used
+     * to speed up pending transactions. This is accomplished by creating a new tx with
+     * the same nonce and higher gas fees.
+     */
+    retry = "retry",
+    /**
+     * A transaction sending a network's native asset to a recipient.
+     */
+    simpleSend = "simpleSend",
+    /**
+     * A transaction that is signing a message.
+     */
+    sign = "eth_sign",
+    /**
+     * A transaction that is signing typed data.
+     */
+    signTypedData = "eth_signTypedData",
+    /**
+     * A transaction sending a network's native asset to a recipient.
+     */
+    smart = "smart",
+    /**
+     * A transaction swapping one token for another through MetaMask Swaps.
+     */
+    swap = "swap",
+    /**
+     * Similar to the approve type, a swap approval is a special case of ERC20
+     * approve method that requests an allowance of the token to spend on behalf
+     * of the user for the MetaMask Swaps contract. The first swap for any token
+     * will have an accompanying swapApproval transaction.
+     */
+    swapApproval = "swapApproval",
+    /**
+     * A token transaction requesting an allowance of the token to spend on
+     * behalf of the user.
+     */
+    tokenMethodApprove = "approve",
+    /**
+     * A token transaction transferring tokens from an account that the sender
+     * has an allowance of. The method is prefixed with safe because when calling
+     * this method the contract checks to ensure that the receiver is an address
+     * capable of handling the token being sent.
+     */
+    tokenMethodSafeTransferFrom = "safetransferfrom",
+    /**
+     * A token transaction where the user is sending tokens that they own to
+     * another address.
+     */
+    tokenMethodTransfer = "transfer",
+    /**
+     * A token transaction transferring tokens from an account that the sender
+     * has an allowance of. For more information on allowances, see the approve
+     * type.
+     */
+    tokenMethodTransferFrom = "transferfrom",
+    /**
+     * A token transaction requesting an allowance of all of a user's tokens to
+     * spend on behalf of the user.
+     */
+    tokenMethodSetApprovalForAll = "setapprovalforall",
+    /**
+     * Increase the allowance by a given increment
+     */
+    tokenMethodIncreaseAllowance = "increaseAllowance"
+}
+/**
+ * Standard data concerning a transaction to be processed by the blockchain.
+ */
+export type TransactionParams = {
+    /**
+     * A list of addresses and storage keys that the transaction plans to access.
+     */
+    accessList?: AccessList;
+    /**
+     * Network ID as per EIP-155.
+     */
+    chainId?: Hex;
+    /**
+     * Data to pass with this transaction.
+     */
+    data?: string;
+    /**
+     * Error message for gas estimation failure.
+     */
+    estimateGasError?: string;
+    /**
+     * Estimated base fee for this transaction.
+     */
+    estimatedBaseFee?: string;
+    /**
+     * Which estimate level that the API suggested.
+     */
+    estimateSuggested?: string;
+    /**
+     * Which estimate level was used
+     */
+    estimateUsed?: string;
+    /**
+     * Address to send this transaction from.
+     */
+    from: string;
+    /**
+     * same as gasLimit?
+     */
+    gas?: string;
+    /**
+     * Maxmimum number of units of gas to use for this transaction.
+     */
+    gasLimit?: string;
+    /**
+     * Price per gas for legacy txs
+     */
+    gasPrice?: string;
+    /**
+     * Gas used in the transaction.
+     */
+    gasUsed?: string;
+    /**
+     * Maximum amount per gas to pay for the transaction, including the priority
+     * fee.
+     */
+    maxFeePerGas?: string;
+    /**
+     * Maximum amount per gas to give to validator as incentive.
+     */
+    maxPriorityFeePerGas?: string;
+    /**
+     * Unique number to prevent replay attacks.
+     */
+    nonce?: string;
+    /**
+     * Address to send this transaction to.
+     */
+    to?: string;
+    /**
+     * Value associated with this transaction.
+     */
+    value?: string;
+    /**
+     * Type of transaction.
+     * 0x0 indicates a legacy transaction.
+     */
+    type?: string;
+};
+/**
+ * Standard data concerning a transaction processed by the blockchain.
+ */
+export type TransactionReceipt = {
+    /**
+     * The block hash of the block that this transaction was included in.
+     */
+    blockHash?: string;
+    /**
+     * The block number of the block that this transaction was included in.
+     */
+    blockNumber?: string;
+    /**
+     * Effective gas price the transaction was charged at.
+     */
+    effectiveGasPrice?: string;
+    /**
+     * Gas used in the transaction.
+     */
+    gasUsed?: string;
+    /**
+     * Total used gas in hex.
+     */
+    l1Fee?: string;
+    /**
+     * All the logs emitted by this transaction.
+     */
+    logs?: Log[];
+    /**
+     * The status of the transaction.
+     */
+    status?: string;
+    /**
+     * The hexadecimal index of this transaction in the list of transactions included in the block this transaction was mined in.
+     */
+    transactionIndex?: string;
+};
+/**
+ * Represents an event that has been included in a transaction using the EVM `LOG` opcode.
+ */
+export type Log = {
+    /**
+     * Address of the contract that generated log.
+     */
+    address?: string;
+    /**
+     * List of topics for log.
+     */
+    topics?: string;
+};
+/**
+ * The configuration required to fetch transaction data from a RemoteTransactionSource.
+ */
+export interface RemoteTransactionSourceRequest {
+    /**
+     * The address of the account to fetch transactions for.
+     */
+    address: string;
+    /**
+     * The chainId of the current network.
+     */
+    currentChainId: Hex;
+    /**
+     * Block number to start fetching transactions from.
+     */
+    fromBlock?: number;
+    /**
+     * Maximum number of transactions to retrieve.
+     */
+    limit?: number;
+}
+/**
+ * An object capable of fetching transaction data from a remote source.
+ * Used by the IncomingTransactionHelper to retrieve remote transaction data.
+ */
+export interface RemoteTransactionSource {
+    /**
+     * @param chainId - The chainId of the current network.
+     * @returns Whether the remote transaction source supports the specified network.
+     */
+    isSupportedNetwork: (chainId: Hex) => boolean;
+    /**
+     * @returns An array of additional keys to use when caching the last fetched block number.
+     */
+    getLastBlockVariations?: () => string[];
+    /**
+     * @param request - A request object containing data such as the address and chain ID.
+     * @returns An array of transaction metadata for the retrieved transactions.
+     */
+    fetchTransactions: (request: RemoteTransactionSourceRequest) => Promise<TransactionMeta[]>;
+}
+/**
+ * Gas values initially suggested by the dApp.
+ */
+export type DappSuggestedGasFees = {
+    gas?: string;
+    gasPrice?: string;
+    maxFeePerGas?: string;
+    maxPriorityFeePerGas?: string;
+};
+/**
+ * Gas values saved by the user for a specific chain.
+ */
+export interface SavedGasFees {
+    maxBaseFee: string;
+    priorityFee: string;
+}
+/**
+ * A transaction history operation that includes a note and timestamp.
+ */
+type ExtendedHistoryOperation = JsonCompatibleOperation & {
+    note?: string;
+    timestamp?: number;
+};
+/**
+ * A transaction history entry that includes the ExtendedHistoryOperation as the first element.
+ */
+export type TransactionHistoryEntry = [
+    ExtendedHistoryOperation,
+    ...JsonCompatibleOperation[]
+];
+/**
+ * A transaction history that includes the transaction meta as the first element.
+ * And the rest of the elements are the operation arrays that were applied to the transaction meta.
+ */
+export type TransactionHistory = [
+    TransactionMeta,
+    ...TransactionHistoryEntry[]
+];
+/**
+ * Result of inferring the transaction type.
+ */
+export type InferTransactionTypeResult = {
+    /**
+     * The contract code, in hex format if it exists. '0x0' or
+     * '0x' are also indicators of non-existent contract code.
+     */
+    getCodeResponse?: string | null;
+    /**
+     * The type of transaction
+     */
+    type: TransactionType;
+};
+/**
+ * A function for verifying a transaction, whether it is malicious or not.
+ */
+export type SecurityProviderRequest = (requestData: TransactionMeta, messageType: string) => Promise<any>;
+/**
+ * Specifies the shape of the base transaction parameters.
+ * Added in EIP-2718.
+ */
+export declare enum TransactionEnvelopeType {
+    /**
+     * A legacy transaction, the very first type.
+     */
+    legacy = "0x0",
+    /**
+     * EIP-2930 defined the access list transaction type that allowed for
+     * specifying the state that a transaction would act upon in advance and
+     * theoretically save on gas fees.
+     */
+    accessList = "0x1",
+    /**
+     * The type introduced comes from EIP-1559, Fee Market describes the addition
+     * of a baseFee to blocks that will be burned instead of distributed to
+     * miners. Transactions of this type have both a maxFeePerGas (maximum total
+     * amount in gwei per gas to spend on the transaction) which is inclusive of
+     * the maxPriorityFeePerGas (maximum amount of gwei per gas from the
+     * transaction fee to distribute to miner).
+     */
+    feeMarket = "0x2"
+}
+/**
+ * The source of the gas fee parameters on a transaction.
+ */
+export declare enum UserFeeLevel {
+    CUSTOM = "custom",
+    DAPP_SUGGESTED = "dappSuggested",
+    MEDIUM = "medium"
+}
+/**
+ * Initial gas values set when the transaction was first created.
+ */
+export type DefaultGasEstimates = {
+    /**
+     * Source of the gas fee values, such as `dappSuggested` or `medium`.
+     */
+    estimateType?: string;
+    /**
+     * Maxmimum number of units of gas to use for this transaction.
+     */
+    gas?: string;
+    /**
+     * Price per gas for legacy transactions.
+     */
+    gasPrice?: string;
+    /**
+     * Maximum amount per gas to pay for the transaction, including the priority fee.
+     */
+    maxFeePerGas?: string;
+    /**
+     * Maximum amount per gas to give to validator as incentive.
+     */
+    maxPriorityFeePerGas?: string;
+};
+/**
+ * Data concerning an error while processing a transaction.
+ */
+export type TransactionError = {
+    /**
+     * A descriptive error name.
+     */
+    name: string;
+    /**
+     * A descriptive error message providing details about the encountered error.
+     */
+    message: string;
+    /**
+     * The stack trace associated with the error, if available.
+     */
+    stack?: string;
+    /**
+     * An optional error code associated with the error.
+     */
+    code?: string;
+    /**
+     * The rpc property holds additional information related to the error.
+     */
+    rpc?: any;
+};
+/**
+ * Type for security alert response from transaction validator.
+ */
+export type SecurityAlertResponse = {
+    reason: string;
+    features?: string[];
+    result_type: string;
+    providerRequestsCount?: Record<string, number>;
+};
+/** Alternate priority levels for which values are provided in gas fee estimates. */
+export declare enum GasFeeEstimateLevel {
+    Low = "low",
+    Medium = "medium",
+    High = "high"
+}
+/** Type of gas fee estimate generated by a GasFeeFlow. */
+export declare enum GasFeeEstimateType {
+    FeeMarket = "fee-market",
+    Legacy = "legacy",
+    GasPrice = "eth_gasPrice"
+}
+/** Gas fee estimates for a specific priority level. */
+export type FeeMarketGasFeeEstimateForLevel = {
+    /** Maximum amount to pay per gas. */
+    maxFeePerGas: Hex;
+    /** Maximum amount per gas to give to the validator as an incentive. */
+    maxPriorityFeePerGas: Hex;
+};
+/** Gas fee estimates for a EIP-1559 transaction. */
+export type FeeMarketGasFeeEstimates = {
+    type: GasFeeEstimateType.FeeMarket;
+    [GasFeeEstimateLevel.Low]: FeeMarketGasFeeEstimateForLevel;
+    [GasFeeEstimateLevel.Medium]: FeeMarketGasFeeEstimateForLevel;
+    [GasFeeEstimateLevel.High]: FeeMarketGasFeeEstimateForLevel;
+};
+/** Gas fee estimates for a legacy transaction. */
+export type LegacyGasFeeEstimates = {
+    type: GasFeeEstimateType.Legacy;
+    [GasFeeEstimateLevel.Low]: Hex;
+    [GasFeeEstimateLevel.Medium]: Hex;
+    [GasFeeEstimateLevel.High]: Hex;
+};
+/** Gas fee estimates for a transaction retrieved with the eth_gasPrice method. */
+export type GasPriceGasFeeEstimates = {
+    type: GasFeeEstimateType.GasPrice;
+    gasPrice: Hex;
+};
+/** Gas fee estimates for a transaction. */
+export type GasFeeEstimates = FeeMarketGasFeeEstimates | LegacyGasFeeEstimates | GasPriceGasFeeEstimates;
+/** Request to a gas fee flow to obtain gas fee estimates. */
+export type GasFeeFlowRequest = {
+    /** An EthQuery instance to enable queries to the associated RPC provider. */
+    ethQuery: EthQuery;
+    /** Gas fee controller data matching the chain ID of the transaction. */
+    gasFeeControllerData: GasFeeState;
+    /** The metadata of the transaction to obtain estimates for. */
+    transactionMeta: TransactionMeta;
+};
+/** Response from a gas fee flow containing gas fee estimates. */
+export type GasFeeFlowResponse = {
+    /** The gas fee estimates for the transaction. */
+    estimates: GasFeeEstimates;
+};
+/** A method of obtaining gas fee estimates for a specific transaction. */
+export type GasFeeFlow = {
+    /**
+     * Determine if the gas fee flow supports the specified transaction.
+     * @param transactionMeta - The transaction metadata.
+     * @returns Whether the gas fee flow supports the transaction.
+     */
+    matchesTransaction(transactionMeta: TransactionMeta): boolean;
+    /**
+     * Get gas fee estimates for a specific transaction.
+     * @param request - The gas fee flow request.
+     * @returns The gas fee flow response containing the gas fee estimates.
+     */
+    getGasFees: (request: GasFeeFlowRequest) => Promise<GasFeeFlowResponse>;
+};
+/** Request to a layer 1 gas fee flow to obtain layer 1 fee estimate. */
+export type Layer1GasFeeFlowRequest = {
+    /** RPC Provider instance. */
+    provider: Provider;
+    /** The metadata of the transaction to obtain estimates for. */
+    transactionMeta: TransactionMeta;
+};
+/** Response from a layer 1 gas fee flow containing layer 1 fee estimate. */
+export type Layer1GasFeeFlowResponse = {
+    /** The gas fee estimates for the transaction. */
+    layer1Fee: Hex;
+};
+/** A method of obtaining layer 1 gas fee estimates for a specific transaction. */
+export type Layer1GasFeeFlow = {
+    /**
+     * Determine if the gas fee flow supports the specified transaction.
+     * @param transactionMeta - The transaction metadata.
+     * @returns Whether the layer1 gas fee flow supports the transaction.
+     */
+    matchesTransaction(transactionMeta: TransactionMeta): boolean;
+    /**
+     * Get layer 1 gas fee estimates for a specific transaction.
+     * @param request - The gas fee flow request.
+     * @returns The gas fee flow response containing the layer 1 gas fee estimate.
+     */
+    getLayer1Fee: (request: Layer1GasFeeFlowRequest) => Promise<Layer1GasFeeFlowResponse>;
+};
+/** Simulation data concerning an update to a native or token balance. */
+export type SimulationBalanceChange = {
+    /** The balance before the transaction. */
+    previousBalance: Hex;
+    /** The balance after the transaction. */
+    newBalance: Hex;
+    /** The difference in balance. */
+    difference: Hex;
+    /** Whether the balance is increasing or decreasing. */
+    isDecrease: boolean;
+};
+/** Token standards supported by simulation. */
+export declare enum SimulationTokenStandard {
+    erc20 = "erc20",
+    erc721 = "erc721",
+    erc1155 = "erc1155"
+}
+/** Simulation data concerning an updated token. */
+export type SimulationToken = {
+    /** The token's contract address. */
+    address: Hex;
+    /** The standard of the token. */
+    standard: SimulationTokenStandard;
+    /** The ID of the token if supported by the standard. */
+    id?: Hex;
+};
+/** Simulation data concerning a change to the a token balance. */
+export type SimulationTokenBalanceChange = SimulationToken & SimulationBalanceChange;
+export declare enum SimulationErrorCode {
+    ChainNotSupported = "chain-not-supported",
+    Disabled = "disabled",
+    InvalidResponse = "invalid-response",
+    Reverted = "reverted"
+}
+/** Error data for a failed simulation. */
+export type SimulationError = {
+    /** Error code to identify the error type. */
+    code?: string | number;
+    /** Error message to describe the error. */
+    message?: string;
+};
+/** Simulation data for a transaction. */
+export type SimulationData = {
+    /** Error data if the simulation failed or the transaction reverted. */
+    error?: SimulationError;
+    /** Data concerning a change to the user's native balance. */
+    nativeBalanceChange?: SimulationBalanceChange;
+    /** Data concerning a change to the user's token balances. */
+    tokenBalanceChanges: SimulationTokenBalanceChange[];
+};
+export {};
+//# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/types.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/types.d.ts.map
new file mode 100644
index 0000000..86d66eb
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/types.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/etherscan.d.ts
similarity index 90%
rename from node_modules/@metamask/transaction-controller/dist/etherscan.d.ts
rename to node_modules/@metamask/transaction-controller/dist/types/utils/etherscan.d.ts
index 4a63542..a3139d3 100644
--- a/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/etherscan.d.ts
@@ -61,4 +61,11 @@ export declare function fetchEtherscanTransactions({ address, chainId, fromBlock
  * @returns An Etherscan response object containing the request status and an array of token transaction data.
  */
 export declare function fetchEtherscanTokenTransactions({ address, chainId, fromBlock, limit, }: EtherscanTransactionRequest): Promise<EtherscanTransactionResponse<EtherscanTokenTransactionMeta>>;
+/**
+ * Return the host url used to fetch data from Etherscan.
+ *
+ * @param chainId - Current chain ID used to determine subdomain and domain.
+ * @returns host URL to access Etherscan data.
+ */
+export declare function getEtherscanApiHost(chainId: Hex): string;
 //# sourceMappingURL=etherscan.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/etherscan.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/etherscan.d.ts.map
new file mode 100644
index 0000000..f627dc6
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/etherscan.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"etherscan.d.ts","sourceRoot":"","sources":["../../../src/utils/etherscan.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAQ3C,MAAM,WAAW,4BAA4B;IAC3C,WAAW,EAAE,MAAM,CAAC;IACpB,SAAS,EAAE,MAAM,CAAC;IAClB,aAAa,EAAE,MAAM,CAAC;IACtB,eAAe,EAAE,MAAM,CAAC;IACxB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,MAAM,CAAC;IAChB,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,EAAE,EAAE,MAAM,CAAC;IACX,gBAAgB,EAAE,MAAM,CAAC;IACzB,KAAK,EAAE,MAAM,CAAC;CACf;AAKD,MAAM,WAAW,wBAAyB,SAAQ,4BAA4B;IAC5E,YAAY,EAAE,MAAM,CAAC;IACrB,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,MAAM,CAAC;IAChB,QAAQ,EAAE,MAAM,CAAC;IACjB,gBAAgB,EAAE,MAAM,CAAC;CAC1B;AAKD,MAAM,WAAW,6BACf,SAAQ,4BAA4B;IACpC,YAAY,EAAE,MAAM,CAAC;IACrB,SAAS,EAAE,MAAM,CAAC;IAClB,WAAW,EAAE,MAAM,CAAC;CACrB;AAKD,MAAM,WAAW,4BAA4B,CAC3C,CAAC,SAAS,4BAA4B;IAEtC,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC;IAClB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;CACtB;AAKD,MAAM,WAAW,2BAA2B;IAC1C,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED;;;;;;;;;GASG;AACH,wBAAsB,0BAA0B,CAAC,EAC/C,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACN,EAAE,2BAA2B,GAAG,OAAO,CACtC,4BAA4B,CAAC,wBAAwB,CAAC,CACvD,CAOA;AAED;;;;;;;;;GASG;AACH,wBAAsB,+BAA+B,CAAC,EACpD,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACN,EAAE,2BAA2B,GAAG,OAAO,CACtC,4BAA4B,CAAC,6BAA6B,CAAC,CAC5D,CAOA;AA8ED;;;;;GAKG;AACH,wBAAgB,mBAAmB,CAAC,OAAO,EAAE,GAAG,UAS/C"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/external-transactions.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/external-transactions.d.ts
similarity index 90%
rename from node_modules/@metamask/transaction-controller/dist/external-transactions.d.ts
rename to node_modules/@metamask/transaction-controller/dist/types/utils/external-transactions.d.ts
index 93a84da..04efc8e 100644
--- a/node_modules/@metamask/transaction-controller/dist/external-transactions.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/external-transactions.d.ts
@@ -1,4 +1,4 @@
-import type { TransactionMeta } from './types';
+import type { TransactionMeta } from '../types';
 /**
  * Validates the external provided transaction meta.
  *
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/external-transactions.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/external-transactions.d.ts.map
new file mode 100644
index 0000000..a34dd4a
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/external-transactions.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"external-transactions.d.ts","sourceRoot":"","sources":["../../../src/utils/external-transactions.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAEhD;;;;;;GAMG;AACH,wBAAgB,oCAAoC,CAClD,eAAe,CAAC,EAAE,eAAe,EACjC,YAAY,CAAC,EAAE,eAAe,EAAE,EAChC,UAAU,CAAC,EAAE,eAAe,EAAE,QAoC/B"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/gas-fees.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/gas-fees.d.ts
new file mode 100644
index 0000000..1b69478
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/gas-fees.d.ts
@@ -0,0 +1,26 @@
+import type EthQuery from '@metamask/eth-query';
+import type { FetchGasFeeEstimateOptions, GasFeeState } from '@metamask/gas-fee-controller';
+import type { Hex } from '@metamask/utils';
+import type { SavedGasFees, TransactionParams, TransactionMeta, GasFeeFlow } from '../types';
+export type UpdateGasFeesRequest = {
+    eip1559: boolean;
+    ethQuery: EthQuery;
+    gasFeeFlows: GasFeeFlow[];
+    getGasFeeEstimates: (options: FetchGasFeeEstimateOptions) => Promise<GasFeeState>;
+    getSavedGasFees: (chainId: Hex) => SavedGasFees | undefined;
+    txMeta: TransactionMeta;
+};
+export type GetGasFeeRequest = UpdateGasFeesRequest & {
+    initialParams: TransactionParams;
+    savedGasFees?: SavedGasFees;
+    suggestedGasFees: SuggestedGasFees;
+};
+type SuggestedGasFees = {
+    maxFeePerGas?: string;
+    maxPriorityFeePerGas?: string;
+    gasPrice?: string;
+};
+export declare function updateGasFees(request: UpdateGasFeesRequest): Promise<void>;
+export declare function gweiDecimalToWeiHex(value: string): `0x${string}`;
+export {};
+//# sourceMappingURL=gas-fees.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/gas-fees.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/gas-fees.d.ts.map
new file mode 100644
index 0000000..852ac33
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/gas-fees.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gas-fees.d.ts","sourceRoot":"","sources":["../../../src/utils/gas-fees.ts"],"names":[],"mappings":"AAQA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAChD,OAAO,KAAK,EACV,0BAA0B,EAC1B,WAAW,EACZ,MAAM,8BAA8B,CAAC;AACtC,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAI3C,OAAO,KAAK,EACV,YAAY,EACZ,iBAAiB,EACjB,eAAe,EAEf,UAAU,EACX,MAAM,UAAU,CAAC;AAKlB,MAAM,MAAM,oBAAoB,GAAG;IACjC,OAAO,EAAE,OAAO,CAAC;IACjB,QAAQ,EAAE,QAAQ,CAAC;IACnB,WAAW,EAAE,UAAU,EAAE,CAAC;IAC1B,kBAAkB,EAAE,CAClB,OAAO,EAAE,0BAA0B,KAChC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC1B,eAAe,EAAE,CAAC,OAAO,EAAE,GAAG,KAAK,YAAY,GAAG,SAAS,CAAC;IAC5D,MAAM,EAAE,eAAe,CAAC;CACzB,CAAC;AAEF,MAAM,MAAM,gBAAgB,GAAG,oBAAoB,GAAG;IACpD,aAAa,EAAE,iBAAiB,CAAC;IACjC,YAAY,CAAC,EAAE,YAAY,CAAC;IAC5B,gBAAgB,EAAE,gBAAgB,CAAC;CACpC,CAAC;AAEF,KAAK,gBAAgB,GAAG;IACtB,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,oBAAoB,CAAC,EAAE,MAAM,CAAC;IAC9B,QAAQ,CAAC,EAAE,MAAM,CAAC;CACnB,CAAC;AAIF,wBAAsB,aAAa,CAAC,OAAO,EAAE,oBAAoB,iBA8ChE;AAED,wBAAgB,mBAAmB,CAAC,KAAK,EAAE,MAAM,iBAEhD"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/gas-flow.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/gas-flow.d.ts
new file mode 100644
index 0000000..d8ff91d
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/gas-flow.d.ts
@@ -0,0 +1,26 @@
+import type { EthGasPriceEstimate, GasFeeEstimates, LegacyGasPriceEstimate } from '@metamask/gas-fee-controller';
+import { type GasFeeState } from '@metamask/gas-fee-controller';
+import type { FeeMarketGasFeeEstimates, GasPriceGasFeeEstimates, LegacyGasFeeEstimates } from '../types';
+import { type GasFeeFlow, type TransactionMeta } from '../types';
+type MergeGasFeeEstimatesRequest = {
+    gasFeeControllerEstimates: GasFeeEstimates | LegacyGasPriceEstimate | EthGasPriceEstimate;
+    transactionGasFeeEstimates: FeeMarketGasFeeEstimates | LegacyGasFeeEstimates | GasPriceGasFeeEstimates;
+};
+/**
+ * Returns the first gas fee flow that matches the transaction.
+ *
+ * @param transactionMeta - The transaction metadata to find a gas fee flow for.
+ * @param gasFeeFlows - The gas fee flows to search.
+ * @returns The first gas fee flow that matches the transaction, or undefined if none match.
+ */
+export declare function getGasFeeFlow(transactionMeta: TransactionMeta, gasFeeFlows: GasFeeFlow[]): GasFeeFlow | undefined;
+/**
+ * Merge the gas fee estimates from the gas fee controller with the gas fee estimates from a transaction.
+ * @param request - Data required to merge gas fee estimates.
+ * @param request.gasFeeControllerEstimates - Gas fee estimates from the GasFeeController.
+ * @param request.transactionGasFeeEstimates - Gas fee estimates from the transaction.
+ * @returns The merged gas fee estimates.
+ */
+export declare function mergeGasFeeEstimates({ gasFeeControllerEstimates, transactionGasFeeEstimates, }: MergeGasFeeEstimatesRequest): GasFeeState['gasFeeEstimates'];
+export {};
+//# sourceMappingURL=gas-flow.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/gas-flow.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/gas-flow.d.ts.map
new file mode 100644
index 0000000..e8708a5
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/gas-flow.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gas-flow.d.ts","sourceRoot":"","sources":["../../../src/utils/gas-flow.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAEV,mBAAmB,EACnB,eAAe,EACf,sBAAsB,EACvB,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAE,KAAK,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,KAAK,EACV,wBAAwB,EACxB,uBAAuB,EACvB,qBAAqB,EACtB,MAAM,UAAU,CAAC;AAClB,OAAO,EACL,KAAK,UAAU,EACf,KAAK,eAAe,EAIrB,MAAM,UAAU,CAAC;AAElB,KAAK,2BAA2B,GAAG;IACjC,yBAAyB,EACrB,eAAe,GACf,sBAAsB,GACtB,mBAAmB,CAAC;IACxB,0BAA0B,EACtB,wBAAwB,GACxB,qBAAqB,GACrB,uBAAuB,CAAC;CAC7B,CAAC;AAEF;;;;;;GAMG;AACH,wBAAgB,aAAa,CAC3B,eAAe,EAAE,eAAe,EAChC,WAAW,EAAE,UAAU,EAAE,GACxB,UAAU,GAAG,SAAS,CAIxB;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,EACnC,yBAAyB,EACzB,0BAA0B,GAC3B,EAAE,2BAA2B,GAAG,WAAW,CAAC,iBAAiB,CAAC,CAiC9D"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/gas.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/gas.d.ts
new file mode 100644
index 0000000..bb745f7
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/gas.d.ts
@@ -0,0 +1,28 @@
+/// <reference types="debug" />
+import type EthQuery from '@metamask/eth-query';
+import type { Hex } from '@metamask/utils';
+import type { TransactionMeta, TransactionParams } from '../types';
+export type UpdateGasRequest = {
+    ethQuery: EthQuery;
+    isCustomNetwork: boolean;
+    chainId: Hex;
+    txMeta: TransactionMeta;
+};
+export declare const log: import("debug").Debugger;
+export declare const FIXED_GAS = "0x5208";
+export declare const DEFAULT_GAS_MULTIPLIER = 1.5;
+export declare function updateGas(request: UpdateGasRequest): Promise<void>;
+export declare function estimateGas(txParams: TransactionParams, ethQuery: EthQuery): Promise<{
+    blockGasLimit: string;
+    estimatedGas: string;
+    simulationFails: {
+        reason: any;
+        errorKey: any;
+        debug: {
+            blockNumber: string;
+            blockGasLimit: string;
+        };
+    } | undefined;
+}>;
+export declare function addGasBuffer(estimatedGas: string, blockGasLimit: string, multiplier: number): `0x${string}`;
+//# sourceMappingURL=gas.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/gas.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/gas.d.ts.map
new file mode 100644
index 0000000..60ced83
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/gas.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gas.d.ts","sourceRoot":"","sources":["../../../src/utils/gas.ts"],"names":[],"mappings":";AAQA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAChD,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAK3C,OAAO,KAAK,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAEnE,MAAM,MAAM,gBAAgB,GAAG;IAC7B,QAAQ,EAAE,QAAQ,CAAC;IACnB,eAAe,EAAE,OAAO,CAAC;IACzB,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,eAAe,CAAC;CACzB,CAAC;AAEF,eAAO,MAAM,GAAG,0BAA2C,CAAC;AAE5D,eAAO,MAAM,SAAS,WAAW,CAAC;AAClC,eAAO,MAAM,sBAAsB,MAAM,CAAC;AAE1C,wBAAsB,SAAS,CAAC,OAAO,EAAE,gBAAgB,iBAkBxD;AAED,wBAAsB,WAAW,CAC/B,QAAQ,EAAE,iBAAiB,EAC3B,QAAQ,EAAE,QAAQ;;;;;;;;;;;GAwCnB;AAED,wBAAgB,YAAY,CAC1B,YAAY,EAAE,MAAM,EACpB,aAAa,EAAE,MAAM,EACrB,UAAU,EAAE,MAAM,iBAqBnB"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/history.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/history.d.ts
new file mode 100644
index 0000000..ed081aa
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/history.d.ts
@@ -0,0 +1,20 @@
+import type { TransactionMeta } from '../types';
+/**
+ * Build a new version of the provided transaction with an initial history
+ * entry, which is just a snapshot of the transaction.
+ *
+ * @param transactionMeta - TransactionMeta to add initial history snapshot to.
+ * @returns A copy of `transactionMeta` with a new `history` property.
+ */
+export declare function addInitialHistorySnapshot(transactionMeta: TransactionMeta): TransactionMeta;
+/**
+ * Builds a new version of the transaction with a new history entry if
+ * it has a `history` property, or just returns the transaction.
+ *
+ * @param transactionMeta - TransactionMeta to add history entry to.
+ * @param note - Note to add to history entry.
+ * @returns A copy of `transactionMeta` with a new `history` entry if it has an
+ * existing non-empty `history` array.
+ */
+export declare function updateTransactionHistory(transactionMeta: TransactionMeta, note: string): TransactionMeta;
+//# sourceMappingURL=history.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/history.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/history.d.ts.map
new file mode 100644
index 0000000..7349235
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/history.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"history.d.ts","sourceRoot":"","sources":["../../../src/utils/history.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAGV,eAAe,EAChB,MAAM,UAAU,CAAC;AAElB;;;;;;GAMG;AACH,wBAAgB,yBAAyB,CACvC,eAAe,EAAE,eAAe,GAC/B,eAAe,CAGjB;AAED;;;;;;;;GAQG;AACH,wBAAgB,wBAAwB,CACtC,eAAe,EAAE,eAAe,EAChC,IAAI,EAAE,MAAM,GACX,eAAe,CAejB"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/layer1-gas-fee-flow.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/layer1-gas-fee-flow.d.ts
new file mode 100644
index 0000000..737fbbb
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/layer1-gas-fee-flow.d.ts
@@ -0,0 +1,25 @@
+import type { Provider } from '@metamask/network-controller';
+import { type Hex } from '@metamask/utils';
+import type { Layer1GasFeeFlow, TransactionMeta } from '../types';
+export type UpdateLayer1GasFeeRequest = {
+    layer1GasFeeFlows: Layer1GasFeeFlow[];
+    provider: Provider;
+    transactionMeta: TransactionMeta;
+};
+/**
+ * Updates the given transactionMeta with the layer 1 gas fee.
+ * @param request - The request to use when getting the layer 1 gas fee.
+ * @param request.provider - Provider used to create a new underlying EthQuery instance
+ * @param request.transactionMeta - The transaction to get the layer 1 gas fee for.
+ * @param request.layer1GasFeeFlows - The layer 1 gas fee flows to search.
+ */
+export declare function updateTransactionLayer1GasFee(request: UpdateLayer1GasFeeRequest): Promise<void>;
+/**
+ * Get the layer 1 gas fee for a transaction and return the layer1Fee.
+ * @param request - The request to use when getting the layer 1 gas fee.
+ * @param request.layer1GasFeeFlows - The layer 1 gas fee flows to search.
+ * @param request.provider - The provider to use to get the layer 1 gas fee.
+ * @param request.transactionMeta - The transaction to get the layer 1 gas fee for.
+ */
+export declare function getTransactionLayer1GasFee({ layer1GasFeeFlows, provider, transactionMeta, }: UpdateLayer1GasFeeRequest): Promise<Hex | undefined>;
+//# sourceMappingURL=layer1-gas-fee-flow.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/layer1-gas-fee-flow.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/layer1-gas-fee-flow.d.ts.map
new file mode 100644
index 0000000..db20ed7
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/layer1-gas-fee-flow.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"layer1-gas-fee-flow.d.ts","sourceRoot":"","sources":["../../../src/utils/layer1-gas-fee-flow.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAC7D,OAAO,EAAsB,KAAK,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAG/D,OAAO,KAAK,EAAE,gBAAgB,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAIlE,MAAM,MAAM,yBAAyB,GAAG;IACtC,iBAAiB,EAAE,gBAAgB,EAAE,CAAC;IACtC,QAAQ,EAAE,QAAQ,CAAC;IACnB,eAAe,EAAE,eAAe,CAAC;CAClC,CAAC;AAEF;;;;;;GAMG;AACH,wBAAsB,6BAA6B,CACjD,OAAO,EAAE,yBAAyB,iBAanC;AAiBD;;;;;;GAMG;AACH,wBAAsB,0BAA0B,CAAC,EAC/C,iBAAiB,EACjB,QAAQ,EACR,eAAe,GAChB,EAAE,yBAAyB,GAAG,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC,CA0BtD"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/nonce.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/nonce.d.ts
new file mode 100644
index 0000000..0a5bf32
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/nonce.d.ts
@@ -0,0 +1,21 @@
+import type { NonceLock, Transaction as NonceTrackerTransaction } from 'nonce-tracker';
+import type { TransactionMeta, TransactionStatus } from '../types';
+/**
+ * Determine the next nonce to be used for a transaction.
+ *
+ * @param txMeta - The transaction metadata.
+ * @param getNonceLock - An anonymous function that acquires the nonce lock for an address
+ * @returns The next hexadecimal nonce to be used for the given transaction, and optionally a function to release the nonce lock.
+ */
+export declare function getNextNonce(txMeta: TransactionMeta, getNonceLock: (address: string) => Promise<NonceLock>): Promise<[string, (() => void) | undefined]>;
+/**
+ * Filter and format transactions for the nonce tracker.
+ *
+ * @param currentChainId - Chain ID of the current network.
+ * @param fromAddress - Address of the account from which the transactions to filter from are sent.
+ * @param transactionStatus - Status of the transactions for which to filter.
+ * @param transactions - Array of transactionMeta objects that have been prefiltered.
+ * @returns Array of transactions formatted for the nonce tracker.
+ */
+export declare function getAndFormatTransactionsForNonceTracker(currentChainId: string, fromAddress: string, transactionStatus: TransactionStatus, transactions: TransactionMeta[]): NonceTrackerTransaction[];
+//# sourceMappingURL=nonce.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/nonce.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/nonce.d.ts.map
new file mode 100644
index 0000000..3592c6c
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/nonce.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"nonce.d.ts","sourceRoot":"","sources":["../../../src/utils/nonce.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EACV,SAAS,EACT,WAAW,IAAI,uBAAuB,EACvC,MAAM,eAAe,CAAC;AAGvB,OAAO,KAAK,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAInE;;;;;;GAMG;AACH,wBAAsB,YAAY,CAChC,MAAM,EAAE,eAAe,EACvB,YAAY,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,OAAO,CAAC,SAAS,CAAC,GACpD,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC,MAAM,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,CAyB7C;AAED;;;;;;;;GAQG;AACH,wBAAgB,uCAAuC,CACrD,cAAc,EAAE,MAAM,EACtB,WAAW,EAAE,MAAM,EACnB,iBAAiB,EAAE,iBAAiB,EACpC,YAAY,EAAE,eAAe,EAAE,GAC9B,uBAAuB,EAAE,CA0B3B"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/simulation-api.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/simulation-api.d.ts
new file mode 100644
index 0000000..ce65648
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/simulation-api.d.ts
@@ -0,0 +1,107 @@
+import { type Hex } from '@metamask/utils';
+/** Single transaction to simulate in a simulation API request.  */
+export type SimulationRequestTransaction = {
+    /** Data to send with the transaction. */
+    data?: Hex;
+    /** Sender of the transaction. */
+    from: Hex;
+    /** Gas limit for the transaction. */
+    gas?: Hex;
+    /** Maximum fee per gas for the transaction. */
+    maxFeePerGas?: Hex;
+    /** Maximum priority fee per gas for the transaction. */
+    maxPriorityFeePerGas?: Hex;
+    /** Recipient of the transaction. */
+    to?: Hex;
+    /** Value to send with the transaction. */
+    value?: Hex;
+};
+/** Request to the simulation API to simulate transactions. */
+export type SimulationRequest = {
+    /**
+     * Transactions to be sequentially simulated.
+     * State changes impact subsequent transactions in the list.
+     */
+    transactions: SimulationRequestTransaction[];
+    /**
+     * Overrides to the state of the blockchain, keyed by smart contract address.
+     */
+    overrides?: {
+        [address: Hex]: {
+            /** Overrides to the storage slots for a smart contract account. */
+            stateDiff: {
+                [slot: Hex]: Hex;
+            };
+        };
+    };
+    /**
+     * Whether to include call traces in the response.
+     * Defaults to false.
+     */
+    withCallTrace?: boolean;
+    /**
+     * Whether to include event logs in the response.
+     * Defaults to false.
+     */
+    withLogs?: boolean;
+};
+/** Raw event log emitted by a simulated transaction. */
+export type SimulationResponseLog = {
+    /** Address of the account that created the event. */
+    address: Hex;
+    /** Raw data in the event that is not indexed. */
+    data: Hex;
+    /** Raw indexed data from the event. */
+    topics: Hex[];
+};
+/** Call trace of a single simulated transaction. */
+export type SimulationResponseCallTrace = {
+    /** Nested calls. */
+    calls: SimulationResponseCallTrace[];
+    /** Raw event logs created by the call. */
+    logs: SimulationResponseLog[];
+};
+/**
+ * Changes to the blockchain state.
+ * Keyed by account address.
+ */
+export type SimulationResponseStateDiff = {
+    [address: Hex]: {
+        /** Native balance of the account. */
+        balance?: Hex;
+        /** Nonce of the account. */
+        nonce?: Hex;
+        /** Storage values per slot. */
+        storage?: {
+            [slot: Hex]: Hex;
+        };
+    };
+};
+/** Response from the simulation API for a single transaction. */
+export type SimulationResponseTransaction = {
+    /** An error message indicating the transaction could not be simulated. */
+    error?: string;
+    /** Return value of the transaction, such as the balance if calling balanceOf. */
+    return: Hex;
+    /** Hierarchy of call data including nested calls and logs. */
+    callTrace?: SimulationResponseCallTrace;
+    /** Changes to the blockchain state. */
+    stateDiff?: {
+        /** Initial blockchain state before the transaction. */
+        pre?: SimulationResponseStateDiff;
+        /** Updated blockchain state after the transaction. */
+        post?: SimulationResponseStateDiff;
+    };
+};
+/** Response from the simulation API. */
+export type SimulationResponse = {
+    /** Simulation data for each transaction in the request. */
+    transactions: SimulationResponseTransaction[];
+};
+/**
+ * Simulate transactions using the transaction simulation API.
+ * @param chainId - The chain ID to simulate transactions on.
+ * @param request - The request to simulate transactions.
+ */
+export declare function simulateTransactions(chainId: Hex, request: SimulationRequest): Promise<SimulationResponse>;
+//# sourceMappingURL=simulation-api.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/simulation-api.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/simulation-api.d.ts.map
new file mode 100644
index 0000000..f6d63ee
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/simulation-api.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"simulation-api.d.ts","sourceRoot":"","sources":["../../../src/utils/simulation-api.ts"],"names":[],"mappings":"AACA,OAAO,EAAsB,KAAK,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAW/D,mEAAmE;AACnE,MAAM,MAAM,4BAA4B,GAAG;IACzC,yCAAyC;IACzC,IAAI,CAAC,EAAE,GAAG,CAAC;IAEX,iCAAiC;IACjC,IAAI,EAAE,GAAG,CAAC;IAEV,qCAAqC;IACrC,GAAG,CAAC,EAAE,GAAG,CAAC;IAEV,+CAA+C;IAC/C,YAAY,CAAC,EAAE,GAAG,CAAC;IAEnB,wDAAwD;IACxD,oBAAoB,CAAC,EAAE,GAAG,CAAC;IAE3B,oCAAoC;IACpC,EAAE,CAAC,EAAE,GAAG,CAAC;IAET,0CAA0C;IAC1C,KAAK,CAAC,EAAE,GAAG,CAAC;CACb,CAAC;AAEF,8DAA8D;AAC9D,MAAM,MAAM,iBAAiB,GAAG;IAC9B;;;OAGG;IACH,YAAY,EAAE,4BAA4B,EAAE,CAAC;IAE7C;;OAEG;IACH,SAAS,CAAC,EAAE;QACV,CAAC,OAAO,EAAE,GAAG,GAAG;YACd,mEAAmE;YACnE,SAAS,EAAE;gBACT,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC;aAClB,CAAC;SACH,CAAC;KACH,CAAC;IAEF;;;OAGG;IACH,aAAa,CAAC,EAAE,OAAO,CAAC;IAExB;;;OAGG;IACH,QAAQ,CAAC,EAAE,OAAO,CAAC;CACpB,CAAC;AAEF,wDAAwD;AACxD,MAAM,MAAM,qBAAqB,GAAG;IAClC,qDAAqD;IACrD,OAAO,EAAE,GAAG,CAAC;IAEb,iDAAiD;IACjD,IAAI,EAAE,GAAG,CAAC;IAEV,uCAAuC;IACvC,MAAM,EAAE,GAAG,EAAE,CAAC;CACf,CAAC;AAEF,oDAAoD;AACpD,MAAM,MAAM,2BAA2B,GAAG;IACxC,oBAAoB;IACpB,KAAK,EAAE,2BAA2B,EAAE,CAAC;IAErC,0CAA0C;IAC1C,IAAI,EAAE,qBAAqB,EAAE,CAAC;CAC/B,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,2BAA2B,GAAG;IACxC,CAAC,OAAO,EAAE,GAAG,GAAG;QACd,qCAAqC;QACrC,OAAO,CAAC,EAAE,GAAG,CAAC;QAEd,4BAA4B;QAC5B,KAAK,CAAC,EAAE,GAAG,CAAC;QAEZ,+BAA+B;QAC/B,OAAO,CAAC,EAAE;YACR,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC;SAClB,CAAC;KACH,CAAC;CACH,CAAC;AAEF,iEAAiE;AACjE,MAAM,MAAM,6BAA6B,GAAG;IAC1C,0EAA0E;IAC1E,KAAK,CAAC,EAAE,MAAM,CAAC;IAEf,iFAAiF;IACjF,MAAM,EAAE,GAAG,CAAC;IAEZ,8DAA8D;IAC9D,SAAS,CAAC,EAAE,2BAA2B,CAAC;IAExC,uCAAuC;IACvC,SAAS,CAAC,EAAE;QACV,uDAAuD;QACvD,GAAG,CAAC,EAAE,2BAA2B,CAAC;QAElC,sDAAsD;QACtD,IAAI,CAAC,EAAE,2BAA2B,CAAC;KACpC,CAAC;CACH,CAAC;AAEF,wCAAwC;AACxC,MAAM,MAAM,kBAAkB,GAAG;IAC/B,2DAA2D;IAC3D,YAAY,EAAE,6BAA6B,EAAE,CAAC;CAC/C,CAAC;AAkBF;;;;GAIG;AACH,wBAAsB,oBAAoB,CACxC,OAAO,EAAE,GAAG,EACZ,OAAO,EAAE,iBAAiB,GACzB,OAAO,CAAC,kBAAkB,CAAC,CA4B7B"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/simulation.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/simulation.d.ts
new file mode 100644
index 0000000..5d6b81a
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/simulation.d.ts
@@ -0,0 +1,46 @@
+import type { Fragment } from '@ethersproject/abi';
+import { type Hex } from '@metamask/utils';
+import type { SimulationData } from '../types';
+import { SimulationTokenStandard } from '../types';
+import type { SimulationResponse } from './simulation-api';
+export declare enum SupportedToken {
+    ERC20 = "erc20",
+    ERC721 = "erc721",
+    ERC1155 = "erc1155",
+    ERC20_WRAPPED = "erc20Wrapped",
+    ERC721_LEGACY = "erc721Legacy"
+}
+type ABI = Fragment[];
+export type GetSimulationDataRequest = {
+    chainId: Hex;
+    from: Hex;
+    to?: Hex;
+    value?: Hex;
+    data?: Hex;
+};
+type ParsedEvent = {
+    contractAddress: Hex;
+    tokenStandard: SimulationTokenStandard;
+    name: string;
+    args: Record<string, Hex | Hex[]>;
+    abi: ABI;
+};
+/**
+ * Generate simulation data for a transaction.
+ * @param request - The transaction to simulate.
+ * @param request.chainId - The chain ID of the transaction.
+ * @param request.from - The sender of the transaction.
+ * @param request.to - The recipient of the transaction.
+ * @param request.value - The value of the transaction.
+ * @param request.data - The data of the transaction.
+ * @returns The simulation data.
+ */
+export declare function getSimulationData(request: GetSimulationDataRequest): Promise<SimulationData>;
+/**
+ * Extract events from a simulation response.
+ * @param response - The simulation response.
+ * @returns The parsed events.
+ */
+export declare function getEvents(response: SimulationResponse): ParsedEvent[];
+export {};
+//# sourceMappingURL=simulation.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/simulation.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/simulation.d.ts.map
new file mode 100644
index 0000000..e95dbab
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/simulation.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"simulation.d.ts","sourceRoot":"","sources":["../../../src/utils/simulation.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,QAAQ,EAA0B,MAAM,oBAAoB,CAAC;AAI3E,OAAO,EAAsB,KAAK,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAY/D,OAAO,KAAK,EAEV,cAAc,EAGf,MAAM,UAAU,CAAC;AAClB,OAAO,EAAE,uBAAuB,EAAE,MAAM,UAAU,CAAC;AAEnD,OAAO,KAAK,EAGV,kBAAkB,EAGnB,MAAM,kBAAkB,CAAC;AAE1B,oBAAY,cAAc;IACxB,KAAK,UAAU;IACf,MAAM,WAAW;IACjB,OAAO,YAAY;IACnB,aAAa,iBAAiB;IAC9B,aAAa,iBAAiB;CAC/B;AAED,KAAK,GAAG,GAAG,QAAQ,EAAE,CAAC;AAEtB,MAAM,MAAM,wBAAwB,GAAG;IACrC,OAAO,EAAE,GAAG,CAAC;IACb,IAAI,EAAE,GAAG,CAAC;IACV,EAAE,CAAC,EAAE,GAAG,CAAC;IACT,KAAK,CAAC,EAAE,GAAG,CAAC;IACZ,IAAI,CAAC,EAAE,GAAG,CAAC;CACZ,CAAC;AAEF,KAAK,WAAW,GAAG;IACjB,eAAe,EAAE,GAAG,CAAC;IACrB,aAAa,EAAE,uBAAuB,CAAC;IACvC,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;IAClC,GAAG,EAAE,GAAG,CAAC;CACV,CAAC;AAuCF;;;;;;;;;GASG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,wBAAwB,GAChC,OAAO,CAAC,cAAc,CAAC,CA6DzB;AA8BD;;;;GAIG;AACH,wBAAgB,SAAS,CAAC,QAAQ,EAAE,kBAAkB,GAAG,WAAW,EAAE,CAuCrE"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/swaps.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/swaps.d.ts
new file mode 100644
index 0000000..e9dcd01
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/swaps.d.ts
@@ -0,0 +1,84 @@
+import type EthQuery from '@metamask/eth-query';
+import type { TransactionControllerMessenger } from '../TransactionController';
+import type { TransactionMeta } from '../types';
+import { TransactionType } from '../types';
+/**
+ * Interval in milliseconds between checks of post transaction balance
+ */
+export declare const UPDATE_POST_TX_BALANCE_TIMEOUT = 5000;
+/**
+ * Retry attempts for checking post transaction balance
+ */
+export declare const UPDATE_POST_TX_BALANCE_ATTEMPTS = 6;
+/**
+ * An address that the metaswap-api recognizes as the default token for the current network, in place of the token address that ERC-20 tokens have
+ */
+export declare const DEFAULT_TOKEN_ADDRESS = "0x0000000000000000000000000000000000000000";
+interface SwapsTokenObject {
+    /**
+     * The name for the network
+     */
+    name: string;
+    /**
+     * An address that the metaswap-api recognizes as the default token
+     */
+    address: string;
+    /**
+     * Number of digits after decimal point
+     */
+    decimals: number;
+}
+export declare const SWAPS_CHAINID_DEFAULT_TOKEN_MAP: {
+    readonly "0x1": SwapsTokenObject;
+    readonly "0x539": SwapsTokenObject;
+    readonly "0x38": SwapsTokenObject;
+    readonly "0x89": SwapsTokenObject;
+    readonly "0x5": SwapsTokenObject;
+    readonly "0xa86a": SwapsTokenObject;
+    readonly "0xa": SwapsTokenObject;
+    readonly "0xa4b1": SwapsTokenObject;
+    readonly "0x144": SwapsTokenObject;
+};
+export declare const SWAP_TRANSACTION_TYPES: TransactionType[];
+/**
+ * Updates the transaction meta object with the swap information
+ *
+ * @param transactionMeta - The transaction meta object to update
+ * @param transactionType - The type of the transaction
+ * @param swaps - The swaps object
+ * @param swaps.hasApproveTx - Whether the swap has an approval transaction
+ * @param swaps.meta - The swap meta object
+ * @param updateSwapsTransactionRequest - Dependency bag
+ * @param updateSwapsTransactionRequest.isSwapsDisabled - Whether swaps are disabled
+ * @param updateSwapsTransactionRequest.cancelTransaction - Function to cancel a transaction
+ * @param updateSwapsTransactionRequest.messenger - TransactionController messenger
+ * @returns A copy of the transaction meta object with updates, or the same
+ * transaction meta object if no updates were made.
+ */
+export declare function updateSwapsTransaction(transactionMeta: TransactionMeta, transactionType: TransactionType, swaps: {
+    hasApproveTx?: boolean;
+    meta?: Partial<TransactionMeta>;
+}, { isSwapsDisabled, cancelTransaction, messenger, }: {
+    isSwapsDisabled: boolean;
+    cancelTransaction: (transactionId: string) => void;
+    messenger: TransactionControllerMessenger;
+}): TransactionMeta;
+/**
+ * Attempts to update the post transaction balance of the provided transaction
+ *
+ * @param transactionMeta - Transaction meta object to update
+ * @param updatePostTransactionBalanceRequest - Dependency bag
+ * @param updatePostTransactionBalanceRequest.ethQuery - EthQuery object
+ * @param updatePostTransactionBalanceRequest.getTransaction - Reading function for the latest transaction state
+ * @param updatePostTransactionBalanceRequest.updateTransaction - Updating transaction function
+ */
+export declare function updatePostTransactionBalance(transactionMeta: TransactionMeta, { ethQuery, getTransaction, updateTransaction, }: {
+    ethQuery: EthQuery;
+    getTransaction: (transactionId: string) => TransactionMeta | undefined;
+    updateTransaction: (transactionMeta: TransactionMeta, note: string) => void;
+}): Promise<{
+    updatedTransactionMeta: TransactionMeta;
+    approvalTransactionMeta?: TransactionMeta;
+}>;
+export {};
+//# sourceMappingURL=swaps.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/swaps.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/swaps.d.ts.map
new file mode 100644
index 0000000..f94e47a
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/swaps.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"swaps.d.ts","sourceRoot":"","sources":["../../../src/utils/swaps.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAKhD,OAAO,KAAK,EAAE,8BAA8B,EAAE,MAAM,0BAA0B,CAAC;AAC/E,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAChD,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAK3C;;GAEG;AACH,eAAO,MAAM,8BAA8B,OAAO,CAAC;AAEnD;;GAEG;AACH,eAAO,MAAM,+BAA+B,IAAI,CAAC;AAIjD;;GAEG;AACH,eAAO,MAAM,qBAAqB,+CACY,CAAC;AAI/C,UAAU,gBAAgB;IACxB;;OAEG;IACH,IAAI,EAAE,MAAM,CAAC;IACb;;OAEG;IACH,OAAO,EAAE,MAAM,CAAC;IAChB;;OAEG;IACH,QAAQ,EAAE,MAAM,CAAC;CAClB;AAkDD,eAAO,MAAM,+BAA+B;;;;;;;;;;CAUlC,CAAC;AAEX,eAAO,MAAM,sBAAsB,mBAGlC,CAAC;AAEF;;;;;;;;;;;;;;GAcG;AACH,wBAAgB,sBAAsB,CACpC,eAAe,EAAE,eAAe,EAChC,eAAe,EAAE,eAAe,EAChC,KAAK,EAAE;IACL,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB,IAAI,CAAC,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;CACjC,EACD,EACE,eAAe,EACf,iBAAiB,EACjB,SAAS,GACV,EAAE;IACD,eAAe,EAAE,OAAO,CAAC;IACzB,iBAAiB,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,IAAI,CAAC;IACnD,SAAS,EAAE,8BAA8B,CAAC;CAC3C,GACA,eAAe,CAgDjB;AAED;;;;;;;;GAQG;AACH,wBAAsB,4BAA4B,CAChD,eAAe,EAAE,eAAe,EAChC,EACE,QAAQ,EACR,cAAc,EACd,iBAAiB,GAClB,EAAE;IACD,QAAQ,EAAE,QAAQ,CAAC;IACnB,cAAc,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,eAAe,GAAG,SAAS,CAAC;IACvE,iBAAiB,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;CAC7E,GACA,OAAO,CAAC;IACT,sBAAsB,EAAE,eAAe,CAAC;IACxC,uBAAuB,CAAC,EAAE,eAAe,CAAC;CAC3C,CAAC,CA4DD"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/transaction-type.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/transaction-type.d.ts
similarity index 98%
rename from node_modules/@metamask/transaction-controller/dist/transaction-type.d.ts
rename to node_modules/@metamask/transaction-controller/dist/types/utils/transaction-type.d.ts
index d6723e7..8528ffc 100644
--- a/node_modules/@metamask/transaction-controller/dist/transaction-type.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/transaction-type.d.ts
@@ -1,5 +1,5 @@
 import type EthQuery from '@metamask/eth-query';
-import type { InferTransactionTypeResult, TransactionParams } from './types';
+import type { InferTransactionTypeResult, TransactionParams } from '../types';
 export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
 /**
  * Determines the type of the transaction by analyzing the txParams.
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/transaction-type.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/transaction-type.d.ts.map
new file mode 100644
index 0000000..6bec535
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/transaction-type.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"transaction-type.d.ts","sourceRoot":"","sources":["../../../src/utils/transaction-type.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAQhD,OAAO,KAAK,EAAE,0BAA0B,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAG9E,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAOrE;;;;;;;;GAQG;AACH,wBAAsB,wBAAwB,CAC5C,QAAQ,EAAE,iBAAiB,EAC3B,QAAQ,EAAE,QAAQ,GACjB,OAAO,CAAC,0BAA0B,CAAC,CA+CrC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/utils.d.ts
similarity index 62%
rename from node_modules/@metamask/transaction-controller/dist/utils.d.ts
rename to node_modules/@metamask/transaction-controller/dist/types/utils/utils.d.ts
index e4af048..38f2f6d 100644
--- a/node_modules/@metamask/transaction-controller/dist/utils.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/utils.d.ts
@@ -1,7 +1,5 @@
-import type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';
-import type { GasPriceValue, FeeMarketEIP1559Values } from './TransactionController';
-import { TransactionStatus } from './types';
-import type { TransactionParams, TransactionMeta } from './types';
+import type { GasPriceValue, FeeMarketEIP1559Values } from '../TransactionController';
+import type { TransactionParams, TransactionMeta, TransactionError } from '../types';
 export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
 /**
  * Normalizes properties on transaction params.
@@ -9,7 +7,7 @@ export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
  * @param txParams - The transaction params to normalize.
  * @returns Normalized transaction params.
  */
-export declare function normalizeTxParams(txParams: TransactionParams): TransactionParams;
+export declare function normalizeTransactionParams(txParams: TransactionParams): TransactionParams;
 /**
  * Checks if a transaction is EIP-1559 by checking for the existence of
  * maxFeePerGas and maxPriorityFeePerGas within its parameters.
@@ -32,15 +30,6 @@ export declare const getIncreasedPriceFromExisting: (value: string | undefined,
  * @throws Will throw if the proposed value is too low.
  */
 export declare function validateMinimumIncrease(proposed: string, min: string): string;
-/**
- * Helper function to filter and format transactions for the nonce tracker.
- *
- * @param fromAddress - Address of the account from which the transactions to filter from are sent.
- * @param transactionStatus - Status of the transactions for which to filter.
- * @param transactions - Array of transactionMeta objects that have been prefiltered.
- * @returns Array of transactions formatted for the nonce tracker.
- */
-export declare function getAndFormatTransactionsForNonceTracker(fromAddress: string, transactionStatus: TransactionStatus, transactions: TransactionMeta[]): NonceTrackerTransaction[];
 /**
  * Validates that a transaction is unapproved.
  * Throws if the transaction is not unapproved.
@@ -49,4 +38,29 @@ export declare function getAndFormatTransactionsForNonceTracker(fromAddress: str
  * @param fnName - The name of the function calling this helper.
  */
 export declare function validateIfTransactionUnapproved(transactionMeta: TransactionMeta | undefined, fnName: string): void;
+/**
+ * Normalizes properties on transaction params.
+ *
+ * @param error - The error to be normalize.
+ * @returns Normalized transaction error.
+ */
+export declare function normalizeTxError(error: Error & {
+    code?: string;
+    value?: unknown;
+}): TransactionError;
+/**
+ * Normalize an object containing gas fee values.
+ *
+ * @param gasFeeValues - An object containing gas fee values.
+ * @returns An object containing normalized gas fee values.
+ */
+export declare function normalizeGasFeeValues(gasFeeValues: GasPriceValue | FeeMarketEIP1559Values): GasPriceValue | FeeMarketEIP1559Values;
+/**
+ * Ensure a hex string is of even length by adding a leading 0 if necessary.
+ * Any existing `0x` prefix is preserved but is not added if missing.
+ *
+ * @param hex - The hex string to ensure is even.
+ * @returns The hex string with an even length.
+ */
+export declare function padHexToEvenLength(hex: string): string;
 //# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/utils.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/utils.d.ts.map
new file mode 100644
index 0000000..486ff61
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/utils.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../../src/utils/utils.ts"],"names":[],"mappings":"AAQA,OAAO,KAAK,EACV,aAAa,EACb,sBAAsB,EACvB,MAAM,0BAA0B,CAAC;AAElC,OAAO,KAAK,EACV,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EACjB,MAAM,UAAU,CAAC;AAElB,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAqBrE;;;;;GAKG;AACH,wBAAgB,0BAA0B,CAAC,QAAQ,EAAE,iBAAiB,qBAcrE;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAYlD,CAAC;AAEF,eAAO,MAAM,wBAAwB,eACvB,aAAa,GAAG,sBAAsB,wCAGuB,CAAC;AAE5E,eAAO,MAAM,eAAe,eACd,aAAa,GAAG,sBAAsB,+BAEE,CAAC;AAEvD,eAAO,MAAM,oBAAoB,UAAW,MAAM,QAAQ,MAAM,KAAG,MACT,CAAC;AAE3D,eAAO,MAAM,6BAA6B,UACjC,MAAM,GAAG,SAAS,QACnB,MAAM,KACX,MAEF,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,UAQpE;AAED;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAQf;AAED;;;;;GAKG;AACH,wBAAgB,gBAAgB,CAC9B,KAAK,EAAE,KAAK,GAAG;IAAE,IAAI,CAAC,EAAE,MAAM,CAAC;IAAC,KAAK,CAAC,EAAE,OAAO,CAAA;CAAE,GAChD,gBAAgB,CAQlB;AAED;;;;;GAKG;AACH,wBAAgB,qBAAqB,CACnC,YAAY,EAAE,aAAa,GAAG,sBAAsB,GACnD,aAAa,GAAG,sBAAsB,CAgBxC;AAiBD;;;;;;GAMG;AACH,wBAAgB,kBAAkB,CAAC,GAAG,EAAE,MAAM,UAM7C"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/validation.d.ts b/node_modules/@metamask/transaction-controller/dist/types/utils/validation.d.ts
similarity index 95%
rename from node_modules/@metamask/transaction-controller/dist/validation.d.ts
rename to node_modules/@metamask/transaction-controller/dist/types/utils/validation.d.ts
index e69dca1..6c1d8bc 100644
--- a/node_modules/@metamask/transaction-controller/dist/validation.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/validation.d.ts
@@ -1,4 +1,4 @@
-import type { TransactionParams } from './types';
+import { type TransactionParams } from '../types';
 /**
  * Validates whether a transaction initiated by a specific 'from' address is permitted by the origin.
  *
diff --git a/node_modules/@metamask/transaction-controller/dist/types/utils/validation.d.ts.map b/node_modules/@metamask/transaction-controller/dist/types/utils/validation.d.ts.map
new file mode 100644
index 0000000..870a271
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types/utils/validation.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"validation.d.ts","sourceRoot":"","sources":["../../../src/utils/validation.ts"],"names":[],"mappings":"AAKA,OAAO,EAA2B,KAAK,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAK3E;;;;;;;;GAQG;AACH,wBAAsB,yBAAyB,CAC7C,kBAAkB,EAAE,MAAM,EAAE,EAC5B,eAAe,EAAE,MAAM,EACvB,IAAI,EAAE,MAAM,EACZ,MAAM,EAAE,MAAM,iBAqBf;AAED;;;;;;GAMG;AACH,wBAAgB,gBAAgB,CAC9B,QAAQ,EAAE,iBAAiB,EAC3B,mBAAmB,UAAO,QAS3B"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.d.ts.map b/node_modules/@metamask/transaction-controller/dist/utils.d.ts.map
deleted file mode 100644
index f2a1de9..0000000
--- a/node_modules/@metamask/transaction-controller/dist/utils.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,WAAW,IAAI,uBAAuB,EAAE,MAAM,iCAAiC,CAAC;AAE9F,OAAO,KAAK,EACV,aAAa,EACb,sBAAsB,EACvB,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAC5C,OAAO,KAAK,EAAE,iBAAiB,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAElE,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAmBrE;;;;;GAKG;AACH,wBAAgB,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,qBAS5D;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAUlD,CAAC;AAEF,eAAO,MAAM,wBAAwB,eACvB,aAAa,GAAG,sBAAsB,wCAGuB,CAAC;AAE5E,eAAO,MAAM,eAAe,eACd,aAAa,GAAG,sBAAsB,+BAEE,CAAC;AAEvD,eAAO,MAAM,oBAAoB,UAAW,MAAM,QAAQ,MAAM,KAAG,MACF,CAAC;AAElE,eAAO,MAAM,6BAA6B,UACjC,MAAM,GAAG,SAAS,QACnB,MAAM,KACX,MAEF,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,UAQpE;AAED;;;;;;;GAOG;AACH,wBAAgB,uCAAuC,CACrD,WAAW,EAAE,MAAM,EACnB,iBAAiB,EAAE,iBAAiB,EACpC,YAAY,EAAE,eAAe,EAAE,GAC9B,uBAAuB,EAAE,CAsB3B;AAED;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAQf"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.js b/node_modules/@metamask/transaction-controller/dist/utils.js
deleted file mode 100644
index ff87b64..0000000
--- a/node_modules/@metamask/transaction-controller/dist/utils.js
+++ /dev/null
@@ -1,133 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.validateIfTransactionUnapproved = exports.getAndFormatTransactionsForNonceTracker = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.normalizeTxParams = exports.ESTIMATE_GAS_ERROR = void 0;
-const controller_utils_1 = require("@metamask/controller-utils");
-const ethereumjs_util_1 = require("ethereumjs-util");
-const types_1 = require("./types");
-exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
-const NORMALIZERS = {
-    data: (data) => (0, ethereumjs_util_1.addHexPrefix)(data),
-    from: (from) => (0, ethereumjs_util_1.addHexPrefix)(from).toLowerCase(),
-    gas: (gas) => (0, ethereumjs_util_1.addHexPrefix)(gas),
-    gasLimit: (gas) => (0, ethereumjs_util_1.addHexPrefix)(gas),
-    gasPrice: (gasPrice) => (0, ethereumjs_util_1.addHexPrefix)(gasPrice),
-    nonce: (nonce) => (0, ethereumjs_util_1.addHexPrefix)(nonce),
-    to: (to) => (0, ethereumjs_util_1.addHexPrefix)(to).toLowerCase(),
-    value: (value) => (0, ethereumjs_util_1.addHexPrefix)(value),
-    maxFeePerGas: (maxFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxFeePerGas),
-    maxPriorityFeePerGas: (maxPriorityFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxPriorityFeePerGas),
-    estimatedBaseFee: (maxPriorityFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxPriorityFeePerGas),
-    type: (type) => (type === '0x0' ? '0x0' : undefined),
-};
-/**
- * Normalizes properties on transaction params.
- *
- * @param txParams - The transaction params to normalize.
- * @returns Normalized transaction params.
- */
-function normalizeTxParams(txParams) {
-    const normalizedTxParams = { from: '' };
-    let key;
-    for (key in NORMALIZERS) {
-        if (txParams[key]) {
-            normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);
-        }
-    }
-    return normalizedTxParams;
-}
-exports.normalizeTxParams = normalizeTxParams;
-/**
- * Checks if a transaction is EIP-1559 by checking for the existence of
- * maxFeePerGas and maxPriorityFeePerGas within its parameters.
- *
- * @param txParams - Transaction params object to add.
- * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.
- */
-function isEIP1559Transaction(txParams) {
-    const hasOwnProp = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);
-    return (hasOwnProp(txParams, 'maxFeePerGas') &&
-        hasOwnProp(txParams, 'maxPriorityFeePerGas'));
-}
-exports.isEIP1559Transaction = isEIP1559Transaction;
-const validateGasValues = (gasValues) => {
-    Object.keys(gasValues).forEach((key) => {
-        const value = gasValues[key];
-        if (typeof value !== 'string' || !(0, ethereumjs_util_1.isHexString)(value)) {
-            throw new TypeError(`expected hex string for ${key} but received: ${value}`);
-        }
-    });
-};
-exports.validateGasValues = validateGasValues;
-const isFeeMarketEIP1559Values = (gasValues) => (gasValues === null || gasValues === void 0 ? void 0 : gasValues.maxFeePerGas) !== undefined ||
-    (gasValues === null || gasValues === void 0 ? void 0 : gasValues.maxPriorityFeePerGas) !== undefined;
-exports.isFeeMarketEIP1559Values = isFeeMarketEIP1559Values;
-const isGasPriceValue = (gasValues) => (gasValues === null || gasValues === void 0 ? void 0 : gasValues.gasPrice) !== undefined;
-exports.isGasPriceValue = isGasPriceValue;
-const getIncreasedPriceHex = (value, rate) => (0, ethereumjs_util_1.addHexPrefix)(`${parseInt(`${value * rate}`, 10).toString(16)}`);
-exports.getIncreasedPriceHex = getIncreasedPriceHex;
-const getIncreasedPriceFromExisting = (value, rate) => {
-    return (0, exports.getIncreasedPriceHex)((0, controller_utils_1.convertHexToDecimal)(value), rate);
-};
-exports.getIncreasedPriceFromExisting = getIncreasedPriceFromExisting;
-/**
- * Validates that the proposed value is greater than or equal to the minimum value.
- *
- * @param proposed - The proposed value.
- * @param min - The minimum value.
- * @returns The proposed value.
- * @throws Will throw if the proposed value is too low.
- */
-function validateMinimumIncrease(proposed, min) {
-    const proposedDecimal = (0, controller_utils_1.convertHexToDecimal)(proposed);
-    const minDecimal = (0, controller_utils_1.convertHexToDecimal)(min);
-    if (proposedDecimal >= minDecimal) {
-        return proposed;
-    }
-    const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;
-    throw new Error(errorMsg);
-}
-exports.validateMinimumIncrease = validateMinimumIncrease;
-/**
- * Helper function to filter and format transactions for the nonce tracker.
- *
- * @param fromAddress - Address of the account from which the transactions to filter from are sent.
- * @param transactionStatus - Status of the transactions for which to filter.
- * @param transactions - Array of transactionMeta objects that have been prefiltered.
- * @returns Array of transactions formatted for the nonce tracker.
- */
-function getAndFormatTransactionsForNonceTracker(fromAddress, transactionStatus, transactions) {
-    return transactions
-        .filter(({ status, txParams: { from } }) => status === transactionStatus &&
-        from.toLowerCase() === fromAddress.toLowerCase())
-        .map(({ status, txParams: { from, gas, value, nonce } }) => {
-        // the only value we care about is the nonce
-        // but we need to return the other values to satisfy the type
-        // TODO: refactor nonceTracker to not require this
-        return {
-            status,
-            history: [{}],
-            txParams: {
-                from: from !== null && from !== void 0 ? from : '',
-                gas: gas !== null && gas !== void 0 ? gas : '',
-                value: value !== null && value !== void 0 ? value : '',
-                nonce: nonce !== null && nonce !== void 0 ? nonce : '',
-            },
-        };
-    });
-}
-exports.getAndFormatTransactionsForNonceTracker = getAndFormatTransactionsForNonceTracker;
-/**
- * Validates that a transaction is unapproved.
- * Throws if the transaction is not unapproved.
- *
- * @param transactionMeta - The transaction metadata to check.
- * @param fnName - The name of the function calling this helper.
- */
-function validateIfTransactionUnapproved(transactionMeta, fnName) {
-    if ((transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.status) !== types_1.TransactionStatus.unapproved) {
-        throw new Error(`Can only call ${fnName} on an unapproved transaction.
-      Current tx status: ${transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.status}`);
-    }
-}
-exports.validateIfTransactionUnapproved = validateIfTransactionUnapproved;
-//# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.js.map b/node_modules/@metamask/transaction-controller/dist/utils.js.map
deleted file mode 100644
index 0e066dd..0000000
--- a/node_modules/@metamask/transaction-controller/dist/utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;AAAA,iEAAiE;AACjE,qDAA4D;AAO5D,mCAA4C;AAG/B,QAAA,kBAAkB,GAAG,kCAAkC,CAAC;AAErE,MAAM,WAAW,GAAgD;IAC/D,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,IAAI,CAAC;IAC1C,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,IAAI,CAAC,CAAC,WAAW,EAAE;IACxD,GAAG,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,GAAG,CAAC;IACvC,QAAQ,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,GAAG,CAAC;IAC5C,QAAQ,EAAE,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,QAAQ,CAAC;IACtD,KAAK,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,KAAK,CAAC;IAC7C,EAAE,EAAE,CAAC,EAAU,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,EAAE,CAAC,CAAC,WAAW,EAAE;IAClD,KAAK,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,KAAK,CAAC;IAC7C,YAAY,EAAE,CAAC,YAAoB,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,YAAY,CAAC;IAClE,oBAAoB,EAAE,CAAC,oBAA4B,EAAE,EAAE,CACrD,IAAA,8BAAY,EAAC,oBAAoB,CAAC;IACpC,gBAAgB,EAAE,CAAC,oBAA4B,EAAE,EAAE,CACjD,IAAA,8BAAY,EAAC,oBAAoB,CAAC;IACpC,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;CAC7D,CAAC;AAEF;;;;;GAKG;AACH,SAAgB,iBAAiB,CAAC,QAA2B;IAC3D,MAAM,kBAAkB,GAAsB,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;IAC3D,IAAI,GAA4B,CAAC;IACjC,KAAK,GAAG,IAAI,WAAW,EAAE;QACvB,IAAI,QAAQ,CAAC,GAA8B,CAAC,EAAE;YAC5C,kBAAkB,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAU,CAAC;SACpE;KACF;IACD,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AATD,8CASC;AAED;;;;;;GAMG;AACH,SAAgB,oBAAoB,CAAC,QAA2B;IAC9D,MAAM,UAAU,GAAG,CAAC,GAAsB,EAAE,GAAW,EAAE,EAAE,CACzD,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACjD,OAAO,CACL,UAAU,CAAC,QAAQ,EAAE,cAAc,CAAC;QACpC,UAAU,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAC7C,CAAC;AACJ,CAAC;AAPD,oDAOC;AAEM,MAAM,iBAAiB,GAAG,CAC/B,SAAiD,EACjD,EAAE;IACF,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACrC,MAAM,KAAK,GAAI,SAAiB,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,IAAA,6BAAW,EAAC,KAAK,CAAC,EAAE;YACpD,MAAM,IAAI,SAAS,CACjB,2BAA2B,GAAG,kBAAkB,KAAK,EAAE,CACxD,CAAC;SACH;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAXW,QAAA,iBAAiB,qBAW5B;AAEK,MAAM,wBAAwB,GAAG,CACtC,SAAkD,EACb,EAAE,CACvC,CAAC,SAAoC,aAApC,SAAS,uBAAT,SAAS,CAA6B,YAAY,MAAK,SAAS;IACjE,CAAC,SAAoC,aAApC,SAAS,uBAAT,SAAS,CAA6B,oBAAoB,MAAK,SAAS,CAAC;AAJ/D,QAAA,wBAAwB,4BAIuC;AAErE,MAAM,eAAe,GAAG,CAC7B,SAAkD,EACtB,EAAE,CAC9B,CAAC,SAA2B,aAA3B,SAAS,uBAAT,SAAS,CAAoB,QAAQ,MAAK,SAAS,CAAC;AAH1C,QAAA,eAAe,mBAG2B;AAEhD,MAAM,oBAAoB,GAAG,CAAC,KAAa,EAAE,IAAY,EAAU,EAAE,CAC1E,IAAA,8BAAY,EAAC,GAAG,QAAQ,CAAC,GAAG,KAAK,GAAG,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AADrD,QAAA,oBAAoB,wBACiC;AAE3D,MAAM,6BAA6B,GAAG,CAC3C,KAAyB,EACzB,IAAY,EACJ,EAAE;IACV,OAAO,IAAA,4BAAoB,EAAC,IAAA,sCAAmB,EAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;AAChE,CAAC,CAAC;AALW,QAAA,6BAA6B,iCAKxC;AAEF;;;;;;;GAOG;AACH,SAAgB,uBAAuB,CAAC,QAAgB,EAAE,GAAW;IACnE,MAAM,eAAe,GAAG,IAAA,sCAAmB,EAAC,QAAQ,CAAC,CAAC;IACtD,MAAM,UAAU,GAAG,IAAA,sCAAmB,EAAC,GAAG,CAAC,CAAC;IAC5C,IAAI,eAAe,IAAI,UAAU,EAAE;QACjC,OAAO,QAAQ,CAAC;KACjB;IACD,MAAM,QAAQ,GAAG,uBAAuB,eAAe,6CAA6C,UAAU,EAAE,CAAC;IACjH,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC5B,CAAC;AARD,0DAQC;AAED;;;;;;;GAOG;AACH,SAAgB,uCAAuC,CACrD,WAAmB,EACnB,iBAAoC,EACpC,YAA+B;IAE/B,OAAO,YAAY;SAChB,MAAM,CACL,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CACjC,MAAM,KAAK,iBAAiB;QAC5B,IAAI,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE,CACnD;SACA,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;QACzD,4CAA4C;QAC5C,6DAA6D;QAC7D,kDAAkD;QAClD,OAAO;YACL,MAAM;YACN,OAAO,EAAE,CAAC,EAAE,CAAC;YACb,QAAQ,EAAE;gBACR,IAAI,EAAE,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,EAAE;gBAChB,GAAG,EAAE,GAAG,aAAH,GAAG,cAAH,GAAG,GAAI,EAAE;gBACd,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE;gBAClB,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE;aACnB;SACF,CAAC;IACJ,CAAC,CAAC,CAAC;AACP,CAAC;AA1BD,0FA0BC;AAED;;;;;;GAMG;AACH,SAAgB,+BAA+B,CAC7C,eAA4C,EAC5C,MAAc;IAEd,IAAI,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,MAAM,MAAK,yBAAiB,CAAC,UAAU,EAAE;QAC5D,MAAM,IAAI,KAAK,CACb,iBAAiB,MAAM;2BACF,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,MAAM,EAAE,CAC/C,CAAC;KACH;AACH,CAAC;AAVD,0EAUC","sourcesContent":["import { convertHexToDecimal } from '@metamask/controller-utils';\nimport { addHexPrefix, isHexString } from 'ethereumjs-util';\nimport type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';\n\nimport type {\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from './TransactionController';\nimport { TransactionStatus } from './types';\nimport type { TransactionParams, TransactionMeta } from './types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst NORMALIZERS: { [param in keyof TransactionParams]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasLimit: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n  maxFeePerGas: (maxFeePerGas: string) => addHexPrefix(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  type: (type: string) => (type === '0x0' ? '0x0' : undefined),\n};\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param txParams - The transaction params to normalize.\n * @returns Normalized transaction params.\n */\nexport function normalizeTxParams(txParams: TransactionParams) {\n  const normalizedTxParams: TransactionParams = { from: '' };\n  let key: keyof TransactionParams;\n  for (key in NORMALIZERS) {\n    if (txParams[key as keyof TransactionParams]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]) as never;\n    }\n  }\n  return normalizedTxParams;\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param txParams - Transaction params object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport function isEIP1559Transaction(txParams: TransactionParams): boolean {\n  const hasOwnProp = (obj: TransactionParams, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(txParams, 'maxFeePerGas') &&\n    hasOwnProp(txParams, 'maxPriorityFeePerGas')\n  );\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\nexport const isFeeMarketEIP1559Values = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is FeeMarketEIP1559Values =>\n  (gasValues as FeeMarketEIP1559Values)?.maxFeePerGas !== undefined ||\n  (gasValues as FeeMarketEIP1559Values)?.maxPriorityFeePerGas !== undefined;\n\nexport const isGasPriceValue = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is GasPriceValue =>\n  (gasValues as GasPriceValue)?.gasPrice !== undefined;\n\nexport const getIncreasedPriceHex = (value: number, rate: number): string =>\n  addHexPrefix(`${parseInt(`${value * rate}`, 10).toString(16)}`);\n\nexport const getIncreasedPriceFromExisting = (\n  value: string | undefined,\n  rate: number,\n): string => {\n  return getIncreasedPriceHex(convertHexToDecimal(value), rate);\n};\n\n/**\n * Validates that the proposed value is greater than or equal to the minimum value.\n *\n * @param proposed - The proposed value.\n * @param min - The minimum value.\n * @returns The proposed value.\n * @throws Will throw if the proposed value is too low.\n */\nexport function validateMinimumIncrease(proposed: string, min: string) {\n  const proposedDecimal = convertHexToDecimal(proposed);\n  const minDecimal = convertHexToDecimal(min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\n\n/**\n * Helper function to filter and format transactions for the nonce tracker.\n *\n * @param fromAddress - Address of the account from which the transactions to filter from are sent.\n * @param transactionStatus - Status of the transactions for which to filter.\n * @param transactions - Array of transactionMeta objects that have been prefiltered.\n * @returns Array of transactions formatted for the nonce tracker.\n */\nexport function getAndFormatTransactionsForNonceTracker(\n  fromAddress: string,\n  transactionStatus: TransactionStatus,\n  transactions: TransactionMeta[],\n): NonceTrackerTransaction[] {\n  return transactions\n    .filter(\n      ({ status, txParams: { from } }) =>\n        status === transactionStatus &&\n        from.toLowerCase() === fromAddress.toLowerCase(),\n    )\n    .map(({ status, txParams: { from, gas, value, nonce } }) => {\n      // the only value we care about is the nonce\n      // but we need to return the other values to satisfy the type\n      // TODO: refactor nonceTracker to not require this\n      return {\n        status,\n        history: [{}],\n        txParams: {\n          from: from ?? '',\n          gas: gas ?? '',\n          value: value ?? '',\n          nonce: nonce ?? '',\n        },\n      };\n    });\n}\n\n/**\n * Validates that a transaction is unapproved.\n * Throws if the transaction is not unapproved.\n *\n * @param transactionMeta - The transaction metadata to check.\n * @param fnName - The name of the function calling this helper.\n */\nexport function validateIfTransactionUnapproved(\n  transactionMeta: TransactionMeta | undefined,\n  fnName: string,\n) {\n  if (transactionMeta?.status !== TransactionStatus.unapproved) {\n    throw new Error(\n      `Can only call ${fnName} on an unapproved transaction.\n      Current tx status: ${transactionMeta?.status}`,\n    );\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/etherscan.js b/node_modules/@metamask/transaction-controller/dist/utils/etherscan.js
new file mode 100644
index 0000000..070f8a2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/etherscan.js
@@ -0,0 +1,14 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+var _chunkFDUCRHYTjs = require('../chunk-FDUCRHYT.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+
+exports.fetchEtherscanTokenTransactions = _chunkFDUCRHYTjs.fetchEtherscanTokenTransactions; exports.fetchEtherscanTransactions = _chunkFDUCRHYTjs.fetchEtherscanTransactions; exports.getEtherscanApiHost = _chunkFDUCRHYTjs.getEtherscanApiHost;
+//# sourceMappingURL=etherscan.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/etherscan.js.map b/node_modules/@metamask/transaction-controller/dist/utils/etherscan.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/etherscan.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/etherscan.mjs b/node_modules/@metamask/transaction-controller/dist/utils/etherscan.mjs
new file mode 100644
index 0000000..babf30f
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/etherscan.mjs
@@ -0,0 +1,14 @@
+import {
+  fetchEtherscanTokenTransactions,
+  fetchEtherscanTransactions,
+  getEtherscanApiHost
+} from "../chunk-QZLPYOGC.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  fetchEtherscanTokenTransactions,
+  fetchEtherscanTransactions,
+  getEtherscanApiHost
+};
+//# sourceMappingURL=etherscan.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/etherscan.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/etherscan.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/etherscan.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.js b/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.js
new file mode 100644
index 0000000..5184d4d
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.js
@@ -0,0 +1,9 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunk7LXE4KHVjs = require('../chunk-7LXE4KHV.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.validateConfirmedExternalTransaction = _chunk7LXE4KHVjs.validateConfirmedExternalTransaction;
+//# sourceMappingURL=external-transactions.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.js.map b/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.mjs b/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.mjs
new file mode 100644
index 0000000..e4481a1
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.mjs
@@ -0,0 +1,9 @@
+import {
+  validateConfirmedExternalTransaction
+} from "../chunk-FRKQ3Z2L.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  validateConfirmedExternalTransaction
+};
+//# sourceMappingURL=external-transactions.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/external-transactions.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.js b/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.js
new file mode 100644
index 0000000..2df1569
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.js
@@ -0,0 +1,16 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+var _chunkKNYSD4JPjs = require('../chunk-KNYSD4JP.js');
+require('../chunk-C2LNDHP4.js');
+require('../chunk-UGFBA4GV.js');
+require('../chunk-EMDU4XLM.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+exports.gweiDecimalToWeiHex = _chunkKNYSD4JPjs.gweiDecimalToWeiHex; exports.updateGasFees = _chunkKNYSD4JPjs.updateGasFees;
+//# sourceMappingURL=gas-fees.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.js.map b/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.mjs b/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.mjs
new file mode 100644
index 0000000..bf14751
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.mjs
@@ -0,0 +1,16 @@
+import {
+  gweiDecimalToWeiHex,
+  updateGasFees
+} from "../chunk-4M7FHI4S.mjs";
+import "../chunk-ZGUNOEUQ.mjs";
+import "../chunk-J56A7UCK.mjs";
+import "../chunk-AGJNOOBN.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  gweiDecimalToWeiHex,
+  updateGasFees
+};
+//# sourceMappingURL=gas-fees.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas-fees.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.js b/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.js
new file mode 100644
index 0000000..92a4bb8
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.js
@@ -0,0 +1,11 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+var _chunkEMDU4XLMjs = require('../chunk-EMDU4XLM.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+exports.getGasFeeFlow = _chunkEMDU4XLMjs.getGasFeeFlow; exports.mergeGasFeeEstimates = _chunkEMDU4XLMjs.mergeGasFeeEstimates;
+//# sourceMappingURL=gas-flow.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.js.map b/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.mjs b/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.mjs
new file mode 100644
index 0000000..3fe5cae
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.mjs
@@ -0,0 +1,11 @@
+import {
+  getGasFeeFlow,
+  mergeGasFeeEstimates
+} from "../chunk-AGJNOOBN.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  getGasFeeFlow,
+  mergeGasFeeEstimates
+};
+//# sourceMappingURL=gas-flow.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas-flow.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas.js b/node_modules/@metamask/transaction-controller/dist/utils/gas.js
new file mode 100644
index 0000000..3c53d92
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas.js
@@ -0,0 +1,20 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+
+
+
+var _chunkV72C4MCRjs = require('../chunk-V72C4MCR.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+
+
+
+
+exports.DEFAULT_GAS_MULTIPLIER = _chunkV72C4MCRjs.DEFAULT_GAS_MULTIPLIER; exports.FIXED_GAS = _chunkV72C4MCRjs.FIXED_GAS; exports.addGasBuffer = _chunkV72C4MCRjs.addGasBuffer; exports.estimateGas = _chunkV72C4MCRjs.estimateGas; exports.log = _chunkV72C4MCRjs.log; exports.updateGas = _chunkV72C4MCRjs.updateGas;
+//# sourceMappingURL=gas.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas.js.map b/node_modules/@metamask/transaction-controller/dist/utils/gas.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas.mjs b/node_modules/@metamask/transaction-controller/dist/utils/gas.mjs
new file mode 100644
index 0000000..6d7ffaa
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas.mjs
@@ -0,0 +1,20 @@
+import {
+  DEFAULT_GAS_MULTIPLIER,
+  FIXED_GAS,
+  addGasBuffer,
+  estimateGas,
+  log,
+  updateGas
+} from "../chunk-5G6OHAXI.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  DEFAULT_GAS_MULTIPLIER,
+  FIXED_GAS,
+  addGasBuffer,
+  estimateGas,
+  log,
+  updateGas
+};
+//# sourceMappingURL=gas.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/gas.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/gas.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/gas.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/history.js b/node_modules/@metamask/transaction-controller/dist/utils/history.js
new file mode 100644
index 0000000..e3991c0
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/history.js
@@ -0,0 +1,10 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+var _chunkQP75SWIQjs = require('../chunk-QP75SWIQ.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+exports.addInitialHistorySnapshot = _chunkQP75SWIQjs.addInitialHistorySnapshot; exports.updateTransactionHistory = _chunkQP75SWIQjs.updateTransactionHistory;
+//# sourceMappingURL=history.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/history.js.map b/node_modules/@metamask/transaction-controller/dist/utils/history.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/history.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/history.mjs b/node_modules/@metamask/transaction-controller/dist/utils/history.mjs
new file mode 100644
index 0000000..8ea7abc
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/history.mjs
@@ -0,0 +1,10 @@
+import {
+  addInitialHistorySnapshot,
+  updateTransactionHistory
+} from "../chunk-XGRAHX6T.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  addInitialHistorySnapshot,
+  updateTransactionHistory
+};
+//# sourceMappingURL=history.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/history.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/history.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/history.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.js b/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.js
new file mode 100644
index 0000000..ac0e166
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.js
@@ -0,0 +1,11 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+var _chunk2XKEAKQGjs = require('../chunk-2XKEAKQG.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+exports.getTransactionLayer1GasFee = _chunk2XKEAKQGjs.getTransactionLayer1GasFee; exports.updateTransactionLayer1GasFee = _chunk2XKEAKQGjs.updateTransactionLayer1GasFee;
+//# sourceMappingURL=layer1-gas-fee-flow.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.js.map b/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.mjs b/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.mjs
new file mode 100644
index 0000000..79b688d
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.mjs
@@ -0,0 +1,11 @@
+import {
+  getTransactionLayer1GasFee,
+  updateTransactionLayer1GasFee
+} from "../chunk-NOHEXQ7Y.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  getTransactionLayer1GasFee,
+  updateTransactionLayer1GasFee
+};
+//# sourceMappingURL=layer1-gas-fee-flow.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/layer1-gas-fee-flow.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/nonce.js b/node_modules/@metamask/transaction-controller/dist/utils/nonce.js
new file mode 100644
index 0000000..c72fa13
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/nonce.js
@@ -0,0 +1,11 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+var _chunkZNZEJDOEjs = require('../chunk-ZNZEJDOE.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+exports.getAndFormatTransactionsForNonceTracker = _chunkZNZEJDOEjs.getAndFormatTransactionsForNonceTracker; exports.getNextNonce = _chunkZNZEJDOEjs.getNextNonce;
+//# sourceMappingURL=nonce.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/nonce.js.map b/node_modules/@metamask/transaction-controller/dist/utils/nonce.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/nonce.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/nonce.mjs b/node_modules/@metamask/transaction-controller/dist/utils/nonce.mjs
new file mode 100644
index 0000000..05d38d8
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/nonce.mjs
@@ -0,0 +1,11 @@
+import {
+  getAndFormatTransactionsForNonceTracker,
+  getNextNonce
+} from "../chunk-NHRBO3LU.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  getAndFormatTransactionsForNonceTracker,
+  getNextNonce
+};
+//# sourceMappingURL=nonce.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/nonce.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/nonce.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/nonce.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.js b/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.js
new file mode 100644
index 0000000..79baf33
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.js
@@ -0,0 +1,11 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkKT6UAKBBjs = require('../chunk-KT6UAKBB.js');
+require('../chunk-HMOSP33F.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+exports.simulateTransactions = _chunkKT6UAKBBjs.simulateTransactions;
+//# sourceMappingURL=simulation-api.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.js.map b/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.mjs b/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.mjs
new file mode 100644
index 0000000..5b60827
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.mjs
@@ -0,0 +1,11 @@
+import {
+  simulateTransactions
+} from "../chunk-K4KOSAGM.mjs";
+import "../chunk-HQSNKCXI.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  simulateTransactions
+};
+//# sourceMappingURL=simulation-api.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/simulation-api.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/simulation.js b/node_modules/@metamask/transaction-controller/dist/utils/simulation.js
new file mode 100644
index 0000000..db03781
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/simulation.js
@@ -0,0 +1,17 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+var _chunkX3KACH5Pjs = require('../chunk-X3KACH5P.js');
+require('../chunk-KT6UAKBB.js');
+require('../chunk-HMOSP33F.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+
+exports.SupportedToken = _chunkX3KACH5Pjs.SupportedToken; exports.getEvents = _chunkX3KACH5Pjs.getEvents; exports.getSimulationData = _chunkX3KACH5Pjs.getSimulationData;
+//# sourceMappingURL=simulation.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/simulation.js.map b/node_modules/@metamask/transaction-controller/dist/utils/simulation.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/simulation.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/simulation.mjs b/node_modules/@metamask/transaction-controller/dist/utils/simulation.mjs
new file mode 100644
index 0000000..992e27c
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/simulation.mjs
@@ -0,0 +1,17 @@
+import {
+  SupportedToken,
+  getEvents,
+  getSimulationData
+} from "../chunk-MDRMMUMS.mjs";
+import "../chunk-K4KOSAGM.mjs";
+import "../chunk-HQSNKCXI.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  SupportedToken,
+  getEvents,
+  getSimulationData
+};
+//# sourceMappingURL=simulation.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/simulation.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/simulation.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/simulation.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/swaps.js b/node_modules/@metamask/transaction-controller/dist/utils/swaps.js
new file mode 100644
index 0000000..bc91bd1
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/swaps.js
@@ -0,0 +1,24 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+
+
+
+
+var _chunkC2LNDHP4js = require('../chunk-C2LNDHP4.js');
+require('../chunk-UGFBA4GV.js');
+require('../chunk-UGN7PBON.js');
+require('../chunk-S6VGOPUY.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+
+
+
+
+
+exports.DEFAULT_TOKEN_ADDRESS = _chunkC2LNDHP4js.DEFAULT_TOKEN_ADDRESS; exports.SWAPS_CHAINID_DEFAULT_TOKEN_MAP = _chunkC2LNDHP4js.SWAPS_CHAINID_DEFAULT_TOKEN_MAP; exports.SWAP_TRANSACTION_TYPES = _chunkC2LNDHP4js.SWAP_TRANSACTION_TYPES; exports.UPDATE_POST_TX_BALANCE_ATTEMPTS = _chunkC2LNDHP4js.UPDATE_POST_TX_BALANCE_ATTEMPTS; exports.UPDATE_POST_TX_BALANCE_TIMEOUT = _chunkC2LNDHP4js.UPDATE_POST_TX_BALANCE_TIMEOUT; exports.updatePostTransactionBalance = _chunkC2LNDHP4js.updatePostTransactionBalance; exports.updateSwapsTransaction = _chunkC2LNDHP4js.updateSwapsTransaction;
+//# sourceMappingURL=swaps.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/swaps.js.map b/node_modules/@metamask/transaction-controller/dist/utils/swaps.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/swaps.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/swaps.mjs b/node_modules/@metamask/transaction-controller/dist/utils/swaps.mjs
new file mode 100644
index 0000000..8fc8f13
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/swaps.mjs
@@ -0,0 +1,24 @@
+import {
+  DEFAULT_TOKEN_ADDRESS,
+  SWAPS_CHAINID_DEFAULT_TOKEN_MAP,
+  SWAP_TRANSACTION_TYPES,
+  UPDATE_POST_TX_BALANCE_ATTEMPTS,
+  UPDATE_POST_TX_BALANCE_TIMEOUT,
+  updatePostTransactionBalance,
+  updateSwapsTransaction
+} from "../chunk-ZGUNOEUQ.mjs";
+import "../chunk-J56A7UCK.mjs";
+import "../chunk-O6ZZVIFH.mjs";
+import "../chunk-UQQWZT6C.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  DEFAULT_TOKEN_ADDRESS,
+  SWAPS_CHAINID_DEFAULT_TOKEN_MAP,
+  SWAP_TRANSACTION_TYPES,
+  UPDATE_POST_TX_BALANCE_ATTEMPTS,
+  UPDATE_POST_TX_BALANCE_TIMEOUT,
+  updatePostTransactionBalance,
+  updateSwapsTransaction
+};
+//# sourceMappingURL=swaps.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/swaps.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/swaps.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/swaps.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.js b/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.js
new file mode 100644
index 0000000..23d3743
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.js
@@ -0,0 +1,11 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+var _chunkSD6CWFDFjs = require('../chunk-SD6CWFDF.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+exports.ESTIMATE_GAS_ERROR = _chunkSD6CWFDFjs.ESTIMATE_GAS_ERROR; exports.determineTransactionType = _chunkSD6CWFDFjs.determineTransactionType;
+//# sourceMappingURL=transaction-type.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.js.map b/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.mjs b/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.mjs
new file mode 100644
index 0000000..ea36bf4
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.mjs
@@ -0,0 +1,11 @@
+import {
+  ESTIMATE_GAS_ERROR,
+  determineTransactionType
+} from "../chunk-KG4UW4K4.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  ESTIMATE_GAS_ERROR,
+  determineTransactionType
+};
+//# sourceMappingURL=transaction-type.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/transaction-type.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/utils.js b/node_modules/@metamask/transaction-controller/dist/utils/utils.js
new file mode 100644
index 0000000..c42c23d
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/utils.js
@@ -0,0 +1,33 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+
+
+
+
+
+
+
+
+
+
+var _chunkUGFBA4GVjs = require('../chunk-UGFBA4GV.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+exports.ESTIMATE_GAS_ERROR = _chunkUGFBA4GVjs.ESTIMATE_GAS_ERROR; exports.getIncreasedPriceFromExisting = _chunkUGFBA4GVjs.getIncreasedPriceFromExisting; exports.getIncreasedPriceHex = _chunkUGFBA4GVjs.getIncreasedPriceHex; exports.isEIP1559Transaction = _chunkUGFBA4GVjs.isEIP1559Transaction; exports.isFeeMarketEIP1559Values = _chunkUGFBA4GVjs.isFeeMarketEIP1559Values; exports.isGasPriceValue = _chunkUGFBA4GVjs.isGasPriceValue; exports.normalizeGasFeeValues = _chunkUGFBA4GVjs.normalizeGasFeeValues; exports.normalizeTransactionParams = _chunkUGFBA4GVjs.normalizeTransactionParams; exports.normalizeTxError = _chunkUGFBA4GVjs.normalizeTxError; exports.padHexToEvenLength = _chunkUGFBA4GVjs.padHexToEvenLength; exports.validateGasValues = _chunkUGFBA4GVjs.validateGasValues; exports.validateIfTransactionUnapproved = _chunkUGFBA4GVjs.validateIfTransactionUnapproved; exports.validateMinimumIncrease = _chunkUGFBA4GVjs.validateMinimumIncrease;
+//# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/utils.js.map b/node_modules/@metamask/transaction-controller/dist/utils/utils.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/utils.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/utils.mjs b/node_modules/@metamask/transaction-controller/dist/utils/utils.mjs
new file mode 100644
index 0000000..7bf06f5
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/utils.mjs
@@ -0,0 +1,33 @@
+import {
+  ESTIMATE_GAS_ERROR,
+  getIncreasedPriceFromExisting,
+  getIncreasedPriceHex,
+  isEIP1559Transaction,
+  isFeeMarketEIP1559Values,
+  isGasPriceValue,
+  normalizeGasFeeValues,
+  normalizeTransactionParams,
+  normalizeTxError,
+  padHexToEvenLength,
+  validateGasValues,
+  validateIfTransactionUnapproved,
+  validateMinimumIncrease
+} from "../chunk-J56A7UCK.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  ESTIMATE_GAS_ERROR,
+  getIncreasedPriceFromExisting,
+  getIncreasedPriceHex,
+  isEIP1559Transaction,
+  isFeeMarketEIP1559Values,
+  isGasPriceValue,
+  normalizeGasFeeValues,
+  normalizeTransactionParams,
+  normalizeTxError,
+  padHexToEvenLength,
+  validateGasValues,
+  validateIfTransactionUnapproved,
+  validateMinimumIncrease
+};
+//# sourceMappingURL=utils.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/utils.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/utils.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/utils.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/validation.js b/node_modules/@metamask/transaction-controller/dist/utils/validation.js
new file mode 100644
index 0000000..3f6148a
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/validation.js
@@ -0,0 +1,12 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+var _chunkVH47Q6TSjs = require('../chunk-VH47Q6TS.js');
+require('../chunk-UGFBA4GV.js');
+require('../chunk-5C3CSQAD.js');
+require('../chunk-Z4BLTVTB.js');
+
+
+
+exports.validateTransactionOrigin = _chunkVH47Q6TSjs.validateTransactionOrigin; exports.validateTxParams = _chunkVH47Q6TSjs.validateTxParams;
+//# sourceMappingURL=validation.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/validation.js.map b/node_modules/@metamask/transaction-controller/dist/utils/validation.js.map
new file mode 100644
index 0000000..a464c67
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/validation.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/validation.mjs b/node_modules/@metamask/transaction-controller/dist/utils/validation.mjs
new file mode 100644
index 0000000..5864b0a
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/validation.mjs
@@ -0,0 +1,12 @@
+import {
+  validateTransactionOrigin,
+  validateTxParams
+} from "../chunk-NM6OYEPP.mjs";
+import "../chunk-J56A7UCK.mjs";
+import "../chunk-N6JXPWLY.mjs";
+import "../chunk-XUI43LEZ.mjs";
+export {
+  validateTransactionOrigin,
+  validateTxParams
+};
+//# sourceMappingURL=validation.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils/validation.mjs.map b/node_modules/@metamask/transaction-controller/dist/utils/validation.mjs.map
new file mode 100644
index 0000000..84c51b2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/utils/validation.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/validation.d.ts.map b/node_modules/@metamask/transaction-controller/dist/validation.d.ts.map
deleted file mode 100644
index cbc4b11..0000000
--- a/node_modules/@metamask/transaction-controller/dist/validation.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"validation.d.ts","sourceRoot":"","sources":["../src/validation.ts"],"names":[],"mappings":"AAKA,OAAO,KAAK,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAGjD;;;;;;;;GAQG;AACH,wBAAsB,yBAAyB,CAC7C,kBAAkB,EAAE,MAAM,EAAE,EAC5B,eAAe,EAAE,MAAM,EACvB,IAAI,EAAE,MAAM,EACZ,MAAM,EAAE,MAAM,iBAqBf;AAED;;;;;;GAMG;AACH,wBAAgB,gBAAgB,CAC9B,QAAQ,EAAE,iBAAiB,EAC3B,mBAAmB,UAAO,QAQ3B"}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/validation.js b/node_modules/@metamask/transaction-controller/dist/validation.js
deleted file mode 100644
index e18a51e..0000000
--- a/node_modules/@metamask/transaction-controller/dist/validation.js
+++ /dev/null
@@ -1,174 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.validateTxParams = exports.validateTransactionOrigin = void 0;
-const abi_1 = require("@ethersproject/abi");
-const controller_utils_1 = require("@metamask/controller-utils");
-const metamask_eth_abis_1 = require("@metamask/metamask-eth-abis");
-const rpc_errors_1 = require("@metamask/rpc-errors");
-const utils_1 = require("./utils");
-/**
- * Validates whether a transaction initiated by a specific 'from' address is permitted by the origin.
- *
- * @param permittedAddresses - The permitted accounts for the given origin.
- * @param selectedAddress - The currently selected Ethereum address in the wallet.
- * @param from - The address from which the transaction is initiated.
- * @param origin - The origin or source of the transaction.
- * @throws Throws an error if the transaction is not permitted.
- */
-function validateTransactionOrigin(permittedAddresses, selectedAddress, from, origin) {
-    return __awaiter(this, void 0, void 0, function* () {
-        if (origin === controller_utils_1.ORIGIN_METAMASK) {
-            // Ensure the 'from' address matches the currently selected address
-            if (from !== selectedAddress) {
-                throw rpc_errors_1.rpcErrors.internal({
-                    message: `Internally initiated transaction is using invalid account.`,
-                    data: {
-                        origin,
-                        fromAddress: from,
-                        selectedAddress,
-                    },
-                });
-            }
-            return;
-        }
-        // Check if the origin has permissions to initiate transactions from the specified address
-        if (!permittedAddresses.includes(from)) {
-            throw rpc_errors_1.providerErrors.unauthorized({ data: { origin } });
-        }
-    });
-}
-exports.validateTransactionOrigin = validateTransactionOrigin;
-/**
- * Validates the transaction params for required properties and throws in
- * the event of any validation error.
- *
- * @param txParams - Transaction params object to validate.
- * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.
- */
-function validateTxParams(txParams, isEIP1559Compatible = true) {
-    validateEIP1559Compatibility(txParams, isEIP1559Compatible);
-    validateParamFrom(txParams.from);
-    validateParamRecipient(txParams);
-    validateParamValue(txParams.value);
-    validateParamData(txParams.data);
-    validateParamChainId(txParams.chainId);
-}
-exports.validateTxParams = validateTxParams;
-/**
- * Validates EIP-1559 compatibility for transaction creation.
- *
- * @param txParams - The transaction parameters to validate.
- * @param isEIP1559Compatible - Indicates if the current network supports EIP-1559.
- * @throws Throws invalid params if the transaction specifies EIP-1559 but the network does not support it.
- */
-function validateEIP1559Compatibility(txParams, isEIP1559Compatible) {
-    if ((0, utils_1.isEIP1559Transaction)(txParams) && !isEIP1559Compatible) {
-        throw rpc_errors_1.rpcErrors.invalidParams('Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559');
-    }
-}
-/**
- * Validates value property, ensuring it is a valid positive integer number
- * denominated in wei.
- *
- * @param value - The value to validate, expressed as a string.
- * @throws Throws an error if the value is not a valid positive integer
- * number denominated in wei.
- * - If the value contains a hyphen (-), it is considered invalid.
- * - If the value contains a decimal point (.), it is considered invalid.
- * - If the value is not a finite number, is NaN, or is not a safe integer, it is considered invalid.
- */
-function validateParamValue(value) {
-    if (value !== undefined) {
-        if (value.includes('-')) {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} is not a positive number.`);
-        }
-        if (value.includes('.')) {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} number must be denominated in wei.`);
-        }
-        const intValue = parseInt(value, 10);
-        const isValid = Number.isFinite(intValue) &&
-            !Number.isNaN(intValue) &&
-            !isNaN(Number(value)) &&
-            Number.isSafeInteger(intValue);
-        if (!isValid) {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} number must be a valid number.`);
-        }
-    }
-}
-/**
- * Validates the recipient address in a transaction's parameters.
- *
- * @param txParams - The transaction parameters object to validate.
- * @throws Throws an error if the recipient address is invalid:
- * - If the recipient address is an empty string ('0x') or undefined and the transaction contains data,
- * the "to" field is removed from the transaction parameters.
- * - If the recipient address is not a valid hexadecimal Ethereum address, an error is thrown.
- */
-function validateParamRecipient(txParams) {
-    if (txParams.to === '0x' || txParams.to === undefined) {
-        if (txParams.data) {
-            delete txParams.to;
-        }
-        else {
-            throw new Error(`Invalid "to" address: ${txParams.to} must be a valid string.`);
-        }
-    }
-    else if (txParams.to !== undefined && !(0, controller_utils_1.isValidHexAddress)(txParams.to)) {
-        throw new Error(`Invalid "to" address: ${txParams.to} must be a valid string.`);
-    }
-}
-/**
- * Validates the recipient address in a transaction's parameters.
- *
- * @param from - The from property to validate.
- * @throws Throws an error if the recipient address is invalid:
- * - If the recipient address is an empty string ('0x') or undefined and the transaction contains data,
- * the "to" field is removed from the transaction parameters.
- * - If the recipient address is not a valid hexadecimal Ethereum address, an error is thrown.
- */
-function validateParamFrom(from) {
-    if (!from || typeof from !== 'string' || !(0, controller_utils_1.isValidHexAddress)(from)) {
-        throw new Error(`Invalid "from" address: ${from} must be a valid string.`);
-    }
-}
-/**
- * Validates input data for transactions.
- *
- * @param value - The input data to validate.
- * @throws Throws invalid params if the input data is invalid.
- */
-function validateParamData(value) {
-    if (value) {
-        const ERC20Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC20);
-        try {
-            ERC20Interface.parseTransaction({ data: value });
-        }
-        catch (error) {
-            if (error.message.match(/BUFFER_OVERRUN/u)) {
-                throw rpc_errors_1.rpcErrors.invalidParams('Invalid transaction params: data out-of-bounds, BUFFER_OVERRUN.');
-            }
-        }
-    }
-}
-/**
- * Validates chainId type.
- *
- * @param chainId - The chainId to validate.
- */
-function validateParamChainId(chainId) {
-    if (chainId !== undefined &&
-        typeof chainId !== 'number' &&
-        typeof chainId !== 'string') {
-        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid transaction params: chainId is not a Number or hex string. got: (${chainId})`);
-    }
-}
-//# sourceMappingURL=validation.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/validation.js.map b/node_modules/@metamask/transaction-controller/dist/validation.js.map
deleted file mode 100644
index fbb6b2c..0000000
--- a/node_modules/@metamask/transaction-controller/dist/validation.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"validation.js","sourceRoot":"","sources":["../src/validation.ts"],"names":[],"mappings":"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","sourcesContent":["import { Interface } from '@ethersproject/abi';\nimport { ORIGIN_METAMASK, isValidHexAddress } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport { providerErrors, rpcErrors } from '@metamask/rpc-errors';\n\nimport type { TransactionParams } from './types';\nimport { isEIP1559Transaction } from './utils';\n\n/**\n * Validates whether a transaction initiated by a specific 'from' address is permitted by the origin.\n *\n * @param permittedAddresses - The permitted accounts for the given origin.\n * @param selectedAddress - The currently selected Ethereum address in the wallet.\n * @param from - The address from which the transaction is initiated.\n * @param origin - The origin or source of the transaction.\n * @throws Throws an error if the transaction is not permitted.\n */\nexport async function validateTransactionOrigin(\n  permittedAddresses: string[],\n  selectedAddress: string,\n  from: string,\n  origin: string,\n) {\n  if (origin === ORIGIN_METAMASK) {\n    // Ensure the 'from' address matches the currently selected address\n    if (from !== selectedAddress) {\n      throw rpcErrors.internal({\n        message: `Internally initiated transaction is using invalid account.`,\n        data: {\n          origin,\n          fromAddress: from,\n          selectedAddress,\n        },\n      });\n    }\n    return;\n  }\n\n  // Check if the origin has permissions to initiate transactions from the specified address\n  if (!permittedAddresses.includes(from)) {\n    throw providerErrors.unauthorized({ data: { origin } });\n  }\n}\n\n/**\n * Validates the transaction params for required properties and throws in\n * the event of any validation error.\n *\n * @param txParams - Transaction params object to validate.\n * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.\n */\nexport function validateTxParams(\n  txParams: TransactionParams,\n  isEIP1559Compatible = true,\n) {\n  validateEIP1559Compatibility(txParams, isEIP1559Compatible);\n  validateParamFrom(txParams.from);\n  validateParamRecipient(txParams);\n  validateParamValue(txParams.value);\n  validateParamData(txParams.data);\n  validateParamChainId(txParams.chainId);\n}\n\n/**\n * Validates EIP-1559 compatibility for transaction creation.\n *\n * @param txParams - The transaction parameters to validate.\n * @param isEIP1559Compatible - Indicates if the current network supports EIP-1559.\n * @throws Throws invalid params if the transaction specifies EIP-1559 but the network does not support it.\n */\nfunction validateEIP1559Compatibility(\n  txParams: TransactionParams,\n  isEIP1559Compatible: boolean,\n) {\n  if (isEIP1559Transaction(txParams) && !isEIP1559Compatible) {\n    throw rpcErrors.invalidParams(\n      'Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559',\n    );\n  }\n}\n\n/**\n * Validates value property, ensuring it is a valid positive integer number\n * denominated in wei.\n *\n * @param value - The value to validate, expressed as a string.\n * @throws Throws an error if the value is not a valid positive integer\n * number denominated in wei.\n * - If the value contains a hyphen (-), it is considered invalid.\n * - If the value contains a decimal point (.), it is considered invalid.\n * - If the value is not a finite number, is NaN, or is not a safe integer, it is considered invalid.\n */\nfunction validateParamValue(value?: string) {\n  if (value !== undefined) {\n    if (value.includes('-')) {\n      throw rpcErrors.invalidParams(\n        `Invalid \"value\": ${value} is not a positive number.`,\n      );\n    }\n\n    if (value.includes('.')) {\n      throw rpcErrors.invalidParams(\n        `Invalid \"value\": ${value} number must be denominated in wei.`,\n      );\n    }\n    const intValue = parseInt(value, 10);\n    const isValid =\n      Number.isFinite(intValue) &&\n      !Number.isNaN(intValue) &&\n      !isNaN(Number(value)) &&\n      Number.isSafeInteger(intValue);\n    if (!isValid) {\n      throw rpcErrors.invalidParams(\n        `Invalid \"value\": ${value} number must be a valid number.`,\n      );\n    }\n  }\n}\n\n/**\n * Validates the recipient address in a transaction's parameters.\n *\n * @param txParams - The transaction parameters object to validate.\n * @throws Throws an error if the recipient address is invalid:\n * - If the recipient address is an empty string ('0x') or undefined and the transaction contains data,\n * the \"to\" field is removed from the transaction parameters.\n * - If the recipient address is not a valid hexadecimal Ethereum address, an error is thrown.\n */\nfunction validateParamRecipient(txParams: TransactionParams) {\n  if (txParams.to === '0x' || txParams.to === undefined) {\n    if (txParams.data) {\n      delete txParams.to;\n    } else {\n      throw new Error(\n        `Invalid \"to\" address: ${txParams.to} must be a valid string.`,\n      );\n    }\n  } else if (txParams.to !== undefined && !isValidHexAddress(txParams.to)) {\n    throw new Error(\n      `Invalid \"to\" address: ${txParams.to} must be a valid string.`,\n    );\n  }\n}\n\n/**\n * Validates the recipient address in a transaction's parameters.\n *\n * @param from - The from property to validate.\n * @throws Throws an error if the recipient address is invalid:\n * - If the recipient address is an empty string ('0x') or undefined and the transaction contains data,\n * the \"to\" field is removed from the transaction parameters.\n * - If the recipient address is not a valid hexadecimal Ethereum address, an error is thrown.\n */\nfunction validateParamFrom(from: string) {\n  if (!from || typeof from !== 'string' || !isValidHexAddress(from)) {\n    throw new Error(`Invalid \"from\" address: ${from} must be a valid string.`);\n  }\n}\n\n/**\n * Validates input data for transactions.\n *\n * @param value - The input data to validate.\n * @throws Throws invalid params if the input data is invalid.\n */\nfunction validateParamData(value?: string) {\n  if (value) {\n    const ERC20Interface = new Interface(abiERC20);\n    try {\n      ERC20Interface.parseTransaction({ data: value });\n    } catch (error: any) {\n      if (error.message.match(/BUFFER_OVERRUN/u)) {\n        throw rpcErrors.invalidParams(\n          'Invalid transaction params: data out-of-bounds, BUFFER_OVERRUN.',\n        );\n      }\n    }\n  }\n}\n\n/**\n * Validates chainId type.\n *\n * @param chainId - The chainId to validate.\n */\nfunction validateParamChainId(chainId: number | string | undefined) {\n  if (\n    chainId !== undefined &&\n    typeof chainId !== 'number' &&\n    typeof chainId !== 'string'\n  ) {\n    throw rpcErrors.invalidParams(\n      `Invalid transaction params: chainId is not a Number or hex string. got: (${chainId})`,\n    );\n  }\n}\n"]}
\ No newline at end of file
