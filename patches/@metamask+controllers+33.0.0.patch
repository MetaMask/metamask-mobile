diff --git a/node_modules/@metamask/controllers/dist/keyring/KeyringController.js b/node_modules/@metamask/controllers/dist/keyring/KeyringController.js
index 906985d..6984571 100644
--- a/node_modules/@metamask/controllers/dist/keyring/KeyringController.js
+++ b/node_modules/@metamask/controllers/dist/keyring/KeyringController.js
@@ -125,6 +125,7 @@ class KeyringController extends BaseController_1.BaseController {
     }
     /**
      * Adds a new account to the default (first) HD seed phrase keyring.
+     * Patched to not auto switch accounts.
      *
      * @returns Promise resolving to current state when the account is added.
      */
@@ -140,12 +141,13 @@ class KeyringController extends BaseController_1.BaseController {
             const newAccounts = yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts();
             yield this.verifySeedPhrase();
             this.updateIdentities(newAccounts);
+            let addedAccountAddress = '';
             newAccounts.forEach((selectedAddress) => {
                 if (!oldAccounts.includes(selectedAddress)) {
-                    this.setSelectedAddress(selectedAddress);
+                    addedAccountAddress = selectedAddress
                 }
             });
-            return this.fullUpdate();
+            return { addedAccountAddress, keyringState: this.fullUpdate() };
         });
     }
     /**
@@ -313,8 +315,8 @@ class KeyringController extends BaseController_1.BaseController {
             const accounts = yield newKeyring.getAccounts();
             const allAccounts = yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts();
             this.updateIdentities(allAccounts);
-            this.setSelectedAddress(accounts[0]);
-            return this.fullUpdate();
+            const importedAccountAddress = accounts[0];
+            return { importedAccountAddress, keyringState: this.fullUpdate() };
         });
     }
     /**
