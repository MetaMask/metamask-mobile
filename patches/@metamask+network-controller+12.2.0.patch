diff --git a/node_modules/@metamask/network-controller/dist/.patch.txt b/node_modules/@metamask/network-controller/dist/.patch.txt
new file mode 100644
index 0000000..9322b99
--- /dev/null
+++ b/node_modules/@metamask/network-controller/dist/.patch.txt
@@ -0,0 +1,5 @@
+PATCH GENERATED on NetwokController.js is needed because
+controller in general are not prepared to be destroyed.
+We are still considering the approach to take.
+If it make sense the controllers be able to be destroyed or 
+refactor the vault corruption flow, without destroy all Engine instance
diff --git a/node_modules/@metamask/network-controller/dist/NetworkController.d.ts b/node_modules/@metamask/network-controller/dist/NetworkController.d.ts
index 6efbfe0..f51221a 100644
--- a/node_modules/@metamask/network-controller/dist/NetworkController.d.ts
+++ b/node_modules/@metamask/network-controller/dist/NetworkController.d.ts
@@ -69,7 +69,7 @@ export declare type NetworkConfiguration = {
 /**
  * The collection of network configurations in state.
  */
-declare type NetworkConfigurations = Record<NetworkConfigurationId, NetworkConfiguration & {
+export declare type NetworkConfigurations = Record<NetworkConfigurationId, NetworkConfiguration & {
     id: NetworkConfigurationId;
 }>;
 /**
diff --git a/node_modules/@metamask/network-controller/dist/NetworkController.js b/node_modules/@metamask/network-controller/dist/NetworkController.js
index 596ed70..5bd7d6f 100644
--- a/node_modules/@metamask/network-controller/dist/NetworkController.js
+++ b/node_modules/@metamask/network-controller/dist/NetworkController.js
@@ -22,7 +22,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _NetworkController_instances, _NetworkController_ethQuery, _NetworkController_infuraProjectId, _NetworkController_trackMetaMetricsEvent, _NetworkController_previousProviderConfig, _NetworkController_providerProxy, _NetworkController_provider, _NetworkController_blockTrackerProxy, _NetworkController_autoManagedNetworkClientRegistry, _NetworkController_refreshNetwork, _NetworkController_getNetworkId, _NetworkController_getLatestBlock, _NetworkController_determineEIP1559Compatibility, _NetworkController_ensureAutoManagedNetworkClientRegistryPopulated, _NetworkController_createAutoManagedNetworkClientRegistry, _NetworkController_buildIdentifiedInfuraNetworkClientConfigurations, _NetworkController_buildIdentifiedCustomNetworkClientConfigurations, _NetworkController_buildIdentifiedNetworkClientConfigurationsFromProviderConfig, _NetworkController_applyNetworkSelection;
+var _NetworkController_instances, _NetworkController_ethQuery, _NetworkController_infuraProjectId, _NetworkController_trackMetaMetricsEvent, _NetworkController_previousProviderConfig, _NetworkController_providerProxy, _NetworkController_provider, _NetworkController_blockTrackerProxy, _NetworkController_autoManagedNetworkClientRegistry, _NetworkController_refreshNetwork, _NetworkController_getNetworkId, _NetworkController_getLatestBlock, _NetworkController_determineEIP1559Compatibility, _NetworkController_ensureAutoManagedNetworkClientRegistryPopulated, _NetworkController_createAutoManagedNetworkClientRegistry, _NetworkController_buildIdentifiedInfuraNetworkClientConfigurations, _NetworkController_buildIdentifiedCustomNetworkClientConfigurations, _NetworkController_buildIdentifiedNetworkClientConfigurationsFromProviderConfig, _NetworkController_applyNetworkSelection, _NetworkController_destroyed;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.NetworkController = exports.defaultState = exports.knownKeysOf = void 0;
 const base_controller_1 = require("@metamask/base-controller");
@@ -259,6 +259,7 @@ class NetworkController extends base_controller_1.BaseControllerV2 {
         _NetworkController_providerProxy.set(this, void 0);
         _NetworkController_provider.set(this, void 0);
         _NetworkController_blockTrackerProxy.set(this, void 0);
+        _NetworkController_destroyed.set(this, void 0);
         _NetworkController_autoManagedNetworkClientRegistry.set(this, void 0);
         if (!infuraProjectId || typeof infuraProjectId !== 'string') {
             throw new Error('Invalid Infura project ID');
@@ -273,6 +274,7 @@ class NetworkController extends base_controller_1.BaseControllerV2 {
         });
         this.messagingSystem.registerActionHandler(`${this.name}:getNetworkClientById`, this.getNetworkClientById.bind(this));
         __classPrivateFieldSet(this, _NetworkController_previousProviderConfig, this.state.providerConfig, "f");
+        __classPrivateFieldSet(this, _NetworkController_destroyed, false, "f");
     }
     /**
      * Accesses the provider and block tracker for the currently selected network.
@@ -464,7 +466,7 @@ class NetworkController extends base_controller_1.BaseControllerV2 {
                     updatedNetworkStatus = constants_1.NetworkStatus.Unknown;
                 }
             }
-            if (networkChanged) {
+            if (networkChanged || __classPrivateFieldGet(this, _NetworkController_destroyed, "f")) {
                 // If the network has changed, then `lookupNetwork` either has been or is
                 // in the process of being called, so we don't need to go further.
                 return;
@@ -741,6 +743,7 @@ class NetworkController extends base_controller_1.BaseControllerV2 {
     destroy() {
         var _a;
         return __awaiter(this, void 0, void 0, function* () {
+            __classPrivateFieldSet(this, _NetworkController_destroyed, true, "f");
             yield ((_a = __classPrivateFieldGet(this, _NetworkController_blockTrackerProxy, "f")) === null || _a === void 0 ? void 0 : _a.destroy());
         });
     }
@@ -771,7 +774,7 @@ class NetworkController extends base_controller_1.BaseControllerV2 {
     }
 }
 exports.NetworkController = NetworkController;
-_NetworkController_ethQuery = new WeakMap(), _NetworkController_infuraProjectId = new WeakMap(), _NetworkController_trackMetaMetricsEvent = new WeakMap(), _NetworkController_previousProviderConfig = new WeakMap(), _NetworkController_providerProxy = new WeakMap(), _NetworkController_provider = new WeakMap(), _NetworkController_blockTrackerProxy = new WeakMap(), _NetworkController_autoManagedNetworkClientRegistry = new WeakMap(), _NetworkController_instances = new WeakSet(), _NetworkController_refreshNetwork = function _NetworkController_refreshNetwork() {
+_NetworkController_ethQuery = new WeakMap(), _NetworkController_infuraProjectId = new WeakMap(), _NetworkController_trackMetaMetricsEvent = new WeakMap(), _NetworkController_previousProviderConfig = new WeakMap(), _NetworkController_providerProxy = new WeakMap(), _NetworkController_provider = new WeakMap(), _NetworkController_blockTrackerProxy = new WeakMap(), _NetworkController_destroyed = new WeakMap(), _NetworkController_autoManagedNetworkClientRegistry = new WeakMap(), _NetworkController_instances = new WeakSet(), _NetworkController_refreshNetwork = function _NetworkController_refreshNetwork() {
     return __awaiter(this, void 0, void 0, function* () {
         this.messagingSystem.publish('NetworkController:networkWillChange');
         this.update((state) => {
