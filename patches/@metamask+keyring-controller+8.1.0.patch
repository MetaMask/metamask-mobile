diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts b/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts
index b187247..43f108c 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.d.ts
@@ -1,4 +1,5 @@
 import type { TxData, TypedTransaction } from '@ethereumjs/tx';
+import { KeyringController as EthKeyringController } from '@metamask/eth-keyring-controller';
 import type { MetaMaskKeyring as QRKeyring, IKeyringState as IQRKeyringState } from '@keystonehq/metamask-airgapped-keyring';
 import type { RestrictedControllerMessenger } from '@metamask/base-controller';
 import { BaseControllerV2 } from '@metamask/base-controller';
@@ -173,6 +174,19 @@ export declare class KeyringController extends BaseControllerV2<typeof name, Key
      * @param opts.state - Initial state to set on this controller.
      */
     constructor({ syncIdentities, updateIdentities, setSelectedAddress, setAccountLabel, encryptor, keyringBuilders, cacheEncryptionKey, messenger, state, }: KeyringControllerOptions);
+
+     /**
+     * ============================== PATCH INFORMATION ==============================
+     * This patch was added for ledger integration. It adds a new method to the
+     * KeyringController class that allows to get the internal eth keyring controller
+     * This is needed to be able to access the keyring controller from the ledger bridge.
+     * ===============================================================================
+     */
+    /**
+     * Gets the internal keyring controller.
+     */
+    getEthKeyringController(): typeof EthKeyringController;
+
     /**
      * Adds a new account to the default (first) HD seed phrase keyring.
      *
diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.js b/node_modules/@metamask/keyring-controller/dist/KeyringController.js
index 08a8714..7058829 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.js
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.js
@@ -773,15 +773,40 @@ class KeyringController extends base_controller_1.BaseControllerV2 {
             return (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getKeyringForAccount(account)).type;
         });
     }
+
+    /**
+     * ============================== PATCH INFORMATION ==============================
+     * This patch was added for ledger integration. It adds a new method to the
+     * KeyringController class that allows to get the internal eth keyring controller
+     * This is needed to be able to access the keyring controller from the ledger bridge.
+     * ===============================================================================
+     */
+    /**
+     * Gets the internal keyring controller.
+     */
+    getEthKeyringController() {
+        return __classPrivateFieldGet(this, _KeyringController_keyring, "f");
+    }
+
+    /**
+     * ============================== PATCH INFORMATION ==============================
+     * This patch addresses an issue regarding the forget device functionality. It
+     * improves the logic  to correctly remove the QR accounts and update the
+     * identities as needed.
+     *
+     * Solved in https://github.com/MetaMask/core/pull/3641
+     * ===============================================================================
+     */
     forgetQRDevice() {
         return __awaiter(this, void 0, void 0, function* () {
             const keyring = yield this.getOrAddQRKeyring();
+            const allAccounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
             keyring.forgetDevice();
-            const accounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
-            accounts.forEach((account) => {
-                this.setSelectedAddress(account);
-            });
+            const remainingAccounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
+            const removedAccounts = allAccounts.filter((address) => !remainingAccounts.includes(address));
+            this.updateIdentities(remainingAccounts);
             yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").persistAllKeyrings();
+            return { removedAccounts, remainingAccounts };
         });
     }
 }
