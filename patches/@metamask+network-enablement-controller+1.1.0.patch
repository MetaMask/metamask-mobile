diff --git a/node_modules/@metamask/network-enablement-controller/dist/NetworkEnablementController.cjs b/node_modules/@metamask/network-enablement-controller/dist/NetworkEnablementController.cjs
index 93fb576..7c2d4be 100644
--- a/node_modules/@metamask/network-enablement-controller/dist/NetworkEnablementController.cjs
+++ b/node_modules/@metamask/network-enablement-controller/dist/NetworkEnablementController.cjs
@@ -206,9 +206,9 @@ class NetworkEnablementController extends base_controller_1.BaseController {
      * Initializes the network enablement state from network controller configurations.
      *
      * This method reads the current network configurations from both NetworkController
-     * and MultichainNetworkController and initializes the enabled network map accordingly.
-     * It ensures proper namespace buckets exist for all configured networks and enables
-     * popular networks by default.
+     * and MultichainNetworkController and syncs the enabled network map accordingly.
+     * It ensures proper namespace buckets exist for all configured networks and only
+     * adds missing networks with a default value of false, preserving existing user settings.
      *
      * This method should be called after the NetworkController and MultichainNetworkController
      * have been initialized and their configurations are available.
@@ -221,48 +221,22 @@ class NetworkEnablementController extends base_controller_1.BaseController {
             const multichainState = this.messagingSystem.call('MultichainNetworkController:getState');
             // Initialize namespace buckets for EVM networks from NetworkController
             Object.keys(networkControllerState.networkConfigurationsByChainId).forEach((chainId) => {
-                const { namespace } = (0, utils_2.deriveKeys)(chainId);
+                const { namespace, storageKey } = (0, utils_2.deriveKeys)(chainId);
                 __classPrivateFieldGet(this, _NetworkEnablementController_instances, "m", _NetworkEnablementController_ensureNamespaceBucket).call(this, s, namespace);
+                // Only add network if it doesn't already exist in state (preserves user settings)
+                if (s.enabledNetworkMap[namespace][storageKey] === undefined) {
+                    s.enabledNetworkMap[namespace][storageKey] = false;
+                }
             });
             // Initialize namespace buckets for all networks from MultichainNetworkController
             Object.keys(multichainState.multichainNetworkConfigurationsByChainId).forEach((chainId) => {
-                const { namespace } = (0, utils_2.deriveKeys)(chainId);
-                __classPrivateFieldGet(this, _NetworkEnablementController_instances, "m", _NetworkEnablementController_ensureNamespaceBucket).call(this, s, namespace);
-            });
-            // Enable popular networks that exist in the configurations
-            constants_1.POPULAR_NETWORKS.forEach((chainId) => {
                 const { namespace, storageKey } = (0, utils_2.deriveKeys)(chainId);
-                // Check if network exists in NetworkController configurations
-                if (s.enabledNetworkMap[namespace] &&
-                    networkControllerState.networkConfigurationsByChainId[chainId]) {
-                    s.enabledNetworkMap[namespace][storageKey] = true;
+                __classPrivateFieldGet(this, _NetworkEnablementController_instances, "m", _NetworkEnablementController_ensureNamespaceBucket).call(this, s, namespace);
+                // Only add network if it doesn't already exist in state (preserves user settings)
+                if (s.enabledNetworkMap[namespace][storageKey] === undefined) {
+                    s.enabledNetworkMap[namespace][storageKey] = false;
                 }
             });
-            // Enable Solana mainnet if it exists in configurations
-            const solanaKeys = (0, utils_2.deriveKeys)(types_1.SolScope.Mainnet);
-            if (s.enabledNetworkMap[solanaKeys.namespace] &&
-                multichainState.multichainNetworkConfigurationsByChainId[types_1.SolScope.Mainnet]) {
-                s.enabledNetworkMap[solanaKeys.namespace][solanaKeys.storageKey] = true;
-            }
-            // Enable Bitcoin mainnet if it exists in configurations
-            const bitcoinKeys = (0, utils_2.deriveKeys)(types_1.BtcScope.Mainnet);
-            if (s.enabledNetworkMap[bitcoinKeys.namespace] &&
-                multichainState.multichainNetworkConfigurationsByChainId[types_1.BtcScope.Mainnet]) {
-                s.enabledNetworkMap[bitcoinKeys.namespace][bitcoinKeys.storageKey] =
-                    true;
-            }
-            // Enable Bitcoin testnet if it exists in configurations
-            const bitcoinTestnetKeys = (0, utils_2.deriveKeys)(types_1.BtcScope.Testnet);
-            if (s.enabledNetworkMap[bitcoinTestnetKeys.namespace] &&
-                multichainState.multichainNetworkConfigurationsByChainId[types_1.BtcScope.Testnet]) {
-                s.enabledNetworkMap[bitcoinTestnetKeys.namespace][bitcoinTestnetKeys.storageKey] = false;
-            }
-            // Enable Bitcoin signet testnet if it exists in configurations
-            const bitcoinSignetKeys = (0, utils_2.deriveKeys)(types_1.BtcScope.Signet);
-            if (s.enabledNetworkMap[bitcoinSignetKeys.namespace] &&
-                multichainState.multichainNetworkConfigurationsByChainId[types_1.BtcScope.Signet]) {
-                s.enabledNetworkMap[bitcoinSignetKeys.namespace][bitcoinSignetKeys.storageKey] = false;
-            }
         });
     }
     /**
