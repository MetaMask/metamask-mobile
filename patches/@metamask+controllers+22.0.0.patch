diff --git a/node_modules/@metamask/controllers/dist/assets/AssetsContractController.js b/node_modules/@metamask/controllers/dist/assets/AssetsContractController.js
index 6f47110..f0ba9fc 100644
--- a/node_modules/@metamask/controllers/dist/assets/AssetsContractController.js
+++ b/node_modules/@metamask/controllers/dist/assets/AssetsContractController.js
@@ -67,9 +67,9 @@ class AssetsContractController extends BaseController_1.BaseController {
      */
     getBalanceOf(address, selectedAddress) {
         return __awaiter(this, void 0, void 0, function* () {
-            const contract = this.web3.eth.contract(human_standard_token_abi_1.default).at(address);
+            const contract = new this.web3.eth.Contract(human_standard_token_abi_1.default, address);
             return new Promise((resolve, reject) => {
-                contract.balanceOf(selectedAddress, (error, result) => {
+                contract.methods.balanceOf(selectedAddress).call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -88,9 +88,9 @@ class AssetsContractController extends BaseController_1.BaseController {
      */
     getTokenDecimals(address) {
         return __awaiter(this, void 0, void 0, function* () {
-            const contract = this.web3.eth.contract(human_standard_token_abi_1.default).at(address);
+            const contract = new this.web3.eth.Contract(human_standard_token_abi_1.default, address);
             return new Promise((resolve, reject) => {
-                contract.decimals((error, result) => {
+                contract.methods.decimals().call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -110,7 +110,7 @@ class AssetsContractController extends BaseController_1.BaseController {
      * @returns Promise resolving to token identifier for the 'index'th asset assigned to 'selectedAddress'.
      */
     getCollectibleTokenId(address, selectedAddress, index) {
-        const contract = this.web3.eth.contract(human_standard_collectible_abi_1.default).at(address);
+        const contract = new this.web3.eth.Contract(human_standard_collectible_abi_1.default, address);
         return this.erc721Standard.getCollectibleTokenId(contract, selectedAddress, index);
     }
     /**
@@ -122,7 +122,7 @@ class AssetsContractController extends BaseController_1.BaseController {
      */
     getCollectibleTokenURI(address, tokenId) {
         return __awaiter(this, void 0, void 0, function* () {
-            const contract = this.web3.eth.contract(human_standard_collectible_abi_1.default).at(address);
+            const contract = new this.web3.eth.Contract(human_standard_collectible_abi_1.default, address);
             return this.erc721Standard.getCollectibleTokenURI(contract, tokenId);
         });
     }
@@ -134,7 +134,7 @@ class AssetsContractController extends BaseController_1.BaseController {
      */
     getAssetName(address) {
         return __awaiter(this, void 0, void 0, function* () {
-            const contract = this.web3.eth.contract(human_standard_collectible_abi_1.default).at(address);
+            const contract = new this.web3.eth.Contract(human_standard_collectible_abi_1.default, address);
             return this.erc721Standard.getAssetName(contract);
         });
     }
@@ -146,7 +146,7 @@ class AssetsContractController extends BaseController_1.BaseController {
      */
     getAssetSymbol(address) {
         return __awaiter(this, void 0, void 0, function* () {
-            const contract = this.web3.eth.contract(human_standard_collectible_abi_1.default).at(address);
+            const contract = new this.web3.eth.Contract(human_standard_collectible_abi_1.default, address);
             return this.erc721Standard.getAssetSymbol(contract);
         });
     }
@@ -159,7 +159,7 @@ class AssetsContractController extends BaseController_1.BaseController {
      */
     getOwnerOf(address, tokenId) {
         return __awaiter(this, void 0, void 0, function* () {
-            const contract = this.web3.eth.contract(human_standard_collectible_abi_1.default).at(address);
+            const contract = new this.web3.eth.Contract(human_standard_collectible_abi_1.default, address);
             return this.erc721Standard.getOwnerOf(contract, tokenId);
         });
     }
@@ -172,7 +172,7 @@ class AssetsContractController extends BaseController_1.BaseController {
      */
     uriERC1155Collectible(address, tokenId) {
         return __awaiter(this, void 0, void 0, function* () {
-            const contract = this.web3.eth.contract(human_standard_multi_collectible_abi_1.default).at(address);
+            const contract = new this.web3.eth.Contract(human_standard_multi_collectible_abi_1.default, address);
             return this.erc1155Standard.uri(contract, tokenId);
         });
     }
@@ -186,7 +186,7 @@ class AssetsContractController extends BaseController_1.BaseController {
      */
     balanceOfERC1155Collectible(userAddress, collectibleAddress, collectibleId) {
         return __awaiter(this, void 0, void 0, function* () {
-            const contract = this.web3.eth.contract(human_standard_multi_collectible_abi_1.default).at(collectibleAddress);
+            const contract = new this.web3.eth.Contract(human_standard_multi_collectible_abi_1.default, collectibleAddress);
             return yield this.erc1155Standard.getBalanceOf(contract, userAddress, collectibleId);
         });
     }
@@ -202,7 +202,7 @@ class AssetsContractController extends BaseController_1.BaseController {
      */
     transferSingleERC1155Collectible(collectibleAddress, senderAddress, recipientAddress, collectibleId, qty) {
         return __awaiter(this, void 0, void 0, function* () {
-            const contract = this.web3.eth.contract(human_standard_multi_collectible_abi_1.default).at(collectibleAddress);
+            const contract = new this.web3.eth.Contract(human_standard_multi_collectible_abi_1.default, collectibleAddress);
             return yield this.erc1155Standard.transferSingle(contract, collectibleAddress, senderAddress, recipientAddress, collectibleId, qty);
         });
     }
@@ -216,11 +216,10 @@ class AssetsContractController extends BaseController_1.BaseController {
      */
     getBalancesInSingleCall(selectedAddress, tokensToDetect) {
         return __awaiter(this, void 0, void 0, function* () {
-            const contract = this.web3.eth
-                .contract(single_call_balance_checker_abi_1.default)
-                .at(SINGLE_CALL_BALANCES_ADDRESS);
+            const contract = new this.web3.eth
+                .Contract(single_call_balance_checker_abi_1.default, SINGLE_CALL_BALANCES_ADDRESS);
             return new Promise((resolve, reject) => {
-                contract.balances([selectedAddress], tokensToDetect, (error, result) => {
+                contract.methods.balances([selectedAddress], tokensToDetect).call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -232,7 +231,7 @@ class AssetsContractController extends BaseController_1.BaseController {
                         tokensToDetect.forEach((tokenAddress, index) => {
                             const balance = result[index];
                             /* istanbul ignore else */
-                            if (!balance.isZero()) {
+                            if (balance && balance !== '0') {
                                 nonZeroBalances[tokenAddress] = balance;
                             }
                         });
diff --git a/node_modules/@metamask/controllers/dist/assets/CollectibleStandards/ERC1155/ERC1155Standard.js b/node_modules/@metamask/controllers/dist/assets/CollectibleStandards/ERC1155/ERC1155Standard.js
index 8eafb2d..32c5357 100644
--- a/node_modules/@metamask/controllers/dist/assets/CollectibleStandards/ERC1155/ERC1155Standard.js
+++ b/node_modules/@metamask/controllers/dist/assets/CollectibleStandards/ERC1155/ERC1155Standard.js
@@ -41,7 +41,7 @@ class ERC1155Standard {
          */
         this.uri = (contract, tokenId) => __awaiter(this, void 0, void 0, function* () {
             return new Promise((resolve, reject) => {
-                contract.uri(tokenId, (error, result) => {
+                contract.methods.uri(tokenId).call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -61,7 +61,7 @@ class ERC1155Standard {
          */
         this.getBalanceOf = (contract, address, tokenId) => __awaiter(this, void 0, void 0, function* () {
             return new Promise((resolve, reject) => {
-                contract.balanceOf(address, tokenId, (error, result) => {
+                contract.methods.balanceOf(address, tokenId).call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -86,7 +86,7 @@ class ERC1155Standard {
          */
         this.transferSingle = (contract, operator, from, to, id, value) => __awaiter(this, void 0, void 0, function* () {
             return new Promise((resolve, reject) => {
-                contract.transferSingle(operator, from, to, id, value, (error, result) => {
+                contract.methods.transferSingle(operator, from, to, id, value).call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -105,7 +105,7 @@ class ERC1155Standard {
          */
         this.contractSupportsInterface = (contract, interfaceId) => __awaiter(this, void 0, void 0, function* () {
             return new Promise((resolve, reject) => {
-                contract.supportsInterface(interfaceId, (error, result) => {
+                contract.methods.supportsInterface(interfaceId).call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
diff --git a/node_modules/@metamask/controllers/dist/assets/CollectibleStandards/ERC721/ERC721Standard.js b/node_modules/@metamask/controllers/dist/assets/CollectibleStandards/ERC721/ERC721Standard.js
index 6f8b482..aee6b5b 100644
--- a/node_modules/@metamask/controllers/dist/assets/CollectibleStandards/ERC721/ERC721Standard.js
+++ b/node_modules/@metamask/controllers/dist/assets/CollectibleStandards/ERC721/ERC721Standard.js
@@ -42,7 +42,7 @@ class ERC721Standard {
          */
         this.getCollectibleTokenId = (contract, selectedAddress, index) => __awaiter(this, void 0, void 0, function* () {
             return new Promise((resolve, reject) => {
-                contract.tokenOfOwnerByIndex(selectedAddress, index, (error, result) => {
+                contract.methods.tokenOfOwnerByIndex(selectedAddress, index).call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -65,7 +65,7 @@ class ERC721Standard {
                 throw new Error('Contract does not support ERC721 metadata interface.');
             }
             return new Promise((resolve, reject) => {
-                contract.tokenURI(tokenId, (error, result) => {
+                contract.methods.tokenURI(tokenId).call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -83,7 +83,7 @@ class ERC721Standard {
          */
         this.getAssetName = (contract) => __awaiter(this, void 0, void 0, function* () {
             return new Promise((resolve, reject) => {
-                contract.name((error, result) => {
+                contract.methods.name().call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -101,7 +101,7 @@ class ERC721Standard {
          */
         this.getAssetSymbol = (contract) => __awaiter(this, void 0, void 0, function* () {
             return new Promise((resolve, reject) => {
-                contract.symbol((error, result) => {
+                contract.methods.symbol().call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -120,7 +120,7 @@ class ERC721Standard {
          */
         this.contractSupportsInterface = (contract, interfaceId) => __awaiter(this, void 0, void 0, function* () {
             return new Promise((resolve, reject) => {
-                contract.supportsInterface(interfaceId, (error, result) => {
+                contract.methods.supportsInterface(interfaceId).call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
@@ -141,7 +141,7 @@ class ERC721Standard {
     getOwnerOf(contract, tokenId) {
         return __awaiter(this, void 0, void 0, function* () {
             return new Promise((resolve, reject) => {
-                contract.ownerOf(tokenId, (error, result) => {
+                contract.methods.ownerOf(tokenId).call((error, result) => {
                     /* istanbul ignore if */
                     if (error) {
                         reject(error);
