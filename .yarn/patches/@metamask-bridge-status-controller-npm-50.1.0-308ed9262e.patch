diff --git a/dist/bridge-status-controller.cjs b/dist/bridge-status-controller.cjs
index 6aabde7229d9c6ce349b148a16b5e8857f9670be..52f87a160c701c8e38dabf74b5043b9781fad9f5 100644
--- a/dist/bridge-status-controller.cjs
+++ b/dist/bridge-status-controller.cjs
@@ -334,6 +334,7 @@ class BridgeStatusController extends (0, polling_controller_1.StaticIntervalPoll
                     }
                     if (status.status === bridge_controller_1.StatusTypes.COMPLETE) {
                         __classPrivateFieldGet(this, _BridgeStatusController_trackUnifiedSwapBridgeEvent, "f").call(this, bridge_controller_1.UnifiedSwapBridgeEventName.Completed, bridgeTxMetaId);
+                        this.messagingSystem.publish('BridgeStatusController:destinationTransactionCompleted', historyItem.quote.destAsset.assetId);
                     }
                     if (status.status === bridge_controller_1.StatusTypes.FAILED) {
                         __classPrivateFieldGet(this, _BridgeStatusController_trackUnifiedSwapBridgeEvent, "f").call(this, bridge_controller_1.UnifiedSwapBridgeEventName.Failed, bridgeTxMetaId);
diff --git a/dist/types.d.cts b/dist/types.d.cts
index 047c064a382ba909ef1801aeb2b46fbbdc0991c0..287eb8459fa4e75744b7e575d2330547cf8c561a 100644
--- a/dist/types.d.cts
+++ b/dist/types.d.cts
@@ -176,7 +176,15 @@ export type BridgeStatusControllerRestartPollingForFailedAttemptsAction = Bridge
 export type BridgeStatusControllerGetBridgeHistoryItemByTxMetaIdAction = BridgeStatusControllerAction<BridgeStatusAction.GET_BRIDGE_HISTORY_ITEM_BY_TX_META_ID>;
 export type BridgeStatusControllerActions = BridgeStatusControllerStartPollingForBridgeTxStatusAction | BridgeStatusControllerWipeBridgeStatusAction | BridgeStatusControllerResetStateAction | BridgeStatusControllerGetStateAction | BridgeStatusControllerSubmitTxAction | BridgeStatusControllerRestartPollingForFailedAttemptsAction | BridgeStatusControllerGetBridgeHistoryItemByTxMetaIdAction;
 export type BridgeStatusControllerStateChangeEvent = ControllerStateChangeEvent<typeof BRIDGE_STATUS_CONTROLLER_NAME, BridgeStatusControllerState>;
-export type BridgeStatusControllerEvents = BridgeStatusControllerStateChangeEvent;
+/**
++ * This event is published when the destination bridge transaction is completed
++ * The payload is the asset received on the destination chain
++ */
+export type BridgeStatusControllerDestinationTransactionCompletedEvent = {
+    type: 'BridgeStatusController:destinationTransactionCompleted';
+    payload: [CaipAssetType];
+};
+export type BridgeStatusControllerEvents = BridgeStatusControllerStateChangeEvent | BridgeStatusControllerDestinationTransactionCompletedEvent;
 /**
  * The external actions available to the BridgeStatusController.
  */
diff --git a/dist/utils/swap-received-amount.cjs b/dist/utils/swap-received-amount.cjs
index 4c01024e3ebba952b0bbded0aa7bb7e2690629f1..4c41504ce0609d8b7be1f6b045d0ac3e66447646 100644
--- a/dist/utils/swap-received-amount.cjs
+++ b/dist/utils/swap-received-amount.cjs
@@ -28,7 +28,7 @@ const getReceivedERC20Amount = (historyItem, txMeta) => {
     const TOKEN_TRANSFER_LOG_TOPIC_HASH = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef';
     const tokenTransferLog = txReceipt.logs.find((txReceiptLog) => {
         const isTokenTransfer = txReceiptLog.topics &&
-            txReceiptLog.topics[0].startsWith(TOKEN_TRANSFER_LOG_TOPIC_HASH);
+            txReceiptLog.topics[0]?.startsWith(TOKEN_TRANSFER_LOG_TOPIC_HASH);
         const isTransferFromGivenToken = txReceiptLog.address?.toLowerCase() ===
             quote.destAsset.address?.toLowerCase();
         const isTransferFromGivenAddress = txReceiptLog.topics &&
