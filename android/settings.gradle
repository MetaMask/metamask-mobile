pluginManagement {
    includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().toString())
    repositories {
        gradlePluginPortal()
        mavenLocal()
        google()
    }
}

// Cirrus HTTP Cache configuration for remote build caching
buildCache {
    def httpCacheHost = System.getenv("CIRRUS_HTTP_CACHE_HOST")
    if (httpCacheHost != null) {
        remote(HttpBuildCache) {
            url = "http://${httpCacheHost}/"
            enabled = true
            // TODO: Testing push on all branches - revert to main/develop only after testing
            // Push to cache only on main/develop branches to prevent cache pollution
            // Why: PRs still READ from cache (get full speed benefits), but only stable branches
            // write to it. This prevents cache filling with one-off experimental builds that
            // are unlikely to be reused, keeping the cache focused on canonical artifacts.
            // def githubRef = System.getenv("GITHUB_REF_NAME")
            // push = (githubRef == "main" || githubRef == "develop")
            push = true  // Testing: Allow all branches to push
        }
    }
}

plugins { id("com.facebook.react.settings") }
 
extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    def command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'android'
    ].toList()
    ex.autolinkLibrariesFromCommand(command)
  }
}

rootProject.name = 'MetaMask'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml")))
    }
  }
}

include ':app'
includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile())
includeBuild('../node_modules/@react-native') {}
include ':react-native-gesture-handler'
project(':react-native-gesture-handler').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-gesture-handler/android')

apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle")
useExpoModules()
