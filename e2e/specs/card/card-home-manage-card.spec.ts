import WalletView from '../../pages/wallet/WalletView';
import { SmokeCard } from '../../tags';
import Assertions from '../../framework/Assertions';
import { loginToApp } from '../../viewHelper';
import { withFixtures } from '../../framework/fixtures/FixtureHelper';
import FixtureBuilder, {
  DEFAULT_FIXTURE_ACCOUNT,
} from '../../framework/fixtures/FixtureBuilder';
import { getCardholderApiMocks } from '../../api-mocking/mock-responses/cardholder-mocks';
import { EventPayload, getEventsPayloads } from '../analytics/helpers';
import { mockEvents } from '../../api-mocking/mock-config/mock-events';
import CardHomeView from '../../pages/Card/CardHomeView';
import SoftAssert from '../../utils/SoftAssert';
import { CustomNetworks } from '../../resources/networks.e2e';

const cardApiMocks = getCardholderApiMocks([
  `eip155:0:${DEFAULT_FIXTURE_ACCOUNT.toLowerCase()}`,
]);

const testSpecificMock = {
  GET: [
    cardApiMocks,
    {
      urlEndpoint: 'https://on-ramp.dev-api.cx.metamask.io/geolocation',
      response: 'PT',
      responseCode: 200,
    },
  ],
  POST: [
    mockEvents.POST.segmentTrack,
    {
      urlEndpoint: 'https://linea-mainnet.infura.io/v3/',
      requestBody: {
        method: 'eth_chainId',
        params: [],
      },
      ignoreFields: ['id', 'jsonrpc'],
      response: { jsonrpc: '2.0', id: 42, result: '0xe708' },
      responseCode: 200,
    },
    {
      urlEndpoint: 'https://linea-mainnet.infura.io/v3/',
      requestBody: {
        method: 'eth_call',
        params: [
          {
            to: '0xed9f04f2da1b42ae558d5e688fe2ef7080931c9a',
            data: '0xda89f7dd00000000000000000000000076cf1cdd1fcc252442b50d6e97207228aa4aefc3000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000176211869ca2b568f2a7d4ee941e073a821ee1ff000000000000000000000000a219439258ca9da29e9cc4ce5596924745e12b93000000000000000000000000e5d7c2a44ffddf6b295a15c148167daaaf5cf34f0000000000000000000000003ff47c5bf409c86533fe1f4907524d304062428d0000000000000000000000003bce82cf1a2bc357f956dd494713fe11dc54780f000000000000000000000000374d7860c4f2f604de0191298dd393703cce84f3000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd200000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd200000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd200000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd200000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd200000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd2',
          },
          'latest',
        ],
      },
      ignoreFields: ['id', 'jsonrpc'],
      response: {
        jsonrpc: '2.0',
        id: 44,
        result:
          '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000007a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000cccccc
      },
      responseCode: 200,
    },
  ],
};

describe(SmokeCard('CardHome - Manage Card'), () => {
  const eventsToCheck: EventPayload[] = [];

  const setupCardTest = async (testFunction: () => Promise<void>) => {
    await withFixtures(
      {
        fixture: new FixtureBuilder()
          .withMetaMetricsOptIn()
          .withNetworkController(CustomNetworks.Tenderly.Linea)
          .build(),
        restartDevice: true,
        testSpecificMock,
        endTestfn: async ({ mockServer: mockServerInstance }) => {
          const events = await getEventsPayloads(mockServerInstance);
          eventsToCheck.push(...events);
        },
      },
      async () => {
        await loginToApp();
        await testFunction();
      },
    );
  };

  beforeEach(async () => {
    jest.setTimeout(150000);
  });

  it('should open Card Home and open internal browser with correct card dashboard URL', async () => {
    await setupCardTest(async () => {
      await Assertions.expectElementToBeVisible(WalletView.navbarCardButton);
      await WalletView.tapNavbarCardButton();
      await Assertions.expectElementToBeVisible(CardHomeView.cardViewTitle);
      await CardHomeView.tapAdvancedCardManagementItem();
      await CardHomeView.cardDashboardVisible();
    });
  });

  it('should validate segment/metametric event when opening Card Home', async () => {
    const expectedEvents = {
      CARD_VIEWED: 'Card Viewed',
      CARD_HOME_CLICKED: 'Card Home Clicked',
      CARD_ADVANCED_MANAGEMENT_CLICKED: 'Card Advanced Management Clicked',
    };

    const softAssert = new SoftAssert();

    // Find all events
    const cardViewed = eventsToCheck.filter(
      (event) => event.event === expectedEvents.CARD_VIEWED,
    );
    const cardHomeClicked = eventsToCheck.filter(
      (event) => event.event === expectedEvents.CARD_HOME_CLICKED,
    );
    const cardAdvancedManagementClicked = eventsToCheck.filter(
      (event) =>
        event.event === expectedEvents.CARD_ADVANCED_MANAGEMENT_CLICKED,
    );

    const checkCardViewed = softAssert.checkAndCollect(async () => {
      await Assertions.checkIfValueIsDefined(cardViewed);
    }, 'Check Card Viewed event');

    const checkCardHomeClicked = softAssert.checkAndCollect(async () => {
      await Assertions.checkIfValueIsDefined(cardHomeClicked);
    }, 'Check Card Home Clicked event');

    const checkCardAdvancedManagementClicked = softAssert.checkAndCollect(
      async () => {
        await Assertions.checkIfValueIsDefined(cardAdvancedManagementClicked);
      },
      'Check Card Advanced Management Clicked event',
    );

    await Promise.all([
      checkCardViewed,
      checkCardHomeClicked,
      checkCardAdvancedManagementClicked,
    ]);
    softAssert.throwIfErrors();
  });
});
