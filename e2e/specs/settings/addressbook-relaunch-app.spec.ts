import { SmokeWalletPlatform } from '../../tags';
import SettingsView from '../../pages/Settings/SettingsView';
import ContactsView from '../../pages/Settings/Contacts/ContactsView';
import AddContactView from '../../pages/Settings/Contacts/AddContactView';
import TabBarComponent from '../../pages/wallet/TabBarComponent';
import WalletView from '../../pages/wallet/WalletView';
import { loginToApp } from '../../viewHelper';
import FixtureBuilder from '../../framework/fixtures/FixtureBuilder';
import TestHelpers from '../../helpers';
import { getFixturesServerPort } from '../../framework/fixtures/FixtureUtils';
import Assertions from '../../framework/Assertions';
import { withFixtures } from '../../framework/fixtures/FixtureHelper';
import { TestSpecificMock } from '../../framework/types';

const MEMO = 'Address for testing 123123123';
const infuraUrlEndpoint = /^https:\/\/mainnet\.infura\.io\/v3\/.*$/;

const testSpecificMock: TestSpecificMock = {
  POST: [
    {
      urlEndpoint: infuraUrlEndpoint,
      requestBody: {
        jsonrpc: '2.0',
        id: 2470556049218,
        method: 'eth_blockNumber',
        params: [],
      },
      responseCode: 200,
      response: {
        jsonrpc: '2.0',
        id: 1111111111111111,
        result: '0x1',
      },
      ignoreFields: ['id'],
    },
    {
      urlEndpoint: infuraUrlEndpoint,
      requestBody: {
        jsonrpc: '2.0',
        id: 2470556049218,
        method: 'eth_call',
        params: [
          {
            to: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',
            data: '0x0178b8bf1644f81821b3a416a5994a954839db5a9a3fcd6790b12ee6a6d04d6ef62c36b2',
          },
          '0x1',
        ],
      },
      responseCode: 200,
      response: {
        jsonrpc: '2.0',
        id: 2470556049218,
        result:
          '0x0000000000000000000000004976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41',
      },
      ignoreFields: ['id'],
    },
    {
      urlEndpoint: infuraUrlEndpoint,
      requestBody: {
        jsonrpc: '2.0',
        id: 2470556049218,
        method: 'eth_call',
        params: [
          {
            to: '0x4976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41',
            data: '0x3b3b57de1644f81821b3a416a5994a954839db5a9a3fcd6790b12ee6a6d04d6ef62c36b2',
          },
          '0x1',
        ],
      },
      responseCode: 200,
      response: {
        jsonrpc: '2.0',
        id: 2470556049219,
        result:
          '0x000000000000000000000000e9a4bec6efad5ce161b44670af674c2d6daf0793',
      },
      ignoreFields: ['id'],
    },
    {
      urlEndpoint: infuraUrlEndpoint,
      requestBody: {
        jsonrpc: '2.0',
        id: 2470556049219,
        method: 'eth_call',
        params: [
          {
            to: '0xca11bde05977b3631167028862be2a173976ca11',
            data: '0xbce38bd700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000004fef9d741011476750a243ac70b9789a63dd47df00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000024f04da65b00000000000000000000000076cf1cdd1fcc252442b50d6e97207228aa4aefc300000000000000000000000000000000000000000000000000000000',
          },
          '0x1',
        ],
      },
      responseCode: 200,
      response: {
        jsonrpc: '2.0',
        id: '547b6502-63ae-4d61-9a47-67c43bfe37f8',
        result:
          '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002c
      },
      ignoreFields: ['id'],
    },
    {
      urlEndpoint: infuraUrlEndpoint,
      requestBody: {
        jsonrpc: '2.0',
        id: 2470556049220,
        method: 'eth_call',
        params: [
          {
            to: '0xb1f8e55c7f64d203c1400b9d8555d050f94adf39',
            data: '0xf0002ea900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000076cf1cdd1fcc252442b50d6e97207228aa4aefc300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000',
          },
          '0x1',
        ],
      },
      responseCode: 200,
      response: {
        jsonrpc: '2.0',
        id: '14762501-d530-4918-9e77-3ff229104699',
        result:
          '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000002ecba8d7f52ce000000000000000000000000000000000000000000000000000045d3498999840000000000000000000000000000000000000000000000000003055d6f1c0ec0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      },
      ignoreFields: ['id'],
    },
  ],
};

describe(
  SmokeWalletPlatform('Relaunch App after Adding Address to Contact Book'),
  () => {
    beforeAll(async () => {
      jest.setTimeout(150000);
    });

    it('should terminate and relaunch the app after adding a contact', async () => {
      await withFixtures(
        {
          fixture: new FixtureBuilder().withProfileSyncingDisabled().build(),
          restartDevice: true,
          testSpecificMock,
        },
        async () => {
          await loginToApp();
          await device.disableSynchronization();
          await TabBarComponent.tapSettings();
          await SettingsView.tapContacts();
          await device.enableSynchronization();

          await ContactsView.tapAddContactButton();
          await AddContactView.typeInName('Curtis');

          await AddContactView.typeInAddress('curtis.eth');
          await AddContactView.typeInMemo(MEMO);
          await AddContactView.tapAddContactButton();
          await ContactsView.expectContactIsVisible('Curtis');
          await device.terminateApp();
          await TestHelpers.launchApp({
            launchArgs: { fixtureServerPort: `${getFixturesServerPort()}` },
          });
          await loginToApp();
          await TabBarComponent.tapSettings();
          await SettingsView.tapContacts();
          await Assertions.expectElementToBeVisible(ContactsView.container);
          await ContactsView.expectContactIsVisible('Curtis');
          await TabBarComponent.tapWallet();
          await WalletView.tapWalletSendButton();
          await Assertions.expectTextDisplayed('Curtis');
        },
      );
    });
  },
);
