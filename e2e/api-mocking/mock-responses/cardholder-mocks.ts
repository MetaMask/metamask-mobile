import { CaipAccountId } from '@metamask/utils';
import { MockApiEndpoint } from '../../framework/types';
import { DEFAULT_FIXTURE_ACCOUNT } from '../../framework/fixtures/FixtureBuilder';
import { mockEvents } from '../mock-config/mock-events';

/**
 * Mock responses for cardholder API calls
 * Used in E2E tests to avoid dependency on external APIs
 */

/**
 * Get cardholder API mocks with realistic responses
 * @returns {CardholderApiMocks} Object containing GET mocks for cardholder APIs
 */
const getCardholderApiMocks = (
  caipAccountAddresses: CaipAccountId[],
  cardholderAddresses?: CaipAccountId[],
): MockApiEndpoint => {
  const url = new URL('v1/metadata', 'https://accounts.api.cx.metamask.io');
  url.searchParams.set(
    'accountIds',
    caipAccountAddresses.join(',').toLowerCase(),
  );
  url.searchParams.set('label', 'card_user');

  return {
    urlEndpoint: url.toString(),
    response: {
      is: cardholderAddresses || caipAccountAddresses,
    },
    responseCode: 200,
  };
};

const cardApiMocks = getCardholderApiMocks([
  `eip155:0:${DEFAULT_FIXTURE_ACCOUNT.toLowerCase()}`,
]);

export const testSpecificMock = {
  GET: [
    cardApiMocks,
    {
      urlEndpoint: 'https://on-ramp.dev-api.cx.metamask.io/geolocation',
      response: 'PT',
      responseCode: 200,
    },
    {
      urlEndpoint:
        'https://client-config.api.cx.metamask.io/v1/flags?client=mobile&distribution=main&environment=dev',
      response: [
        {
          depositConfig: {
            active: true,
            entrypoints: {
              walletActions: true,
            },
            minimumVersion: '1.0.0',
            providerApiKey: 'DUMMY_VALUE',
            providerFrontendAuth: 'DUMMY_VALUE',
          },
          cardFeature: {
            constants: {
              accountsApiUrl: 'https://accounts.api.cx.metamask.io',
              onRampApiUrl: 'https://on-ramp.uat-api.cx.metamask.io',
            },
            chains: {
              'eip155:59144': {
                tokens: [
                  {
                    symbol: 'USDC',
                    address: '0x176211869cA2b568f2A7D4EE941E073a821EE1ff',
                    decimals: 6,
                    enabled: true,
                    name: 'USD Coin',
                  },
                  {
                    enabled: true,
                    name: 'Tether USD',
                    symbol: 'USDT',
                    address: '0xA219439258ca9da29E9Cc4cE5596924745e12B93',
                    decimals: 6,
                  },
                  {
                    address: '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f',
                    decimals: 18,
                    enabled: true,
                    name: 'Wrapped Ether',
                    symbol: 'WETH',
                  },
                  {
                    decimals: 18,
                    enabled: true,
                    name: 'EURe',
                    symbol: 'EURe',
                    address: '0x3ff47c5Bf409C86533FE1f4907524d304062428D',
                  },
                  {
                    name: 'GBPe',
                    symbol: 'GBPe',
                    address: '0x3Bce82cf1A2bc357F956dd494713Fe11DC54780f',
                    decimals: 18,
                    enabled: true,
                  },
                  {
                    decimals: 6,
                    enabled: true,
                    name: 'Aave USDC',
                    symbol: 'aUSDC',
                    address: '0x374D7860c4f2f604De0191298dD393703Cce84f3',
                  },
                ],
                balanceScannerAddress:
                  '0xed9f04f2da1b42ae558d5e688fe2ef7080931c9a',
                enabled: true,
                foxConnectAddresses: {
                  us: '0xA90b298d05C2667dDC64e2A4e17111357c215dD2',
                  global: '0x9dd23A4a0845f10d65D293776B792af1131c7B30',
                },
              },
            },
          },
        },
      ],
      responseCode: 200,
    },
  ],
  POST: [
    mockEvents.POST.segmentTrack,
    {
      urlEndpoint: 'https://linea-mainnet.infura.io/v3/',
      requestBody: {
        method: 'eth_chainId',
        params: [],
      },
      ignoreFields: ['id', 'jsonrpc'],
      response: { jsonrpc: '2.0', id: 42, result: '0xe708' },
      responseCode: 200,
    },
    {
      urlEndpoint: 'https://linea-mainnet.infura.io/v3/',
      requestBody: {
        method: 'eth_call',
        params: [
          {
            to: '0xed9f04f2da1b42ae558d5e688fe2ef7080931c9a',
            data: '0xda89f7dd00000000000000000000000076cf1cdd1fcc252442b50d6e97207228aa4aefc3000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000176211869ca2b568f2a7d4ee941e073a821ee1ff000000000000000000000000a219439258ca9da29e9cc4ce5596924745e12b93000000000000000000000000e5d7c2a44ffddf6b295a15c148167daaaf5cf34f0000000000000000000000003ff47c5bf409c86533fe1f4907524d304062428d0000000000000000000000003bce82cf1a2bc357f956dd494713fe11dc54780f000000000000000000000000374d7860c4f2f604de0191298dd393703cce84f3000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd200000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd200000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd200000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd200000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd200000000000000000000000000000000000000000000000000000000000000020000000000000000000000009dd23a4a0845f10d65d293776b792af1131c7b30000000000000000000000000a90b298d05c2667ddc64e2a4e17111357c215dd2',
          },
          'latest',
        ],
      },
      ignoreFields: ['id', 'jsonrpc'],
      response: {
        jsonrpc: '2.0',
        id: 44,
        result:
          '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000007a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000cccccc000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000',
      },
      responseCode: 200,
    },
  ],
};
