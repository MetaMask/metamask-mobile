// Only keep selectors that are actually used in tests
export const TestSnapViewSelectorWebIDS = {
  cancelBackgroundEventButton: 'cancelBackgroundEvent',
  clearManageStateButton: 'clearManageState',
  clearStateButton: 'clearState',
  clearStateUnencryptedButton: 'clearStateUnencrypted',
  clearUnencryptedManageStateButton: 'clearUnencryptedManageState',
  connectBackgroundEventsButton: 'connectbackground-events',
  connectBip32Button: 'connectbip32',
  connectBip44Button: 'connectbip44',
  connectCronjobSnapButton: 'connectcronjobs',
  connectClientStatusSnapButton: 'connectclient-status',
  connectDialogSnapButton: 'connectdialogs',
  connectErrorSnapButton: 'connecterrors',
  connectGetEntropyButton: 'connectGetEntropySnap',
  connectGetFileButton: 'connectgetfile',
  connectGetPreferencesButton: 'connectpreferences',
  connectJsonRpcButton: 'connectjson-rpc',
  connectLifeCycleButton: 'connectlifecycle-hooks',
  connectImageButton: 'connectimages',
  connectManageStateButton: 'connectmanage-state',
  connectNetworkAccessButton: 'connectnetwork-access',
  connectEthereumProviderButton: 'connectethereum-provider',
  connectStateButton: 'connectstate',
  connectJsx: 'connectjsx',
  connectWasmButton: 'connectwasm',
  displayJsxButton: 'displayJsx',
  getBackgroundEventResultButton: 'getBackgroundEvents',
  getPreferencesButton: 'getPreferences',
  getPublicKeyBip44Button: 'sendBip44Test',
  getPublicKeyBip32Button: 'bip32GetPublic',
  getCompressedPublicKeyBip32Button: 'bip32GetCompressedPublic',
  scheduleBackgroundEventWithDateButton: 'scheduleBackgroundEventWithDate',
  scheduleBackgroundEventWithDurationButton:
    'scheduleBackgroundEventWithDuration',
  signEntropyMessageButton: 'signEntropyMessage',
  signMessageBip32Secp256k1Button: 'sendBip32-secp256k1',
  signMessageBip32ed25519Button: 'sendBip32-ed25519',
  signMessageBip32ed25519Bip32Button: 'sendBip32-ed25519Bip32',
  signMessageBip44Button: 'signBip44Message',
  sendAlertButton: 'sendAlertButton',
  sendClientStatusButton: 'sendClientStatusTest',
  sendConfirmationButton: 'sendConfirmationButton',
  sendCustomButton: 'sendCustomButton',
  sendErrorButton: 'sendError',
  sendGetFileTextButton: 'sendGetFileTextButton',
  sendGetFileBase64Button: 'sendGetFileBase64Button',
  sendGetFileHexButton: 'sendGetFileHexButton',
  sendGetStateButton: 'sendGetState',
  sendGetUnencryptedStateButton: 'sendGetUnencryptedState',
  sendManageStateButton: 'sendManageState',
  sendNetworkAccessTestButton: 'sendNetworkAccessTest',
  sendRpcButton: 'sendRpc',
  sendStateButton: 'sendState',
  sendUnencryptedManageStateButton: 'sendUnencryptedManageState',
  sendUnencryptedStateButton: 'sendUnencryptedState',
  startWebSocket: 'startWebSocket',
  stopWebSocket: 'stopWebSocket',
  showSVGImage: 'showSVGImage',
  showPNGImage: 'showPNGImage',
  showPreinstalledDialogButton: 'showPreinstalledDialog',
  getWebSocketState: 'getWebSocketState',
  getChainIdButton: 'sendEthprovider',
  getAccountsButton: 'sendEthproviderAccounts',
  personalSignButton: 'signPersonalSignMessage',
  sendWasmMessageButton: 'sendWasmMessage',
  signTypedDataButton: 'signTypedDataButton',
  trackErrorButton: 'trackError',
  trackEventButton: 'trackEvent',
  startTraceButton: 'start-trace',
  endTraceButton: 'end-trace',
};

export const TestSnapInputSelectorWebIDS = {
  backgroundEventDateInput: 'backgroundEventDate',
  backgroundEventDurationInput: 'backgroundEventDuration',
  cancelBackgroundEventInput: 'backgroundEventId',
  dataManageStateInput: 'dataManageState',
  dataStateInput: 'dataState',
  dataUnencryptedManageStateInput: 'dataUnencryptedManageState',
  dataUnencryptedStateInput: 'dataUnencryptedState',
  entropyMessageInput: 'entropyMessage',
  getStateInput: 'getState',
  getUnencryptedStateInput: 'getUnencryptedState',
  messageBip44Input: 'bip44Message',
  messageEd25519Bip32Input: 'bip32Message-ed25519Bip32',
  messageEd25519Input: 'bip32Message-ed25519',
  messageSecp256k1Input: 'bip32Message-secp256k1',
  setStateKeyInput: 'setStateKey',
  setStateKeyUnencryptedInput: 'setStateKeyUnencrypted',
  webSocketUrlInput: 'webSocketUrl',
  personalSignMessageInput: 'personalSignMessage',
  signTypedDataMessageInput: 'signTypedData',
  wasmInput: 'wasmInput',
};

export const EntropyDropDownSelectorWebIDS = {
  bip32EntropyDropDown: 'bip32-entropy-selector',
  bip44EntropyDropDown: 'bip44-entropy-selector',
  getEntropyDropDown: 'get-entropy-entropy-selector',
  networkDropDown: 'select-chain',
};

export const TestSnapResultSelectorWebIDS = {
  bip44ResultSpan: 'bip44Result',
  bip44SignResultSpan: 'bip44SignResult',
  bip32MessageResultEd25519Span: 'bip32MessageResult-ed25519',
  bip32MessageResultSecp256k1Span: 'bip32MessageResult-secp256k1',
  bip32MessageResultEd25519Bip32Span: 'bip32MessageResult-ed25519Bip32',
  bip32PublicKeyResultSpan: 'bip32PublicKeyResult',
  clearManageStateResultSpan: 'clearManageStateResult',
  clearUnencryptedManageStateResultSpan: 'clearUnencryptedManageStateResult',
  clientStatusResultSpan: 'clientStatusResult',
  dialogResultSpan: 'dialogResult',
  errorResultSpan: 'errorResult',
  encryptedStateResultSpan: 'encryptedStateResult',
  entropySignResultSpan: 'entropySignResult',
  getBackgroundEventsResultSpan: 'getBackgroundEventsResult',
  fileResultSpan: 'getFileResult',
  getStateResultSpan: 'getStateResult',
  getStateUnencryptedResultSpan: 'getStateUnencryptedResult',
  installedSnapResultSpan: 'installedSnapsResult',
  networkAccessResultSpan: 'networkAccessResult',
  ethereumProviderResultSpan: 'ethproviderResult',
  personalSignResultSpan: 'personalSignResult',
  preferencesResultSpan: 'preferencesResult',
  retrieveManageStateResultSpan: 'retrieveManageStateResult',
  retrieveManageStateUnencryptedResultSpan:
    'retrieveManageStateUnencryptedResult',
  rpcResultSpan: 'rpcResult',
  scheduleBackgroundEventResultSpan: 'scheduleBackgroundEventResult',
  sendManageStateResultSpan: 'sendManageStateResult',
  sendUnencryptedManageStateResultSpan: 'sendUnencryptedManageStateResult',
  signTypedDataResultSpan: 'signTypedDataResult',
  unencryptedStateResultSpan: 'unencryptedStateResult',
  wasmResultSpan: 'wasmResult',
};

export const TestSnapBottomSheetSelectorWebIDS = {
  BOTTOMSHEET_FOOTER_BUTTON_ID: 'bottomsheetfooter-button-subsequent',
  DEFAULT_FOOTER_BUTTON_ID: 'default-snap-footer-button',
};
