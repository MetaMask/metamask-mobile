import {
  generateOpt,
  EVENT_NAME as METRICS_EVENT_NAME,
} from '../../MetaMetrics.events';

enum EVENT_NAME {
  ADVANCED_DETAILS_CLICKED = 'Confirmation Advanced Details Clicked',
  TOOLTIP_CLICKED = 'Confirmation Tooltip Clicked',
  SCREEN_VIEWED = 'Confirmation Screen Viewed',
}

enum TRANSACTION_EVENT_NAMES {
  TRANSACTION_APPROVED = 'Transaction Approved',
  TRANSACTION_CONFIRMED = 'Transaction Confirmed',
  TRANSACTION_DROPPED = 'Transaction Dropped',
  TRANSACTION_FAILED = 'Transaction Failed',
  TRANSACTION_REJECTED = 'Transaction Rejected',
  TRANSACTION_SUBMITTED = 'Transaction Submitted',
  UNAPPROVED_TRANSACTION_ADDED = 'Unapproved Transaction Added',
}

// This function helps prevent repeat of type conversions
const createEvent = (name: EVENT_NAME | TRANSACTION_EVENT_NAMES) =>
  generateOpt(name as unknown as METRICS_EVENT_NAME);

export const CONFIRMATION_EVENTS = {
  ADVANCED_DETAILS_CLICKED: createEvent(EVENT_NAME.ADVANCED_DETAILS_CLICKED),
  SCREEN_VIEWED: createEvent(EVENT_NAME.SCREEN_VIEWED),
  TOOLTIP_CLICKED: createEvent(EVENT_NAME.TOOLTIP_CLICKED),
};

export const TRANSACTION_EVENTS = {
  TRANSACTION_APPROVED: createEvent(
    TRANSACTION_EVENT_NAMES.TRANSACTION_APPROVED,
  ),
  TRANSACTION_CONFIRMED: createEvent(
    TRANSACTION_EVENT_NAMES.TRANSACTION_CONFIRMED,
  ),
  TRANSACTION_DROPPED: createEvent(TRANSACTION_EVENT_NAMES.TRANSACTION_DROPPED),
  TRANSACTION_FAILED: createEvent(TRANSACTION_EVENT_NAMES.TRANSACTION_FAILED),
  TRANSACTION_REJECTED: createEvent(
    TRANSACTION_EVENT_NAMES.TRANSACTION_REJECTED,
  ),
  TRANSACTION_SUBMITTED: createEvent(
    TRANSACTION_EVENT_NAMES.TRANSACTION_SUBMITTED,
  ),
  UNAPPROVED_TRANSACTION_ADDED: createEvent(
    TRANSACTION_EVENT_NAMES.UNAPPROVED_TRANSACTION_ADDED,
  ),
};
