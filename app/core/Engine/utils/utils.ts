import { createProjectLogger } from '@metamask/utils';
import {
  ControllerByName,
  ControllerInitFunction,
  ControllerInitRequest,
  ControllerName,
} from '../modular-controller.types';
import { Controller } from '../modular-controller.types';

const log = createProjectLogger('controller-init');

/** Result of initializing controllers. */
export type InitControllersResult = {
  /** All initialized controllers keyed by name. */
  controllersByName: ControllerByName;
};

/**
 * Initialize the controllers according to the provided init objects.
 * Each init object can be a function that returns a controller, or a `ControllerInit` instance.
 *
 * @param options - Options bag.
 * @param options.initFunctions - Array of init functions.
 * @param options.initRequest - Base request used to initialize the controllers.
 * Excluding the properties that are generated by this function.
 * @returns The initialized controllers and associated data.
 */
export function initControllers({
  initFunctions,
  initRequest,
}: {
  initFunctions: ControllerInitFunction<Controller>[];
  initRequest: Omit<ControllerInitRequest, 'getController'>;
}): InitControllersResult {
  log('Initializing controllers', initFunctions.length);

  // Will be populated with all controllers once initialized.
  let controllersByName = {} as ControllerByName;

  const getController = <Name extends ControllerName>(
    name: Name,
  ): ControllerByName[Name] => getControllerOrThrow(controllersByName, name);

  for (const initFunction of initFunctions) {
    const finalInitRequest: ControllerInitRequest = {
      ...initRequest,
      getController,
    };

    const result = initFunction(finalInitRequest);

    const { controller } = result;

    const { name } = controller;

    controllersByName = {
      ...controllersByName,
      [name]: controller,
    };

    log('Initialized controller', name);
  }

  return {
    controllersByName,
  };
}

function getControllerOrThrow<Name extends ControllerName>(
  controllersByName: ControllerByName,
  name: Name,
): ControllerByName[Name] {
  const controller = controllersByName[name];

  if (!controller) {
    throw new Error(`Controller requested before it was initialized: ${name}`);
  }

  return controller;
}
