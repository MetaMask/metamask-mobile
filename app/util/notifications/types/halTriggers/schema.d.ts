/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/triggers': {
    /** List all triggers */
    get: {
      parameters: {
        query: {
          /** @description Filter by id */
          id: string[];
          /** @description Filter by kind */
          kind?: string;
          /** @description Filter by chain ID */
          chain_id?: number;
          /** @description Page number for pagination */
          page?: number;
          /** @description Number of triggers per page for pagination */
          per_page?: number;
        };
      };
      responses: {
        /** @description Successfully fetched the triggers */
        200: {
          content: {
            'application/json': components['schemas']['Trigger'][];
          };
        };
      };
    };
    /** Create a new trigger */
    post: {
      parameters: {
        header?: {
          /** @description Trigger Token */
          'X-Trigger-Token'?: string;
        };
      };
      requestBody: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
            config: components['schemas']['TriggerConfigInput'];
          };
        };
      };
      responses: {
        /** @description Successfully created the trigger */
        200: {
          content: {
            'application/json': components['schemas']['Trigger'];
          };
        };
      };
    };
  };
  '/triggers/{id}': {
    /** Get a trigger by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the trigger to get */
          id: string;
        };
      };
      responses: {
        /** @description Successfully fetched the trigger */
        200: {
          content: {
            'application/json': components['schemas']['Trigger'];
          };
        };
      };
    };
    /** Delete a trigger */
    delete: {
      parameters: {
        header?: {
          /** @description Trigger Token */
          'X-Trigger-Token'?: string;
        };
        path: {
          /** @description ID of the trigger to delete */
          id: string;
        };
      };
      responses: {
        /** @description Successfully deleted the trigger */
        204: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Trigger: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    TriggerConfigInput:
      | components['schemas']['Config_MetamaskSwapCompleted']
      | components['schemas']['Config_UnstakedCompleted']
      | components['schemas']['Config_ERC20Sent']
      | components['schemas']['Config_ERC20Received']
      | components['schemas']['Config_ETHSent']
      | components['schemas']['Config_ETHReceived']
      | components['schemas']['Config_RocketpoolStakeCompleted']
      | components['schemas']['Config_RocketpoolUnstakeCompleted']
      | components['schemas']['Config_LidoStakeCompleted']
      | components['schemas']['Config_LidoWithdrawalRequested']
      | components['schemas']['Config_LidoWithdrawalCompleted'];
    Config_MetamaskSwapCompleted: {
      /** @enum {string} */
      kind: 'metamask_swap_completed';
      chain_id: number;
      /** Format: address */
      address: string;
    };
    Config_UnstakedCompleted: {
      /** @enum {string} */
      kind: 'unstaked_completed';
      chain_id: number;
      /** Format: address */
      address: string;
    };
    Config_ERC20Sent: {
      /** @enum {string} */
      kind: 'erc20_sent';
      chain_id: number;
      /** Format: address */
      address: string;
    };
    Config_ERC20Received: {
      /** @enum {string} */
      kind: 'erc20_received';
      chain_id: number;
      /** Format: address */
      address: string;
    };
    Config_ETHSent: {
      /** @enum {string} */
      kind: 'eth_sent';
      chain_id: number;
      /** Format: address */
      address: string;
    };
    Config_ETHReceived: {
      /** @enum {string} */
      kind: 'eth_received';
      chain_id: number;
      /** Format: address */
      address: string;
    };
    Config_RocketpoolStakeCompleted: {
      /** @enum {string} */
      kind: 'rocketpool_stake_completed';
      chain_id: number;
      /** Format: address */
      address: string;
    };
    Config_RocketpoolUnstakeCompleted: {
      /** @enum {string} */
      kind: 'rocketpool_unstake_completed';
      chain_id: number;
      /** Format: address */
      address: string;
    };
    Config_LidoStakeCompleted: {
      /** @enum {string} */
      kind: 'lido_stake_completed';
      chain_id: number;
      /** Format: address */
      address: string;
    };
    Config_LidoWithdrawalRequested: {
      /** @enum {string} */
      kind: 'lido_withdrawal_requested';
      chain_id: number;
      /** Format: address */
      address: string;
    };
    Config_LidoWithdrawalCompleted: {
      /** @enum {string} */
      kind: 'lido_withdrawal_completed';
      chain_id: number;
      /** Format: address */
      address: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
