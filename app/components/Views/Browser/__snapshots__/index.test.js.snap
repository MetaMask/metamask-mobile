// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Browser should render correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#f1f2f6",
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "height": 3,
        "marginTop": 0,
      }
    }
  >
    <WebviewProgressBar />
  </View>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#FFFFFF",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <ActivityIndicator
      animating={true}
      color="#999999"
      hidesWhenStopped={true}
      size="small"
    />
  </View>
  <ReactNativeModal
    animationIn="slideInDown"
    animationInTiming={300}
    animationOut="slideOutUp"
    animationOutTiming={300}
    avoidKeyboard={false}
    backdropColor="black"
    backdropOpacity={0.7}
    backdropTransitionInTiming={300}
    backdropTransitionOutTiming={300}
    deviceHeight={null}
    deviceWidth={null}
    hasBackdrop={true}
    hideModalContentWhileAnimating={false}
    isVisible={false}
    onBackButtonPress={[Function]}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalShow={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    style={
      Object {
        "justifyContent": "flex-start",
        "margin": 0,
      }
    }
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    useNativeDriver={true}
  >
    <View
      style={
        Object {
          "backgroundColor": "#FFFFFF",
          "flexDirection": "row",
          "height": 87,
          "paddingHorizontal": 10,
          "paddingTop": 50,
        }
      }
    >
      <TextInput
        allowFontScaling={true}
        autoCapitalize="none"
        autoCorrect={false}
        clearButtonMode="while-editing"
        onChangeText={[Function]}
        onSubmitEditing={[Function]}
        placeholder="Enter website address"
        placeholderTextColor="#747d8c"
        returnKeyType="go"
        selectTextOnFocus={true}
        style={
          Object {
            "backgroundColor": "#dfe4ea",
            "borderRadius": 30,
            "flex": 1,
            "fontFamily": "Roboto",
            "fontSize": 14,
            "fontWeight": "400",
            "height": 30,
            "padding": 8,
            "paddingLeft": 15,
            "textAlign": "left",
          }
        }
        underlineColorAndroid="transparent"
        value=""
      />
      <TouchableOpacity
        activeOpacity={0.2}
        onPress={[Function]}
        style={
          Object {
            "marginLeft": 10,
            "marginTop": 7,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#008edf",
              "fontFamily": "Roboto",
              "fontSize": 14,
              "fontWeight": "400",
            }
          }
        >
          Cancel
        </Text>
      </TouchableOpacity>
    </View>
    <Connect(UrlAutocomplete)
      input=""
      onSubmit={[Function]}
    />
  </ReactNativeModal>
  <ReactNativeModal
    animationIn="slideInUp"
    animationInTiming={600}
    animationOut="slideOutDown"
    animationOutTiming={600}
    avoidKeyboard={false}
    backdropColor="black"
    backdropOpacity={0.7}
    backdropTransitionInTiming={300}
    backdropTransitionOutTiming={300}
    deviceHeight={null}
    deviceWidth={null}
    hasBackdrop={true}
    hideModalContentWhileAnimating={false}
    isVisible={false}
    onBackButtonPress={[Function]}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalShow={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onSwipeComplete={[Function]}
    propagateSwipe={true}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    style={
      Object {
        "justifyContent": "flex-end",
        "margin": 0,
      }
    }
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection="down"
    swipeThreshold={100}
    useNativeDriver={false}
  />
  <ReactNativeModal
    animationIn="slideInUp"
    animationInTiming={600}
    animationOut="slideOutDown"
    animationOutTiming={600}
    avoidKeyboard={false}
    backdropColor="black"
    backdropOpacity={0.7}
    backdropTransitionInTiming={300}
    backdropTransitionOutTiming={300}
    deviceHeight={null}
    deviceWidth={null}
    hasBackdrop={true}
    hideModalContentWhileAnimating={false}
    isVisible={false}
    onBackButtonPress={[Function]}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalShow={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onSwipeComplete={[Function]}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    style={
      Object {
        "justifyContent": "flex-end",
        "margin": 0,
      }
    }
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection="down"
    swipeThreshold={100}
    useNativeDriver={false}
  >
    <Connect(AccountApproval)
      currentPageInformation={
        Object {
          "icon": undefined,
          "title": "",
          "url": "",
        }
      }
      onCancel={[Function]}
      onConfirm={[Function]}
    />
  </ReactNativeModal>
  <ReactNativeModal
    animationIn="slideInUp"
    animationInTiming={300}
    animationOut="slideOutDown"
    animationOutTiming={300}
    avoidKeyboard={false}
    backdropColor="#d95846"
    backdropOpacity={1}
    backdropTransitionInTiming={300}
    backdropTransitionOutTiming={300}
    deviceHeight={null}
    deviceWidth={null}
    hasBackdrop={true}
    hideModalContentWhileAnimating={false}
    isVisible={false}
    onBackButtonPress={[Function]}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalShow={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    style={
      Object {
        "flex": 1,
      }
    }
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    useNativeDriver={true}
  >
    <PhishingModal
      continueToPhishingSite={[Function]}
      goBackToSafety={[Function]}
      goToETHPhishingDetector={[Function]}
      goToEtherscam={[Function]}
      goToFilePhishingIssue={[Function]}
    />
  </ReactNativeModal>
  <AnimatedComponent
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#f1f2f6",
          "bottom": 0,
          "flexDirection": "row",
          "left": 0,
          "paddingBottom": 32,
          "paddingHorizontal": 10,
          "paddingTop": 15,
          "position": "absolute",
          "right": 0,
        },
        Object {
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        },
      ]
    }
  >
    <View
      style={
        Object {
          "alignContent": "flex-start",
          "flex": 1,
          "flexDirection": "row",
        }
      }
    >
      <Icon
        allowFontScaling={false}
        disabled={true}
        name="angle-left"
        onPress={[Function]}
        size={40}
        style={
          Object {
            "alignSelf": "center",
            "color": "#ced6e0",
            "height": 28,
            "lineHeight": 28,
            "textAlign": "center",
            "width": 36,
          }
        }
      />
      <Icon
        allowFontScaling={false}
        disabled={true}
        name="angle-right"
        onPress={[Function]}
        size={40}
        style={
          Object {
            "alignSelf": "center",
            "color": "#ced6e0",
            "height": 28,
            "lineHeight": 28,
            "textAlign": "center",
            "width": 36,
          }
        }
      />
    </View>
    <View
      style={
        Object {
          "alignItems": "flex-end",
          "flexDirection": "row",
        }
      }
    >
      <Icon
        allowFontScaling={false}
        name="ios-search"
        onPress={[Function]}
        size={30}
        style={
          Array [
            Object {
              "alignSelf": "center",
              "color": "#2f3542",
              "height": 28,
              "lineHeight": 28,
              "textAlign": "center",
              "width": 36,
            },
            Object {
              "alignContent": "flex-end",
              "alignSelf": "flex-end",
            },
          ]
        }
      />
      <Icon
        allowFontScaling={false}
        name="more-vert"
        onPress={[Function]}
        size={32}
        style={
          Array [
            Object {
              "alignSelf": "center",
              "color": "#2f3542",
              "height": 28,
              "lineHeight": 28,
              "textAlign": "center",
              "width": 36,
            },
            Object {
              "alignContent": "flex-end",
              "alignSelf": "flex-end",
            },
          ]
        }
      />
    </View>
  </AnimatedComponent>
</View>
`;
