// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Confirm should render correctly 1`] = `
<ForwardRef(SafeAreaView)
  style={
    Object {
      "backgroundColor": "#FFFFFF",
      "flex": 1,
    }
  }
  testID="txn-confirm-screen"
>
  <View
    style={
      Object {
        "borderBottomColor": "#D8D8D8",
        "borderBottomWidth": 1,
        "flex": 0,
        "paddingHorizontal": 8,
      }
    }
  >
    <AddressFrom
      fromAccountAddress="0x1"
      onPressIcon={null}
    />
    <AdressToComponentWrap />
  </View>
  <InfoModal
    body={
      <Text
        black={false}
        blue={false}
        bold={false}
        centered={false}
        disclaimer={false}
        green={false}
        link={false}
        modal={false}
        primary={false}
        red={false}
        reset={false}
        right={false}
        small={false}
        strikethrough={false}
        style={
          Object {
            "lineHeight": 20,
          }
        }
        underline={false}
        upper={false}
      >
        We have detected a confusable character in the ENS name. Check the ENS name to avoid a potential scam.
      </Text>
    }
    isVisible={false}
    title="Check the recipient address"
    toggleModal={[Function]}
  />
  <ScrollView
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View
      style={
        Object {
          "flexDirection": "column",
          "margin": 24,
        }
      }
    >
      <Text
        black={false}
        blue={false}
        bold={false}
        centered={false}
        disclaimer={false}
        green={false}
        link={false}
        modal={false}
        primary={false}
        red={false}
        reset={false}
        right={false}
        small={false}
        strikethrough={false}
        style={
          Object {
            "color": "#6a737d",
            "fontFamily": "EuclidCircularB-Regular",
            "fontSize": 14,
            "fontWeight": "400",
            "marginVertical": 3,
            "textAlign": "center",
            "textTransform": "uppercase",
          }
        }
        underline={false}
        upper={false}
      >
        Amount
      </Text>
      <Text
        black={false}
        blue={false}
        bold={false}
        centered={false}
        disclaimer={false}
        green={false}
        link={false}
        modal={false}
        primary={false}
        red={false}
        reset={false}
        right={false}
        small={false}
        strikethrough={false}
        style={
          Object {
            "color": "#24292E",
            "fontFamily": "EuclidCircularB-Regular",
            "fontSize": 44,
            "fontWeight": "300",
            "textAlign": "center",
          }
        }
        testID="confirm-txn-amount"
        underline={false}
        upper={false}
      />
    </View>
    <Connect(TransactionReviewFeeCard)
      edit={[Function]}
      fiat=""
      gasEstimationReady={false}
      onNonceEdit={[Function]}
      over={false}
      totalFiat={
        <Text
          black={false}
          blue={false}
          bold={false}
          centered={false}
          disclaimer={false}
          green={false}
          link={false}
          modal={false}
          primary={false}
          red={false}
          reset={false}
          right={false}
          small={false}
          strikethrough={false}
          underline={false}
          upper={false}
        />
      }
      totalGasFiat=""
      totalValue={
        <Text
          black={false}
          blue={false}
          bold={false}
          centered={false}
          disclaimer={false}
          green={false}
          link={false}
          modal={false}
          primary={false}
          red={false}
          reset={false}
          right={false}
          small={false}
          strikethrough={false}
          underline={false}
          upper={false}
        />
      }
      transactionValue=""
    />
    <View
      style={
        Object {
          "margin": 24,
        }
      }
    >
      <TouchableOpacity
        onPress={[Function]}
        style={
          Object {
            "padding": 12,
          }
        }
      >
        <Text
          black={false}
          blue={false}
          bold={false}
          centered={false}
          disclaimer={false}
          green={false}
          link={false}
          modal={false}
          primary={false}
          red={false}
          reset={false}
          right={false}
          small={false}
          strikethrough={false}
          style={
            Object {
              "alignSelf": "center",
              "color": "#037dd6",
              "fontFamily": "EuclidCircularB-Regular",
              "fontSize": 14,
              "fontWeight": "400",
            }
          }
          underline={false}
          upper={false}
        >
          Hex Data
        </Text>
      </TouchableOpacity>
    </View>
  </ScrollView>
  <View
    style={
      Object {
        "alignItems": "flex-end",
        "flexDirection": "row",
        "marginBottom": 16,
      }
    }
  >
    <StyledButton
      containerStyle={
        Object {
          "alignSelf": "flex-end",
          "flex": 1,
          "marginHorizontal": 24,
        }
      }
      disabled={true}
      disabledContainerStyle={
        Object {
          "opacity": 0.6,
        }
      }
      onPress={[Function]}
      styleDisabled={
        Object {
          "opacity": 0.6,
        }
      }
      testID="txn-confirm-send-button"
      type="confirm"
    >
      Send
    </StyledButton>
  </View>
  <ReactNativeModal
    animationIn="slideInUp"
    animationInTiming={300}
    animationOut="slideOutDown"
    animationOutTiming={300}
    avoidKeyboard={false}
    backdropColor="black"
    backdropOpacity={0.7}
    backdropTransitionInTiming={300}
    backdropTransitionOutTiming={300}
    coverScreen={true}
    customBackdrop={null}
    deviceHeight={null}
    deviceWidth={null}
    hasBackdrop={true}
    hideModalContentWhileAnimating={false}
    isVisible={false}
    onBackButtonPress={[Function]}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalShow={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onSwipeComplete={[Function]}
    propagateSwipe={true}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    style={
      Object {
        "justifyContent": "flex-end",
        "margin": 0,
      }
    }
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection="down"
    swipeThreshold={100}
    useNativeDriver={false}
  >
    <Connect(AccountList)
      enableAccountsAddition={false}
      getBalanceError={[Function]}
      identities={Object {}}
      keyrings={
        Array [
          Object {
            "accounts": Array [
              "0x",
            ],
            "type": "HD Key Tree",
          },
        ]
      }
      onAccountChange={[Function]}
      selectedAddress="0x1"
      ticker="ETH"
    />
  </ReactNativeModal>
  <ReactNativeModal
    animationIn="slideInUp"
    animationInTiming={300}
    animationOut="slideOutDown"
    animationOutTiming={300}
    avoidKeyboard={false}
    backdropColor="black"
    backdropOpacity={0.7}
    backdropTransitionInTiming={300}
    backdropTransitionOutTiming={300}
    coverScreen={true}
    customBackdrop={null}
    deviceHeight={null}
    deviceWidth={null}
    hasBackdrop={true}
    hideModalContentWhileAnimating={false}
    isVisible={false}
    onBackButtonPress={[Function]}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalShow={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onSwipeComplete={[Function]}
    propagateSwipe={true}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection="down"
    swipeThreshold={100}
    useNativeDriver={false}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "padding": 10,
        }
      }
    >
      <TouchableOpacity
        onPress={[Function]}
        style={
          Object {
            "position": "absolute",
            "right": 20,
            "top": 12,
            "zIndex": 999,
          }
        }
      >
        <Icon
          allowFontScaling={false}
          color="#24292E"
          name="ios-close"
          size={28}
        />
      </TouchableOpacity>
      <View
        style={
          Object {
            "backgroundColor": "#f2f3f4",
            "borderRadius": 8,
            "marginBottom": 16,
            "paddingBottom": 24,
            "paddingHorizontal": 36,
            "paddingTop": 16,
            "width": "100%",
          }
        }
      >
        <Text
          black={false}
          blue={false}
          bold={false}
          centered={false}
          disclaimer={false}
          green={false}
          link={false}
          modal={false}
          primary={false}
          red={false}
          reset={false}
          right={false}
          small={false}
          strikethrough={false}
          style={
            Object {
              "alignItems": "center",
              "color": "#24292E",
              "fontFamily": "EuclidCircularB-Bold",
              "fontSize": 16,
              "fontWeight": "600",
              "justifyContent": "center",
              "marginBottom": 16,
              "textAlign": "center",
            }
          }
          underline={false}
          upper={false}
        >
          Hex Data
        </Text>
        <Text
          black={false}
          blue={false}
          bold={false}
          centered={false}
          disclaimer={false}
          green={false}
          link={false}
          modal={false}
          primary={false}
          red={false}
          reset={false}
          right={false}
          small={false}
          strikethrough={false}
          style={
            Object {
              "textAlign": "justify",
            }
          }
          underline={false}
          upper={false}
        >
          0x
        </Text>
      </View>
    </View>
  </ReactNativeModal>
</ForwardRef(SafeAreaView)>
`;
