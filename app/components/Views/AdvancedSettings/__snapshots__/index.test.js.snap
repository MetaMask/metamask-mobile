// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdvancedSettings should render correctly 1`] = `
<SafeAreaView
  style={
    Object {
      "flex": 1,
    }
  }
>
  <KeyboardAwareScrollViewMock
    enableAutomaticScroll={true}
    enableOnAndroid={false}
    enableResetScrollToCoords={true}
    extraHeight={75}
    extraScrollHeight={0}
    keyboardOpeningTime={250}
    resetScrollToCoords={
      Object {
        "x": 0,
        "y": 0,
      }
    }
    style={
      Object {
        "backgroundColor": "#FFFFFF",
        "flex": 1,
        "padding": 24,
        "paddingBottom": 48,
      }
    }
    viewIsInsideTabBar={false}
  >
    <View
      style={
        Object {
          "paddingBottom": 48,
        }
      }
    >
      <ActionModal
        cancelButtonMode="neutral"
        cancelTestID=""
        cancelText="NEVERMIND"
        confirmButtonMode="warning"
        confirmTestID=""
        confirmText="RESET"
        modalVisible={false}
        onCancelPress={[Function]}
        onConfirmPress={[Function]}
        onRequestClose={[Function]}
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "column",
              "justifyContent": "center",
              "padding": 20,
            }
          }
        >
          <Text
            style={
              Object {
                "fontFamily": "Roboto",
                "fontSize": 22,
                "fontWeight": "600",
                "marginBottom": 20,
                "textAlign": "center",
              }
            }
          >
            Reset Account?
          </Text>
          <Text
            style={
              Object {
                "fontFamily": "Roboto",
                "fontSize": 18,
                "fontWeight": "400",
                "textAlign": "center",
              }
            }
          >
            Resetting your account will clear your transaction history.
          </Text>
        </View>
      </ActionModal>
      <View
        style={
          Array [
            Object {
              "marginTop": 50,
            },
            Object {
              "marginTop": 0,
            },
          ]
        }
      >
        <Text
          style={
            Object {
              "color": "#000000",
              "fontFamily": "Roboto",
              "fontSize": 20,
              "fontWeight": "400",
              "lineHeight": 20,
            }
          }
        >
          Reset Account
        </Text>
        <Text
          style={
            Object {
              "color": "#4d4d4d",
              "fontFamily": "Roboto",
              "fontSize": 14,
              "fontWeight": "400",
              "lineHeight": 20,
              "marginTop": 12,
            }
          }
        >
          This action will clear your transaction history. This data might not be retrievable.
        </Text>
        <StyledButton
          containerStyle={
            Object {
              "marginTop": 18,
            }
          }
          disabledContainerStyle={
            Object {
              "opacity": 0.6,
            }
          }
          onPress={[Function]}
          styleDisabled={
            Object {
              "opacity": 0.6,
            }
          }
          type="info"
        >
          RESET ACCOUNT
        </StyledButton>
      </View>
      <View
        style={
          Object {
            "marginTop": 50,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#000000",
              "fontFamily": "Roboto",
              "fontSize": 20,
              "fontWeight": "400",
              "lineHeight": 20,
            }
          }
        >
          Sync with Metamask Extension
        </Text>
        <Text
          style={
            Object {
              "color": "#4d4d4d",
              "fontFamily": "Roboto",
              "fontSize": 14,
              "fontWeight": "400",
              "lineHeight": 20,
              "marginTop": 12,
            }
          }
        >
          This will import all extension accounts to this device.
        </Text>
        <StyledButton
          containerStyle={
            Object {
              "marginTop": 18,
            }
          }
          disabledContainerStyle={
            Object {
              "opacity": 0.6,
            }
          }
          onPress={[Function]}
          styleDisabled={
            Object {
              "opacity": 0.6,
            }
          }
          type="info"
        >
          SYNC
        </StyledButton>
      </View>
      <View
        style={
          Object {
            "marginTop": 50,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#000000",
              "fontFamily": "Roboto",
              "fontSize": 20,
              "fontWeight": "400",
              "lineHeight": 20,
            }
          }
        >
          New RPC Network
        </Text>
        <Text
          style={
            Object {
              "color": "#4d4d4d",
              "fontFamily": "Roboto",
              "fontSize": 14,
              "fontWeight": "400",
              "lineHeight": 20,
              "marginTop": 12,
            }
          }
        >
          Use a custom RPC-capable network via URL instead of one of the provided networks.
        </Text>
        <TextInput
          allowFontScaling={true}
          autoCapitalize="none"
          autoComplete="off"
          autoCorrect={false}
          inputAccessoryViewID="rpc_url_accesory_view"
          onBlur={[Function]}
          onChangeText={[Function]}
          placeholder="New RPC Network"
          rejectResponderTermination={true}
          style={
            Array [
              Object {
                "borderColor": "#d2d8dd",
                "borderRadius": 5,
                "borderWidth": 2,
                "fontFamily": "Roboto",
                "fontWeight": "400",
                "marginTop": 14,
                "padding": 10,
              },
              Object {},
            ]
          }
          underlineColorAndroid="transparent"
        />
        <InputAccessoryView
          nativeID="rpc_url_accesory_view"
        >
          <View
            backgroundColor="#F7F7F7"
            style={
              Object {
                "alignItems": "flex-end",
                "paddingRight": 10,
              }
            }
          >
            <Button
              onPress={[Function]}
              title="Done"
            />
          </View>
        </InputAccessoryView>
        <View
          style={
            Object {
              "flexDirection": "row",
              "marginTop": 12,
            }
          }
        >
          <View
            style={
              Object {
                "flexGrow": 1,
                "flexShrink": 1,
              }
            }
          >
            <Text
              style={
                Object {
                  "color": "#FF0000",
                  "fontFamily": "Roboto",
                  "fontWeight": "400",
                  "marginTop": 4,
                  "paddingLeft": 2,
                  "paddingRight": 4,
                }
              }
            />
          </View>
        </View>
      </View>
      <View
        style={
          Object {
            "marginTop": 50,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#000000",
              "fontFamily": "Roboto",
              "fontSize": 20,
              "fontWeight": "400",
              "lineHeight": 20,
            }
          }
        >
          Show Hex Data
        </Text>
        <Text
          style={
            Object {
              "color": "#4d4d4d",
              "fontFamily": "Roboto",
              "fontSize": 14,
              "fontWeight": "400",
              "lineHeight": 20,
              "marginTop": 12,
            }
          }
        >
          Select this to show the hex data field on the send screen.
        </Text>
        <View
          style={
            Object {
              "marginTop": 18,
            }
          }
        >
          <Switch
            ios_backgroundColor="#dfe4ea"
            onValueChange={[Function]}
            trackColor={
              Object {
                "false": "#f1f2f6",
                "true": "#008edf",
              }
            }
            value={true}
          />
        </View>
      </View>
      <View
        style={
          Object {
            "marginTop": 50,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#000000",
              "fontFamily": "Roboto",
              "fontSize": 20,
              "fontWeight": "400",
              "lineHeight": 20,
            }
          }
        >
          State Logs
        </Text>
        <Text
          style={
            Object {
              "color": "#4d4d4d",
              "fontFamily": "Roboto",
              "fontSize": 14,
              "fontWeight": "400",
              "lineHeight": 20,
              "marginTop": 12,
            }
          }
        >
          This will help MetaMask debug any issue you might encounter. Please send it via email to mobile@metamask.io
        </Text>
        <StyledButton
          containerStyle={
            Object {
              "marginTop": 18,
            }
          }
          disabledContainerStyle={
            Object {
              "opacity": 0.6,
            }
          }
          onPress={[Function]}
          styleDisabled={
            Object {
              "opacity": 0.6,
            }
          }
          type="info"
        >
          DOWNLOAD STATE LOGS
        </StyledButton>
      </View>
    </View>
  </KeyboardAwareScrollViewMock>
</SafeAreaView>
`;
