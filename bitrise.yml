---
format_version: '8'
default_step_lib_source: 'https://github.com/bitrise-io/bitrise-steplib.git'
project_type: react-native

#Pipelines are listed below
pipelines:
  #Creates MetaMask-QA apps and stores apk/ipa in Bitrise
  create_qa_builds_pipeline:
    stages:
      - create_build_qa: {}
      - notify: {}
  #Releases MetaMask apps and stores apk/ipa into Play(Internal Testing)/App(TestFlight) Store
  release_builds_to_store_pipeline:
    stages:
      - create_build_release: {}
      - deploy_build_release: {}
      - create_build_qa: {} #Generate QA builds for E2E app upgrade tests
      - release_notify: {}
  #Releases MetaMask apps and stores ipa into App(TestFlight) Store
  release_ios_to_store_pipeline:
    stages:
      - create_ios_release: {}
      - deploy_ios_release: {}
      - notify: {}
  #Releases MetaMask apps and stores apk Play(Internal Testing) Store
  release_android_to_store_pipeline:
    stages:
      - create_android_release: {}
      - deploy_android_release: {}
      - notify: {}
  #Run E2E test suite for iOS only
  run_e2e_ios_pipeline:
    stages:
      - build_e2e_ios_stage: {}
      - run_e2e_ios_stage: {}
      - notify: {}
  #Run E2E test suite for Android only
  run_e2e_android_pipeline:
    stages:
      - build_e2e_android_stage: {} #builds android detox E2E
      - run_e2e_android_stage: {} #runs android detox test E2E
      - notify: {}
  #PR_e2e_verfication (build ios & android), run iOS (smoke), emulator Android
  release_e2e_pipeline:
    stages:
      - build_e2e_ios_android_stage: {}
      - run_release_e2e_ios_android_stage: {}
      - notify: {}
  #PR_e2e_verfication (build ios & android), run iOS (smoke), emulator Android
  pr_smoke_e2e_pipeline:
    stages:
      - build_smoke_e2e_ios_android_stage: {}
      - run_smoke_e2e_ios_android_stage: {}
      - notify: {}
  # Pipeline for Flask
  create_flask_release_builds_pipeline:
    stages:
      - create_build_flask_release: {}
      - notify: {}
  release_flask_builds_to_store_pipeline:
    stages:
      - create_build_flask_release: {}
      - deploy_flask_build_release: {}
      - release_notify: {}

  #PR_e2e_verfication (build ios & android), run iOS (regression), emulator Android
  pr_regression_e2e_pipeline:
    stages:
      - build_regression_e2e_ios_android_stage: {}
      - run_regression_e2e_ios_android_stage: {}
      - notify: {}

#Stages reference workflows. Those workflows cannot but utility "_this-is-a-utility"
stages:
  create_build_release:
    workflows:
      - build_android_release: {}
      - build_ios_release: {}
  deploy_build_release:
    workflows:
      - deploy_android_to_store: {}
      - deploy_ios_to_store: {}
  create_ios_release:
    workflows:
      - build_ios_release: {}
  deploy_ios_release:
    workflows:
      - deploy_ios_to_store: {}
  create_android_release:
    workflows:
      - build_android_release: {}
  deploy_android_release:
    workflows:
      - deploy_android_to_store: {}
  create_build_qa:
    workflows:
      - build_android_qa: {}
      - build_ios_qa: {}
  create_build_qa_android:
    workflows:
      - build_android_qa: {}
  create_build_qa_ios:
    workflows:
      - build_ios_qa: {}
  build_e2e_ios_stage:
    workflows:
      - ios_e2e_build: {}
  run_e2e_ios_stage:
    workflows:
      - ios_e2e_test: {}
  build_smoke_e2e_ios_android_stage:
    workflows:
      - ios_e2e_build: {}
      - android_e2e_build: {}
  run_smoke_e2e_ios_android_stage:
    workflows:
      - run_tag_smoke_confirmations_ios: {}
      - run_tag_smoke_confirmations_android: {}
      - run_tag_smoke_swaps_ios: {}
      - run_tag_smoke_swaps_android: {}
      - run_tag_smoke_core_ios: {}
      - run_tag_smoke_core_android: {}
  build_regression_e2e_ios_android_stage:
    workflows:
      - ios_build_regression_tests: {}
      - android_build_regression_tests: {}
  run_regression_e2e_ios_android_stage:
    workflows:
      - ios_run_regression_tests: {}
      - android_run_regression_tests: {}
  run_release_e2e_ios_android_stage:
    workflows:
      - ios_run_regression_tests: {}
      - android_run_regression_tests: {}
      - run_tag_smoke_confirmations_ios: {}
      - run_tag_smoke_confirmations_android: {}
      - run_tag_smoke_swaps_ios: {}
      - run_tag_smoke_swaps_android: {}
      - run_tag_smoke_core_ios: {}
      - run_tag_smoke_core_android: {}
      - run_tag_upgrade_android: {}
  run_e2e_ios_android_stage:
    workflows:
      - ios_e2e_test: {}
      - android_e2e_test: {}
  build_e2e_ios_android_stage:
    workflows:
      - ios_e2e_build: {}
      - android_e2e_build: {}
  build_e2e_android_stage:
    workflows:
      - android_e2e_build: {}
  run_e2e_android_stage:
    workflows:
      - android_e2e_test: {}
  notify:
    workflows:
      - notify_success: {}
  release_notify:
    workflows:
      - release_announcing_stores: {}
  create_build_flask_release:
    workflows:
      - build_android_flask_release: {}
      - build_ios_flask_release: {}
  deploy_flask_build_release:
    workflows:
      - deploy_android_to_store:
          envs:
            - MM_ANDROID_PACKAGE_NAME: 'io.metamask.flask'
      - deploy_ios_to_store:

workflows:
  # Code Setups
  setup:
    steps:
      - activate-ssh-key@4:
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - git-clone@6: {}
  code_setup:
    before_run:
      - setup
      - prep_environment
    steps:
      - restore-cocoapods-cache@2: {}
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                envman add --key YARN_CACHE_DIR --value "$(yarn cache dir)"
          title: Get Yarn cache directory
      - yarn@0:
          inputs:
            - command: setup
          title: Yarn Setup
  prep_environment:
    steps:
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                echo "Gems being installed with bundler gem"
                bundle install
                echo "Node $NODE_VERSION being installed with asdf"
                asdf list all nodejs
                asdf install nodejs "$NODE_VERSION"
                asdf global nodejs "$NODE_VERSION"
                echo "Corepack being installed with npm"
                npm i -g "corepack@$COREPACK_VERSION"
                echo "Corepack enabling $YARN_VERSION"
                corepack enable
          title: Install node, yarn and corepack

  # Notifications utility workflows
  # Provides values for commit or branch message and path depending on commit env setup initialised or not
  _get_workflow_info:
    steps:
      - activate-ssh-key@4:
          is_always_run: true # always run to also feed failure notifications
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - git-clone@6:
          inputs:
            - update_submodules: 'no'
          is_always_run: true # always run to also feed failure notifications
      - script@1:
          is_always_run: true # always run to also feed failure notifications
          inputs:
            - content: |
                #!/bin/bash
                # generate reference to commit from env or using git
                COMMIT_SHORT_HASH="${BITRISE_GIT_COMMIT:0:7}"
                BRANCH_HEIGHT=''
                WORKFLOW_TRIGGER='Push'

                if [[ -z "$BITRISE_GIT_COMMIT" ]]; then
                  COMMIT_SHORT_HASH="$(git rev-parse --short HEAD)"
                  BRANCH_HEIGHT='HEAD'
                  WORKFLOW_TRIGGER='Manual'
                fi

                envman add --key COMMIT_SHORT_HASH --value "$COMMIT_SHORT_HASH"
                envman add --key BRANCH_HEIGHT --value "$BRANCH_HEIGHT"
                envman add --key WORKFLOW_TRIGGER --value "$WORKFLOW_TRIGGER"
          title: Get commit or branch name and path variables

  # Slack notification utils: we have two workflows to allow choosing when to notify: on success, on failure or both.
  # A workflow for instance create_qa_builds will notify on failure for each build_android_qa or build_ios_qa
  # but will only notify success if both success and create_qa_builds succeeds.

  # Send a Slack message on successful release
  release_announcing_stores:
    before_run:
      - code_setup
    steps:
      - yarn@0:
          inputs:
            - command: build:announce
          title: Announcing pre-release
          is_always_run: false
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: standard

  # Send a Slack message when workflow succeeds
  notify_success:
    before_run:
      - _get_workflow_info
    steps:
      # Update Bitrise comment in PR with success status
      - comment-on-github-pull-request@0:
          is_always_run: true
          run_if: '{{getenv "TRIGGERED_BY_PR_LABEL" | eq "true"}}'
          inputs:
            - personal_access_token: '$GITHUB_ACCESS_TOKEN'
            - body: |-
                ## [<img alt="https://bitrise.io/" src="https://assets-global.website-files.com/5db35de024bb983af1b4e151/5e6f9ccc3e129dfd8a205e4e_Bitrise%20Logo%20-%20Eggplant%20Bg.png" height="20">](${BITRISEIO_PIPELINE_BUILD_URL}) **Bitrise**

                ✅✅✅ `${BITRISEIO_PIPELINE_TITLE}` passed on Bitrise! ✅✅✅

                Commit hash: ${GITHUB_PR_HASH}
                Build link: ${BITRISEIO_PIPELINE_BUILD_URL}

                >[!NOTE]
                >- You can kick off another `${BITRISEIO_PIPELINE_TITLE}` on Bitrise by removing and re-applying the `Run Smoke E2E` label on the pull request

                <!-- BITRISE_TAG -->
                <!-- BITRISE_SUCCESS_TAG -->
            - repository_url: '$GIT_REPOSITORY_URL'
            - issue_number: '$GITHUB_PR_NUMBER'
            - api_base_url: 'https://api.github.com'
            - update_comment_tag: '$GITHUB_PR_HASH'
      - slack@3:
          inputs:
            - text: '${BITRISE_APP_TITLE} ${BITRISEIO_PIPELINE_TITLE} workflow notification'
            - pretext: ':large_green_circle: *${BITRISEIO_PIPELINE_TITLE} succeeded!*'
            - title: 'Commit #$COMMIT_SHORT_HASH $BRANCH_HEIGHT'
            - title_link: https://github.com/${BITRISEIO_GIT_REPOSITORY_OWNER}/${BITRISEIO_GIT_REPOSITORY_SLUG}/commit/${COMMIT_SHORT_HASH}
            - message: ${BITRISE_GIT_MESSAGE}
            - fields: |
                Branch|${BITRISE_GIT_BRANCH}
                Workflow|${BITRISEIO_PIPELINE_TITLE}
                Trigger|${WORKFLOW_TRIGGER}
                Build|${BITRISE_BUILD_NUMBER}
            - buttons: |
                View app|${BITRISE_APP_URL}
                View build|${BITRISEIO_PIPELINE_BUILD_URL}
                View commit|https://github.com/${BITRISEIO_GIT_REPOSITORY_OWNER}/${BITRISEIO_GIT_REPOSITORY_SLUG}/commit/${COMMIT_SHORT_HASH}
            - footer: 'Bitrise ${BITRISEIO_PIPELINE_TITLE} workflow notification'
            - webhook_url: https://hooks.slack.com/services/${MM_SLACK_TOKEN}/${MM_SLACK_SECRET}/${MM_SLACK_ROOM}

  # Send a Slack message when workflow fails
  notify_failure:
    before_run:
      - _get_workflow_info
    steps:
      - script@1:
          is_always_run: true
          title: Check if PR comment should be updated
          inputs:
            - content: |-
                #!/usr/bin/env bash
                if [[ "$TRIGGERED_BY_PR_LABEL" == "true" && $BITRISE_BUILD_STATUS == 1 ]]; then
                  envman add --key SHOULD_UPDATE_PR_COMMENT --value "true"
                else
                  envman add --key SHOULD_UPDATE_PR_COMMENT --value "false"
                fi
      # Update Bitrise comment in PR with failure status
      - comment-on-github-pull-request@0:
          is_always_run: true
          run_if: '{{getenv "SHOULD_UPDATE_PR_COMMENT" | eq "true"}}'
          inputs:
            - personal_access_token: '$GITHUB_ACCESS_TOKEN'
            - body: |-
                ## [<img alt="https://bitrise.io/" src="https://assets-global.website-files.com/5db35de024bb983af1b4e151/5e6f9ccc3e129dfd8a205e4e_Bitrise%20Logo%20-%20Eggplant%20Bg.png" height="20">](${BITRISEIO_PIPELINE_BUILD_URL}) **Bitrise**

                ❌❌❌ `${BITRISEIO_PIPELINE_TITLE}` failed on Bitrise! ❌❌❌

                Commit hash: ${GITHUB_PR_HASH}
                Build link: ${BITRISEIO_PIPELINE_BUILD_URL}

                >[!NOTE]
                >- You can kick off another `${BITRISEIO_PIPELINE_TITLE}` on Bitrise by removing and re-applying the `Run Smoke E2E` label on the pull request

                <!-- BITRISE_TAG -->
                <!-- BITRISE_FAIL_TAG -->
            - repository_url: '$GIT_REPOSITORY_URL'
            - issue_number: '$GITHUB_PR_NUMBER'
            - api_base_url: 'https://api.github.com'
            - update_comment_tag: '$GITHUB_PR_HASH'
      - slack@3:
          is_always_run: true
          run_if: .IsBuildFailed
          inputs:
            - text: '${BITRISE_APP_TITLE} ${BITRISE_TRIGGERED_WORKFLOW_TITLE} workflow notification'
            - pretext_on_error: ':red_circle: *${BITRISE_TRIGGERED_WORKFLOW_TITLE} failed!*'
            - title: 'Commit #$COMMIT_SHORT_HASH $BRANCH_HEIGHT'
            - title_link: https://github.com/${BITRISEIO_GIT_REPOSITORY_OWNER}/${BITRISEIO_GIT_REPOSITORY_SLUG}/commit/${COMMIT_SHORT_HASH}
            - message: ${BITRISE_GIT_MESSAGE}
            - fields: |
                Branch|${BITRISE_GIT_BRANCH}
                Workflow|${BITRISE_TRIGGERED_WORKFLOW_TITLE}
                Trigger|${WORKFLOW_TRIGGER}
                Build|${BITRISE_BUILD_NUMBER}
            - buttons: |
                View app|${BITRISE_APP_URL}
                View build|${BITRISE_BUILD_URL}
                View commit|https://github.com/${BITRISEIO_GIT_REPOSITORY_OWNER}/${BITRISEIO_GIT_REPOSITORY_SLUG}/commit/${COMMIT_SHORT_HASH}
            - footer: 'Bitrise ${BITRISE_TRIGGERED_WORKFLOW_TITLE} workflow notification'
            - webhook_url: https://hooks.slack.com/services/${MM_SLACK_TOKEN}/${MM_SLACK_SECRET}/${MM_SLACK_ROOM}

  # CI Steps
  ci_test:
    before_run:
      - code_setup
    steps:
      - yarn@0:
          inputs:
            - args: ''
            - command: test:unit --silent
          title: Unit Test
          is_always_run: false
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                echo 'weew - everything passed!'
          title: All Tests Passed
          is_always_run: false
  # E2E Steps

  ### This workflow uses a flag (TEST_SUITE) that defines the specific set of tests to be run.
  ## in this instance Regression. In future iterations we can rename to ios_test_suite_selection & android_test_suite_selection
  ios_build_regression_tests:
    envs:
      - TEST_SUITE: 'Regression'
    after_run:
      - ios_e2e_build
  ios_run_regression_tests:
    envs:
      - TEST_SUITE: 'Regression'
    after_run:
      - ios_e2e_test
  android_build_regression_tests:
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: elite-xl
    envs:
      - TEST_SUITE: 'Regression'
    after_run:
      - android_e2e_build
  android_run_regression_tests:
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: elite-xl
    envs:
      - TEST_SUITE: 'Regression'
    after_run:
      - android_e2e_test
  run_tag_upgrade_android:
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: elite-xl
    envs:
      - PRODUCTION_APP_URL: 'bs://3f81fdb66cba8140909d1ff0a05bc2ace97b307f' # Last production's QA build
      - PRODUCTION_BUILD_VERSION_NAME: 7.20.0
      - PRODUCTION_BUILD_VERSION_NUMBER: 1308
      - CUCUMBER_TAG_EXPRESSION: '@upgrade and @androidApp'
      - PRODUCTION_BUILD_STRING: 'MetaMask-QA v$PRODUCTION_BUILD_VERSION_NAME ($PRODUCTION_BUILD_VERSION_NUMBER)'
      - NEW_BUILD_STRING: 'MetaMask-QA v$VERSION_NAME ($VERSION_NUMBER)'
    after_run:
      - run_android_appium_test

  ### Seperating workflows so they run concurrently during smoke runs
  run_tag_smoke_confirmations_ios:
    envs:
      - TEST_SUITE_FOLDER: './e2e/specs/confirmations/*'
      - TEST_SUITE_TAG: '.*SmokeConfirmations.*'
    after_run:
      - ios_e2e_test
  run_tag_smoke_confirmations_android:
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: elite-xl
    envs:
      - TEST_SUITE_FOLDER: './e2e/specs/confirmations/*'
      - TEST_SUITE_TAG: '.*SmokeConfirmations.*'
    after_run:
      - android_e2e_test
  run_tag_smoke_swaps_ios:
    envs:
      - TEST_SUITE_FOLDER: './e2e/specs/swaps/*'
      - TEST_SUITE_TAG: '.*SmokeSwaps.*'
    after_run:
      - ios_e2e_test
  run_tag_smoke_swaps_android:
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: elite-xl
    envs:
      - TEST_SUITE_FOLDER: './e2e/specs/swaps/*'
      - TEST_SUITE_TAG: '.*SmokeSwaps.*'
    after_run:
      - android_e2e_test
  run_tag_smoke_core_ios:
    envs:
      - TEST_SUITE_FOLDER: './e2e/spec/*/**/*'
      - TEST_SUITE_TAG: '.*SmokeCore.*'
    after_run:
      - ios_e2e_test
  run_tag_smoke_core_android:
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: elite-xl
    envs:
      - TEST_SUITE_FOLDER: './e2e/spec/*/**/*'
      - TEST_SUITE_TAG: '.*SmokeCore.*'
    after_run:
      - android_e2e_test
  android_e2e_build:
    before_run:
      - code_setup
    after_run:
      - notify_failure
    steps:
      - script@1:
          title: Generating ccache key using native folder checksum
          inputs:
            - content: |-
                #!/usr/bin/env bash
                ./scripts/cache/set-cache-envs.sh android
      - restore-gradle-cache@2: {}
      - install-missing-android-tools@3:
          inputs:
            - ndk_version: $NDK_VERSION
            - gradlew_path: $PROJECT_LOCATION/gradlew
      - script@1:
          title: Download cmake 3.22.1 with sdkmanager
          is_always_run: false
          inputs:
            - content: |-
                #!/usr/bin/env bash
                "${ANDROID_HOME}/tools/bin/sdkmanager" "cmake;3.22.1"
      - script@1:
          title: Install CCache & symlink
          inputs:
            - content: |-
                #!/usr/bin/env bash
                sudo apt update
                sudo apt install ccache
      - restore-cache@2:
          title: Restore CCache
          inputs:
            - key: '{{ getenv "CCACHE_KEY" }}'
      - script@1:
          title: Set skip ccache upload
          run_if: '{{ enveq "BITRISE_CACHE_HIT" "exact" }}'
          inputs:
            - content: |-
                #!/usr/bin/env bash
                envman add --key SKIP_CCACHE_UPLOAD --value "true"
      - script@1:
          title: Run detox build
          timeout: 1200
          is_always_run: true
          inputs:
            - content: |-
                #!/usr/bin/env bash
                ./scripts/cache/setup-ccache.sh
                if [ "$TEST_SUITE" = "Regression" ]; then
                  TEST_SUITE="Regression"
                else
                  TEST_SUITE="Smoke"
                fi
                node -v
                export METAMASK_ENVIRONMENT='local'
                export METAMASK_BUILD_TYPE='main'
                IGNORE_BOXLOGS_DEVELOPMENT="true" FORCE_BUNDLING=true yarn test:e2e:android:bitrise:build
      - save-gradle-cache@1: {}
      - save-cache@1:
          title: Save CCache
          run_if: '{{not (enveq "SKIP_CCACHE_UPLOAD" "true")}}'
          inputs:
            - key: '{{ getenv "CCACHE_KEY" }}'
            - paths: |-
                ccache
      - deploy-to-bitrise-io@2.2.3:
          inputs:
            - pipeline_intermediate_files: android/app/build/outputs:INTERMEDIATE_ANDROID_BUILD_DIR
          title: Save Android build
      - save-cache@1:
          title: Save node_modules
          inputs:
            - key: node_modules-{{ .OS }}-{{ .Arch }}-{{ .CommitHash }}
            - paths: node_modules
    meta:
      bitrise.io:
        machine_type_id: elite-xl
        stack: linux-docker-android-20.04
  android_e2e_test:
    before_run:
      - setup
      - prep_environment
    after_run:
      - notify_failure
    steps:
      - restore-gradle-cache@2: {}
      - pull-intermediate-files@1:
          inputs:
            - artifact_sources: .*
          title: Pull Android build
      - script@1:
          title: Copy Android build for Detox
          inputs:
            - content: |-
                #!/usr/bin/env bash
                set -ex

                # Create directories for Detox
                mkdir -p "$BITRISE_SOURCE_DIR/android/app/build/outputs"

                # Copy saved files for Detox usage
                # INTERMEDIATE_ANDROID_BUILD_DIR is the cached directory from android_e2e_build's "Save Android build" step
                cp -r "$INTERMEDIATE_ANDROID_BUILD_DIR" "$BITRISE_SOURCE_DIR/android/app/build"
      - restore-cache@2:
          title: Restore cache node_modules
          inputs:
            - key: node_modules-{{ .OS }}-{{ .Arch }}-{{ .CommitHash }}
      - script@1:
          title: Download cmake 3.22.1 with sdkmanager
          is_always_run: false
          inputs:
            - content: |-
                #!/usr/bin/env bash
                "${ANDROID_HOME}/tools/bin/sdkmanager" "cmake;3.22.1"
      - avd-manager@1:
          inputs:
            - api_level: '30'
            - create_command_flags: --sdcard 8192M
            - start_command_flags: -read-only
            - profile: pixel_5
      - wait-for-android-emulator@1: {}
      - script@1:
          title: Run detox test
          timeout: 1200
          is_always_run: false
          inputs:
            - content: |-
                #!/usr/bin/env bash
                if [ -n "$TEST_SUITE_FOLDER" ]; then
                  echo "TEST_SUITE_FOLDER value is: $TEST_SUITE_FOLDER"
                fi
                if [ "$TEST_SUITE" = "Regression" ]; then
                TEST_SUITE="Regression"
                else
                TEST_SUITE="Smoke"
                fi
                if [ -n "$TEST_SUITE_TAG" ]; then
                echo "TEST_SUITE_TAG value is: $TEST_SUITE_TAG"
                TEST_SUITE=$TEST_SUITE_TAG
                fi
                export METAMASK_ENVIRONMENT='local'
                export METAMASK_BUILD_TYPE='main'
                IGNORE_BOXLOGS_DEVELOPMENT="true" FORCE_BUNDLING=true yarn test:e2e:android:bitrise:run "$TEST_SUITE_FOLDER" --testNamePattern="$TEST_SUITE"
      - custom-test-results-export@1:
          title: Export test results
          is_always_run: true
          is_skippable: true
          inputs:
            - base_path: $BITRISE_SOURCE_DIR/e2e/reports/
            - test_name: E2E Tests
            - search_pattern: $BITRISE_SOURCE_DIR/e2e/reports/junit.xml
      - deploy-to-bitrise-io@2.2.3:
          title: Deploy test report files
          is_always_run: true
          is_skippable: true
      - script@1:
          title: Copy screenshot files
          is_always_run: true
          run_if: .IsBuildFailed
          inputs:
            - content: |-
                #!/usr/bin/env bash
                set -ex
                cp -r "$BITRISE_SOURCE_DIR/artifacts/screenshots"  "$BITRISE_DEPLOY_DIR"
      - deploy-to-bitrise-io@2.3:
          title: Deploy test screenshots
          is_always_run: true
          run_if: .IsBuildFailed
          inputs:
            - deploy_path: $BITRISE_DEPLOY_DIR
            - is_compress: true
            - zip_name: E2E_Android_Failure_Screenshots
    meta:
      bitrise.io:
        machine_type_id: elite-xl
        stack: linux-docker-android-20.04
  ios_e2e_build:
    before_run:
      - code_setup
    after_run:
      - notify_failure
    steps:
      - script@1:
          title: Generating ccache key using native folder checksum
          inputs:
            - content: |-
                #!/usr/bin/env bash
                ./scripts/cache/set-cache-envs.sh ios
      - certificate-and-profile-installer@1: {}
      - set-xcode-build-number@1:
          inputs:
            - build_short_version_string: $VERSION_NAME
            - plist_path: $PROJECT_LOCATION_IOS/MetaMask/Info.plist
      - script:
          inputs:
            - content: |-
                # Add cache directory to environment variable
                envman add --key BREW_APPLESIMUTILS --value "$(brew --cellar)/applesimutils"
                envman add --key BREW_OPT_APPLESIMUTILS --value "/usr/local/opt/applesimutils"
                brew tap wix/brew
          title: Set Env Path for caching deps
      - script@1:
          title: Install CCache & symlink
          inputs:
            - content: |-
                #!/usr/bin/env bash
                brew install ccache with HOMEBREW_NO_DEPENDENTS_CHECK=1
                ln -s $(which ccache) /usr/local/bin/gcc
                ln -s $(which ccache) /usr/local/bin/g++
                ln -s $(which ccache) /usr/local/bin/cc
                ln -s $(which ccache) /usr/local/bin/c++
                ln -s $(which ccache) /usr/local/bin/clang
                ln -s $(which ccache) /usr/local/bin/clang++
      - restore-cache@2:
          title: Restore CCache
          inputs:
            - key: '{{ getenv "CCACHE_KEY" }}'
      - script@1:
          title: Set skip ccache upload
          run_if: '{{ enveq "BITRISE_CACHE_HIT" "exact" }}'
          inputs:
            - content: |-
                #!/usr/bin/env bash
                envman add --key SKIP_CCACHE_UPLOAD --value "true"
      - script@1:
          title: Run detox build
          timeout: 1200
          is_always_run: true
          inputs:
            - content: |-
                #!/usr/bin/env bash
                ./scripts/cache/setup-ccache.sh
                if [ "$TEST_SUITE" = "Regression" ]; then
                  TEST_SUITE="Regression"
                else
                  TEST_SUITE="Smoke"
                fi
                node -v
                export METAMASK_ENVIRONMENT='local'
                export METAMASK_BUILD_TYPE='main'
                IGNORE_BOXLOGS_DEVELOPMENT="true" FORCE_BUNDLING=true yarn test:e2e:ios:debug:build
      - save-cocoapods-cache@1: {}
      - save-cache@1:
          title: Save CCache
          run_if: '{{not (enveq "SKIP_CCACHE_UPLOAD" "true")}}'
          inputs:
            - key: '{{ getenv "CCACHE_KEY" }}'
            - paths: |-
                ccache
      - deploy-to-bitrise-io@2.2.3:
          inputs:
            - pipeline_intermediate_files: |-
                ios/build/Build:INTERMEDIATE_IOS_BUILD_DIR
                ../Library/Detox/ios:INTERMEDIATE_IOS_DETOX_DIR
          title: Save iOS build
      - save-cache@1:
          title: Save node_modules
          inputs:
            - key: node_modules-{{ .OS }}-{{ .Arch }}-{{ .CommitHash }}
            - paths: node_modules
  ios_e2e_test:
    before_run:
      - setup
      - prep_environment
    after_run:
      - notify_failure
    steps:
      - pull-intermediate-files@1:
          inputs:
            - artifact_sources: .*
          title: Pull iOS build
      - script@1:
          title: Copy iOS build for Detox
          inputs:
            - content: |-
                #!/usr/bin/env bash
                set -ex

                # Create directories for Detox
                mkdir -p "$BITRISE_SOURCE_DIR/ios/build/Build"
                mkdir -p "$BITRISE_SOURCE_DIR/../Library/Detox/ios"

                # Copy saved files for Detox usage
                # INTERMEDIATE_IOS_BUILD_DIR & INTERMEDIATE_IOS_DETOX_DIR are the cached directories by ios_e2e_build's "Save iOS build" step
                cp -r "$INTERMEDIATE_IOS_BUILD_DIR" "$BITRISE_SOURCE_DIR/ios/build"
                cp -r "$INTERMEDIATE_IOS_DETOX_DIR" "$BITRISE_SOURCE_DIR/../Library/Detox"
      - restore-cocoapods-cache@2: {}
      - restore-cache@2:
          title: Restore cache node_modules
          inputs:
            - key: node_modules-{{ .OS }}-{{ .Arch }}-{{ .CommitHash }}
      - certificate-and-profile-installer@1: {}
      - set-xcode-build-number@1:
          inputs:
            - build_short_version_string: $VERSION_NAME
            - plist_path: $PROJECT_LOCATION_IOS/MetaMask/Info.plist
      - script:
          inputs:
            - content: |-
                # Add cache directory to environment variable
                envman add --key BREW_APPLESIMUTILS --value "$(brew --cellar)/applesimutils"
                envman add --key BREW_OPT_APPLESIMUTILS --value "/usr/local/opt/applesimutils"
                brew tap wix/brew
          title: Set Env Path for caching deps
      - script@1:
          title: Run detox test
          timeout: 1200
          is_always_run: false
          inputs:
            - content: |-
                #!/usr/bin/env bash
                if [ -n "$TEST_SUITE_FOLDER" ]; then
                  echo "TEST_SUITE_FOLDER value is: $TEST_SUITE_FOLDER"
                fi
                if [ "$TEST_SUITE" = "Regression" ]; then
                  TEST_SUITE="Regression"
                else
                  TEST_SUITE="Smoke"
                fi
                if [ -n "$TEST_SUITE_TAG" ]; then
                echo "TEST_SUITE_TAG value is: $TEST_SUITE_TAG"
                TEST_SUITE=$TEST_SUITE_TAG
                fi
                node -v
                export METAMASK_ENVIRONMENT='local'
                export METAMASK_BUILD_TYPE='main'
                IGNORE_BOXLOGS_DEVELOPMENT="true" FORCE_BUNDLING=true yarn test:e2e:ios:debug:run "$TEST_SUITE_FOLDER" --testNamePattern="$TEST_SUITE"
      - custom-test-results-export@1:
          is_always_run: true
          is_skippable: false
          title: Export test results
          inputs:
            - base_path: $BITRISE_SOURCE_DIR/e2e/reports/
            - test_name: E2E Tests
            - search_pattern: $BITRISE_SOURCE_DIR/e2e/reports/junit.xml
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: true
          is_skippable: true
          title: Deploy test report files
      - script@1:
          is_always_run: true
          run_if: .IsBuildFailed
          title: Copy screenshot files
          inputs:
            - content: |-
                #!/usr/bin/env bash
                set -ex
                cp -r "$BITRISE_SOURCE_DIR/artifacts/screenshots"  "$BITRISE_DEPLOY_DIR"
      - deploy-to-bitrise-io@2.3:
          is_always_run: true
          run_if: .IsBuildFailed
          title: Deploy test screenshots
          inputs:
            - deploy_path: $BITRISE_DEPLOY_DIR
            - is_compress: true
            - zip_name: 'E2E_IOS_Failure_Screenshots'
  start_e2e_tests:
    steps:
      - build-router-start@0:
          inputs:
            - workflows: |-
                ios_e2e_test
                wdio_android_e2e_test
            - wait_for_builds: 'true'
            - access_token: $BITRISE_START_BUILD_ACCESS_TOKEN
      - build-router-wait@0:
          inputs:
            - abort_on_fail: 'yes'
            - access_token: $BITRISE_START_BUILD_ACCESS_TOKEN
  build_android_release:
    before_run:
      - code_setup
    after_run:
      - notify_failure
    steps:
      - change-android-versioncode-and-versionname@1:
          inputs:
            - new_version_name: $VERSION_NAME
            - new_version_code: $VERSION_NUMBER
            - build_gradle_path: $PROJECT_LOCATION_ANDROID/app/build.gradle
      - file-downloader@1:
          inputs:
            - source: $BITRISEIO_ANDROID_KEYSTORE_URL
            - destination: android/keystores/release.keystore
      - restore-gradle-cache@2: {}
      - install-missing-android-tools@3:
          inputs:
            - ndk_version: $NDK_VERSION
            - gradlew_path: $PROJECT_LOCATION/gradlew
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                "${ANDROID_HOME}/tools/bin/sdkmanager" "cmake;3.22.1"
          title: Download cmake 3.22.1 with sdkmanager
          is_always_run: false
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                node -v
                METAMASK_BUILD_TYPE='main' METAMASK_ENVIRONMENT='production' yarn build:android:pre-release:bundle
          title: Build Android Pre-Release Bundle
          is_always_run: false
      - save-gradle-cache@1: {}
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: $PROJECT_LOCATION/app/build/outputs/apk/prod/release/app-prod-release.apk:BITRISE_PLAY_STORE_APK_PATH
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/apk/prod/release/app-prod-release.apk
          title: Bitrise Deploy APK
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: $PROJECT_LOCATION/app/build/outputs/apk/prod/release/sha512sums.txt:BITRISE_PLAY_STORE_SHA512SUMS_PATH
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/apk/prod/release/sha512sums.txt
          title: Bitrise Deploy Checksum
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: $PROJECT_LOCATION/app/build/outputs/mapping/prodRelease/mapping.txt:BITRISE_PLAY_STORE_MAPPING_PATH
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/mapping/prodRelease/mapping.txt
          title: Bitrise ProGuard Map Files
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: $PROJECT_LOCATION/app/build/outputs/bundle/prodRelease/app-prod-release.aab:BITRISE_PLAY_STORE_ABB_PATH
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/bundle/prodRelease/app-prod-release.aab
          title: Bitrise Deploy AAB
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: sourcemaps/android/index.js.map:BITRISE_PLAY_STORE_SOURCEMAP_PATH
            - deploy_path: sourcemaps/android/index.js.map
          title: Bitrise Deploy Sourcemaps
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: elite-xl
  run_android_appium_test:
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: elite-xl
    before_run:
      - build_android_qa
    after_run:
      - wdio_android_e2e_test
  build_android_qa:
    before_run:
      - code_setup
    after_run:
      - _upload_apk_to_browserstack
      - notify_failure
    steps:
      - change-android-versioncode-and-versionname@1:
          inputs:
            - new_version_name: $VERSION_NAME
            - new_version_code: $VERSION_NUMBER
            - build_gradle_path: $PROJECT_LOCATION_ANDROID/app/build.gradle
      - file-downloader@1:
          inputs:
            - source: $BITRISEIO_ANDROID_QA_KEYSTORE_URL
            - destination: android/keystores/internalRelease.keystore
      - restore-gradle-cache@2: {}
      - install-missing-android-tools@3:
          inputs:
            - ndk_version: $NDK_VERSION
            - gradlew_path: $PROJECT_LOCATION/gradlew
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                "${ANDROID_HOME}/tools/bin/sdkmanager" "cmake;3.22.1"
          title: Download cmake 3.22.1 with sdkmanager
          is_always_run: false
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                node -v
                GIT_BRANCH=$BITRISE_GIT_BRANCH METAMASK_BUILD_TYPE='main' METAMASK_ENVIRONMENT='qa' yarn build:android:pre-release:bundle:qa
          title: Build Android Pre-Release Bundle
          is_always_run: false
      - save-gradle-cache@1: {}
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/apk/qa/release/$QA_APK_NAME.apk
          title: Bitrise Deploy APK
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/apk/qa/release/sha512sums.txt
          title: Bitrise Deploy Checksum
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/mapping/qaRelease/mapping.txt
          title: Bitrise ProGuard Map Files
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/bundle/qaRelease/app-qa-release.aab
          title: Bitrise Deploy AAB
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - deploy_path: sourcemaps/android/index.js.map
          title: Bitrise Deploy Sourcemaps
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: elite-xl
  _upload_apk_to_browserstack:
    steps:
      - script@1:
          title: Upload APK to Browserstack
          inputs:
            - content: |-
                #!/usr/bin/env bash
                set -e
                set -x
                set -o pipefail
                APK_PATH=$PROJECT_LOCATION/app/build/outputs/apk/qa/release/app-qa-release.apk
                CUSTOM_ID="$BITRISE_GIT_BRANCH-$VERSION_NAME-$VERSION_NUMBER"
                CUSTOM_ID=${CUSTOM_ID////-}
                curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" -X POST "https://api-cloud.browserstack.com/app-automate/upload" -F "file=@$APK_PATH" -F 'data={"custom_id": "'$CUSTOM_ID'"}' | jq -j '.app_url' | envman add --key BROWSERSTACK_APP_URL
                APK_PATH_FOR_APP_LIVE=$PROJECT_LOCATION/app/build/outputs/apk/qa/release/"$CUSTOM_ID".apk
                mv "$APK_PATH" "$APK_PATH_FOR_APP_LIVE"
                curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" -X POST "https://api-cloud.browserstack.com/app-live/upload" -F "file=@$APK_PATH_FOR_APP_LIVE" -F 'data={"custom_id": "'$CUSTOM_ID'"}'
                curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" -X GET https://api-cloud.browserstack.com/app-automate/recent_apps | jq > browserstack_uploaded_apps.json
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - deploy_path: browserstack_uploaded_apps.json
          title: Bitrise Deploy Browserstack Uploaded Apps
  wdio_android_e2e_test:
    before_run:
      - code_setup
    after_run:
      - notify_failure
    steps:
      - script@1:
          title: Run Android E2E tests on Browserstack
          inputs:
            - content: |-
                #!/usr/bin/env bash
                yarn test:wdio:android:browserstack
      - script@1:
          is_always_run: true
          is_skippable: false
          title: Add tests reports to Bitrise
          inputs:
            - content: |-
                #!/usr/bin/env bash
                cp -r $BITRISE_SOURCE_DIR/wdio/reports/junit-results/ $BITRISE_TEST_RESULT_DIR/
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: true
          is_skippable: false
          inputs:
            - deploy_path: $BITRISE_TEST_RESULT_DIR
          title: Deploy test report files
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: standard
  deploy_android_to_store:
    steps:
      - pull-intermediate-files@1:
          inputs:
            - artifact_sources: .*
      - google-play-deploy:
          inputs:
            - app_path: $BITRISE_PLAY_STORE_ABB_PATH
            - track: internal
            - service_account_json_key_path: $BITRISEIO_BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL_URL
            - package_name: $MM_ANDROID_PACKAGE_NAME
    envs:
      - opts:
          is_expand: true
        MM_ANDROID_PACKAGE_NAME: io.metamask
  deploy_ios_to_store:
    steps:
      - pull-intermediate-files@1:
          inputs:
            - artifact_sources: .*
      - deploy-to-itunesconnect-application-loader@1:
          inputs:
            - ipa_path: $BITRISE_APP_STORE_IPA_PATH
  build_ios_release:
    before_run:
      - code_setup
    after_run:
      - notify_failure
    steps:
      - certificate-and-profile-installer@1: {}
      - set-xcode-build-number@1:
          inputs:
            - build_short_version_string: $VERSION_NAME
            - build_version: $VERSION_NUMBER
            - plist_path: $PROJECT_LOCATION_IOS/MetaMask/Info.plist
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                METAMASK_BUILD_TYPE='main' METAMASK_ENVIRONMENT='production' yarn build:ios:pre-release
          title: iOS Sourcemaps & Build
          is_always_run: false
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: ios/build/output/MetaMask.ipa:BITRISE_APP_STORE_IPA_PATH
            - deploy_path: ios/build/output/MetaMask.ipa
          title: Deploy iOS IPA
      - deploy-to-bitrise-io@1.6.1:
          is_always_run: false
          is_skippable: true
          inputs:
            - deploy_path: ios/build/MetaMask.xcarchive
          title: Deploy Symbols File
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: sourcemaps/ios/index.js.map:BITRISE_APP_STORE_SOURCEMAP_PATH
            - deploy_path: sourcemaps/ios/index.js.map
          title: Deploy Source Map
  build_ios_qa:
    before_run:
      - code_setup
    after_run:
      - _upload_ipa_to_browserstack
      - notify_failure
    steps:
      - certificate-and-profile-installer@1: {}
      - set-xcode-build-number@1:
          inputs:
            - build_short_version_string: $VERSION_NAME
            - build_version: $VERSION_NUMBER
            - plist_path: $PROJECT_LOCATION_IOS/MetaMask/MetaMask-QA-Info.plist
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                node -v
                GIT_BRANCH=$BITRISE_GIT_BRANCH METAMASK_BUILD_TYPE='main' METAMASK_ENVIRONMENT='qa' yarn build:ios:pre-qa
          title: iOS Sourcemaps & Build
          is_always_run: false
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: ios/build/output/MetaMask-QA.ipa:BITRISE_APP_STORE_IPA_PATH
            - deploy_path: ios/build/output/MetaMask-QA.ipa
          title: Deploy iOS IPA
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - deploy_path: ios/build/MetaMask-QA.xcarchive
          title: Deploy Symbols File
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: sourcemaps/ios/index.js.map:BITRISE_APP_STORE_SOURCEMAP_PATH
            - deploy_path: sourcemaps/ios/index.js.map
          title: Deploy Source Map
  _upload_ipa_to_browserstack:
    steps:
      - script@1:
          title: Upload IPA to Browserstack
          inputs:
            - content: |-
                #!/usr/bin/env bash
                set -e
                set -x
                set -o pipefail
                CUSTOM_ID="$BITRISE_GIT_BRANCH-$VERSION_NAME-$VERSION_NUMBER"
                CUSTOM_ID=${CUSTOM_ID////-}
                IPA_PATH=ios/build/output/MetaMask-QA.ipa
                IPA_PATH_FOR_APP_LIVE=ios/build/output/"$CUSTOM_ID".ipa
                curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" -X POST "https://api-cloud.browserstack.com/app-automate/upload" -F "file=@$IPA_PATH" -F 'data={"custom_id": "'$CUSTOM_ID'"}' | jq -j '.app_url' | envman add --key BROWSERSTACK_APP_URL
                mv "$IPA_PATH" "$IPA_PATH_FOR_APP_LIVE"
                curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" -X POST "https://api-cloud.browserstack.com/app-live/upload" -F "file=@$IPA_PATH_FOR_APP_LIVE" -F 'data={"custom_id": "'$CUSTOM_ID'"}'
                curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" -X GET https://api-cloud.browserstack.com/app-automate/recent_apps | jq > browserstack_uploaded_apps.json
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - deploy_path: browserstack_uploaded_apps.json
          title: Bitrise Deploy Browserstack Uploaded Apps
  build_ios_flask_release:
    before_run:
      - code_setup
    after_run:
      - notify_failure
    steps:
      - certificate-and-profile-installer@1: {}
      - set-xcode-build-number@1:
          inputs:
            - build_short_version_string: $FLASK_VERSION_NAME
            - build_version: $FLASK_VERSION_NUMBER
            - plist_path: $PROJECT_LOCATION_IOS/MetaMask/MetaMask-Flask-Info.plist
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                node -v
                METAMASK_BUILD_TYPE='flask' METAMASK_ENVIRONMENT='production' yarn build:ios:pre-flask
          title: iOS Sourcemaps & Build
          is_always_run: false
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: ios/build/output/MetaMask-Flask.ipa:BITRISE_APP_STORE_IPA_PATH
            - deploy_path: ios/build/output/MetaMask-Flask.ipa
          title: Deploy iOS IPA
      - deploy-to-bitrise-io@1.6.1:
          is_always_run: false
          is_skippable: true
          inputs:
            - deploy_path: ios/build/MetaMask-Flask.xcarchive:BITRISE_APP_STORE_XCARCHIVE_PATH
          title: Deploy Symbols File
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: sourcemaps/ios/index.js.map:BITRISE_APP_STORE_SOURCEMAP_PATH
            - deploy_path: sourcemaps/ios/index.js.map
          title: Deploy Source Map
  build_android_flask_release:
    before_run:
      - code_setup
    after_run:
      - notify_failure
    steps:
      - change-android-versioncode-and-versionname@1:
          inputs:
            - new_version_name: $FLASK_VERSION_NAME
            - new_version_code: $FLASK_VERSION_NUMBER
            - build_gradle_path: $PROJECT_LOCATION_ANDROID/app/build.gradle
      - file-downloader@1:
          inputs:
            - source: $BITRISEIO_ANDROID_FLASK_KEYSTORE_URL_URL
            - destination: android/keystores/flaskRelease.keystore
      - restore-gradle-cache@2: {}
      - install-missing-android-tools@3:
          inputs:
            - ndk_revision: $NDK_VERSION
            - gradlew_path: $PROJECT_LOCATION/gradlew
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                "${ANDROID_HOME}/tools/bin/sdkmanager" "cmake;3.22.1"
          title: Download cmake 3.22.1 with sdkmanager
          is_always_run: false
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                node -v
                METAMASK_BUILD_TYPE='flask' METAMASK_ENVIRONMENT='production' yarn build:android:pre-release:bundle:flask
          title: Build Android Pre-Release Bundle
          is_always_run: false
      - save-gradle-cache@1: {}
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: $PROJECT_LOCATION/app/build/outputs/apk/flask/release/app-flask-release.apk:BITRISE_PLAY_STORE_APK_PATH
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/apk/flask/release/app-flask-release.apk
          title: Bitrise Deploy APK
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: $PROJECT_LOCATION/app/build/outputs/apk/flask/release/sha512sums.txt:BITRISE_PLAY_STORE_SHA512SUMS_PATH
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/apk/flask/release/sha512sums.txt
          title: Bitrise Deploy Checksum
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: $PROJECT_LOCATION/app/build/outputs/mapping/flaskRelease/mapping.txt:BITRISE_PLAY_STORE_MAPPING_PATH
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/mapping/flaskRelease/mapping.txt
          title: Bitrise ProGuard Map Files
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: $PROJECT_LOCATION/app/build/outputs/bundle/flaskRelease/app-flask-release.aab:BITRISE_PLAY_STORE_ABB_PATH
            - deploy_path: $PROJECT_LOCATION/app/build/outputs/bundle/flaskRelease/app-flask-release.aab
          title: Bitrise Deploy AAB
      - deploy-to-bitrise-io@2.2.3:
          is_always_run: false
          is_skippable: true
          inputs:
            - pipeline_intermediate_files: /bitrise/src/sourcemaps/android/index.js.map:BITRISE_PLAY_STORE_SOURCEMAP_PATH
            - deploy_path: sourcemaps/android/index.js.map
          title: Bitrise Deploy Sourcemaps
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
        machine_type_id: elite-xl

app:
  envs:
    - opts:
        is_expand: false
      MM_NOTIFICATIONS_UI_ENABLED: false
    - opts:
        is_expand: false
      PROJECT_LOCATION: android
    - opts:
        is_expand: false
      NDK_VERSION: 24.0.8215888
    - opts:
        is_expand: false
      QA_APK_NAME: app-qa-release
    - opts:
        is_expand: false
      MODULE: app
    - opts:
        is_expand: false
      VARIANT: ''
    - opts:
        is_expand: false
      BITRISE_PROJECT_PATH: ios/MetaMask.xcworkspace
    - opts:
        is_expand: false
      BITRISE_SCHEME: MetaMask
    - opts:
        is_expand: false
      BITRISE_EXPORT_METHOD: enterprise
    - opts:
        is_expand: false
      PROJECT_LOCATION_ANDROID: android
    - opts:
        is_expand: false
      PROJECT_LOCATION_IOS: ios
    - opts:
        is_expand: false
      VERSION_NAME: 7.22.0
    - opts:
        is_expand: false
      VERSION_NUMBER: 1325
    - opts:
        is_expand: false
      FLASK_VERSION_NAME: 7.22.0
    - opts:
        is_expand: false
      FLASK_VERSION_NUMBER: 1325
    - opts:
        is_expand: false
      ANDROID_APK_LINK: ''
    - opts:
        is_expand: false
      ANDROID_AAP_LINK: ''
    - opts:
        is_expand: false
      IOS_APP_LINK: ''
    - opts:
        is_expand: false
      NODE_VERSION: 20.12.2
    - opts:
        is_expand: false
      YARN_VERSION: 1.22.22
    - opts:
        is_expand: false
      COREPACK_VERSION: 0.28.0
meta:
  bitrise.io:
    stack: osx-xcode-15.0.x
    machine_type_id: g2-m1-max.5core
trigger_map:
  - push_branch: release/*
    pipeline: release_e2e_pipeline
  - push_branch: main
    pipeline: pr_smoke_e2e_pipeline
  - tag: 'v*.*.*-RC-*'
    pipeline: release_builds_to_store_pipeline
  - tag: 'qa-*'
    pipeline: create_qa_builds_pipeline
  - tag: 'dev-e2e-*'
    pipeline: pr_smoke_e2e_pipeline
