{"version":3,"file":"SignatureController.js","sourceRoot":"","sources":["../src/SignatureController.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from 'events';\nimport {\n  MessageManager,\n  MessageParams,\n  MessageParamsMetamask,\n  PersonalMessageManager,\n  PersonalMessageParams,\n  PersonalMessageParamsMetamask,\n  TypedMessageManager,\n  TypedMessageParams,\n  TypedMessageParamsMetamask,\n  AbstractMessageManager,\n  AbstractMessage,\n  MessageManagerState,\n  AbstractMessageParams,\n  AbstractMessageParamsMetamask,\n  OriginalRequest,\n} from '@metamask/message-manager';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { bufferToHex } from 'ethereumjs-util';\n\nimport {\n  BaseControllerV2,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { Patch } from 'immer';\nimport {\n  AcceptRequest,\n  AddApprovalRequest,\n  RejectRequest,\n} from '@metamask/approval-controller';\nimport { ORIGIN_METAMASK } from '@metamask/controller-utils';\n\nconst controllerName = 'SignatureController';\nconst methodNameSign = 'eth_sign';\nconst methodNamePersonalSign = 'personal_sign';\nconst methodNameTypedSign = 'eth_signTypedData';\n\nconst stateMetadata = {\n  unapprovedMsgs: { persist: false, anonymous: false },\n  unapprovedPersonalMsgs: { persist: false, anonymous: false },\n  unapprovedTypedMessages: { persist: false, anonymous: false },\n  unapprovedMsgCount: { persist: false, anonymous: false },\n  unapprovedPersonalMsgCount: { persist: false, anonymous: false },\n  unapprovedTypedMessagesCount: { persist: false, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  unapprovedMsgs: {},\n  unapprovedPersonalMsgs: {},\n  unapprovedTypedMessages: {},\n  unapprovedMsgCount: 0,\n  unapprovedPersonalMsgCount: 0,\n  unapprovedTypedMessagesCount: 0,\n});\n\ntype CoreMessage = AbstractMessage & {\n  messageParams: AbstractMessageParams;\n};\n\ntype StateMessage = Required<AbstractMessage> & {\n  msgParams: Required<AbstractMessageParams>;\n  securityProviderResponse: any;\n};\n\ntype SignatureControllerState = {\n  unapprovedMsgs: Record<string, StateMessage>;\n  unapprovedPersonalMsgs: Record<string, StateMessage>;\n  unapprovedTypedMessages: Record<string, StateMessage>;\n  unapprovedMsgCount: number;\n  unapprovedPersonalMsgCount: number;\n  unapprovedTypedMessagesCount: number;\n};\n\ntype AllowedActions = AddApprovalRequest | AcceptRequest | RejectRequest;\n\nexport type GetSignatureState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => SignatureControllerState;\n};\n\nexport type SignatureStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [SignatureControllerState, Patch[]];\n};\n\nexport type SignatureControllerActions = GetSignatureState;\n\nexport type SignatureControllerEvents = SignatureStateChange;\n\nexport type SignatureControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  SignatureControllerActions | AllowedActions,\n  SignatureControllerEvents,\n  AllowedActions['type'],\n  never\n>;\n\nexport interface KeyringController {\n  signMessage: (messsageParams: MessageParams) => Promise<string>;\n  signPersonalMessage: (\n    messsageParams: PersonalMessageParams,\n  ) => Promise<string>;\n  signTypedMessage: (\n    messsageParams: TypedMessageParams,\n    options: { version: string | undefined },\n  ) => Promise<string>;\n}\n\nexport type SignatureControllerOptions = {\n  messenger: SignatureControllerMessenger;\n  keyringController: KeyringController;\n  isEthSignEnabled: () => boolean;\n  getState: () => any;\n  securityProviderRequest: (\n    requestData: any,\n    methodName: string,\n  ) => Promise<any>;\n};\n\n/**\n * Controller for creating signing requests requiring user approval.\n */\nexport class SignatureController extends BaseControllerV2<\n  typeof controllerName,\n  SignatureControllerState,\n  SignatureControllerMessenger\n> {\n  hub: EventEmitter;\n\n  private _keyringController: KeyringController;\n\n  private _isEthSignEnabled: () => boolean;\n\n  private _getState: () => any;\n\n  private _messageManager: MessageManager;\n\n  private _personalMessageManager: PersonalMessageManager;\n\n  private _typedMessageManager: TypedMessageManager;\n\n  private _securityProviderRequest: (\n    requestData: any,\n    methodName: string,\n  ) => Promise<any>;\n\n  /**\n   * Construct a Sign controller.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The restricted controller messenger for the sign controller.\n   * @param options.keyringController - An instance of a keyring controller used to perform the signing operations.\n   * @param options.isEthSignEnabled - Callback to return true if eth_sign is enabled.\n   * @param options.getState - Callback to retrieve all user state.\n   * @param options.securityProviderRequest - A function for verifying a message, whether it is malicious or not.\n   */\n  constructor({\n    messenger,\n    keyringController,\n    isEthSignEnabled,\n    getState,\n    securityProviderRequest,\n  }: SignatureControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: getDefaultState(),\n    });\n\n    this._keyringController = keyringController;\n    this._isEthSignEnabled = isEthSignEnabled;\n    this._getState = getState;\n    this._securityProviderRequest = securityProviderRequest;\n\n    this.hub = new EventEmitter();\n    this._messageManager = new MessageManager();\n    this._personalMessageManager = new PersonalMessageManager();\n    this._typedMessageManager = new TypedMessageManager();\n\n    this._handleMessageManagerEvents(\n      this._messageManager,\n      methodNameSign,\n      'unapprovedMessage',\n    );\n    this._handleMessageManagerEvents(\n      this._personalMessageManager,\n      methodNamePersonalSign,\n      'unapprovedPersonalMessage',\n    );\n    this._handleMessageManagerEvents(\n      this._typedMessageManager,\n      methodNameTypedSign,\n      'unapprovedTypedMessage',\n    );\n\n    this._subscribeToMessageState(\n      this._messageManager,\n      (state, newMessages, messageCount) => {\n        state.unapprovedMsgs = newMessages;\n        state.unapprovedMsgCount = messageCount;\n      },\n    );\n\n    this._subscribeToMessageState(\n      this._personalMessageManager,\n      (state, newMessages, messageCount) => {\n        state.unapprovedPersonalMsgs = newMessages;\n        state.unapprovedPersonalMsgCount = messageCount;\n      },\n    );\n\n    this._subscribeToMessageState(\n      this._typedMessageManager,\n      (state, newMessages, messageCount) => {\n        state.unapprovedTypedMessages = newMessages;\n        state.unapprovedTypedMessagesCount = messageCount;\n      },\n    );\n  }\n\n  /**\n   * A getter for the number of 'unapproved' Messages in this.messages.\n   *\n   * @returns The number of 'unapproved' Messages in this.messages\n   */\n  get unapprovedMsgCount(): number {\n    return this._messageManager.getUnapprovedMessagesCount();\n  }\n\n  /**\n   * A getter for the number of 'unapproved' PersonalMessages in this.messages.\n   *\n   * @returns The number of 'unapproved' PersonalMessages in this.messages\n   */\n  get unapprovedPersonalMessagesCount(): number {\n    return this._personalMessageManager.getUnapprovedMessagesCount();\n  }\n\n  /**\n   * A getter for the number of 'unapproved' TypedMessages in this.messages.\n   *\n   * @returns The number of 'unapproved' TypedMessages in this.messages\n   */\n  get unapprovedTypedMessagesCount(): number {\n    return this._typedMessageManager.getUnapprovedMessagesCount();\n  }\n\n  /**\n   * Reset the controller state to the initial state.\n   */\n  resetState() {\n    this.update(() => getDefaultState());\n  }\n\n  /**\n   * Called when a Dapp uses the eth_sign method, to request user approval.\n   * eth_sign is a pure signature of arbitrary data. It is on a deprecation\n   * path, since this data can be a transaction, or can leak private key\n   * information.\n   *\n   * @param msgParams - The params passed to eth_sign.\n   * @param [req] - The original request, containing the origin.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newUnsignedMessage(\n    msgParams: MessageParams,\n    req: OriginalRequest,\n  ): Promise<string> {\n    // eslint-disable-next-line camelcase\n    if (!this._isEthSignEnabled()) {\n      throw ethErrors.rpc.methodNotFound(\n        'eth_sign has been disabled. You must enable it in the advanced settings',\n      );\n    }\n\n    const data = this._normalizeMsgData(msgParams.data);\n\n    // 64 hex + \"0x\" at the beginning\n    // This is needed because Ethereum's EcSign works only on 32 byte numbers\n    // For 67 length see: https://github.com/MetaMask/metamask-extension/pull/12679/files#r749479607\n    if (data.length !== 66 && data.length !== 67) {\n      throw ethErrors.rpc.invalidParams(\n        'eth_sign requires 32 byte message hash',\n      );\n    }\n\n    return this._messageManager.addUnapprovedMessageAsync(msgParams, req);\n  }\n\n  /**\n   * Called when a dapp uses the personal_sign method.\n   * This is identical to the Geth eth_sign method, and may eventually replace\n   * eth_sign.\n   *\n   * We currently define our eth_sign and personal_sign mostly for legacy Dapps.\n   *\n   * @param msgParams - The params of the message to sign & return to the Dapp.\n   * @param req - The original request, containing the origin.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newUnsignedPersonalMessage(\n    msgParams: PersonalMessageParams,\n    req: OriginalRequest,\n  ): Promise<string> {\n    return this._personalMessageManager.addUnapprovedMessageAsync(\n      msgParams,\n      req,\n    );\n  }\n\n  /**\n   * Called when a dapp uses the eth_signTypedData method, per EIP 712.\n   *\n   * @param msgParams - The params passed to eth_signTypedData.\n   * @param req - The original request, containing the origin.\n   * @param version - The version indicating the format of the typed data.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newUnsignedTypedMessage(\n    msgParams: TypedMessageParams,\n    req: OriginalRequest,\n    version: string,\n  ): Promise<string> {\n    return this._typedMessageManager.addUnapprovedMessageAsync(\n      msgParams,\n      version,\n      req,\n    );\n  }\n\n  /**\n   * Signifies user intent to complete an eth_sign method.\n   *\n   * @param msgParams - The params passed to eth_call.\n   * @returns Full state update.\n   */\n  async signMessage(msgParams: MessageParamsMetamask) {\n    return await this._signAbstractMessage(\n      this._messageManager,\n      methodNameSign,\n      msgParams,\n      async (cleanMsgParams) =>\n        await this._keyringController.signMessage(cleanMsgParams),\n    );\n  }\n\n  /**\n   * Signifies a user's approval to sign a personal_sign message in queue.\n   * Triggers signing, and the callback function from newUnsignedPersonalMessage.\n   *\n   * @param msgParams - The params of the message to sign & return to the Dapp.\n   * @returns A full state update.\n   */\n  async signPersonalMessage(msgParams: PersonalMessageParamsMetamask) {\n    return await this._signAbstractMessage(\n      this._personalMessageManager,\n      methodNamePersonalSign,\n      msgParams,\n      async (cleanMsgParams) =>\n        await this._keyringController.signPersonalMessage(cleanMsgParams),\n    );\n  }\n\n  /**\n   * The method for a user approving a call to eth_signTypedData, per EIP 712.\n   * Triggers the callback in newUnsignedTypedMessage.\n   *\n   * @param msgParams - The params passed to eth_signTypedData.\n   * @param opts - Options bag.\n   * @param opts.parseJsonData - Whether to parse JSON data before calling the KeyringController.\n   * @returns Full state update.\n   */\n  async signTypedMessage(\n    msgParams: TypedMessageParamsMetamask,\n    opts: { parseJsonData: boolean } = { parseJsonData: true },\n  ): Promise<any> {\n    const { version } = msgParams;\n\n    return await this._signAbstractMessage(\n      this._typedMessageManager,\n      methodNameTypedSign,\n      msgParams,\n      async (cleanMsgParams) => {\n        const finalMessageParams = opts.parseJsonData\n          ? this._removeJsonData(cleanMsgParams, version as string)\n          : cleanMsgParams;\n\n        return await this._keyringController.signTypedMessage(\n          finalMessageParams,\n          {\n            version,\n          },\n        );\n      },\n    );\n  }\n\n  /**\n   * Used to cancel a message submitted via eth_sign.\n   *\n   * @param msgId - The id of the message to cancel.\n   * @returns A full state update.\n   */\n  cancelMessage(msgId: string): any {\n    return this._cancelAbstractMessage(this._messageManager, msgId);\n  }\n\n  /**\n   * Used to cancel a personal_sign type message.\n   *\n   * @param msgId - The ID of the message to cancel.\n   * @returns A full state update.\n   */\n  cancelPersonalMessage(msgId: string): any {\n    return this._cancelAbstractMessage(this._personalMessageManager, msgId);\n  }\n\n  /**\n   * Used to cancel a eth_signTypedData type message.\n   *\n   * @param msgId - The ID of the message to cancel.\n   * @returns A full state update.\n   */\n  cancelTypedMessage(msgId: string): any {\n    return this._cancelAbstractMessage(this._typedMessageManager, msgId);\n  }\n\n  /**\n   * Reject all unapproved messages of any type.\n   *\n   * @param reason - A message to indicate why.\n   */\n  rejectUnapproved(reason?: string) {\n    this._rejectUnapproved(this._messageManager, reason);\n    this._rejectUnapproved(this._personalMessageManager, reason);\n    this._rejectUnapproved(this._typedMessageManager, reason);\n  }\n\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    this._clearUnapproved(this._messageManager);\n    this._clearUnapproved(this._personalMessageManager);\n    this._clearUnapproved(this._typedMessageManager);\n  }\n\n  private _rejectUnapproved<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(messageManager: AbstractMessageManager<M, P, PM>, reason?: string) {\n    Object.keys(messageManager.getUnapprovedMessages()).forEach((messageId) => {\n      this._cancelAbstractMessage(messageManager, messageId, reason);\n    });\n  }\n\n  private _clearUnapproved<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(messageManager: AbstractMessageManager<M, P, PM>) {\n    messageManager.update({\n      unapprovedMessages: {},\n      unapprovedMessagesCount: 0,\n    });\n  }\n\n  private async _signAbstractMessage<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    methodName: string,\n    msgParams: PM,\n    getSignature: (cleanMessageParams: P) => Promise<any>,\n  ) {\n    console.info(`MetaMaskController - ${methodName}`);\n\n    const messageId = msgParams.metamaskId as string;\n\n    try {\n      const cleanMessageParams = await messageManager.approveMessage(msgParams);\n      const signature = await getSignature(cleanMessageParams);\n\n      messageManager.setMessageStatusSigned(messageId, signature);\n\n      this._acceptApproval(messageId);\n\n      return this._getState();\n    } catch (error: any) {\n      console.info(`MetaMaskController - ${methodName} failed.`, error);\n      this._errorMessage(messageManager, messageId, error.message);\n      throw error;\n    }\n  }\n\n  private _errorMessage<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    messageId: string,\n    error: string,\n  ) {\n    if (messageManager instanceof TypedMessageManager) {\n      messageManager.setMessageStatusErrored(messageId, error);\n      this._rejectApproval(messageId);\n    } else {\n      this._cancelAbstractMessage(messageManager, messageId);\n    }\n  }\n\n  private _cancelAbstractMessage<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    messageId: string,\n    reason?: string,\n  ) {\n    if (reason) {\n      const message = this._getMessage(messageId);\n      this.hub.emit('cancelWithReason', { message, reason });\n    }\n\n    messageManager.rejectMessage(messageId);\n    this._rejectApproval(messageId);\n\n    return this._getState();\n  }\n\n  private _handleMessageManagerEvents<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    methodName: string,\n    eventName: string,\n  ) {\n    messageManager.hub.on('updateBadge', () => {\n      this.hub.emit('updateBadge');\n    });\n\n    messageManager.hub.on(\n      'unapprovedMessage',\n      (msgParams: AbstractMessageParamsMetamask) => {\n        this.hub.emit(eventName, msgParams);\n        this._requestApproval(msgParams, methodName);\n      },\n    );\n  }\n\n  private _subscribeToMessageState<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    updateState: (\n      state: SignatureControllerState,\n      newMessages: Record<string, StateMessage>,\n      messageCount: number,\n    ) => void,\n  ) {\n    messageManager.subscribe((state: MessageManagerState<AbstractMessage>) => {\n      const newMessages = this._migrateMessages(\n        state.unapprovedMessages as any,\n      );\n\n      this.update((draftState) => {\n        updateState(draftState, newMessages, state.unapprovedMessagesCount);\n      });\n    });\n  }\n\n  private _migrateMessages(\n    coreMessages: Record<string, CoreMessage>,\n  ): Record<string, StateMessage> {\n    const stateMessages: Record<string, StateMessage> = {};\n\n    for (const messageId of Object.keys(coreMessages)) {\n      const coreMessage = coreMessages[messageId];\n      const stateMessage = this._migrateMessage(coreMessage);\n\n      stateMessages[messageId] = stateMessage;\n    }\n\n    return stateMessages;\n  }\n\n  private _migrateMessage(coreMessage: CoreMessage): StateMessage {\n    const { messageParams, ...coreMessageData } = coreMessage;\n\n    // Core message managers use messageParams but frontend uses msgParams with lots of references\n    const stateMessage = {\n      ...coreMessageData,\n      msgParams: messageParams,\n    };\n\n    return stateMessage as StateMessage;\n  }\n\n  private _normalizeMsgData(data: string) {\n    if (data.slice(0, 2) === '0x') {\n      // data is already hex\n      return data;\n    }\n    // data is unicode, convert to hex\n    return bufferToHex(Buffer.from(data, 'utf8'));\n  }\n\n  private _getMessage(messageId: string): StateMessage {\n    return {\n      ...this.state.unapprovedMsgs,\n      ...this.state.unapprovedPersonalMsgs,\n      ...this.state.unapprovedTypedMessages,\n    }[messageId];\n  }\n\n  private _requestApproval(\n    msgParams: AbstractMessageParamsMetamask,\n    type: string,\n  ) {\n    const id = msgParams.metamaskId as string;\n    const origin = msgParams.origin ?? ORIGIN_METAMASK;\n\n    this.messagingSystem\n      .call(\n        'ApprovalController:addRequest',\n        {\n          id,\n          origin,\n          type,\n        },\n        true,\n      )\n      .catch(() => {\n        // Intentionally ignored as promise not currently used\n      });\n  }\n\n  private _acceptApproval(messageId: string) {\n    this.messagingSystem.call('ApprovalController:acceptRequest', messageId);\n  }\n\n  private _rejectApproval(messageId: string) {\n    this.messagingSystem.call(\n      'ApprovalController:rejectRequest',\n      messageId,\n      'Cancel',\n    );\n  }\n\n  private _removeJsonData(\n    messageParams: TypedMessageParams,\n    version: string,\n  ): TypedMessageParams {\n    if (version === 'V1' || typeof messageParams.data !== 'string') {\n      return messageParams;\n    }\n\n    return {\n      ...messageParams,\n      data: JSON.parse(messageParams.data),\n    };\n  }\n}\n"]}