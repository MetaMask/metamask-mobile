import { test, expect } from "appwright";

import { GetStartedScreen } from "../screens/GetStartedScreen";
import { OnboardingScreen } from "../screens/OnboardingScreen";
import { TermsOfUseScreen } from "../screens/TermsOfUseScreen";
import { CreateNewWalletScreen } from "../screens/CreateNewWalletScreen";
import { MetaMetricsScreen } from "../screens/MetaMetricsScreen";
import { OnboardingSuccessScreen } from "../screens/OnboardingSuccessScreen";
import TimerHelper from "../utils/TimersHelper";
import { SolanaIsHereScreen } from "../screens/SolanaIsHereScreen";
import { WalletAccountScreen } from "../screens/WalletAccountScreen";
import { ImportSrpOnboardingScreen } from "../screens/ImportSrpOnboardingScreen";
import { PerformanceTracker } from "../reporters/PerformanceTracker";
import { AddAccountModal } from "../components/AddAccountModal";
import { AccountListComponent } from "../components/AccountListComponent";

test.only("Casual user imports SRP 1 and can import 2 more SRPs (Power user)", async ({ device }, testInfo) => {

  const getStartedScreenTimer = new TimerHelper('getStartedScreenTimer');
  getStartedScreenTimer.start();  
  const getStartedScreen = new GetStartedScreen(device);
  const casualUserTimer = new TimerHelper('casualUserTimer');
  casualUserTimer.start();
  const termsOfUseScreen = new TermsOfUseScreen(device);
  const onboardingScreen = new OnboardingScreen(device);
  const createNewWalletScreen = new CreateNewWalletScreen(device);
  const metaMetricsScreen = new MetaMetricsScreen(device);
  const onboardingSuccessScreen = new OnboardingSuccessScreen(device);
  const solanaIsHereScreen = new SolanaIsHereScreen(device);
  const importSrpOnboardingScreen = new ImportSrpOnboardingScreen(device);
  await getStartedScreen.tapOnGetStartedButton();
  getStartedScreenTimer.stop();
  const termsOfUseScreenTimer = new TimerHelper('termsOfUseScreenTimer');
  termsOfUseScreenTimer.start();
  await termsOfUseScreen.tapOnAggreeCheckBox();
  await termsOfUseScreen.tapOnScrollEndArrowButton();
  await termsOfUseScreen.tapOnAcceptButton();
  termsOfUseScreenTimer.stop();
  const onboardingScreenTimer = new TimerHelper('onboardingScreenTimer');
  onboardingScreenTimer.start();
  await onboardingScreen.tapOnImportWalletButton();
  await onboardingScreen.tapOnContinueWithSRPButton();
  const importSrpScreenTimer = new TimerHelper('importSrpScreenTimer');
  importSrpScreenTimer.start();
  await importSrpOnboardingScreen.isScreenTitleVisible();
  importSrpScreenTimer.stop();
  await importSrpOnboardingScreen.typeSecretRecoveryPhrase(process.env.SRP_1); // this is just for testing purposes, so you need to export the env variable in the terminal
  await importSrpOnboardingScreen.tapContinueButton();
  await createNewWalletScreen.inputNewWalletPassword("password");
  await createNewWalletScreen.inputNewWalletPasswordConfirm("password");
  await createNewWalletScreen.tapOnTermsAndConditionCheckBox();
  await createNewWalletScreen.tapOnNewWalletSubmitButton();
  const metaMetricsScreenTimer = new TimerHelper('metaMetricsScreenTimer');
  metaMetricsScreenTimer.start();
  await metaMetricsScreen.tapOnIAgreeButton();
  metaMetricsScreenTimer.stop();
  const onboardingSuccessScreenTimer = new TimerHelper('onboardingSuccessScreenTimer');
  onboardingSuccessScreenTimer.start();
  await onboardingSuccessScreen.tapOnDoneButton();
  const solanaIsHereScreenTimer = new TimerHelper('solanaIsHereScreenTimer');
  solanaIsHereScreenTimer.start();
  onboardingSuccessScreenTimer.stop();
  await solanaIsHereScreen.isVisible();
  solanaIsHereScreenTimer.stop();
  await solanaIsHereScreen.tapOnNotNowButton();
  const walletAccountScreenTimer = new TimerHelper('walletAccountScreenTimer');
  walletAccountScreenTimer.start();
  const walletAccountScreen = new WalletAccountScreen(device);
  expect(await walletAccountScreen.isAccountNameLabelEqualTo("Account 1")).toBe(true);
  walletAccountScreenTimer.stop();
  casualUserTimer.stop();
  const powerUserTimer = new TimerHelper('powerUserTimer');
  powerUserTimer.start();
  await walletAccountScreen.tapOnAccountIcon();
  const accountListComponent = new AccountListComponent(device);
  await accountListComponent.tapOnAddAccountButton();
  const addAccountModal = new AddAccountModal(device);
  await addAccountModal.tapOnImportAccountButton();
  await importSrpOnboardingScreen.fillInput(process.env.SRP_2);
  await importSrpOnboardingScreen.tapOnContinueButton();
  const performanceTracker = new PerformanceTracker();
  performanceTracker.addTimer('getStartedScreenTimer', getStartedScreenTimer);
  performanceTracker.addTimer('termsOfUseScreenTimer', termsOfUseScreenTimer);
  performanceTracker.addTimer('onboardingScreenTimer', onboardingScreenTimer);
  performanceTracker.addTimer('importSrpScreenTimer', importSrpScreenTimer);
  performanceTracker.addTimer('metaMetricsScreenTimer', metaMetricsScreenTimer);
  performanceTracker.addTimer('onboardingSuccessScreenTimer', onboardingSuccessScreenTimer);
  performanceTracker.addTimer('solanaIsHereScreenTimer', solanaIsHereScreenTimer);
  performanceTracker.addTimer('walletAccountScreenTimer', walletAccountScreenTimer);
  performanceTracker.addTimer('casualUserTimer', casualUserTimer);
  performanceMetrics = await performanceTracker.attachToTest(testInfo);
});

test("Core user can import a wallet", async ({ device }, testInfo) => {

  const getStartedScreenTimer = new TimerHelper('getStartedScreenTimer-core');
  getStartedScreenTimer.start();
  const getStartedScreen = new GetStartedScreen(device);
  const termsOfUseScreen = new TermsOfUseScreen(device);
  const onboardingScreen = new OnboardingScreen(device);
  const createNewWalletScreen = new CreateNewWalletScreen(device);
  const metaMetricsScreen = new MetaMetricsScreen(device);
  const onboardingSuccessScreen = new OnboardingSuccessScreen(device);
  const solanaIsHereScreen = new SolanaIsHereScreen(device);
  const importSrpOnboardingScreen = new ImportSrpOnboardingScreen(device);
  await getStartedScreen.tapOnGetStartedButton();
  getStartedScreenTimer.stop();
  const termsOfUseScreenTimer = new TimerHelper('termsOfUseScreenTimer-core');
  termsOfUseScreenTimer.start();
  await termsOfUseScreen.tapOnAggreeCheckBox();
  await termsOfUseScreen.tapOnScrollEndArrowButton();
  await termsOfUseScreen.tapOnAcceptButton();
  termsOfUseScreenTimer.stop();
  const onboardingScreenTimer = new TimerHelper('onboardingScreenTimer-core');
  onboardingScreenTimer.start();
  await onboardingScreen.tapOnImportWalletButton();
  await onboardingScreen.tapOnContinueWithSRPButton();
  const importSrpScreenTimer = new TimerHelper('importSrpScreenTimer-core');
  importSrpScreenTimer.start();
  await importSrpOnboardingScreen.isScreenTitleVisible();
  importSrpScreenTimer.stop();
  await importSrpOnboardingScreen.typeSecretRecoveryPhrase(process.env.SRP_2); // this is just for testing purposes, so you need to export the env variable in the terminal
  await importSrpOnboardingScreen.tapContinueButton();
  await createNewWalletScreen.inputNewWalletPassword("password");
  await createNewWalletScreen.inputNewWalletPasswordConfirm("password");
  await createNewWalletScreen.tapOnTermsAndConditionCheckBox();
  await createNewWalletScreen.tapOnNewWalletSubmitButton();
  const metaMetricsScreenTimer = new TimerHelper('metaMetricsScreenTimer-core');
  metaMetricsScreenTimer.start();
  await metaMetricsScreen.tapOnIAgreeButton();
  metaMetricsScreenTimer.stop();
  const onboardingSuccessScreenTimer = new TimerHelper('onboardingSuccessScreenTimer-core');
  onboardingSuccessScreenTimer.start();
  await onboardingSuccessScreen.tapOnDoneButton();
  const solanaIsHereScreenTimer = new TimerHelper('solanaIsHereScreenTimer-core');
  solanaIsHereScreenTimer.start();
  onboardingSuccessScreenTimer.stop();
  await solanaIsHereScreen.isVisible();
  solanaIsHereScreenTimer.stop();
  await solanaIsHereScreen.tapOnNotNowButton();
  const walletAccountScreenTimer = new TimerHelper('walletAccountScreenTimer-core');
  walletAccountScreenTimer.start();
  const walletAccountScreen = new WalletAccountScreen(device);
  expect(await walletAccountScreen.isAccountNameLabelEqualTo("Account 1")).toBe(true);
  walletAccountScreenTimer.stop();
  const performanceTracker = new PerformanceTracker();
  performanceTracker.addTimer('getStartedScreenTimer-core', getStartedScreenTimer);
  performanceTracker.addTimer('termsOfUseScreenTimer-core', termsOfUseScreenTimer);
  performanceTracker.addTimer('onboardingScreenTimer-core', onboardingScreenTimer);
  performanceTracker.addTimer('importSrpScreenTimer-core', importSrpScreenTimer);
  performanceTracker.addTimer('metaMetricsScreenTimer-core', metaMetricsScreenTimer);
  performanceTracker.addTimer('onboardingSuccessScreenTimer-core', onboardingSuccessScreenTimer);
  performanceTracker.addTimer('solanaIsHereScreenTimer-core', solanaIsHereScreenTimer);
  performanceTracker.addTimer('walletAccountScreenTimer-core', walletAccountScreenTimer);
  performanceMetrics = await performanceTracker.attachToTest(testInfo);
});