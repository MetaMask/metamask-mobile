#!/bin/sh
# Pre-push hook: Validates Prettier formatting and ESLint errors before pushing
# Purpose: Prevents unformatted code from reaching remote branches, catching issues
# that slip through `git commit --no-verify`. Only blocks on formatting issues and
# ESLint errors (warnings are allowed). Can be bypassed with `git push --no-verify`.

while read local_ref local_sha remote_ref remote_sha
do
  if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
    # Branch deletion, skip checks
    continue
  fi

  # Extract remote branch name (e.g., refs/heads/main -> main)
  REMOTE_BRANCH=$(echo "$remote_ref" | sed 's|refs/heads/||')

  # Handle new branches without remote tracking
  # Check if remote branch exists, otherwise compare against main
  if [ "$remote_sha" = "0000000000000000000000000000000000000000" ] || ! git rev-parse "$remote_sha" >/dev/null 2>&1; then
    # For new branches, compare against origin/main or main
    remote_sha=$(git merge-base "$local_sha" origin/main 2>/dev/null || git merge-base "$local_sha" main 2>/dev/null || echo "")
    if [ -z "$remote_sha" ]; then
      echo "‚ö†Ô∏è  Cannot determine base commit for comparison. Skipping validation."
      echo "üí° First push to a new repository? Run validation manually with:"
      echo "   npx prettier --check 'app/**/*.{ts,tsx,js,jsx}'"
      echo "   npx eslint 'app/**/*.{ts,tsx,js,jsx}'"
      continue
    fi
    echo "‚ÑπÔ∏è  New branch detected - comparing against main branch"
  fi

  # Get list of files changed between remote and local HEAD
  # Only check files being pushed, not all uncommitted changes
  # Use -z for null-delimited output to handle filenames with special characters
  FILES=$(git diff -z --name-only --diff-filter=ACMR "$remote_sha".."$local_sha" | grep -zE '\.(js|jsx|ts|tsx)$')

  if [ -z "$FILES" ]; then
    echo "‚úÖ No JavaScript/TypeScript files changed in this push"
    continue
  fi

  FILE_COUNT=$(echo "$FILES" | wc -l | xargs)
  echo "üîç Validating $FILE_COUNT file(s) being pushed to $REMOTE_BRANCH..."

  # Warn about potential performance impact for large pushes
  if [ "$FILE_COUNT" -gt 50 ]; then
    echo "‚ö†Ô∏è  Large push detected ($FILE_COUNT files) - validation may take a minute..."
  fi
  echo ""

  # Step 1: Check Prettier formatting (this is what CI checks with format:check:changed)
  echo "üìù Checking Prettier formatting..."
  echo "$FILES" | tr '\n' '\0' | xargs -0 yarn prettier --check --ignore-unknown

  if [ $? -ne 0 ]; then
    echo ""
    echo "‚ùå Prettier formatting check failed!"
    echo ""
    echo "These files have formatting issues. Please run:"
    echo "  npx prettier --write <file>"
    echo ""
    echo "Or format all changed files:"
    echo "  npx prettier --write 'app/**/*.{ts,tsx,js,jsx}'"
    echo ""
    echo "üí° To bypass this check (not recommended): git push --no-verify"
    echo ""
    exit 1
  fi

  echo "‚úÖ Prettier formatting check passed"
  echo ""

  # Step 2: Check ESLint for errors only (warnings are allowed)
  echo "üîç Checking ESLint for errors..."
  echo "$FILES" | tr '\n' '\0' | xargs -0 yarn eslint --cache

  if [ $? -ne 0 ]; then
    echo ""
    echo "‚ùå ESLint validation failed!"
    echo ""
    echo "Please fix the linting errors before pushing."
    echo "Note: Warnings are allowed, but errors must be fixed."
    echo ""
    echo "You can run 'npx eslint <file>' to check specific files."
    echo "You can run 'npx eslint <file> --fix' to auto-fix some issues."
    echo ""
    echo "üí° To bypass this check (not recommended): git push --no-verify"
    echo ""
    exit 1
  fi

  echo "‚úÖ ESLint validation passed"
  echo ""
  echo "‚úÖ All validation passed for push to $REMOTE_BRANCH"
done

exit 0
