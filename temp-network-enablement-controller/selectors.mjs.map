{"version":3,"file":"selectors.mjs","sourceRoot":"","sources":["../src/selectors.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,mCAAmC;AACnD,OAAO,EAAE,gBAAgB,EAAE,gDAAgD;AAE3E,OAAO,EACL,WAAW,EACX,gBAAgB,EAChB,kBAAkB,EACnB,wBAAwB;AACzB,OAAO,EAAE,cAAc,EAAE,iBAAiB;AAI1C;;;;;GAKG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,KAAuC,EACvC,EAAE,CAAC,KAAK,CAAC,iBAAiB,CAAC;AAE7B;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,OAA0B,EAAE,EAAE,CACnE,cAAc,CAAC,uBAAuB,EAAE,CAAC,iBAAiB,EAAE,EAAE;IAC5D,IAAI;QACF,MAAM,MAAM,GAAgB,WAAW,CAAC,OAAO,CAAC;YAC9C,CAAC,CAAC,gBAAgB,CAAC,OAAc,CAAC;YAClC,CAAC,CAAE,OAAuB,CAAC;QAC7B,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC1D,IAAI,UAAkB,CAAC;QACvB,IAAI,SAAS,KAAM,kBAAkB,CAAC,MAAiB,EAAE;YACvD,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC;gBAC/B,CAAC,CAAE,OAAkB;gBACrB,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;SACtB;aAAM;YACL,UAAU,GAAG,MAAM,CAAC;SACrB;QACD,OAAO,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;KAC5D;IAAC,MAAM;QACN,OAAO,KAAK,CAAC;KACd;AACH,CAAC,CAAC,CAAC;AAEL;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,iCAAiC,GAAG,CAAC,SAAwB,EAAE,EAAE,CAC5E,cAAc,CAAC,uBAAuB,EAAE,CAAC,iBAAiB,EAAE,EAAE;IAC5D,OAAO,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;SACtD,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC;SAChC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC;AAEL;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,cAAc,CACpD,uBAAuB,EACvB,CAAC,iBAAiB,EAAE,EAAE;IACpB,OAAQ,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAqB,CAAC,MAAM,CAC/D,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE;QACV,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;aAClD,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC;aAChC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QACrB,OAAO,GAAG,CAAC;IACb,CAAC,EACD,EAAqC,CACtC,CAAC;AACJ,CAAC,CACF,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,cAAc,CACtD,wBAAwB,EACxB,CAAC,kBAAkB,EAAE,EAAE;IACrB,OAAO,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,MAAM,CAC7C,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,KAAK,GAAG,QAAQ,CAAC,MAAM,EAC5C,CAAC,CACF,CAAC;AACJ,CAAC,CACF,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,oCAAoC,GAAG,CAClD,SAAwB,EACxB,EAAE,CACF,cAAc,CACZ,iCAAiC,CAAC,SAAS,CAAC,EAC5C,CAAC,eAAe,EAAE,EAAE,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAChD,CAAC;AAEJ;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,cAAc,CACpD,iCAAiC,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAC5D,CAAC,kBAAkB,EAAE,EAAE,CAAC,kBAAkB,CAC3C,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,2BAA2B,GAAG,cAAc,CACvD,iCAAiC,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAC5D,CAAC,qBAAqB,EAAE,EAAE,CAAC,qBAAqB,CACjD,CAAC","sourcesContent":["import { toHex } from '@metamask/controller-utils';\nimport { toEvmCaipChainId } from '@metamask/multichain-network-controller';\nimport type { CaipChainId, CaipNamespace, Hex } from '@metamask/utils';\nimport {\n  isHexString,\n  parseCaipChainId,\n  KnownCaipNamespace,\n} from '@metamask/utils';\nimport { createSelector } from 'reselect';\n\nimport type { NetworkEnablementControllerState } from './NetworkEnablementController';\n\n/**\n * Base selector to get the enabled network map from the controller state.\n *\n * @param state - The NetworkEnablementController state\n * @returns The enabled network map\n */\nexport const selectEnabledNetworkMap = (\n  state: NetworkEnablementControllerState,\n) => state.enabledNetworkMap;\n\n/**\n * Selector to check if a specific network is enabled.\n *\n * This selector accepts either a Hex chain ID (for EVM networks) or a CAIP-2 chain ID\n * (for any blockchain network) and returns whether the network is currently enabled.\n * It returns false for unknown networks or if there's an error parsing the chain ID.\n *\n * @param chainId - The chain ID to check (Hex or CAIP-2 format)\n * @returns A selector function that returns true if the network is enabled, false otherwise\n */\nexport const selectIsNetworkEnabled = (chainId: Hex | CaipChainId) =>\n  createSelector(selectEnabledNetworkMap, (enabledNetworkMap) => {\n    try {\n      const caipId: CaipChainId = isHexString(chainId)\n        ? toEvmCaipChainId(chainId as Hex)\n        : (chainId as CaipChainId);\n      const { namespace, reference } = parseCaipChainId(caipId);\n      let storageKey: string;\n      if (namespace === (KnownCaipNamespace.Eip155 as string)) {\n        storageKey = isHexString(chainId)\n          ? (chainId as string)\n          : toHex(reference);\n      } else {\n        storageKey = caipId;\n      }\n      return Boolean(enabledNetworkMap[namespace]?.[storageKey]);\n    } catch {\n      return false;\n    }\n  });\n\n/**\n * Selector to get all enabled networks for a specific namespace.\n *\n * This selector returns an array of chain IDs (as strings) for all enabled networks\n * within the specified namespace (e.g., 'eip155' for EVM networks, 'solana' for Solana).\n *\n * @param namespace - The CAIP namespace to get enabled networks for (e.g., 'eip155', 'solana')\n * @returns A selector function that returns an array of chain ID strings for enabled networks in the namespace\n */\nexport const selectEnabledNetworksForNamespace = (namespace: CaipNamespace) =>\n  createSelector(selectEnabledNetworkMap, (enabledNetworkMap) => {\n    return Object.entries(enabledNetworkMap[namespace] ?? {})\n      .filter(([, enabled]) => enabled)\n      .map(([id]) => id);\n  });\n\n/**\n * Selector to get all enabled networks across all namespaces.\n *\n * This selector returns a record where keys are CAIP namespaces and values are arrays\n * of enabled chain IDs within each namespace.\n *\n * @returns A selector function that returns a record mapping namespace to array of enabled chain IDs\n */\nexport const selectAllEnabledNetworks = createSelector(\n  selectEnabledNetworkMap,\n  (enabledNetworkMap) => {\n    return (Object.keys(enabledNetworkMap) as CaipNamespace[]).reduce(\n      (acc, ns) => {\n        acc[ns] = Object.entries(enabledNetworkMap[ns] ?? {})\n          .filter(([, enabled]) => enabled)\n          .map(([id]) => id);\n        return acc;\n      },\n      {} as Record<CaipNamespace, string[]>,\n    );\n  },\n);\n\n/**\n * Selector to get the total count of enabled networks across all namespaces.\n *\n * @returns A selector function that returns the total number of enabled networks\n */\nexport const selectEnabledNetworksCount = createSelector(\n  selectAllEnabledNetworks,\n  (allEnabledNetworks) => {\n    return Object.values(allEnabledNetworks).reduce(\n      (total, networks) => total + networks.length,\n      0,\n    );\n  },\n);\n\n/**\n * Selector to check if any networks are enabled for a specific namespace.\n *\n * @param namespace - The CAIP namespace to check\n * @returns A selector function that returns true if any networks are enabled in the namespace\n */\nexport const selectHasEnabledNetworksForNamespace = (\n  namespace: CaipNamespace,\n) =>\n  createSelector(\n    selectEnabledNetworksForNamespace(namespace),\n    (enabledNetworks) => enabledNetworks.length > 0,\n  );\n\n/**\n * Selector to get all enabled EVM networks.\n *\n * This is a convenience selector that specifically targets EIP-155 networks.\n *\n * @returns A selector function that returns an array of enabled EVM chain IDs\n */\nexport const selectEnabledEvmNetworks = createSelector(\n  selectEnabledNetworksForNamespace(KnownCaipNamespace.Eip155),\n  (enabledEvmNetworks) => enabledEvmNetworks,\n);\n\n/**\n * Selector to get all enabled Solana networks.\n *\n * This is a convenience selector that specifically targets Solana networks.\n *\n * @returns A selector function that returns an array of enabled Solana chain IDs\n */\nexport const selectEnabledSolanaNetworks = createSelector(\n  selectEnabledNetworksForNamespace(KnownCaipNamespace.Solana),\n  (enabledSolanaNetworks) => enabledSolanaNetworks,\n);\n"]}